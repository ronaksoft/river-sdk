// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.groups.proto

package msg

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GroupsCreate
// @Function
// @Return: Bool
type GroupsCreate struct {
	Users    []*InputUser `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
	Title    string       `protobuf:"bytes,2,req,name=Title" json:"Title"`
	RandomID int64        `protobuf:"varint,3,opt,name=RandomID" json:"RandomID"`
}

func (m *GroupsCreate) Reset()         { *m = GroupsCreate{} }
func (m *GroupsCreate) String() string { return proto.CompactTextString(m) }
func (*GroupsCreate) ProtoMessage()    {}
func (*GroupsCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c424a93c3dc008e, []int{0}
}
func (m *GroupsCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsCreate.Merge(m, src)
}
func (m *GroupsCreate) XXX_Size() int {
	return m.Size()
}
func (m *GroupsCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsCreate.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsCreate proto.InternalMessageInfo

func (m *GroupsCreate) GetUsers() []*InputUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GroupsCreate) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GroupsCreate) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

// GroupsAddUser
// @Function
// @Return: Bool
type GroupsAddUser struct {
	GroupID      int64      `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	User         *InputUser `protobuf:"bytes,2,req,name=User" json:"User,omitempty"`
	ForwardLimit int32      `protobuf:"varint,3,req,name=ForwardLimit" json:"ForwardLimit"`
}

func (m *GroupsAddUser) Reset()         { *m = GroupsAddUser{} }
func (m *GroupsAddUser) String() string { return proto.CompactTextString(m) }
func (*GroupsAddUser) ProtoMessage()    {}
func (*GroupsAddUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c424a93c3dc008e, []int{1}
}
func (m *GroupsAddUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsAddUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsAddUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsAddUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsAddUser.Merge(m, src)
}
func (m *GroupsAddUser) XXX_Size() int {
	return m.Size()
}
func (m *GroupsAddUser) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsAddUser.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsAddUser proto.InternalMessageInfo

func (m *GroupsAddUser) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *GroupsAddUser) GetUser() *InputUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GroupsAddUser) GetForwardLimit() int32 {
	if m != nil {
		return m.ForwardLimit
	}
	return 0
}

// GroupsEditTitle
// @Function
// @Return: Bool
type GroupsEditTitle struct {
	GroupID int64  `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	Title   string `protobuf:"bytes,2,req,name=Title" json:"Title"`
}

func (m *GroupsEditTitle) Reset()         { *m = GroupsEditTitle{} }
func (m *GroupsEditTitle) String() string { return proto.CompactTextString(m) }
func (*GroupsEditTitle) ProtoMessage()    {}
func (*GroupsEditTitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c424a93c3dc008e, []int{2}
}
func (m *GroupsEditTitle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsEditTitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsEditTitle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsEditTitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsEditTitle.Merge(m, src)
}
func (m *GroupsEditTitle) XXX_Size() int {
	return m.Size()
}
func (m *GroupsEditTitle) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsEditTitle.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsEditTitle proto.InternalMessageInfo

func (m *GroupsEditTitle) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *GroupsEditTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// GroupsDeleteUser
// @Function
// @Return: Bool
type GroupsDeleteUser struct {
	GroupID int64      `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	User    *InputUser `protobuf:"bytes,2,req,name=User" json:"User,omitempty"`
}

func (m *GroupsDeleteUser) Reset()         { *m = GroupsDeleteUser{} }
func (m *GroupsDeleteUser) String() string { return proto.CompactTextString(m) }
func (*GroupsDeleteUser) ProtoMessage()    {}
func (*GroupsDeleteUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c424a93c3dc008e, []int{3}
}
func (m *GroupsDeleteUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsDeleteUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsDeleteUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsDeleteUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsDeleteUser.Merge(m, src)
}
func (m *GroupsDeleteUser) XXX_Size() int {
	return m.Size()
}
func (m *GroupsDeleteUser) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsDeleteUser.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsDeleteUser proto.InternalMessageInfo

func (m *GroupsDeleteUser) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *GroupsDeleteUser) GetUser() *InputUser {
	if m != nil {
		return m.User
	}
	return nil
}

// GroupsGetFull
// @Function
// @Return: GroupFull
type GroupsGetFull struct {
	GroupID int64 `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
}

func (m *GroupsGetFull) Reset()         { *m = GroupsGetFull{} }
func (m *GroupsGetFull) String() string { return proto.CompactTextString(m) }
func (*GroupsGetFull) ProtoMessage()    {}
func (*GroupsGetFull) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c424a93c3dc008e, []int{4}
}
func (m *GroupsGetFull) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsGetFull) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsGetFull.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsGetFull) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsGetFull.Merge(m, src)
}
func (m *GroupsGetFull) XXX_Size() int {
	return m.Size()
}
func (m *GroupsGetFull) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsGetFull.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsGetFull proto.InternalMessageInfo

func (m *GroupsGetFull) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

// GroupsToggleAdmins
// @Function
// @Return: Bool
type GroupsToggleAdmins struct {
	GroupID      int64 `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	AdminEnabled bool  `protobuf:"varint,2,req,name=AdminEnabled" json:"AdminEnabled"`
}

func (m *GroupsToggleAdmins) Reset()         { *m = GroupsToggleAdmins{} }
func (m *GroupsToggleAdmins) String() string { return proto.CompactTextString(m) }
func (*GroupsToggleAdmins) ProtoMessage()    {}
func (*GroupsToggleAdmins) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c424a93c3dc008e, []int{5}
}
func (m *GroupsToggleAdmins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsToggleAdmins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsToggleAdmins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsToggleAdmins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsToggleAdmins.Merge(m, src)
}
func (m *GroupsToggleAdmins) XXX_Size() int {
	return m.Size()
}
func (m *GroupsToggleAdmins) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsToggleAdmins.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsToggleAdmins proto.InternalMessageInfo

func (m *GroupsToggleAdmins) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *GroupsToggleAdmins) GetAdminEnabled() bool {
	if m != nil {
		return m.AdminEnabled
	}
	return false
}

// GroupsUpdateAdmin
// @Function
// @Return: Bool
type GroupsUpdateAdmin struct {
	GroupID int64      `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	User    *InputUser `protobuf:"bytes,2,req,name=User" json:"User,omitempty"`
	Admin   bool       `protobuf:"varint,3,req,name=Admin" json:"Admin"`
}

func (m *GroupsUpdateAdmin) Reset()         { *m = GroupsUpdateAdmin{} }
func (m *GroupsUpdateAdmin) String() string { return proto.CompactTextString(m) }
func (*GroupsUpdateAdmin) ProtoMessage()    {}
func (*GroupsUpdateAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c424a93c3dc008e, []int{6}
}
func (m *GroupsUpdateAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsUpdateAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsUpdateAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsUpdateAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsUpdateAdmin.Merge(m, src)
}
func (m *GroupsUpdateAdmin) XXX_Size() int {
	return m.Size()
}
func (m *GroupsUpdateAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsUpdateAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsUpdateAdmin proto.InternalMessageInfo

func (m *GroupsUpdateAdmin) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *GroupsUpdateAdmin) GetUser() *InputUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GroupsUpdateAdmin) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

// GroupsUploadPhoto
// @Function
// @Return: Bool / GroupPhoto
type GroupsUploadPhoto struct {
	GroupID      int64      `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	File         *InputFile `protobuf:"bytes,2,req,name=File" json:"File,omitempty"`
	ReturnObject bool       `protobuf:"varint,3,opt,name=ReturnObject" json:"ReturnObject"`
}

func (m *GroupsUploadPhoto) Reset()         { *m = GroupsUploadPhoto{} }
func (m *GroupsUploadPhoto) String() string { return proto.CompactTextString(m) }
func (*GroupsUploadPhoto) ProtoMessage()    {}
func (*GroupsUploadPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c424a93c3dc008e, []int{7}
}
func (m *GroupsUploadPhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsUploadPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsUploadPhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsUploadPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsUploadPhoto.Merge(m, src)
}
func (m *GroupsUploadPhoto) XXX_Size() int {
	return m.Size()
}
func (m *GroupsUploadPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsUploadPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsUploadPhoto proto.InternalMessageInfo

func (m *GroupsUploadPhoto) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *GroupsUploadPhoto) GetFile() *InputFile {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *GroupsUploadPhoto) GetReturnObject() bool {
	if m != nil {
		return m.ReturnObject
	}
	return false
}

// GroupsRemovePhoto
// @Function
// @Return: Bool
type GroupsRemovePhoto struct {
	GroupID int64 `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	PhotoID int64 `protobuf:"varint,2,opt,name=PhotoID" json:"PhotoID"`
}

func (m *GroupsRemovePhoto) Reset()         { *m = GroupsRemovePhoto{} }
func (m *GroupsRemovePhoto) String() string { return proto.CompactTextString(m) }
func (*GroupsRemovePhoto) ProtoMessage()    {}
func (*GroupsRemovePhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c424a93c3dc008e, []int{8}
}
func (m *GroupsRemovePhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsRemovePhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsRemovePhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsRemovePhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsRemovePhoto.Merge(m, src)
}
func (m *GroupsRemovePhoto) XXX_Size() int {
	return m.Size()
}
func (m *GroupsRemovePhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsRemovePhoto.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsRemovePhoto proto.InternalMessageInfo

func (m *GroupsRemovePhoto) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *GroupsRemovePhoto) GetPhotoID() int64 {
	if m != nil {
		return m.PhotoID
	}
	return 0
}

// GroupsUpdatePhoto
// @Function
// @Return: Bool
type GroupsUpdatePhoto struct {
	PhotoID int64 `protobuf:"varint,1,req,name=PhotoID" json:"PhotoID"`
	GroupID int64 `protobuf:"varint,2,req,name=GroupID" json:"GroupID"`
}

func (m *GroupsUpdatePhoto) Reset()         { *m = GroupsUpdatePhoto{} }
func (m *GroupsUpdatePhoto) String() string { return proto.CompactTextString(m) }
func (*GroupsUpdatePhoto) ProtoMessage()    {}
func (*GroupsUpdatePhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c424a93c3dc008e, []int{9}
}
func (m *GroupsUpdatePhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsUpdatePhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsUpdatePhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsUpdatePhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsUpdatePhoto.Merge(m, src)
}
func (m *GroupsUpdatePhoto) XXX_Size() int {
	return m.Size()
}
func (m *GroupsUpdatePhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsUpdatePhoto.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsUpdatePhoto proto.InternalMessageInfo

func (m *GroupsUpdatePhoto) GetPhotoID() int64 {
	if m != nil {
		return m.PhotoID
	}
	return 0
}

func (m *GroupsUpdatePhoto) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

// GroupsGetHistoryStats
// @Function
// @Return: GroupsHistoryStats
type GroupsGetReadHistoryStats struct {
	GroupID int64 `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
}

func (m *GroupsGetReadHistoryStats) Reset()         { *m = GroupsGetReadHistoryStats{} }
func (m *GroupsGetReadHistoryStats) String() string { return proto.CompactTextString(m) }
func (*GroupsGetReadHistoryStats) ProtoMessage()    {}
func (*GroupsGetReadHistoryStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c424a93c3dc008e, []int{10}
}
func (m *GroupsGetReadHistoryStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsGetReadHistoryStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsGetReadHistoryStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsGetReadHistoryStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsGetReadHistoryStats.Merge(m, src)
}
func (m *GroupsGetReadHistoryStats) XXX_Size() int {
	return m.Size()
}
func (m *GroupsGetReadHistoryStats) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsGetReadHistoryStats.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsGetReadHistoryStats proto.InternalMessageInfo

func (m *GroupsGetReadHistoryStats) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

// GroupsHistoryStats
type GroupsHistoryStats struct {
	Stats []*ReadHistoryStat `protobuf:"bytes,1,rep,name=Stats" json:"Stats,omitempty"`
	Users []*User            `protobuf:"bytes,2,rep,name=Users" json:"Users,omitempty"`
	Empty bool               `protobuf:"varint,3,req,name=Empty" json:"Empty"`
}

func (m *GroupsHistoryStats) Reset()         { *m = GroupsHistoryStats{} }
func (m *GroupsHistoryStats) String() string { return proto.CompactTextString(m) }
func (*GroupsHistoryStats) ProtoMessage()    {}
func (*GroupsHistoryStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c424a93c3dc008e, []int{11}
}
func (m *GroupsHistoryStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsHistoryStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsHistoryStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsHistoryStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsHistoryStats.Merge(m, src)
}
func (m *GroupsHistoryStats) XXX_Size() int {
	return m.Size()
}
func (m *GroupsHistoryStats) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsHistoryStats.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsHistoryStats proto.InternalMessageInfo

func (m *GroupsHistoryStats) GetStats() []*ReadHistoryStat {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *GroupsHistoryStats) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GroupsHistoryStats) GetEmpty() bool {
	if m != nil {
		return m.Empty
	}
	return false
}

// ReadHistoryStat
type ReadHistoryStat struct {
	UserID    int64 `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	MessageID int64 `protobuf:"varint,2,req,name=MessageID" json:"MessageID"`
}

func (m *ReadHistoryStat) Reset()         { *m = ReadHistoryStat{} }
func (m *ReadHistoryStat) String() string { return proto.CompactTextString(m) }
func (*ReadHistoryStat) ProtoMessage()    {}
func (*ReadHistoryStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c424a93c3dc008e, []int{12}
}
func (m *ReadHistoryStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadHistoryStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadHistoryStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadHistoryStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadHistoryStat.Merge(m, src)
}
func (m *ReadHistoryStat) XXX_Size() int {
	return m.Size()
}
func (m *ReadHistoryStat) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadHistoryStat.DiscardUnknown(m)
}

var xxx_messageInfo_ReadHistoryStat proto.InternalMessageInfo

func (m *ReadHistoryStat) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ReadHistoryStat) GetMessageID() int64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func init() {
	proto.RegisterType((*GroupsCreate)(nil), "msg.GroupsCreate")
	proto.RegisterType((*GroupsAddUser)(nil), "msg.GroupsAddUser")
	proto.RegisterType((*GroupsEditTitle)(nil), "msg.GroupsEditTitle")
	proto.RegisterType((*GroupsDeleteUser)(nil), "msg.GroupsDeleteUser")
	proto.RegisterType((*GroupsGetFull)(nil), "msg.GroupsGetFull")
	proto.RegisterType((*GroupsToggleAdmins)(nil), "msg.GroupsToggleAdmins")
	proto.RegisterType((*GroupsUpdateAdmin)(nil), "msg.GroupsUpdateAdmin")
	proto.RegisterType((*GroupsUploadPhoto)(nil), "msg.GroupsUploadPhoto")
	proto.RegisterType((*GroupsRemovePhoto)(nil), "msg.GroupsRemovePhoto")
	proto.RegisterType((*GroupsUpdatePhoto)(nil), "msg.GroupsUpdatePhoto")
	proto.RegisterType((*GroupsGetReadHistoryStats)(nil), "msg.GroupsGetReadHistoryStats")
	proto.RegisterType((*GroupsHistoryStats)(nil), "msg.GroupsHistoryStats")
	proto.RegisterType((*ReadHistoryStat)(nil), "msg.ReadHistoryStat")
}

func init() { proto.RegisterFile("chat.groups.proto", fileDescriptor_3c424a93c3dc008e) }

var fileDescriptor_3c424a93c3dc008e = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0x8e, 0xed, 0xa6, 0x6d, 0x1e, 0x81, 0xb6, 0x27, 0x06, 0x93, 0xc1, 0xb5, 0x4e, 0x0c, 0x16,
	0x83, 0x05, 0xec, 0x0c, 0x0d, 0x49, 0x4a, 0x24, 0x50, 0x91, 0x69, 0x04, 0x23, 0xd7, 0xdc, 0xc9,
	0x35, 0xb2, 0x7d, 0xd6, 0xf9, 0x0c, 0xca, 0x80, 0x18, 0xf8, 0x07, 0xf8, 0xb3, 0x3a, 0x76, 0x64,
	0x42, 0x28, 0xf9, 0x47, 0x90, 0xef, 0x6c, 0xe7, 0x47, 0x51, 0x9b, 0xa1, 0x9b, 0xf5, 0xbd, 0xef,
	0x7d, 0xdf, 0x77, 0xef, 0x9e, 0x0f, 0x8e, 0xa6, 0x97, 0x44, 0xfa, 0xa1, 0xe0, 0x45, 0x96, 0xfb,
	0x99, 0xe0, 0x92, 0x23, 0x2b, 0xc9, 0xc3, 0xde, 0xe1, 0x94, 0x0b, 0xe6, 0xcb, 0x59, 0xc6, 0x2a,
	0x18, 0x0b, 0xe8, 0x9e, 0x2a, 0xda, 0x6b, 0xc1, 0x88, 0x64, 0xe8, 0x29, 0xb4, 0x27, 0x39, 0x13,
	0xb9, 0x6d, 0xb8, 0x96, 0xf7, 0xe0, 0xe5, 0x23, 0x3f, 0xc9, 0x43, 0x7f, 0x9c, 0x66, 0x85, 0x2c,
	0xe1, 0x40, 0x17, 0x51, 0x0f, 0xda, 0xe7, 0x91, 0x8c, 0x99, 0x6d, 0xba, 0xa6, 0xd7, 0xe9, 0xef,
	0x5c, 0xfd, 0x39, 0x6e, 0x05, 0x1a, 0x42, 0x2e, 0xec, 0x07, 0x24, 0xa5, 0x3c, 0x19, 0x0f, 0x6c,
	0xcb, 0x35, 0x3c, 0xab, 0x2a, 0x37, 0x28, 0xfe, 0x01, 0x0f, 0xb5, 0xe7, 0x09, 0xa5, 0xa5, 0x1e,
	0x72, 0x61, 0x4f, 0x01, 0xe3, 0x81, 0x6d, 0xb8, 0xa6, 0x67, 0xf5, 0x77, 0xcb, 0x8e, 0xe7, 0x46,
	0x50, 0xc3, 0x08, 0xc3, 0x4e, 0xc9, 0x54, 0x7e, 0x37, 0x53, 0xa9, 0x1a, 0xf2, 0xa0, 0x3b, 0xe2,
	0xe2, 0x1b, 0x11, 0xf4, 0x6d, 0x94, 0x44, 0xd2, 0xb6, 0x5c, 0xd3, 0x6b, 0x57, 0xe6, 0x6b, 0x15,
	0x7c, 0x06, 0x07, 0x3a, 0xc0, 0x90, 0x46, 0xb2, 0x4e, 0x7d, 0x57, 0x84, 0x5b, 0xce, 0x8c, 0x3f,
	0xc1, 0xa1, 0x16, 0x1c, 0xb0, 0x98, 0x49, 0x76, 0x7f, 0x87, 0xc2, 0x2f, 0xea, 0x59, 0x9d, 0x32,
	0x39, 0x2a, 0xe2, 0xf8, 0x6e, 0x59, 0xfc, 0x19, 0x90, 0x6e, 0x39, 0xe7, 0x61, 0x18, 0xb3, 0x13,
	0x9a, 0x44, 0x69, 0xbe, 0x45, 0x1c, 0x0f, 0xba, 0x8a, 0x3b, 0x4c, 0xc9, 0x45, 0xcc, 0xa8, 0x8a,
	0xb5, 0x5f, 0xcf, 0x6f, 0xb5, 0x82, 0x0b, 0x38, 0xd2, 0x0e, 0x93, 0x8c, 0x12, 0xa9, 0x1d, 0xee,
	0xe9, 0x12, 0x7b, 0xd0, 0x56, 0x72, 0xea, 0xf6, 0x6a, 0x77, 0x0d, 0xe1, 0x9f, 0xc6, 0xd2, 0x37,
	0xe6, 0x84, 0xbe, 0xbf, 0x2c, 0x17, 0x7b, 0x2b, 0xdf, 0x51, 0x54, 0x5d, 0xdc, 0x9a, 0x6f, 0x89,
	0x06, 0xaa, 0x56, 0x1e, 0x3e, 0x60, 0xb2, 0x10, 0xe9, 0xd9, 0xc5, 0x17, 0x36, 0x95, 0x6a, 0x73,
	0x9b, 0xc3, 0xaf, 0x56, 0xf0, 0xc7, 0x3a, 0x44, 0xc0, 0x12, 0xfe, 0x95, 0x6d, 0x1b, 0xc2, 0x85,
	0x3d, 0x45, 0x1d, 0x0f, 0x6c, 0x53, 0xfd, 0x15, 0x0d, 0xa3, 0x82, 0x97, 0xc2, 0x7a, 0xaa, 0x8d,
	0x70, 0xdd, 0xb6, 0x21, 0x5c, 0xc1, 0xab, 0xd6, 0xe6, 0xff, 0x17, 0xe2, 0x15, 0x3c, 0x69, 0x76,
	0x28, 0x60, 0x84, 0xbe, 0x89, 0x72, 0xc9, 0xc5, 0xec, 0x83, 0x24, 0x72, 0x8b, 0xbd, 0xc0, 0xdf,
	0xeb, 0x7d, 0x5a, 0xeb, 0x7b, 0x06, 0x6d, 0xf5, 0x51, 0x3d, 0x14, 0x8f, 0xd5, 0x54, 0x37, 0xd4,
	0x03, 0x4d, 0x41, 0xc7, 0xf5, 0xa3, 0x62, 0x2a, 0x6e, 0x47, 0x71, 0x37, 0xde, 0x93, 0x61, 0x92,
	0xc9, 0xd9, 0xfa, 0xad, 0x2b, 0x08, 0x4f, 0xe0, 0x60, 0x43, 0x16, 0x39, 0xb0, 0x5b, 0xf6, 0xdd,
	0x88, 0x5c, 0xa1, 0x08, 0x43, 0xe7, 0x1d, 0xcb, 0x73, 0x12, 0xb2, 0x66, 0x28, 0x5a, 0x72, 0x09,
	0xf7, 0xed, 0xab, 0xb9, 0x63, 0x5c, 0xcf, 0x1d, 0xe3, 0xef, 0xdc, 0x31, 0x7e, 0x2d, 0x9c, 0xd6,
	0xf5, 0xc2, 0x69, 0xfd, 0x5e, 0x38, 0xad, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x17, 0xd4,
	0x2f, 0x3d, 0x05, 0x00, 0x00,
}

func (m *GroupsCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupsCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatGroups(dAtA, i, uint64(m.RandomID))
	i--
	dAtA[i] = 0x18
	i -= len(m.Title)
	copy(dAtA[i:], m.Title)
	i = encodeVarintChatGroups(dAtA, i, uint64(len(m.Title)))
	i--
	dAtA[i] = 0x12
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatGroups(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GroupsAddUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsAddUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupsAddUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatGroups(dAtA, i, uint64(m.ForwardLimit))
	i--
	dAtA[i] = 0x18
	if m.User == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("User")
	} else {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatGroups(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintChatGroups(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GroupsEditTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsEditTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupsEditTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Title)
	copy(dAtA[i:], m.Title)
	i = encodeVarintChatGroups(dAtA, i, uint64(len(m.Title)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintChatGroups(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GroupsDeleteUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsDeleteUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupsDeleteUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.User == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("User")
	} else {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatGroups(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintChatGroups(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GroupsGetFull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsGetFull) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupsGetFull) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatGroups(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GroupsToggleAdmins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsToggleAdmins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupsToggleAdmins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.AdminEnabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatGroups(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GroupsUpdateAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsUpdateAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupsUpdateAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Admin {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if m.User == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("User")
	} else {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatGroups(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintChatGroups(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GroupsUploadPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsUploadPhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupsUploadPhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.ReturnObject {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if m.File == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("File")
	} else {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatGroups(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintChatGroups(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GroupsRemovePhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsRemovePhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupsRemovePhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatGroups(dAtA, i, uint64(m.PhotoID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatGroups(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GroupsUpdatePhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsUpdatePhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupsUpdatePhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatGroups(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatGroups(dAtA, i, uint64(m.PhotoID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GroupsGetReadHistoryStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsGetReadHistoryStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupsGetReadHistoryStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatGroups(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GroupsHistoryStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsHistoryStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupsHistoryStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Empty {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatGroups(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatGroups(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReadHistoryStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadHistoryStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadHistoryStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatGroups(dAtA, i, uint64(m.MessageID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatGroups(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintChatGroups(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatGroups(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GroupsCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovChatGroups(uint64(l))
		}
	}
	l = len(m.Title)
	n += 1 + l + sovChatGroups(uint64(l))
	n += 1 + sovChatGroups(uint64(m.RandomID))
	return n
}

func (m *GroupsAddUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatGroups(uint64(m.GroupID))
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovChatGroups(uint64(l))
	}
	n += 1 + sovChatGroups(uint64(m.ForwardLimit))
	return n
}

func (m *GroupsEditTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatGroups(uint64(m.GroupID))
	l = len(m.Title)
	n += 1 + l + sovChatGroups(uint64(l))
	return n
}

func (m *GroupsDeleteUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatGroups(uint64(m.GroupID))
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovChatGroups(uint64(l))
	}
	return n
}

func (m *GroupsGetFull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatGroups(uint64(m.GroupID))
	return n
}

func (m *GroupsToggleAdmins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatGroups(uint64(m.GroupID))
	n += 2
	return n
}

func (m *GroupsUpdateAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatGroups(uint64(m.GroupID))
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovChatGroups(uint64(l))
	}
	n += 2
	return n
}

func (m *GroupsUploadPhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatGroups(uint64(m.GroupID))
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovChatGroups(uint64(l))
	}
	n += 2
	return n
}

func (m *GroupsRemovePhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatGroups(uint64(m.GroupID))
	n += 1 + sovChatGroups(uint64(m.PhotoID))
	return n
}

func (m *GroupsUpdatePhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatGroups(uint64(m.PhotoID))
	n += 1 + sovChatGroups(uint64(m.GroupID))
	return n
}

func (m *GroupsGetReadHistoryStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatGroups(uint64(m.GroupID))
	return n
}

func (m *GroupsHistoryStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovChatGroups(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovChatGroups(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *ReadHistoryStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatGroups(uint64(m.UserID))
	n += 1 + sovChatGroups(uint64(m.MessageID))
	return n
}

func sovChatGroups(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatGroups(x uint64) (n int) {
	return sovChatGroups(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GroupsCreate) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatGroups
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatGroups
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &InputUser{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatGroups
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatGroups
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Title")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsAddUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsAddUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsAddUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatGroups
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatGroups
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &InputUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardLimit", wireType)
			}
			m.ForwardLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwardLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChatGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("User")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ForwardLimit")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsEditTitle) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsEditTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsEditTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatGroups
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatGroups
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Title")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsDeleteUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsDeleteUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsDeleteUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatGroups
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatGroups
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &InputUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("User")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsGetFull) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsGetFull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsGetFull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsToggleAdmins) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsToggleAdmins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsToggleAdmins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminEnabled = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AdminEnabled")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsUpdateAdmin) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsUpdateAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsUpdateAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatGroups
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatGroups
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &InputUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admin = bool(v != 0)
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChatGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("User")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Admin")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsUploadPhoto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsUploadPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsUploadPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatGroups
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatGroups
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &InputFile{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnObject", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnObject = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChatGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("File")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsRemovePhoto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsRemovePhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsRemovePhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoID", wireType)
			}
			m.PhotoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhotoID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsUpdatePhoto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsUpdatePhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsUpdatePhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoID", wireType)
			}
			m.PhotoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhotoID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PhotoID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsGetReadHistoryStats) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsGetReadHistoryStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsGetReadHistoryStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsHistoryStats) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsHistoryStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsHistoryStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatGroups
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatGroups
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &ReadHistoryStat{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatGroups
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatGroups
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Empty = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Empty")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadHistoryStat) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatGroups
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadHistoryStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadHistoryStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatGroups(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatGroups
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MessageID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatGroups(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatGroups
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatGroups
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatGroups
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatGroups
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatGroups
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatGroups        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatGroups          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatGroups = fmt.Errorf("proto: unexpected end of group")
)
