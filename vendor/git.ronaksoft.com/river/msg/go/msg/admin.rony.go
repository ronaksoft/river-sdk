// Code generated by Rony's protoc plugin; DO NOT EDIT.
// ProtoC ver. v3.15.8
// Rony ver. v0.12.22
// Source: admin.proto

package msg

import (
	bytes "bytes"
	edge "github.com/ronaksoft/rony/edge"
	pools "github.com/ronaksoft/rony/pools"
	registry "github.com/ronaksoft/rony/registry"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	sync "sync"
)

var _ = pools.Imported

const C_AdminBroadcastMessage int64 = 3981417409

type poolAdminBroadcastMessage struct {
	pool sync.Pool
}

func (p *poolAdminBroadcastMessage) Get() *AdminBroadcastMessage {
	x, ok := p.pool.Get().(*AdminBroadcastMessage)
	if !ok {
		x = &AdminBroadcastMessage{}
	}

	return x
}

func (p *poolAdminBroadcastMessage) Put(x *AdminBroadcastMessage) {
	if x == nil {
		return
	}

	x.Body = ""
	x.ReceiverIDs = x.ReceiverIDs[:0]
	for _, z := range x.Entities {
		PoolMessageEntity.Put(z)
	}
	x.Entities = x.Entities[:0]
	x.MediaType = 0
	x.MediaData = x.MediaData[:0]

	p.pool.Put(x)
}

var PoolAdminBroadcastMessage = poolAdminBroadcastMessage{}

func (x *AdminBroadcastMessage) DeepCopy(z *AdminBroadcastMessage) {
	z.Body = x.Body
	z.ReceiverIDs = append(z.ReceiverIDs[:0], x.ReceiverIDs...)
	for idx := range x.Entities {
		if x.Entities[idx] == nil {
			continue
		}
		xx := PoolMessageEntity.Get()
		x.Entities[idx].DeepCopy(xx)
		z.Entities = append(z.Entities, xx)
	}
	z.MediaType = x.MediaType
	z.MediaData = append(z.MediaData[:0], x.MediaData...)
}

func (x *AdminBroadcastMessage) Clone() *AdminBroadcastMessage {
	z := &AdminBroadcastMessage{}
	x.DeepCopy(z)
	return z
}

func (x *AdminBroadcastMessage) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminBroadcastMessage) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminBroadcastMessage) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminBroadcastMessage) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminBroadcastMessage) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminBroadcastMessage, x)
}

const C_AdminSetWelcomeMessage int64 = 1149591874

type poolAdminSetWelcomeMessage struct {
	pool sync.Pool
}

func (p *poolAdminSetWelcomeMessage) Get() *AdminSetWelcomeMessage {
	x, ok := p.pool.Get().(*AdminSetWelcomeMessage)
	if !ok {
		x = &AdminSetWelcomeMessage{}
	}

	return x
}

func (p *poolAdminSetWelcomeMessage) Put(x *AdminSetWelcomeMessage) {
	if x == nil {
		return
	}

	x.AccessToken = ""
	x.Lang = ""
	x.Template = ""

	p.pool.Put(x)
}

var PoolAdminSetWelcomeMessage = poolAdminSetWelcomeMessage{}

func (x *AdminSetWelcomeMessage) DeepCopy(z *AdminSetWelcomeMessage) {
	z.AccessToken = x.AccessToken
	z.Lang = x.Lang
	z.Template = x.Template
}

func (x *AdminSetWelcomeMessage) Clone() *AdminSetWelcomeMessage {
	z := &AdminSetWelcomeMessage{}
	x.DeepCopy(z)
	return z
}

func (x *AdminSetWelcomeMessage) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminSetWelcomeMessage) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminSetWelcomeMessage) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminSetWelcomeMessage) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminSetWelcomeMessage) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminSetWelcomeMessage, x)
}

const C_AdminGetWelcomeMessages int64 = 2794709448

type poolAdminGetWelcomeMessages struct {
	pool sync.Pool
}

func (p *poolAdminGetWelcomeMessages) Get() *AdminGetWelcomeMessages {
	x, ok := p.pool.Get().(*AdminGetWelcomeMessages)
	if !ok {
		x = &AdminGetWelcomeMessages{}
	}

	return x
}

func (p *poolAdminGetWelcomeMessages) Put(x *AdminGetWelcomeMessages) {
	if x == nil {
		return
	}

	x.AccessToken = ""

	p.pool.Put(x)
}

var PoolAdminGetWelcomeMessages = poolAdminGetWelcomeMessages{}

func (x *AdminGetWelcomeMessages) DeepCopy(z *AdminGetWelcomeMessages) {
	z.AccessToken = x.AccessToken
}

func (x *AdminGetWelcomeMessages) Clone() *AdminGetWelcomeMessages {
	z := &AdminGetWelcomeMessages{}
	x.DeepCopy(z)
	return z
}

func (x *AdminGetWelcomeMessages) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminGetWelcomeMessages) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminGetWelcomeMessages) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminGetWelcomeMessages) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminGetWelcomeMessages) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminGetWelcomeMessages, x)
}

const C_AdminDeleteWelcomeMessage int64 = 3940015991

type poolAdminDeleteWelcomeMessage struct {
	pool sync.Pool
}

func (p *poolAdminDeleteWelcomeMessage) Get() *AdminDeleteWelcomeMessage {
	x, ok := p.pool.Get().(*AdminDeleteWelcomeMessage)
	if !ok {
		x = &AdminDeleteWelcomeMessage{}
	}

	return x
}

func (p *poolAdminDeleteWelcomeMessage) Put(x *AdminDeleteWelcomeMessage) {
	if x == nil {
		return
	}

	x.AccessToken = ""
	x.Lang = ""

	p.pool.Put(x)
}

var PoolAdminDeleteWelcomeMessage = poolAdminDeleteWelcomeMessage{}

func (x *AdminDeleteWelcomeMessage) DeepCopy(z *AdminDeleteWelcomeMessage) {
	z.AccessToken = x.AccessToken
	z.Lang = x.Lang
}

func (x *AdminDeleteWelcomeMessage) Clone() *AdminDeleteWelcomeMessage {
	z := &AdminDeleteWelcomeMessage{}
	x.DeepCopy(z)
	return z
}

func (x *AdminDeleteWelcomeMessage) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminDeleteWelcomeMessage) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminDeleteWelcomeMessage) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminDeleteWelcomeMessage) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminDeleteWelcomeMessage) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminDeleteWelcomeMessage, x)
}

const C_AdminSetPushProvider int64 = 1758606947

type poolAdminSetPushProvider struct {
	pool sync.Pool
}

func (p *poolAdminSetPushProvider) Get() *AdminSetPushProvider {
	x, ok := p.pool.Get().(*AdminSetPushProvider)
	if !ok {
		x = &AdminSetPushProvider{}
	}

	x.Provider = PoolPushProvider.Get()

	return x
}

func (p *poolAdminSetPushProvider) Put(x *AdminSetPushProvider) {
	if x == nil {
		return
	}

	x.AccessToken = ""
	PoolPushProvider.Put(x.Provider)

	p.pool.Put(x)
}

var PoolAdminSetPushProvider = poolAdminSetPushProvider{}

func (x *AdminSetPushProvider) DeepCopy(z *AdminSetPushProvider) {
	z.AccessToken = x.AccessToken
	if x.Provider != nil {
		if z.Provider == nil {
			z.Provider = PoolPushProvider.Get()
		}
		x.Provider.DeepCopy(z.Provider)
	} else {
		PoolPushProvider.Put(z.Provider)
		z.Provider = nil
	}
}

func (x *AdminSetPushProvider) Clone() *AdminSetPushProvider {
	z := &AdminSetPushProvider{}
	x.DeepCopy(z)
	return z
}

func (x *AdminSetPushProvider) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminSetPushProvider) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminSetPushProvider) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminSetPushProvider) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminSetPushProvider) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminSetPushProvider, x)
}

const C_AdminGetPushProviders int64 = 4257963974

type poolAdminGetPushProviders struct {
	pool sync.Pool
}

func (p *poolAdminGetPushProviders) Get() *AdminGetPushProviders {
	x, ok := p.pool.Get().(*AdminGetPushProviders)
	if !ok {
		x = &AdminGetPushProviders{}
	}

	return x
}

func (p *poolAdminGetPushProviders) Put(x *AdminGetPushProviders) {
	if x == nil {
		return
	}

	x.AccessToken = ""

	p.pool.Put(x)
}

var PoolAdminGetPushProviders = poolAdminGetPushProviders{}

func (x *AdminGetPushProviders) DeepCopy(z *AdminGetPushProviders) {
	z.AccessToken = x.AccessToken
}

func (x *AdminGetPushProviders) Clone() *AdminGetPushProviders {
	z := &AdminGetPushProviders{}
	x.DeepCopy(z)
	return z
}

func (x *AdminGetPushProviders) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminGetPushProviders) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminGetPushProviders) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminGetPushProviders) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminGetPushProviders) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminGetPushProviders, x)
}

const C_AdminDeletePushProvider int64 = 1864898932

type poolAdminDeletePushProvider struct {
	pool sync.Pool
}

func (p *poolAdminDeletePushProvider) Get() *AdminDeletePushProvider {
	x, ok := p.pool.Get().(*AdminDeletePushProvider)
	if !ok {
		x = &AdminDeletePushProvider{}
	}

	return x
}

func (p *poolAdminDeletePushProvider) Put(x *AdminDeletePushProvider) {
	if x == nil {
		return
	}

	x.AccessToken = ""
	x.Name = ""
	x.Type = 0

	p.pool.Put(x)
}

var PoolAdminDeletePushProvider = poolAdminDeletePushProvider{}

func (x *AdminDeletePushProvider) DeepCopy(z *AdminDeletePushProvider) {
	z.AccessToken = x.AccessToken
	z.Name = x.Name
	z.Type = x.Type
}

func (x *AdminDeletePushProvider) Clone() *AdminDeletePushProvider {
	z := &AdminDeletePushProvider{}
	x.DeepCopy(z)
	return z
}

func (x *AdminDeletePushProvider) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminDeletePushProvider) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminDeletePushProvider) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminDeletePushProvider) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminDeletePushProvider) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminDeletePushProvider, x)
}

const C_AdminSetVersion int64 = 1311023404

type poolAdminSetVersion struct {
	pool sync.Pool
}

func (p *poolAdminSetVersion) Get() *AdminSetVersion {
	x, ok := p.pool.Get().(*AdminSetVersion)
	if !ok {
		x = &AdminSetVersion{}
	}

	x.Version = PoolVersion.Get()

	return x
}

func (p *poolAdminSetVersion) Put(x *AdminSetVersion) {
	if x == nil {
		return
	}

	x.AccessToken = ""
	PoolVersion.Put(x.Version)

	p.pool.Put(x)
}

var PoolAdminSetVersion = poolAdminSetVersion{}

func (x *AdminSetVersion) DeepCopy(z *AdminSetVersion) {
	z.AccessToken = x.AccessToken
	if x.Version != nil {
		if z.Version == nil {
			z.Version = PoolVersion.Get()
		}
		x.Version.DeepCopy(z.Version)
	} else {
		PoolVersion.Put(z.Version)
		z.Version = nil
	}
}

func (x *AdminSetVersion) Clone() *AdminSetVersion {
	z := &AdminSetVersion{}
	x.DeepCopy(z)
	return z
}

func (x *AdminSetVersion) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminSetVersion) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminSetVersion) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminSetVersion) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminSetVersion) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminSetVersion, x)
}

const C_AdminGetVersions int64 = 934752256

type poolAdminGetVersions struct {
	pool sync.Pool
}

func (p *poolAdminGetVersions) Get() *AdminGetVersions {
	x, ok := p.pool.Get().(*AdminGetVersions)
	if !ok {
		x = &AdminGetVersions{}
	}

	return x
}

func (p *poolAdminGetVersions) Put(x *AdminGetVersions) {
	if x == nil {
		return
	}

	x.AccessToken = ""

	p.pool.Put(x)
}

var PoolAdminGetVersions = poolAdminGetVersions{}

func (x *AdminGetVersions) DeepCopy(z *AdminGetVersions) {
	z.AccessToken = x.AccessToken
}

func (x *AdminGetVersions) Clone() *AdminGetVersions {
	z := &AdminGetVersions{}
	x.DeepCopy(z)
	return z
}

func (x *AdminGetVersions) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminGetVersions) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminGetVersions) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminGetVersions) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminGetVersions) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminGetVersions, x)
}

const C_AdminSetStorageNode int64 = 4159566764

type poolAdminSetStorageNode struct {
	pool sync.Pool
}

func (p *poolAdminSetStorageNode) Get() *AdminSetStorageNode {
	x, ok := p.pool.Get().(*AdminSetStorageNode)
	if !ok {
		x = &AdminSetStorageNode{}
	}

	return x
}

func (p *poolAdminSetStorageNode) Put(x *AdminSetStorageNode) {
	if x == nil {
		return
	}

	x.AccessToken = ""
	x.ClusterID = 0
	x.DSN = ""
	x.Type = ""
	x.Location = ""
	x.Archive = false

	p.pool.Put(x)
}

var PoolAdminSetStorageNode = poolAdminSetStorageNode{}

func (x *AdminSetStorageNode) DeepCopy(z *AdminSetStorageNode) {
	z.AccessToken = x.AccessToken
	z.ClusterID = x.ClusterID
	z.DSN = x.DSN
	z.Type = x.Type
	z.Location = x.Location
	z.Archive = x.Archive
}

func (x *AdminSetStorageNode) Clone() *AdminSetStorageNode {
	z := &AdminSetStorageNode{}
	x.DeepCopy(z)
	return z
}

func (x *AdminSetStorageNode) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminSetStorageNode) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminSetStorageNode) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminSetStorageNode) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminSetStorageNode) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminSetStorageNode, x)
}

const C_AdminGetStorageNode int64 = 2297643227

type poolAdminGetStorageNode struct {
	pool sync.Pool
}

func (p *poolAdminGetStorageNode) Get() *AdminGetStorageNode {
	x, ok := p.pool.Get().(*AdminGetStorageNode)
	if !ok {
		x = &AdminGetStorageNode{}
	}

	return x
}

func (p *poolAdminGetStorageNode) Put(x *AdminGetStorageNode) {
	if x == nil {
		return
	}

	x.AccessToken = ""
	x.ClusterID = 0

	p.pool.Put(x)
}

var PoolAdminGetStorageNode = poolAdminGetStorageNode{}

func (x *AdminGetStorageNode) DeepCopy(z *AdminGetStorageNode) {
	z.AccessToken = x.AccessToken
	z.ClusterID = x.ClusterID
}

func (x *AdminGetStorageNode) Clone() *AdminGetStorageNode {
	z := &AdminGetStorageNode{}
	x.DeepCopy(z)
	return z
}

func (x *AdminGetStorageNode) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminGetStorageNode) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminGetStorageNode) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminGetStorageNode) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminGetStorageNode) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminGetStorageNode, x)
}

const C_AdminGetStorageNodes int64 = 176633623

type poolAdminGetStorageNodes struct {
	pool sync.Pool
}

func (p *poolAdminGetStorageNodes) Get() *AdminGetStorageNodes {
	x, ok := p.pool.Get().(*AdminGetStorageNodes)
	if !ok {
		x = &AdminGetStorageNodes{}
	}

	return x
}

func (p *poolAdminGetStorageNodes) Put(x *AdminGetStorageNodes) {
	if x == nil {
		return
	}

	x.AccessToken = ""

	p.pool.Put(x)
}

var PoolAdminGetStorageNodes = poolAdminGetStorageNodes{}

func (x *AdminGetStorageNodes) DeepCopy(z *AdminGetStorageNodes) {
	z.AccessToken = x.AccessToken
}

func (x *AdminGetStorageNodes) Clone() *AdminGetStorageNodes {
	z := &AdminGetStorageNodes{}
	x.DeepCopy(z)
	return z
}

func (x *AdminGetStorageNodes) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminGetStorageNodes) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminGetStorageNodes) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminGetStorageNodes) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminGetStorageNodes) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminGetStorageNodes, x)
}

const C_AdminAddBannedSubnet int64 = 1018562272

type poolAdminAddBannedSubnet struct {
	pool sync.Pool
}

func (p *poolAdminAddBannedSubnet) Get() *AdminAddBannedSubnet {
	x, ok := p.pool.Get().(*AdminAddBannedSubnet)
	if !ok {
		x = &AdminAddBannedSubnet{}
	}

	return x
}

func (p *poolAdminAddBannedSubnet) Put(x *AdminAddBannedSubnet) {
	if x == nil {
		return
	}

	x.AccessToken = ""
	x.CIDR = x.CIDR[:0]

	p.pool.Put(x)
}

var PoolAdminAddBannedSubnet = poolAdminAddBannedSubnet{}

func (x *AdminAddBannedSubnet) DeepCopy(z *AdminAddBannedSubnet) {
	z.AccessToken = x.AccessToken
	z.CIDR = append(z.CIDR[:0], x.CIDR...)
}

func (x *AdminAddBannedSubnet) Clone() *AdminAddBannedSubnet {
	z := &AdminAddBannedSubnet{}
	x.DeepCopy(z)
	return z
}

func (x *AdminAddBannedSubnet) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminAddBannedSubnet) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminAddBannedSubnet) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminAddBannedSubnet) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminAddBannedSubnet) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminAddBannedSubnet, x)
}

const C_AdminDeleteBannedSubnet int64 = 4271915141

type poolAdminDeleteBannedSubnet struct {
	pool sync.Pool
}

func (p *poolAdminDeleteBannedSubnet) Get() *AdminDeleteBannedSubnet {
	x, ok := p.pool.Get().(*AdminDeleteBannedSubnet)
	if !ok {
		x = &AdminDeleteBannedSubnet{}
	}

	return x
}

func (p *poolAdminDeleteBannedSubnet) Put(x *AdminDeleteBannedSubnet) {
	if x == nil {
		return
	}

	x.AccessToken = ""
	x.CIDR = x.CIDR[:0]

	p.pool.Put(x)
}

var PoolAdminDeleteBannedSubnet = poolAdminDeleteBannedSubnet{}

func (x *AdminDeleteBannedSubnet) DeepCopy(z *AdminDeleteBannedSubnet) {
	z.AccessToken = x.AccessToken
	z.CIDR = append(z.CIDR[:0], x.CIDR...)
}

func (x *AdminDeleteBannedSubnet) Clone() *AdminDeleteBannedSubnet {
	z := &AdminDeleteBannedSubnet{}
	x.DeepCopy(z)
	return z
}

func (x *AdminDeleteBannedSubnet) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminDeleteBannedSubnet) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminDeleteBannedSubnet) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminDeleteBannedSubnet) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminDeleteBannedSubnet) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminDeleteBannedSubnet, x)
}

const C_AdminGetBannedSubnets int64 = 937432341

type poolAdminGetBannedSubnets struct {
	pool sync.Pool
}

func (p *poolAdminGetBannedSubnets) Get() *AdminGetBannedSubnets {
	x, ok := p.pool.Get().(*AdminGetBannedSubnets)
	if !ok {
		x = &AdminGetBannedSubnets{}
	}

	return x
}

func (p *poolAdminGetBannedSubnets) Put(x *AdminGetBannedSubnets) {
	if x == nil {
		return
	}

	x.AccessToken = ""

	p.pool.Put(x)
}

var PoolAdminGetBannedSubnets = poolAdminGetBannedSubnets{}

func (x *AdminGetBannedSubnets) DeepCopy(z *AdminGetBannedSubnets) {
	z.AccessToken = x.AccessToken
}

func (x *AdminGetBannedSubnets) Clone() *AdminGetBannedSubnets {
	z := &AdminGetBannedSubnets{}
	x.DeepCopy(z)
	return z
}

func (x *AdminGetBannedSubnets) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminGetBannedSubnets) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminGetBannedSubnets) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminGetBannedSubnets) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminGetBannedSubnets) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminGetBannedSubnets, x)
}

const C_BannedSubnets int64 = 1393688488

type poolBannedSubnets struct {
	pool sync.Pool
}

func (p *poolBannedSubnets) Get() *BannedSubnets {
	x, ok := p.pool.Get().(*BannedSubnets)
	if !ok {
		x = &BannedSubnets{}
	}

	return x
}

func (p *poolBannedSubnets) Put(x *BannedSubnets) {
	if x == nil {
		return
	}

	x.Subnets = x.Subnets[:0]

	p.pool.Put(x)
}

var PoolBannedSubnets = poolBannedSubnets{}

func (x *BannedSubnets) DeepCopy(z *BannedSubnets) {
	z.Subnets = append(z.Subnets[:0], x.Subnets...)
}

func (x *BannedSubnets) Clone() *BannedSubnets {
	z := &BannedSubnets{}
	x.DeepCopy(z)
	return z
}

func (x *BannedSubnets) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *BannedSubnets) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *BannedSubnets) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *BannedSubnets) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *BannedSubnets) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_BannedSubnets, x)
}

const C_AdminSetToken int64 = 2892519162

type poolAdminSetToken struct {
	pool sync.Pool
}

func (p *poolAdminSetToken) Get() *AdminSetToken {
	x, ok := p.pool.Get().(*AdminSetToken)
	if !ok {
		x = &AdminSetToken{}
	}

	return x
}

func (p *poolAdminSetToken) Put(x *AdminSetToken) {
	if x == nil {
		return
	}

	x.AccessToken = ""
	x.Privilege = 0

	p.pool.Put(x)
}

var PoolAdminSetToken = poolAdminSetToken{}

func (x *AdminSetToken) DeepCopy(z *AdminSetToken) {
	z.AccessToken = x.AccessToken
	z.Privilege = x.Privilege
}

func (x *AdminSetToken) Clone() *AdminSetToken {
	z := &AdminSetToken{}
	x.DeepCopy(z)
	return z
}

func (x *AdminSetToken) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminSetToken) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminSetToken) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminSetToken) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminSetToken) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminSetToken, x)
}

const C_AdminDeleteToken int64 = 3154441897

type poolAdminDeleteToken struct {
	pool sync.Pool
}

func (p *poolAdminDeleteToken) Get() *AdminDeleteToken {
	x, ok := p.pool.Get().(*AdminDeleteToken)
	if !ok {
		x = &AdminDeleteToken{}
	}

	return x
}

func (p *poolAdminDeleteToken) Put(x *AdminDeleteToken) {
	if x == nil {
		return
	}

	x.AccessToken = ""
	x.DeletedToken = ""

	p.pool.Put(x)
}

var PoolAdminDeleteToken = poolAdminDeleteToken{}

func (x *AdminDeleteToken) DeepCopy(z *AdminDeleteToken) {
	z.AccessToken = x.AccessToken
	z.DeletedToken = x.DeletedToken
}

func (x *AdminDeleteToken) Clone() *AdminDeleteToken {
	z := &AdminDeleteToken{}
	x.DeepCopy(z)
	return z
}

func (x *AdminDeleteToken) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminDeleteToken) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminDeleteToken) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminDeleteToken) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminDeleteToken) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminDeleteToken, x)
}

const C_AdminReserveUsername int64 = 1947723452

type poolAdminReserveUsername struct {
	pool sync.Pool
}

func (p *poolAdminReserveUsername) Get() *AdminReserveUsername {
	x, ok := p.pool.Get().(*AdminReserveUsername)
	if !ok {
		x = &AdminReserveUsername{}
	}

	return x
}

func (p *poolAdminReserveUsername) Put(x *AdminReserveUsername) {
	if x == nil {
		return
	}

	x.AccessToken = ""
	x.Usernames = x.Usernames[:0]
	x.Delete = false

	p.pool.Put(x)
}

var PoolAdminReserveUsername = poolAdminReserveUsername{}

func (x *AdminReserveUsername) DeepCopy(z *AdminReserveUsername) {
	z.AccessToken = x.AccessToken
	z.Usernames = append(z.Usernames[:0], x.Usernames...)
	z.Delete = x.Delete
}

func (x *AdminReserveUsername) Clone() *AdminReserveUsername {
	z := &AdminReserveUsername{}
	x.DeepCopy(z)
	return z
}

func (x *AdminReserveUsername) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminReserveUsername) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminReserveUsername) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminReserveUsername) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminReserveUsername) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminReserveUsername, x)
}

const C_AdminGetReservedUsernames int64 = 1588181579

type poolAdminGetReservedUsernames struct {
	pool sync.Pool
}

func (p *poolAdminGetReservedUsernames) Get() *AdminGetReservedUsernames {
	x, ok := p.pool.Get().(*AdminGetReservedUsernames)
	if !ok {
		x = &AdminGetReservedUsernames{}
	}

	return x
}

func (p *poolAdminGetReservedUsernames) Put(x *AdminGetReservedUsernames) {
	if x == nil {
		return
	}

	x.AccessToken = ""

	p.pool.Put(x)
}

var PoolAdminGetReservedUsernames = poolAdminGetReservedUsernames{}

func (x *AdminGetReservedUsernames) DeepCopy(z *AdminGetReservedUsernames) {
	z.AccessToken = x.AccessToken
}

func (x *AdminGetReservedUsernames) Clone() *AdminGetReservedUsernames {
	z := &AdminGetReservedUsernames{}
	x.DeepCopy(z)
	return z
}

func (x *AdminGetReservedUsernames) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminGetReservedUsernames) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminGetReservedUsernames) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminGetReservedUsernames) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminGetReservedUsernames) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminGetReservedUsernames, x)
}

const C_AdminTeamCreate int64 = 2797066608

type poolAdminTeamCreate struct {
	pool sync.Pool
}

func (p *poolAdminTeamCreate) Get() *AdminTeamCreate {
	x, ok := p.pool.Get().(*AdminTeamCreate)
	if !ok {
		x = &AdminTeamCreate{}
	}

	return x
}

func (p *poolAdminTeamCreate) Put(x *AdminTeamCreate) {
	if x == nil {
		return
	}

	x.RandomID = 0
	x.AccessToken = ""
	x.Capacity = 0
	x.ExpireDate = 0
	x.Community = false
	x.Title = ""
	x.CreatorID = 0

	p.pool.Put(x)
}

var PoolAdminTeamCreate = poolAdminTeamCreate{}

func (x *AdminTeamCreate) DeepCopy(z *AdminTeamCreate) {
	z.RandomID = x.RandomID
	z.AccessToken = x.AccessToken
	z.Capacity = x.Capacity
	z.ExpireDate = x.ExpireDate
	z.Community = x.Community
	z.Title = x.Title
	z.CreatorID = x.CreatorID
}

func (x *AdminTeamCreate) Clone() *AdminTeamCreate {
	z := &AdminTeamCreate{}
	x.DeepCopy(z)
	return z
}

func (x *AdminTeamCreate) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminTeamCreate) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminTeamCreate) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminTeamCreate) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminTeamCreate) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminTeamCreate, x)
}

const C_AdminGetClusterInfo int64 = 52432287

type poolAdminGetClusterInfo struct {
	pool sync.Pool
}

func (p *poolAdminGetClusterInfo) Get() *AdminGetClusterInfo {
	x, ok := p.pool.Get().(*AdminGetClusterInfo)
	if !ok {
		x = &AdminGetClusterInfo{}
	}

	return x
}

func (p *poolAdminGetClusterInfo) Put(x *AdminGetClusterInfo) {
	if x == nil {
		return
	}

	x.ReplicaSet = 0

	p.pool.Put(x)
}

var PoolAdminGetClusterInfo = poolAdminGetClusterInfo{}

func (x *AdminGetClusterInfo) DeepCopy(z *AdminGetClusterInfo) {
	z.ReplicaSet = x.ReplicaSet
}

func (x *AdminGetClusterInfo) Clone() *AdminGetClusterInfo {
	z := &AdminGetClusterInfo{}
	x.DeepCopy(z)
	return z
}

func (x *AdminGetClusterInfo) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminGetClusterInfo) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminGetClusterInfo) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminGetClusterInfo) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminGetClusterInfo) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminGetClusterInfo, x)
}

const C_StorageNode int64 = 1966993242

type poolStorageNode struct {
	pool sync.Pool
}

func (p *poolStorageNode) Get() *StorageNode {
	x, ok := p.pool.Get().(*StorageNode)
	if !ok {
		x = &StorageNode{}
	}

	return x
}

func (p *poolStorageNode) Put(x *StorageNode) {
	if x == nil {
		return
	}

	x.Archive = false
	x.ClusterID = 0
	x.Location = ""
	x.DSN = ""
	x.Type = ""

	p.pool.Put(x)
}

var PoolStorageNode = poolStorageNode{}

func (x *StorageNode) DeepCopy(z *StorageNode) {
	z.Archive = x.Archive
	z.ClusterID = x.ClusterID
	z.Location = x.Location
	z.DSN = x.DSN
	z.Type = x.Type
}

func (x *StorageNode) Clone() *StorageNode {
	z := &StorageNode{}
	x.DeepCopy(z)
	return z
}

func (x *StorageNode) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *StorageNode) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *StorageNode) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *StorageNode) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *StorageNode) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_StorageNode, x)
}

const C_StorageNodeMany int64 = 2667693068

type poolStorageNodeMany struct {
	pool sync.Pool
}

func (p *poolStorageNodeMany) Get() *StorageNodeMany {
	x, ok := p.pool.Get().(*StorageNodeMany)
	if !ok {
		x = &StorageNodeMany{}
	}

	return x
}

func (p *poolStorageNodeMany) Put(x *StorageNodeMany) {
	if x == nil {
		return
	}

	for _, z := range x.Nodes {
		PoolStorageNode.Put(z)
	}
	x.Nodes = x.Nodes[:0]
	x.Empty = false

	p.pool.Put(x)
}

var PoolStorageNodeMany = poolStorageNodeMany{}

func (x *StorageNodeMany) DeepCopy(z *StorageNodeMany) {
	for idx := range x.Nodes {
		if x.Nodes[idx] == nil {
			continue
		}
		xx := PoolStorageNode.Get()
		x.Nodes[idx].DeepCopy(xx)
		z.Nodes = append(z.Nodes, xx)
	}
	z.Empty = x.Empty
}

func (x *StorageNodeMany) Clone() *StorageNodeMany {
	z := &StorageNodeMany{}
	x.DeepCopy(z)
	return z
}

func (x *StorageNodeMany) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *StorageNodeMany) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *StorageNodeMany) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *StorageNodeMany) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *StorageNodeMany) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_StorageNodeMany, x)
}

const C_AdminToken int64 = 2895609620

type poolAdminToken struct {
	pool sync.Pool
}

func (p *poolAdminToken) Get() *AdminToken {
	x, ok := p.pool.Get().(*AdminToken)
	if !ok {
		x = &AdminToken{}
	}

	return x
}

func (p *poolAdminToken) Put(x *AdminToken) {
	if x == nil {
		return
	}

	x.Privilege = 0
	x.Token = ""

	p.pool.Put(x)
}

var PoolAdminToken = poolAdminToken{}

func (x *AdminToken) DeepCopy(z *AdminToken) {
	z.Privilege = x.Privilege
	z.Token = x.Token
}

func (x *AdminToken) Clone() *AdminToken {
	z := &AdminToken{}
	x.DeepCopy(z)
	return z
}

func (x *AdminToken) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AdminToken) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AdminToken) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AdminToken) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AdminToken) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AdminToken, x)
}

const C_WelcomeMessagesMany int64 = 414982091

type poolWelcomeMessagesMany struct {
	pool sync.Pool
}

func (p *poolWelcomeMessagesMany) Get() *WelcomeMessagesMany {
	x, ok := p.pool.Get().(*WelcomeMessagesMany)
	if !ok {
		x = &WelcomeMessagesMany{}
	}

	return x
}

func (p *poolWelcomeMessagesMany) Put(x *WelcomeMessagesMany) {
	if x == nil {
		return
	}

	for _, z := range x.Messages {
		PoolWelcomeMessage.Put(z)
	}
	x.Messages = x.Messages[:0]
	x.Count = 0

	p.pool.Put(x)
}

var PoolWelcomeMessagesMany = poolWelcomeMessagesMany{}

func (x *WelcomeMessagesMany) DeepCopy(z *WelcomeMessagesMany) {
	for idx := range x.Messages {
		if x.Messages[idx] == nil {
			continue
		}
		xx := PoolWelcomeMessage.Get()
		x.Messages[idx].DeepCopy(xx)
		z.Messages = append(z.Messages, xx)
	}
	z.Count = x.Count
}

func (x *WelcomeMessagesMany) Clone() *WelcomeMessagesMany {
	z := &WelcomeMessagesMany{}
	x.DeepCopy(z)
	return z
}

func (x *WelcomeMessagesMany) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *WelcomeMessagesMany) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *WelcomeMessagesMany) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *WelcomeMessagesMany) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *WelcomeMessagesMany) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_WelcomeMessagesMany, x)
}

const C_VersionsMany int64 = 2123920547

type poolVersionsMany struct {
	pool sync.Pool
}

func (p *poolVersionsMany) Get() *VersionsMany {
	x, ok := p.pool.Get().(*VersionsMany)
	if !ok {
		x = &VersionsMany{}
	}

	return x
}

func (p *poolVersionsMany) Put(x *VersionsMany) {
	if x == nil {
		return
	}

	for _, z := range x.Versions {
		PoolVersion.Put(z)
	}
	x.Versions = x.Versions[:0]
	x.Count = 0

	p.pool.Put(x)
}

var PoolVersionsMany = poolVersionsMany{}

func (x *VersionsMany) DeepCopy(z *VersionsMany) {
	for idx := range x.Versions {
		if x.Versions[idx] == nil {
			continue
		}
		xx := PoolVersion.Get()
		x.Versions[idx].DeepCopy(xx)
		z.Versions = append(z.Versions, xx)
	}
	z.Count = x.Count
}

func (x *VersionsMany) Clone() *VersionsMany {
	z := &VersionsMany{}
	x.DeepCopy(z)
	return z
}

func (x *VersionsMany) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *VersionsMany) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *VersionsMany) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *VersionsMany) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *VersionsMany) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_VersionsMany, x)
}

const C_PushProvidersMany int64 = 5873573

type poolPushProvidersMany struct {
	pool sync.Pool
}

func (p *poolPushProvidersMany) Get() *PushProvidersMany {
	x, ok := p.pool.Get().(*PushProvidersMany)
	if !ok {
		x = &PushProvidersMany{}
	}

	return x
}

func (p *poolPushProvidersMany) Put(x *PushProvidersMany) {
	if x == nil {
		return
	}

	for _, z := range x.Providers {
		PoolPushProvider.Put(z)
	}
	x.Providers = x.Providers[:0]
	x.Count = 0

	p.pool.Put(x)
}

var PoolPushProvidersMany = poolPushProvidersMany{}

func (x *PushProvidersMany) DeepCopy(z *PushProvidersMany) {
	for idx := range x.Providers {
		if x.Providers[idx] == nil {
			continue
		}
		xx := PoolPushProvider.Get()
		x.Providers[idx].DeepCopy(xx)
		z.Providers = append(z.Providers, xx)
	}
	z.Count = x.Count
}

func (x *PushProvidersMany) Clone() *PushProvidersMany {
	z := &PushProvidersMany{}
	x.DeepCopy(z)
	return z
}

func (x *PushProvidersMany) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *PushProvidersMany) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *PushProvidersMany) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *PushProvidersMany) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *PushProvidersMany) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_PushProvidersMany, x)
}

const C_WelcomeMessage int64 = 2506678571

type poolWelcomeMessage struct {
	pool sync.Pool
}

func (p *poolWelcomeMessage) Get() *WelcomeMessage {
	x, ok := p.pool.Get().(*WelcomeMessage)
	if !ok {
		x = &WelcomeMessage{}
	}

	return x
}

func (p *poolWelcomeMessage) Put(x *WelcomeMessage) {
	if x == nil {
		return
	}

	x.Lang = ""
	x.Template = ""

	p.pool.Put(x)
}

var PoolWelcomeMessage = poolWelcomeMessage{}

func (x *WelcomeMessage) DeepCopy(z *WelcomeMessage) {
	z.Lang = x.Lang
	z.Template = x.Template
}

func (x *WelcomeMessage) Clone() *WelcomeMessage {
	z := &WelcomeMessage{}
	x.DeepCopy(z)
	return z
}

func (x *WelcomeMessage) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *WelcomeMessage) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *WelcomeMessage) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *WelcomeMessage) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *WelcomeMessage) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_WelcomeMessage, x)
}

const C_PushProvider int64 = 1015984470

type poolPushProvider struct {
	pool sync.Pool
}

func (p *poolPushProvider) Get() *PushProvider {
	x, ok := p.pool.Get().(*PushProvider)
	if !ok {
		x = &PushProvider{}
	}

	return x
}

func (p *poolPushProvider) Put(x *PushProvider) {
	if x == nil {
		return
	}

	x.Name = ""
	x.Type = 0
	x.TestMode = false
	x.Credentials = x.Credentials[:0]
	x.KeyID = ""
	x.TeamID = ""
	x.Topic = ""

	p.pool.Put(x)
}

var PoolPushProvider = poolPushProvider{}

func (x *PushProvider) DeepCopy(z *PushProvider) {
	z.Name = x.Name
	z.Type = x.Type
	z.TestMode = x.TestMode
	z.Credentials = append(z.Credentials[:0], x.Credentials...)
	z.KeyID = x.KeyID
	z.TeamID = x.TeamID
	z.Topic = x.Topic
}

func (x *PushProvider) Clone() *PushProvider {
	z := &PushProvider{}
	x.DeepCopy(z)
	return z
}

func (x *PushProvider) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *PushProvider) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *PushProvider) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *PushProvider) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *PushProvider) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_PushProvider, x)
}

const C_Version int64 = 1889659487

type poolVersion struct {
	pool sync.Pool
}

func (p *poolVersion) Get() *Version {
	x, ok := p.pool.Get().(*Version)
	if !ok {
		x = &Version{}
	}

	return x
}

func (p *poolVersion) Put(x *Version) {
	if x == nil {
		return
	}

	x.Vendor = ""
	x.Stage = ""
	x.OS = ""
	x.MinVersion = ""
	x.CurrentVersion = ""
	x.ForcedVersions = x.ForcedVersions[:0]

	p.pool.Put(x)
}

var PoolVersion = poolVersion{}

func (x *Version) DeepCopy(z *Version) {
	z.Vendor = x.Vendor
	z.Stage = x.Stage
	z.OS = x.OS
	z.MinVersion = x.MinVersion
	z.CurrentVersion = x.CurrentVersion
	z.ForcedVersions = append(z.ForcedVersions[:0], x.ForcedVersions...)
}

func (x *Version) Clone() *Version {
	z := &Version{}
	x.DeepCopy(z)
	return z
}

func (x *Version) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *Version) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *Version) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *Version) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *Version) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_Version, x)
}

const C_ReservedUsernames int64 = 1388055751

type poolReservedUsernames struct {
	pool sync.Pool
}

func (p *poolReservedUsernames) Get() *ReservedUsernames {
	x, ok := p.pool.Get().(*ReservedUsernames)
	if !ok {
		x = &ReservedUsernames{}
	}

	return x
}

func (p *poolReservedUsernames) Put(x *ReservedUsernames) {
	if x == nil {
		return
	}

	x.Usernames = x.Usernames[:0]
	x.Count = 0

	p.pool.Put(x)
}

var PoolReservedUsernames = poolReservedUsernames{}

func (x *ReservedUsernames) DeepCopy(z *ReservedUsernames) {
	z.Usernames = append(z.Usernames[:0], x.Usernames...)
	z.Count = x.Count
}

func (x *ReservedUsernames) Clone() *ReservedUsernames {
	z := &ReservedUsernames{}
	x.DeepCopy(z)
	return z
}

func (x *ReservedUsernames) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ReservedUsernames) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ReservedUsernames) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ReservedUsernames) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ReservedUsernames) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ReservedUsernames, x)
}

func init() {
	registry.RegisterConstructor(3981417409, "AdminBroadcastMessage")
	registry.RegisterConstructor(1149591874, "AdminSetWelcomeMessage")
	registry.RegisterConstructor(2794709448, "AdminGetWelcomeMessages")
	registry.RegisterConstructor(3940015991, "AdminDeleteWelcomeMessage")
	registry.RegisterConstructor(1758606947, "AdminSetPushProvider")
	registry.RegisterConstructor(4257963974, "AdminGetPushProviders")
	registry.RegisterConstructor(1864898932, "AdminDeletePushProvider")
	registry.RegisterConstructor(1311023404, "AdminSetVersion")
	registry.RegisterConstructor(934752256, "AdminGetVersions")
	registry.RegisterConstructor(4159566764, "AdminSetStorageNode")
	registry.RegisterConstructor(2297643227, "AdminGetStorageNode")
	registry.RegisterConstructor(176633623, "AdminGetStorageNodes")
	registry.RegisterConstructor(1018562272, "AdminAddBannedSubnet")
	registry.RegisterConstructor(4271915141, "AdminDeleteBannedSubnet")
	registry.RegisterConstructor(937432341, "AdminGetBannedSubnets")
	registry.RegisterConstructor(1393688488, "BannedSubnets")
	registry.RegisterConstructor(2892519162, "AdminSetToken")
	registry.RegisterConstructor(3154441897, "AdminDeleteToken")
	registry.RegisterConstructor(1947723452, "AdminReserveUsername")
	registry.RegisterConstructor(1588181579, "AdminGetReservedUsernames")
	registry.RegisterConstructor(2797066608, "AdminTeamCreate")
	registry.RegisterConstructor(52432287, "AdminGetClusterInfo")
	registry.RegisterConstructor(1966993242, "StorageNode")
	registry.RegisterConstructor(2667693068, "StorageNodeMany")
	registry.RegisterConstructor(2895609620, "AdminToken")
	registry.RegisterConstructor(414982091, "WelcomeMessagesMany")
	registry.RegisterConstructor(2123920547, "VersionsMany")
	registry.RegisterConstructor(5873573, "PushProvidersMany")
	registry.RegisterConstructor(2506678571, "WelcomeMessage")
	registry.RegisterConstructor(1015984470, "PushProvider")
	registry.RegisterConstructor(1889659487, "Version")
	registry.RegisterConstructor(1388055751, "ReservedUsernames")
}

var _ = bytes.MinRead
