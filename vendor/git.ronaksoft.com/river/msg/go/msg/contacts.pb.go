// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: contacts.proto

package msg

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TopPeerCategory
type TopPeerCategory int32

const (
	TopPeerCategory_Users       TopPeerCategory = 0
	TopPeerCategory_Groups      TopPeerCategory = 1
	TopPeerCategory_Forwards    TopPeerCategory = 2
	TopPeerCategory_BotsMessage TopPeerCategory = 3
	TopPeerCategory_BotsInline  TopPeerCategory = 4
)

var TopPeerCategory_name = map[int32]string{
	0: "Users",
	1: "Groups",
	2: "Forwards",
	3: "BotsMessage",
	4: "BotsInline",
}

var TopPeerCategory_value = map[string]int32{
	"Users":       0,
	"Groups":      1,
	"Forwards":    2,
	"BotsMessage": 3,
	"BotsInline":  4,
}

func (x TopPeerCategory) String() string {
	return proto.EnumName(TopPeerCategory_name, int32(x))
}

func (TopPeerCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{0}
}

// ContactsImport
// @Function
// @Return: ContactsImported
type ContactsImport struct {
	Contacts []*PhoneContact `protobuf:"bytes,1,rep,name=Contacts,proto3" json:"Contacts,omitempty"`
	Replace  bool            `protobuf:"varint,2,opt,name=Replace,proto3" json:"Replace,omitempty"`
}

func (m *ContactsImport) Reset()         { *m = ContactsImport{} }
func (m *ContactsImport) String() string { return proto.CompactTextString(m) }
func (*ContactsImport) ProtoMessage()    {}
func (*ContactsImport) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{0}
}
func (m *ContactsImport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsImport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsImport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsImport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsImport.Merge(m, src)
}
func (m *ContactsImport) XXX_Size() int {
	return m.Size()
}
func (m *ContactsImport) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsImport.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsImport proto.InternalMessageInfo

func (m *ContactsImport) GetContacts() []*PhoneContact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *ContactsImport) GetReplace() bool {
	if m != nil {
		return m.Replace
	}
	return false
}

// ContactsAdd
// @Function
// @Return: Bool
type ContactsAdd struct {
	User      *InputUser `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
	FirstName string     `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName  string     `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName,omitempty"`
	Phone     string     `protobuf:"bytes,4,opt,name=Phone,proto3" json:"Phone,omitempty"`
}

func (m *ContactsAdd) Reset()         { *m = ContactsAdd{} }
func (m *ContactsAdd) String() string { return proto.CompactTextString(m) }
func (*ContactsAdd) ProtoMessage()    {}
func (*ContactsAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{1}
}
func (m *ContactsAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsAdd.Merge(m, src)
}
func (m *ContactsAdd) XXX_Size() int {
	return m.Size()
}
func (m *ContactsAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsAdd.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsAdd proto.InternalMessageInfo

func (m *ContactsAdd) GetUser() *InputUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ContactsAdd) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *ContactsAdd) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *ContactsAdd) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// ContactsGet
// @Function
// @Return: ContactsMany
type ContactsGet struct {
	Crc32Hash uint32 `protobuf:"varint,2,opt,name=Crc32Hash,proto3" json:"Crc32Hash,omitempty"`
}

func (m *ContactsGet) Reset()         { *m = ContactsGet{} }
func (m *ContactsGet) String() string { return proto.CompactTextString(m) }
func (*ContactsGet) ProtoMessage()    {}
func (*ContactsGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{2}
}
func (m *ContactsGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsGet.Merge(m, src)
}
func (m *ContactsGet) XXX_Size() int {
	return m.Size()
}
func (m *ContactsGet) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsGet.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsGet proto.InternalMessageInfo

func (m *ContactsGet) GetCrc32Hash() uint32 {
	if m != nil {
		return m.Crc32Hash
	}
	return 0
}

// ContactsDelete
// @Function
// @Return: Bool
type ContactsDelete struct {
	UserIDs []int64 `protobuf:"varint,1,rep,packed,name=UserIDs,proto3" json:"UserIDs,omitempty"`
}

func (m *ContactsDelete) Reset()         { *m = ContactsDelete{} }
func (m *ContactsDelete) String() string { return proto.CompactTextString(m) }
func (*ContactsDelete) ProtoMessage()    {}
func (*ContactsDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{3}
}
func (m *ContactsDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsDelete.Merge(m, src)
}
func (m *ContactsDelete) XXX_Size() int {
	return m.Size()
}
func (m *ContactsDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsDelete.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsDelete proto.InternalMessageInfo

func (m *ContactsDelete) GetUserIDs() []int64 {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

// ContactsDeleteAll
// @Function: ContactsDeleteAll
// @Return: Bool
type ContactsDeleteAll struct {
}

func (m *ContactsDeleteAll) Reset()         { *m = ContactsDeleteAll{} }
func (m *ContactsDeleteAll) String() string { return proto.CompactTextString(m) }
func (*ContactsDeleteAll) ProtoMessage()    {}
func (*ContactsDeleteAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{4}
}
func (m *ContactsDeleteAll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsDeleteAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsDeleteAll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsDeleteAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsDeleteAll.Merge(m, src)
}
func (m *ContactsDeleteAll) XXX_Size() int {
	return m.Size()
}
func (m *ContactsDeleteAll) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsDeleteAll.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsDeleteAll proto.InternalMessageInfo

// ContactsBlock
// @Function
// @Return: Bool
type ContactsBlock struct {
	User *InputUser `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
}

func (m *ContactsBlock) Reset()         { *m = ContactsBlock{} }
func (m *ContactsBlock) String() string { return proto.CompactTextString(m) }
func (*ContactsBlock) ProtoMessage()    {}
func (*ContactsBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{5}
}
func (m *ContactsBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsBlock.Merge(m, src)
}
func (m *ContactsBlock) XXX_Size() int {
	return m.Size()
}
func (m *ContactsBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsBlock proto.InternalMessageInfo

func (m *ContactsBlock) GetUser() *InputUser {
	if m != nil {
		return m.User
	}
	return nil
}

// ContactsUnblock
// @Function
// @Return: Bool
type ContactsUnblock struct {
	User *InputUser `protobuf:"bytes,2,opt,name=User,proto3" json:"User,omitempty"`
}

func (m *ContactsUnblock) Reset()         { *m = ContactsUnblock{} }
func (m *ContactsUnblock) String() string { return proto.CompactTextString(m) }
func (*ContactsUnblock) ProtoMessage()    {}
func (*ContactsUnblock) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{6}
}
func (m *ContactsUnblock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsUnblock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsUnblock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsUnblock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsUnblock.Merge(m, src)
}
func (m *ContactsUnblock) XXX_Size() int {
	return m.Size()
}
func (m *ContactsUnblock) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsUnblock.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsUnblock proto.InternalMessageInfo

func (m *ContactsUnblock) GetUser() *InputUser {
	if m != nil {
		return m.User
	}
	return nil
}

// ContactsGetBlocked
// @Function
// @Returns: BlockedContacts
type ContactsGetBlocked struct {
	Offset int32 `protobuf:"varint,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *ContactsGetBlocked) Reset()         { *m = ContactsGetBlocked{} }
func (m *ContactsGetBlocked) String() string { return proto.CompactTextString(m) }
func (*ContactsGetBlocked) ProtoMessage()    {}
func (*ContactsGetBlocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{7}
}
func (m *ContactsGetBlocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsGetBlocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsGetBlocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsGetBlocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsGetBlocked.Merge(m, src)
}
func (m *ContactsGetBlocked) XXX_Size() int {
	return m.Size()
}
func (m *ContactsGetBlocked) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsGetBlocked.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsGetBlocked proto.InternalMessageInfo

func (m *ContactsGetBlocked) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ContactsGetBlocked) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// ContactsSearch
// @Function
// @Returns: UsersMany
type ContactsSearch struct {
	Q string `protobuf:"bytes,1,opt,name=Q,proto3" json:"Q,omitempty"`
}

func (m *ContactsSearch) Reset()         { *m = ContactsSearch{} }
func (m *ContactsSearch) String() string { return proto.CompactTextString(m) }
func (*ContactsSearch) ProtoMessage()    {}
func (*ContactsSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{8}
}
func (m *ContactsSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsSearch.Merge(m, src)
}
func (m *ContactsSearch) XXX_Size() int {
	return m.Size()
}
func (m *ContactsSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsSearch.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsSearch proto.InternalMessageInfo

func (m *ContactsSearch) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

// ContactsGetTopPeers
// @Function
// @Returns: ContactsTopPeers
type ContactsGetTopPeers struct {
	Offset   int32           `protobuf:"varint,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit    int32           `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Category TopPeerCategory `protobuf:"varint,3,opt,name=Category,proto3,enum=msg.TopPeerCategory" json:"Category,omitempty"`
}

func (m *ContactsGetTopPeers) Reset()         { *m = ContactsGetTopPeers{} }
func (m *ContactsGetTopPeers) String() string { return proto.CompactTextString(m) }
func (*ContactsGetTopPeers) ProtoMessage()    {}
func (*ContactsGetTopPeers) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{9}
}
func (m *ContactsGetTopPeers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsGetTopPeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsGetTopPeers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsGetTopPeers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsGetTopPeers.Merge(m, src)
}
func (m *ContactsGetTopPeers) XXX_Size() int {
	return m.Size()
}
func (m *ContactsGetTopPeers) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsGetTopPeers.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsGetTopPeers proto.InternalMessageInfo

func (m *ContactsGetTopPeers) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ContactsGetTopPeers) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ContactsGetTopPeers) GetCategory() TopPeerCategory {
	if m != nil {
		return m.Category
	}
	return TopPeerCategory_Users
}

// ContactsResetTopPeer
// @Function
// @Returns: Bool
type ContactsResetTopPeer struct {
	Category TopPeerCategory `protobuf:"varint,1,opt,name=Category,proto3,enum=msg.TopPeerCategory" json:"Category,omitempty"`
	Peer     *InputPeer      `protobuf:"bytes,2,opt,name=Peer,proto3" json:"Peer,omitempty"`
}

func (m *ContactsResetTopPeer) Reset()         { *m = ContactsResetTopPeer{} }
func (m *ContactsResetTopPeer) String() string { return proto.CompactTextString(m) }
func (*ContactsResetTopPeer) ProtoMessage()    {}
func (*ContactsResetTopPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{10}
}
func (m *ContactsResetTopPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsResetTopPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsResetTopPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsResetTopPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsResetTopPeer.Merge(m, src)
}
func (m *ContactsResetTopPeer) XXX_Size() int {
	return m.Size()
}
func (m *ContactsResetTopPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsResetTopPeer.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsResetTopPeer proto.InternalMessageInfo

func (m *ContactsResetTopPeer) GetCategory() TopPeerCategory {
	if m != nil {
		return m.Category
	}
	return TopPeerCategory_Users
}

func (m *ContactsResetTopPeer) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// ContactsTopPeer
type ContactsTopPeers struct {
	Category TopPeerCategory `protobuf:"varint,1,opt,name=Category,proto3,enum=msg.TopPeerCategory" json:"Category,omitempty"`
	Count    int32           `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	Peers    []*TopPeer      `protobuf:"bytes,3,rep,name=Peers,proto3" json:"Peers,omitempty"`
	Users    []*User         `protobuf:"bytes,4,rep,name=Users,proto3" json:"Users,omitempty"`
	Groups   []*Group        `protobuf:"bytes,5,rep,name=Groups,proto3" json:"Groups,omitempty"`
}

func (m *ContactsTopPeers) Reset()         { *m = ContactsTopPeers{} }
func (m *ContactsTopPeers) String() string { return proto.CompactTextString(m) }
func (*ContactsTopPeers) ProtoMessage()    {}
func (*ContactsTopPeers) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{11}
}
func (m *ContactsTopPeers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsTopPeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsTopPeers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsTopPeers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsTopPeers.Merge(m, src)
}
func (m *ContactsTopPeers) XXX_Size() int {
	return m.Size()
}
func (m *ContactsTopPeers) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsTopPeers.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsTopPeers proto.InternalMessageInfo

func (m *ContactsTopPeers) GetCategory() TopPeerCategory {
	if m != nil {
		return m.Category
	}
	return TopPeerCategory_Users
}

func (m *ContactsTopPeers) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ContactsTopPeers) GetPeers() []*TopPeer {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *ContactsTopPeers) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ContactsTopPeers) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// TopPeer
type TopPeer struct {
	TeamID     int64   `protobuf:"varint,100,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	Peer       *Peer   `protobuf:"bytes,1,opt,name=Peer,proto3" json:"Peer,omitempty"`
	Rate       float32 `protobuf:"fixed32,2,opt,name=Rate,proto3" json:"Rate,omitempty"`
	LastUpdate int64   `protobuf:"varint,3,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"`
}

func (m *TopPeer) Reset()         { *m = TopPeer{} }
func (m *TopPeer) String() string { return proto.CompactTextString(m) }
func (*TopPeer) ProtoMessage()    {}
func (*TopPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{12}
}
func (m *TopPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopPeer.Merge(m, src)
}
func (m *TopPeer) XXX_Size() int {
	return m.Size()
}
func (m *TopPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_TopPeer.DiscardUnknown(m)
}

var xxx_messageInfo_TopPeer proto.InternalMessageInfo

func (m *TopPeer) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *TopPeer) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TopPeer) GetRate() float32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *TopPeer) GetLastUpdate() int64 {
	if m != nil {
		return m.LastUpdate
	}
	return 0
}

// BlockedContactsMany
type BlockedContactsMany struct {
	Contacts []*BlockedContact `protobuf:"bytes,1,rep,name=Contacts,proto3" json:"Contacts,omitempty"`
	Users    []*User           `protobuf:"bytes,2,rep,name=Users,proto3" json:"Users,omitempty"`
	Total    int32             `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (m *BlockedContactsMany) Reset()         { *m = BlockedContactsMany{} }
func (m *BlockedContactsMany) String() string { return proto.CompactTextString(m) }
func (*BlockedContactsMany) ProtoMessage()    {}
func (*BlockedContactsMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{13}
}
func (m *BlockedContactsMany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockedContactsMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockedContactsMany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockedContactsMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockedContactsMany.Merge(m, src)
}
func (m *BlockedContactsMany) XXX_Size() int {
	return m.Size()
}
func (m *BlockedContactsMany) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockedContactsMany.DiscardUnknown(m)
}

var xxx_messageInfo_BlockedContactsMany proto.InternalMessageInfo

func (m *BlockedContactsMany) GetContacts() []*BlockedContact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *BlockedContactsMany) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *BlockedContactsMany) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// BlockedContact
type BlockedContact struct {
	UserID int64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Date   int64 `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (m *BlockedContact) Reset()         { *m = BlockedContact{} }
func (m *BlockedContact) String() string { return proto.CompactTextString(m) }
func (*BlockedContact) ProtoMessage()    {}
func (*BlockedContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{14}
}
func (m *BlockedContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockedContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockedContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockedContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockedContact.Merge(m, src)
}
func (m *BlockedContact) XXX_Size() int {
	return m.Size()
}
func (m *BlockedContact) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockedContact.DiscardUnknown(m)
}

var xxx_messageInfo_BlockedContact proto.InternalMessageInfo

func (m *BlockedContact) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *BlockedContact) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// ContactsImported
type ContactsImported struct {
	ContactUsers []*ContactUser `protobuf:"bytes,1,rep,name=ContactUsers,proto3" json:"ContactUsers,omitempty"`
	Users        []*User        `protobuf:"bytes,2,rep,name=Users,proto3" json:"Users,omitempty"`
	Empty        bool           `protobuf:"varint,3,opt,name=Empty,proto3" json:"Empty,omitempty"`
}

func (m *ContactsImported) Reset()         { *m = ContactsImported{} }
func (m *ContactsImported) String() string { return proto.CompactTextString(m) }
func (*ContactsImported) ProtoMessage()    {}
func (*ContactsImported) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{15}
}
func (m *ContactsImported) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsImported) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsImported.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsImported) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsImported.Merge(m, src)
}
func (m *ContactsImported) XXX_Size() int {
	return m.Size()
}
func (m *ContactsImported) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsImported.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsImported proto.InternalMessageInfo

func (m *ContactsImported) GetContactUsers() []*ContactUser {
	if m != nil {
		return m.ContactUsers
	}
	return nil
}

func (m *ContactsImported) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ContactsImported) GetEmpty() bool {
	if m != nil {
		return m.Empty
	}
	return false
}

// ContactsMany
type ContactsMany struct {
	Contacts     []*PhoneContact `protobuf:"bytes,1,rep,name=Contacts,proto3" json:"Contacts,omitempty"`
	ContactUsers []*ContactUser  `protobuf:"bytes,2,rep,name=ContactUsers,proto3" json:"ContactUsers,omitempty"`
	Modified     bool            `protobuf:"varint,3,opt,name=Modified,proto3" json:"Modified,omitempty"`
	Users        []*User         `protobuf:"bytes,4,rep,name=Users,proto3" json:"Users,omitempty"`
	Empty        bool            `protobuf:"varint,5,opt,name=Empty,proto3" json:"Empty,omitempty"`
	Hash         uint32          `protobuf:"varint,6,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *ContactsMany) Reset()         { *m = ContactsMany{} }
func (m *ContactsMany) String() string { return proto.CompactTextString(m) }
func (*ContactsMany) ProtoMessage()    {}
func (*ContactsMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{16}
}
func (m *ContactsMany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsMany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsMany.Merge(m, src)
}
func (m *ContactsMany) XXX_Size() int {
	return m.Size()
}
func (m *ContactsMany) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsMany.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsMany proto.InternalMessageInfo

func (m *ContactsMany) GetContacts() []*PhoneContact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *ContactsMany) GetContactUsers() []*ContactUser {
	if m != nil {
		return m.ContactUsers
	}
	return nil
}

func (m *ContactsMany) GetModified() bool {
	if m != nil {
		return m.Modified
	}
	return false
}

func (m *ContactsMany) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ContactsMany) GetEmpty() bool {
	if m != nil {
		return m.Empty
	}
	return false
}

func (m *ContactsMany) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func init() {
	proto.RegisterEnum("msg.TopPeerCategory", TopPeerCategory_name, TopPeerCategory_value)
	proto.RegisterType((*ContactsImport)(nil), "msg.ContactsImport")
	proto.RegisterType((*ContactsAdd)(nil), "msg.ContactsAdd")
	proto.RegisterType((*ContactsGet)(nil), "msg.ContactsGet")
	proto.RegisterType((*ContactsDelete)(nil), "msg.ContactsDelete")
	proto.RegisterType((*ContactsDeleteAll)(nil), "msg.ContactsDeleteAll")
	proto.RegisterType((*ContactsBlock)(nil), "msg.ContactsBlock")
	proto.RegisterType((*ContactsUnblock)(nil), "msg.ContactsUnblock")
	proto.RegisterType((*ContactsGetBlocked)(nil), "msg.ContactsGetBlocked")
	proto.RegisterType((*ContactsSearch)(nil), "msg.ContactsSearch")
	proto.RegisterType((*ContactsGetTopPeers)(nil), "msg.ContactsGetTopPeers")
	proto.RegisterType((*ContactsResetTopPeer)(nil), "msg.ContactsResetTopPeer")
	proto.RegisterType((*ContactsTopPeers)(nil), "msg.ContactsTopPeers")
	proto.RegisterType((*TopPeer)(nil), "msg.TopPeer")
	proto.RegisterType((*BlockedContactsMany)(nil), "msg.BlockedContactsMany")
	proto.RegisterType((*BlockedContact)(nil), "msg.BlockedContact")
	proto.RegisterType((*ContactsImported)(nil), "msg.ContactsImported")
	proto.RegisterType((*ContactsMany)(nil), "msg.ContactsMany")
}

func init() { proto.RegisterFile("contacts.proto", fileDescriptor_72e48e1bf84d56b8) }

var fileDescriptor_72e48e1bf84d56b8 = []byte{
	// 762 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4d, 0x6f, 0xeb, 0x44,
	0x14, 0xcd, 0xc4, 0x71, 0x9a, 0xdc, 0xa4, 0xa9, 0x3b, 0x89, 0x90, 0x15, 0x15, 0x37, 0x9a, 0x55,
	0x05, 0x22, 0x54, 0x29, 0xac, 0x60, 0xd3, 0x24, 0xb4, 0x44, 0x6a, 0xa1, 0x1d, 0x5a, 0x21, 0xd8,
	0xb9, 0xf1, 0x34, 0x8d, 0xf0, 0x97, 0x3c, 0x13, 0x41, 0x17, 0x08, 0xf1, 0x0f, 0xf8, 0x4f, 0x6c,
	0x58, 0x76, 0x89, 0xde, 0xea, 0xa9, 0xfd, 0x23, 0x4f, 0xbe, 0x63, 0x3b, 0x49, 0xab, 0xf7, 0x5e,
	0xba, 0xf3, 0x3d, 0xe7, 0xce, 0xb9, 0xf7, 0x9e, 0xf9, 0x30, 0xb4, 0xa6, 0x51, 0xa8, 0xdc, 0xa9,
	0x92, 0xfd, 0x38, 0x89, 0x54, 0x44, 0x8d, 0x40, 0xce, 0xba, 0xd6, 0x34, 0x4a, 0x44, 0x5f, 0xdd,
	0xc7, 0x22, 0x83, 0xd9, 0x2f, 0xd0, 0x1a, 0x65, 0x89, 0x93, 0x20, 0x8e, 0x12, 0x45, 0xbf, 0x80,
	0x5a, 0x8e, 0xd8, 0xa4, 0x67, 0x1c, 0x34, 0x06, 0xbb, 0xfd, 0x40, 0xce, 0xfa, 0x17, 0x77, 0x51,
	0x28, 0x32, 0x86, 0x17, 0x29, 0xd4, 0x86, 0x2d, 0x2e, 0x62, 0xdf, 0x9d, 0x0a, 0xbb, 0xdc, 0x23,
	0x07, 0x35, 0x9e, 0x87, 0xec, 0x6f, 0x02, 0x8d, 0x3c, 0xed, 0xd8, 0xf3, 0x28, 0x83, 0xca, 0xb5,
	0x14, 0x89, 0x4d, 0x7a, 0xe4, 0xa0, 0x31, 0x68, 0xa1, 0xe8, 0x24, 0x8c, 0x17, 0x2a, 0x45, 0x39,
	0x72, 0x74, 0x0f, 0xea, 0x27, 0xf3, 0x44, 0xaa, 0x1f, 0xdc, 0x40, 0xeb, 0xd5, 0xf9, 0x12, 0xa0,
	0x5d, 0xa8, 0x9d, 0xb9, 0x19, 0x69, 0x20, 0x59, 0xc4, 0xb4, 0x03, 0x26, 0x76, 0x68, 0x57, 0x90,
	0xd0, 0x01, 0xfb, 0x7c, 0xd9, 0xc2, 0xa9, 0x50, 0xa9, 0xfc, 0x28, 0x99, 0x1e, 0x0d, 0xbe, 0x77,
	0xe5, 0x1d, 0xca, 0x6f, 0xf3, 0x25, 0xc0, 0xfa, 0x4b, 0x2f, 0xc6, 0xc2, 0x17, 0x4a, 0xd0, 0x3d,
	0xd8, 0x4a, 0xdb, 0x9a, 0x8c, 0xb5, 0x15, 0xc6, 0xb0, 0x7c, 0x48, 0x78, 0x0e, 0xb1, 0x36, 0xec,
	0xae, 0xe7, 0x1f, 0xfb, 0x3e, 0x3b, 0x82, 0xed, 0x1c, 0x1c, 0xfa, 0xd1, 0xf4, 0xb7, 0x4d, 0xc6,
	0x66, 0x5f, 0xc3, 0x4e, 0xbe, 0xe8, 0x3a, 0xbc, 0x59, 0x5b, 0x56, 0xfe, 0xc0, 0xb2, 0x21, 0xd0,
	0x95, 0xe9, 0xb0, 0x9c, 0xf0, 0xe8, 0x27, 0x50, 0xfd, 0xf1, 0xf6, 0x56, 0x0a, 0x85, 0x25, 0x4d,
	0x9e, 0x45, 0xa9, 0x43, 0x67, 0xf3, 0x60, 0xae, 0x50, 0xd2, 0xe4, 0x3a, 0x60, 0xce, 0x72, 0xe8,
	0x9f, 0x84, 0x9b, 0x4c, 0xef, 0x68, 0x13, 0xc8, 0x25, 0x2e, 0xad, 0x73, 0x72, 0xc9, 0x16, 0xd0,
	0x5e, 0xa9, 0x71, 0x15, 0xc5, 0x17, 0x42, 0x24, 0xf2, 0x75, 0x45, 0xe8, 0x21, 0xd4, 0x46, 0xae,
	0x12, 0xb3, 0x28, 0xb9, 0xc7, 0x8d, 0x6b, 0x0d, 0x3a, 0x38, 0x50, 0x26, 0x97, 0x73, 0xbc, 0xc8,
	0x62, 0x3e, 0x74, 0xf2, 0xb2, 0x5c, 0xc8, 0xa2, 0xf0, 0x9a, 0x12, 0xd9, 0x44, 0x29, 0x35, 0x32,
	0x65, 0x5e, 0x1a, 0x99, 0xa2, 0x1c, 0x39, 0xf6, 0x2f, 0x01, 0x2b, 0x2f, 0x57, 0x8c, 0xf8, 0xfa,
	0x52, 0x1d, 0x30, 0x47, 0xd1, 0x22, 0x2c, 0x86, 0xc7, 0x80, 0x32, 0x30, 0x51, 0xd0, 0x36, 0xf0,
	0x36, 0x35, 0x57, 0x45, 0xb8, 0xa6, 0xe8, 0x3e, 0x98, 0xe9, 0x8e, 0x4a, 0xbb, 0x82, 0x39, 0x75,
	0xcc, 0xc1, 0x9d, 0xd6, 0x38, 0x65, 0x50, 0x3d, 0x4d, 0xa2, 0x45, 0x2c, 0x6d, 0x13, 0x33, 0x00,
	0x33, 0x10, 0xe2, 0x19, 0xc3, 0xfe, 0x80, 0xad, 0xdc, 0xa6, 0x2e, 0x54, 0xaf, 0x84, 0x1b, 0x4c,
	0xc6, 0xb6, 0xd7, 0x23, 0xd9, 0xb9, 0xcd, 0x10, 0xfa, 0x69, 0x66, 0x88, 0x3e, 0x90, 0xba, 0xd4,
	0xd2, 0x0b, 0x4a, 0xa1, 0xc2, 0x5d, 0xa5, 0x6f, 0x5f, 0x99, 0xe3, 0x37, 0x75, 0x00, 0xd2, 0x8b,
	0x76, 0x1d, 0x7b, 0x29, 0x93, 0xee, 0xa0, 0xc1, 0x57, 0x10, 0xf6, 0x27, 0xb4, 0xb3, 0xd3, 0x97,
	0xbb, 0x78, 0xee, 0x86, 0xf7, 0xf4, 0xcb, 0x17, 0x4f, 0x49, 0x1b, 0xab, 0xad, 0xe7, 0xae, 0x3c,
	0x26, 0x85, 0x0d, 0xe5, 0xf7, 0xd8, 0xd0, 0x01, 0xf3, 0x2a, 0x52, 0xae, 0x8f, 0x3d, 0x98, 0x5c,
	0x07, 0xec, 0x5b, 0x68, 0xad, 0x4b, 0xa6, 0xc7, 0x53, 0xdf, 0x52, 0x9c, 0xd2, 0xe0, 0x59, 0x94,
	0x0e, 0x37, 0xce, 0x87, 0x33, 0x38, 0x7e, 0xb3, 0xbf, 0x96, 0x7b, 0xaf, 0x9f, 0x40, 0xe1, 0xd1,
	0xaf, 0xa0, 0x99, 0x61, 0xba, 0x1f, 0xdd, 0xbd, 0x85, 0xfd, 0xac, 0x10, 0x7c, 0x2d, 0x6b, 0xa3,
	0xf6, 0xbf, 0x0b, 0x62, 0xa5, 0x2f, 0x41, 0x8d, 0xeb, 0x80, 0xbd, 0x21, 0x45, 0x35, 0xed, 0xdb,
	0x2b, 0x9f, 0xe0, 0xe7, 0xcd, 0x96, 0x37, 0x6a, 0xb6, 0x0b, 0xb5, 0xf3, 0xc8, 0x9b, 0xdf, 0xce,
	0x85, 0x97, 0xb5, 0x53, 0xc4, 0x1f, 0x3f, 0x8e, 0xc5, 0x20, 0xe6, 0xca, 0x20, 0xa9, 0xbb, 0xf8,
	0xb2, 0x56, 0xf1, 0x65, 0xc5, 0xef, 0xcf, 0x7e, 0x86, 0x9d, 0x67, 0x17, 0x86, 0xd6, 0x33, 0x75,
	0xab, 0x44, 0x21, 0x3f, 0xd6, 0x16, 0xa1, 0x4d, 0xa8, 0x9d, 0x44, 0xc9, 0xef, 0x6e, 0xe2, 0x49,
	0xab, 0x4c, 0x77, 0xa0, 0x31, 0x8c, 0x94, 0x3c, 0x17, 0x52, 0xba, 0x33, 0x61, 0x19, 0xb4, 0x05,
	0x90, 0x02, 0x93, 0xd0, 0x9f, 0x87, 0xc2, 0xaa, 0x0c, 0xf7, 0xff, 0x7b, 0x74, 0xc8, 0xc3, 0xa3,
	0x43, 0xde, 0x3e, 0x3a, 0xe4, 0x9f, 0x27, 0xa7, 0xf4, 0xf0, 0xe4, 0x94, 0xfe, 0x7f, 0x72, 0x4a,
	0xbf, 0x9a, 0xfd, 0x6f, 0x02, 0x39, 0xbb, 0xa9, 0xe2, 0x1f, 0xee, 0xe8, 0x5d, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x67, 0x61, 0x05, 0x8e, 0x0a, 0x07, 0x00, 0x00,
}

func (m *ContactsImport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsImport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsImport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Replace {
		i--
		if m.Replace {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContactsAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintContacts(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintContacts(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintContacts(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContacts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactsGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Crc32Hash != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Crc32Hash))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ContactsDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		dAtA3 := make([]byte, len(m.UserIDs)*10)
		var j2 int
		for _, num1 := range m.UserIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintContacts(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactsDeleteAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsDeleteAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsDeleteAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ContactsBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContacts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactsUnblock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsUnblock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsUnblock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContacts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ContactsGetBlocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetBlocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsGetBlocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContactsSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Q) > 0 {
		i -= len(m.Q)
		copy(dAtA[i:], m.Q)
		i = encodeVarintContacts(dAtA, i, uint64(len(m.Q)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactsGetTopPeers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetTopPeers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsGetTopPeers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Category != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContactsResetTopPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsResetTopPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsResetTopPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContacts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Category != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContactsTopPeers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsTopPeers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsTopPeers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Count != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Category != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.LastUpdate != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.LastUpdate))
		i--
		dAtA[i] = 0x18
	}
	if m.Rate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rate))))
		i--
		dAtA[i] = 0x15
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContacts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockedContactsMany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockedContactsMany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockedContactsMany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockedContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockedContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockedContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Date != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContactsImported) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsImported) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsImported) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Empty {
		i--
		if m.Empty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ContactUsers) > 0 {
		for iNdEx := len(m.ContactUsers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContactUsers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContactsMany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsMany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsMany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x30
	}
	if m.Empty {
		i--
		if m.Empty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Modified {
		i--
		if m.Modified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContactUsers) > 0 {
		for iNdEx := len(m.ContactUsers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContactUsers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintContacts(dAtA []byte, offset int, v uint64) int {
	offset -= sovContacts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContactsImport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	if m.Replace {
		n += 2
	}
	return n
}

func (m *ContactsAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovContacts(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovContacts(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovContacts(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovContacts(uint64(l))
	}
	return n
}

func (m *ContactsGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Crc32Hash != 0 {
		n += 1 + sovContacts(uint64(m.Crc32Hash))
	}
	return n
}

func (m *ContactsDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		l = 0
		for _, e := range m.UserIDs {
			l += sovContacts(uint64(e))
		}
		n += 1 + sovContacts(uint64(l)) + l
	}
	return n
}

func (m *ContactsDeleteAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ContactsBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovContacts(uint64(l))
	}
	return n
}

func (m *ContactsUnblock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovContacts(uint64(l))
	}
	return n
}

func (m *ContactsGetBlocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovContacts(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovContacts(uint64(m.Limit))
	}
	return n
}

func (m *ContactsSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovContacts(uint64(l))
	}
	return n
}

func (m *ContactsGetTopPeers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovContacts(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovContacts(uint64(m.Limit))
	}
	if m.Category != 0 {
		n += 1 + sovContacts(uint64(m.Category))
	}
	return n
}

func (m *ContactsResetTopPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Category != 0 {
		n += 1 + sovContacts(uint64(m.Category))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovContacts(uint64(l))
	}
	return n
}

func (m *ContactsTopPeers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Category != 0 {
		n += 1 + sovContacts(uint64(m.Category))
	}
	if m.Count != 0 {
		n += 1 + sovContacts(uint64(m.Count))
	}
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	return n
}

func (m *TopPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovContacts(uint64(l))
	}
	if m.Rate != 0 {
		n += 5
	}
	if m.LastUpdate != 0 {
		n += 1 + sovContacts(uint64(m.LastUpdate))
	}
	if m.TeamID != 0 {
		n += 2 + sovContacts(uint64(m.TeamID))
	}
	return n
}

func (m *BlockedContactsMany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovContacts(uint64(m.Total))
	}
	return n
}

func (m *BlockedContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovContacts(uint64(m.UserID))
	}
	if m.Date != 0 {
		n += 1 + sovContacts(uint64(m.Date))
	}
	return n
}

func (m *ContactsImported) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContactUsers) > 0 {
		for _, e := range m.ContactUsers {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	if m.Empty {
		n += 2
	}
	return n
}

func (m *ContactsMany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	if len(m.ContactUsers) > 0 {
		for _, e := range m.ContactUsers {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	if m.Modified {
		n += 2
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	if m.Empty {
		n += 2
	}
	if m.Hash != 0 {
		n += 1 + sovContacts(uint64(m.Hash))
	}
	return n
}

func sovContacts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContacts(x uint64) (n int) {
	return sovContacts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContactsImport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsImport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsImport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &PhoneContact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Replace = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &InputUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc32Hash", wireType)
			}
			m.Crc32Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc32Hash |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIDs = append(m.UserIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthContacts
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthContacts
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIDs) == 0 {
					m.UserIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowContacts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIDs = append(m.UserIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsDeleteAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsDeleteAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsDeleteAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &InputUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsUnblock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsUnblock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsUnblock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &InputUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetBlocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetBlocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetBlocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetTopPeers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetTopPeers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetTopPeers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= TopPeerCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsResetTopPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsResetTopPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsResetTopPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= TopPeerCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsTopPeers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsTopPeers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsTopPeers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= TopPeerCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &TopPeer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rate = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdate", wireType)
			}
			m.LastUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockedContactsMany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockedContactsMany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockedContactsMany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &BlockedContact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockedContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockedContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockedContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsImported) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsImported: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsImported: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactUsers = append(m.ContactUsers, &ContactUser{})
			if err := m.ContactUsers[len(m.ContactUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Empty = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsMany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsMany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsMany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &PhoneContact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactUsers = append(m.ContactUsers, &ContactUser{})
			if err := m.ContactUsers[len(m.ContactUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Modified = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Empty = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContacts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContacts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContacts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContacts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContacts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContacts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContacts = fmt.Errorf("proto: unexpected end of group")
)
