// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client.proto

package msg

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ClientFileType
type ClientFileType int32

const (
	Unknown             ClientFileType = 0
	Message             ClientFileType = 1
	AccountProfilePhoto ClientFileType = 2
	GroupProfilePhoto   ClientFileType = 3
	Sticker             ClientFileType = 4
	Thumbnail           ClientFileType = 5
	Wallpaper           ClientFileType = 6
	Gif                 ClientFileType = 7
)

var ClientFileType_name = map[int32]string{
	0: "Unknown",
	1: "Message",
	2: "AccountProfilePhoto",
	3: "GroupProfilePhoto",
	4: "Sticker",
	5: "Thumbnail",
	6: "Wallpaper",
	7: "Gif",
}

var ClientFileType_value = map[string]int32{
	"Unknown":             0,
	"Message":             1,
	"AccountProfilePhoto": 2,
	"GroupProfilePhoto":   3,
	"Sticker":             4,
	"Thumbnail":           5,
	"Wallpaper":           6,
	"Gif":                 7,
}

func (x ClientFileType) String() string {
	return proto.EnumName(ClientFileType_name, int32(x))
}

func (ClientFileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{0}
}

// ClientMediaType
type ClientMediaType int32

const (
	ClientMediaNone  ClientMediaType = 0
	ClientMediaFile  ClientMediaType = 1
	ClientMediaMedia ClientMediaType = 2
	ClientMediaVoice ClientMediaType = 3
	ClientMediaAudio ClientMediaType = 4
	ClientMediaLink  ClientMediaType = 5
	ClientMediaGif   ClientMediaType = 6
)

var ClientMediaType_name = map[int32]string{
	0: "ClientMediaNone",
	1: "ClientMediaFile",
	2: "ClientMediaMedia",
	3: "ClientMediaVoice",
	4: "ClientMediaAudio",
	5: "ClientMediaLink",
	6: "ClientMediaGif",
}

var ClientMediaType_value = map[string]int32{
	"ClientMediaNone":  0,
	"ClientMediaFile":  1,
	"ClientMediaMedia": 2,
	"ClientMediaVoice": 3,
	"ClientMediaAudio": 4,
	"ClientMediaLink":  5,
	"ClientMediaGif":   6,
}

func (x ClientMediaType) String() string {
	return proto.EnumName(ClientMediaType_name, int32(x))
}

func (ClientMediaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{1}
}

// ClientSendMessageMedia
// @Function
type ClientSendMessageMedia struct {
	Peer           *InputPeer           `protobuf:"bytes,1,opt,name=Peer,proto3" json:"Peer,omitempty"`
	MediaType      InputMediaType       `protobuf:"varint,2,opt,name=MediaType,proto3,enum=msg.InputMediaType" json:"MediaType,omitempty"`
	Caption        string               `protobuf:"bytes,3,opt,name=Caption,proto3" json:"Caption,omitempty"`
	FileName       string               `protobuf:"bytes,4,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FilePath       string               `protobuf:"bytes,5,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	ThumbFilePath  string               `protobuf:"bytes,6,opt,name=ThumbFilePath,proto3" json:"ThumbFilePath,omitempty"`
	FileMIME       string               `protobuf:"bytes,7,opt,name=FileMIME,proto3" json:"FileMIME,omitempty"`
	ThumbMIME      string               `protobuf:"bytes,8,opt,name=ThumbMIME,proto3" json:"ThumbMIME,omitempty"`
	ReplyTo        int64                `protobuf:"varint,9,opt,name=ReplyTo,proto3" json:"ReplyTo,omitempty"`
	ClearDraft     bool                 `protobuf:"varint,10,opt,name=ClearDraft,proto3" json:"ClearDraft,omitempty"`
	Attributes     []*DocumentAttribute `protobuf:"bytes,11,rep,name=Attributes,proto3" json:"Attributes,omitempty"`
	FileUploadID   string               `protobuf:"bytes,12,opt,name=FileUploadID,proto3" json:"FileUploadID,omitempty"`
	ThumbUploadID  string               `protobuf:"bytes,13,opt,name=ThumbUploadID,proto3" json:"ThumbUploadID,omitempty"`
	FileID         int64                `protobuf:"varint,14,opt,name=FileID,proto3" json:"FileID,omitempty"`
	ThumbID        int64                `protobuf:"varint,15,opt,name=ThumbID,proto3" json:"ThumbID,omitempty"`
	FileTotalParts int32                `protobuf:"varint,16,opt,name=FileTotalParts,proto3" json:"FileTotalParts,omitempty"`
	Entities       []*MessageEntity     `protobuf:"bytes,17,rep,name=Entities,proto3" json:"Entities,omitempty"`
	TinyThumb      []byte               `protobuf:"bytes,18,opt,name=TinyThumb,proto3" json:"TinyThumb,omitempty"`
}

func (m *ClientSendMessageMedia) Reset()         { *m = ClientSendMessageMedia{} }
func (m *ClientSendMessageMedia) String() string { return proto.CompactTextString(m) }
func (*ClientSendMessageMedia) ProtoMessage()    {}
func (*ClientSendMessageMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{0}
}
func (m *ClientSendMessageMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSendMessageMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientSendMessageMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientSendMessageMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSendMessageMedia.Merge(m, src)
}
func (m *ClientSendMessageMedia) XXX_Size() int {
	return m.Size()
}
func (m *ClientSendMessageMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSendMessageMedia.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSendMessageMedia proto.InternalMessageInfo

func (m *ClientSendMessageMedia) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ClientSendMessageMedia) GetMediaType() InputMediaType {
	if m != nil {
		return m.MediaType
	}
	return InputMediaTypeEmpty
}

func (m *ClientSendMessageMedia) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ClientSendMessageMedia) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ClientSendMessageMedia) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *ClientSendMessageMedia) GetThumbFilePath() string {
	if m != nil {
		return m.ThumbFilePath
	}
	return ""
}

func (m *ClientSendMessageMedia) GetFileMIME() string {
	if m != nil {
		return m.FileMIME
	}
	return ""
}

func (m *ClientSendMessageMedia) GetThumbMIME() string {
	if m != nil {
		return m.ThumbMIME
	}
	return ""
}

func (m *ClientSendMessageMedia) GetReplyTo() int64 {
	if m != nil {
		return m.ReplyTo
	}
	return 0
}

func (m *ClientSendMessageMedia) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *ClientSendMessageMedia) GetAttributes() []*DocumentAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ClientSendMessageMedia) GetFileUploadID() string {
	if m != nil {
		return m.FileUploadID
	}
	return ""
}

func (m *ClientSendMessageMedia) GetThumbUploadID() string {
	if m != nil {
		return m.ThumbUploadID
	}
	return ""
}

func (m *ClientSendMessageMedia) GetFileID() int64 {
	if m != nil {
		return m.FileID
	}
	return 0
}

func (m *ClientSendMessageMedia) GetThumbID() int64 {
	if m != nil {
		return m.ThumbID
	}
	return 0
}

func (m *ClientSendMessageMedia) GetFileTotalParts() int32 {
	if m != nil {
		return m.FileTotalParts
	}
	return 0
}

func (m *ClientSendMessageMedia) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ClientSendMessageMedia) GetTinyThumb() []byte {
	if m != nil {
		return m.TinyThumb
	}
	return nil
}

// ClientGlobalSearch
// @Function
// @Return: ClientSearchResult
type ClientGlobalSearch struct {
	Text     string     `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
	LabelIDs []int32    `protobuf:"varint,2,rep,packed,name=LabelIDs,proto3" json:"LabelIDs,omitempty"`
	Peer     *InputPeer `protobuf:"bytes,3,opt,name=Peer,proto3" json:"Peer,omitempty"`
	Limit    int32      `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	SenderID int64      `protobuf:"varint,5,opt,name=SenderID,proto3" json:"SenderID,omitempty"`
}

func (m *ClientGlobalSearch) Reset()         { *m = ClientGlobalSearch{} }
func (m *ClientGlobalSearch) String() string { return proto.CompactTextString(m) }
func (*ClientGlobalSearch) ProtoMessage()    {}
func (*ClientGlobalSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{1}
}
func (m *ClientGlobalSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientGlobalSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientGlobalSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientGlobalSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientGlobalSearch.Merge(m, src)
}
func (m *ClientGlobalSearch) XXX_Size() int {
	return m.Size()
}
func (m *ClientGlobalSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientGlobalSearch.DiscardUnknown(m)
}

var xxx_messageInfo_ClientGlobalSearch proto.InternalMessageInfo

func (m *ClientGlobalSearch) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ClientGlobalSearch) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

func (m *ClientGlobalSearch) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ClientGlobalSearch) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ClientGlobalSearch) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

// ClientContactSearch
// @Function
// @Return: ClientSearchResult
type ClientContactSearch struct {
	Text string `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (m *ClientContactSearch) Reset()         { *m = ClientContactSearch{} }
func (m *ClientContactSearch) String() string { return proto.CompactTextString(m) }
func (*ClientContactSearch) ProtoMessage()    {}
func (*ClientContactSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{2}
}
func (m *ClientContactSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientContactSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientContactSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientContactSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientContactSearch.Merge(m, src)
}
func (m *ClientContactSearch) XXX_Size() int {
	return m.Size()
}
func (m *ClientContactSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientContactSearch.DiscardUnknown(m)
}

var xxx_messageInfo_ClientContactSearch proto.InternalMessageInfo

func (m *ClientContactSearch) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// ClientGetCachedMedia
// @Function
// @Return: ClientCachedMedia
type ClientGetCachedMedia struct {
}

func (m *ClientGetCachedMedia) Reset()         { *m = ClientGetCachedMedia{} }
func (m *ClientGetCachedMedia) String() string { return proto.CompactTextString(m) }
func (*ClientGetCachedMedia) ProtoMessage()    {}
func (*ClientGetCachedMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{3}
}
func (m *ClientGetCachedMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientGetCachedMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientGetCachedMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientGetCachedMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientGetCachedMedia.Merge(m, src)
}
func (m *ClientGetCachedMedia) XXX_Size() int {
	return m.Size()
}
func (m *ClientGetCachedMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientGetCachedMedia.DiscardUnknown(m)
}

var xxx_messageInfo_ClientGetCachedMedia proto.InternalMessageInfo

// ClientClearCachedMedia
// @Function
// @Return: Bool
type ClientClearCachedMedia struct {
	Peer       *InputPeer        `protobuf:"bytes,1,opt,name=Peer,proto3" json:"Peer,omitempty"`
	MediaTypes []ClientMediaType `protobuf:"varint,2,rep,packed,name=MediaTypes,proto3,enum=msg.ClientMediaType" json:"MediaTypes,omitempty"`
}

func (m *ClientClearCachedMedia) Reset()         { *m = ClientClearCachedMedia{} }
func (m *ClientClearCachedMedia) String() string { return proto.CompactTextString(m) }
func (*ClientClearCachedMedia) ProtoMessage()    {}
func (*ClientClearCachedMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{4}
}
func (m *ClientClearCachedMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientClearCachedMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientClearCachedMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientClearCachedMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientClearCachedMedia.Merge(m, src)
}
func (m *ClientClearCachedMedia) XXX_Size() int {
	return m.Size()
}
func (m *ClientClearCachedMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientClearCachedMedia.DiscardUnknown(m)
}

var xxx_messageInfo_ClientClearCachedMedia proto.InternalMessageInfo

func (m *ClientClearCachedMedia) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ClientClearCachedMedia) GetMediaTypes() []ClientMediaType {
	if m != nil {
		return m.MediaTypes
	}
	return nil
}

// ClientGetLastBotKeyboard
// @Return: UserMessage
type ClientGetLastBotKeyboard struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=Peer,proto3" json:"Peer,omitempty"`
}

func (m *ClientGetLastBotKeyboard) Reset()         { *m = ClientGetLastBotKeyboard{} }
func (m *ClientGetLastBotKeyboard) String() string { return proto.CompactTextString(m) }
func (*ClientGetLastBotKeyboard) ProtoMessage()    {}
func (*ClientGetLastBotKeyboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{5}
}
func (m *ClientGetLastBotKeyboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientGetLastBotKeyboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientGetLastBotKeyboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientGetLastBotKeyboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientGetLastBotKeyboard.Merge(m, src)
}
func (m *ClientGetLastBotKeyboard) XXX_Size() int {
	return m.Size()
}
func (m *ClientGetLastBotKeyboard) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientGetLastBotKeyboard.DiscardUnknown(m)
}

var xxx_messageInfo_ClientGetLastBotKeyboard proto.InternalMessageInfo

func (m *ClientGetLastBotKeyboard) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// ClientGetMediaHistory
// @Function
// @Return: MessagesMany
type ClientGetMediaHistory struct {
	MediaType ClientMediaType `protobuf:"varint,1,opt,name=MediaType,proto3,enum=msg.ClientMediaType" json:"MediaType,omitempty"`
}

func (m *ClientGetMediaHistory) Reset()         { *m = ClientGetMediaHistory{} }
func (m *ClientGetMediaHistory) String() string { return proto.CompactTextString(m) }
func (*ClientGetMediaHistory) ProtoMessage()    {}
func (*ClientGetMediaHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{6}
}
func (m *ClientGetMediaHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientGetMediaHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientGetMediaHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientGetMediaHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientGetMediaHistory.Merge(m, src)
}
func (m *ClientGetMediaHistory) XXX_Size() int {
	return m.Size()
}
func (m *ClientGetMediaHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientGetMediaHistory.DiscardUnknown(m)
}

var xxx_messageInfo_ClientGetMediaHistory proto.InternalMessageInfo

func (m *ClientGetMediaHistory) GetMediaType() ClientMediaType {
	if m != nil {
		return m.MediaType
	}
	return ClientMediaNone
}

// ClientGetRecentSearch
// @Function
// @Return: RecentSearchMany
type ClientGetRecentSearch struct {
	Limit int32 `protobuf:"varint,1,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *ClientGetRecentSearch) Reset()         { *m = ClientGetRecentSearch{} }
func (m *ClientGetRecentSearch) String() string { return proto.CompactTextString(m) }
func (*ClientGetRecentSearch) ProtoMessage()    {}
func (*ClientGetRecentSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{7}
}
func (m *ClientGetRecentSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientGetRecentSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientGetRecentSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientGetRecentSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientGetRecentSearch.Merge(m, src)
}
func (m *ClientGetRecentSearch) XXX_Size() int {
	return m.Size()
}
func (m *ClientGetRecentSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientGetRecentSearch.DiscardUnknown(m)
}

var xxx_messageInfo_ClientGetRecentSearch proto.InternalMessageInfo

func (m *ClientGetRecentSearch) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// ClientPutRecentSearch
// @Function
// @Return: Bool
type ClientPutRecentSearch struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=Peer,proto3" json:"Peer,omitempty"`
}

func (m *ClientPutRecentSearch) Reset()         { *m = ClientPutRecentSearch{} }
func (m *ClientPutRecentSearch) String() string { return proto.CompactTextString(m) }
func (*ClientPutRecentSearch) ProtoMessage()    {}
func (*ClientPutRecentSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{8}
}
func (m *ClientPutRecentSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientPutRecentSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientPutRecentSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientPutRecentSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientPutRecentSearch.Merge(m, src)
}
func (m *ClientPutRecentSearch) XXX_Size() int {
	return m.Size()
}
func (m *ClientPutRecentSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientPutRecentSearch.DiscardUnknown(m)
}

var xxx_messageInfo_ClientPutRecentSearch proto.InternalMessageInfo

func (m *ClientPutRecentSearch) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// ClientPutRecentSearch
// @Function
// @Return: Bool
type ClientRemoveRecentSearch struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=Peer,proto3" json:"Peer,omitempty"`
}

func (m *ClientRemoveRecentSearch) Reset()         { *m = ClientRemoveRecentSearch{} }
func (m *ClientRemoveRecentSearch) String() string { return proto.CompactTextString(m) }
func (*ClientRemoveRecentSearch) ProtoMessage()    {}
func (*ClientRemoveRecentSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{9}
}
func (m *ClientRemoveRecentSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientRemoveRecentSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientRemoveRecentSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientRemoveRecentSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRemoveRecentSearch.Merge(m, src)
}
func (m *ClientRemoveRecentSearch) XXX_Size() int {
	return m.Size()
}
func (m *ClientRemoveRecentSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRemoveRecentSearch.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRemoveRecentSearch proto.InternalMessageInfo

func (m *ClientRemoveRecentSearch) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// ClientRemoveAllRecentSearches
// @Function
// @Return: Bool
type ClientRemoveAllRecentSearches struct {
	Extra bool `protobuf:"varint,1,opt,name=Extra,proto3" json:"Extra,omitempty"`
}

func (m *ClientRemoveAllRecentSearches) Reset()         { *m = ClientRemoveAllRecentSearches{} }
func (m *ClientRemoveAllRecentSearches) String() string { return proto.CompactTextString(m) }
func (*ClientRemoveAllRecentSearches) ProtoMessage()    {}
func (*ClientRemoveAllRecentSearches) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{10}
}
func (m *ClientRemoveAllRecentSearches) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientRemoveAllRecentSearches) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientRemoveAllRecentSearches.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientRemoveAllRecentSearches) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRemoveAllRecentSearches.Merge(m, src)
}
func (m *ClientRemoveAllRecentSearches) XXX_Size() int {
	return m.Size()
}
func (m *ClientRemoveAllRecentSearches) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRemoveAllRecentSearches.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRemoveAllRecentSearches proto.InternalMessageInfo

func (m *ClientRemoveAllRecentSearches) GetExtra() bool {
	if m != nil {
		return m.Extra
	}
	return false
}

// ClientGetSavedGifs
// @Function
// @Return: ClientFilesMany
type ClientGetSavedGifs struct {
}

func (m *ClientGetSavedGifs) Reset()         { *m = ClientGetSavedGifs{} }
func (m *ClientGetSavedGifs) String() string { return proto.CompactTextString(m) }
func (*ClientGetSavedGifs) ProtoMessage()    {}
func (*ClientGetSavedGifs) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{11}
}
func (m *ClientGetSavedGifs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientGetSavedGifs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientGetSavedGifs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientGetSavedGifs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientGetSavedGifs.Merge(m, src)
}
func (m *ClientGetSavedGifs) XXX_Size() int {
	return m.Size()
}
func (m *ClientGetSavedGifs) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientGetSavedGifs.DiscardUnknown(m)
}

var xxx_messageInfo_ClientGetSavedGifs proto.InternalMessageInfo

// ClientGetTeamCounters
// @Function
// @Return: ClientTeamCounters
type ClientGetTeamCounters struct {
	Team      *InputTeam `protobuf:"bytes,1,opt,name=Team,proto3" json:"Team,omitempty"`
	WithMutes bool       `protobuf:"varint,2,opt,name=WithMutes,proto3" json:"WithMutes,omitempty"`
}

func (m *ClientGetTeamCounters) Reset()         { *m = ClientGetTeamCounters{} }
func (m *ClientGetTeamCounters) String() string { return proto.CompactTextString(m) }
func (*ClientGetTeamCounters) ProtoMessage()    {}
func (*ClientGetTeamCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{12}
}
func (m *ClientGetTeamCounters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientGetTeamCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientGetTeamCounters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientGetTeamCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientGetTeamCounters.Merge(m, src)
}
func (m *ClientGetTeamCounters) XXX_Size() int {
	return m.Size()
}
func (m *ClientGetTeamCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientGetTeamCounters.DiscardUnknown(m)
}

var xxx_messageInfo_ClientGetTeamCounters proto.InternalMessageInfo

func (m *ClientGetTeamCounters) GetTeam() *InputTeam {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *ClientGetTeamCounters) GetWithMutes() bool {
	if m != nil {
		return m.WithMutes
	}
	return false
}

// ClientPendingMessage
type ClientPendingMessage struct {
	ID             int64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RequestID      int64            `protobuf:"varint,2,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	PeerID         int64            `protobuf:"varint,3,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	PeerType       int32            `protobuf:"varint,4,opt,name=PeerType,proto3" json:"PeerType,omitempty"`
	AccessHash     uint64           `protobuf:"fixed64,5,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	CreatedOn      int64            `protobuf:"varint,6,opt,name=CreatedOn,proto3" json:"CreatedOn,omitempty"`
	ReplyTo        int64            `protobuf:"varint,7,opt,name=ReplyTo,proto3" json:"ReplyTo,omitempty"`
	Body           string           `protobuf:"bytes,8,opt,name=Body,proto3" json:"Body,omitempty"`
	SenderID       int64            `protobuf:"varint,9,opt,name=SenderID,proto3" json:"SenderID,omitempty"`
	Entities       []*MessageEntity `protobuf:"bytes,10,rep,name=Entities,proto3" json:"Entities,omitempty"`
	MediaType      InputMediaType   `protobuf:"varint,11,opt,name=MediaType,proto3,enum=msg.InputMediaType" json:"MediaType,omitempty"`
	Media          []byte           `protobuf:"bytes,12,opt,name=Media,proto3" json:"Media,omitempty"`
	ClearDraft     bool             `protobuf:"varint,13,opt,name=ClearDraft,proto3" json:"ClearDraft,omitempty"`
	FileUploadID   string           `protobuf:"bytes,14,opt,name=FileUploadID,proto3" json:"FileUploadID,omitempty"`
	ThumbUploadID  string           `protobuf:"bytes,15,opt,name=ThumbUploadID,proto3" json:"ThumbUploadID,omitempty"`
	FileID         int64            `protobuf:"varint,16,opt,name=FileID,proto3" json:"FileID,omitempty"`
	ThumbID        int64            `protobuf:"varint,17,opt,name=ThumbID,proto3" json:"ThumbID,omitempty"`
	Sha256         []byte           `protobuf:"bytes,18,opt,name=Sha256,proto3" json:"Sha256,omitempty"`
	ServerFile     *FileLocation    `protobuf:"bytes,19,opt,name=ServerFile,proto3" json:"ServerFile,omitempty"`
	TeamID         int64            `protobuf:"varint,20,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	TeamAccessHash uint64           `protobuf:"varint,21,opt,name=TeamAccessHash,proto3" json:"TeamAccessHash,omitempty"`
	TinyThumb      []byte           `protobuf:"bytes,22,opt,name=TinyThumb,proto3" json:"TinyThumb,omitempty"`
}

func (m *ClientPendingMessage) Reset()         { *m = ClientPendingMessage{} }
func (m *ClientPendingMessage) String() string { return proto.CompactTextString(m) }
func (*ClientPendingMessage) ProtoMessage()    {}
func (*ClientPendingMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{13}
}
func (m *ClientPendingMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientPendingMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientPendingMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientPendingMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientPendingMessage.Merge(m, src)
}
func (m *ClientPendingMessage) XXX_Size() int {
	return m.Size()
}
func (m *ClientPendingMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientPendingMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientPendingMessage proto.InternalMessageInfo

func (m *ClientPendingMessage) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ClientPendingMessage) GetRequestID() int64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *ClientPendingMessage) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *ClientPendingMessage) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *ClientPendingMessage) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ClientPendingMessage) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *ClientPendingMessage) GetReplyTo() int64 {
	if m != nil {
		return m.ReplyTo
	}
	return 0
}

func (m *ClientPendingMessage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *ClientPendingMessage) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *ClientPendingMessage) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ClientPendingMessage) GetMediaType() InputMediaType {
	if m != nil {
		return m.MediaType
	}
	return InputMediaTypeEmpty
}

func (m *ClientPendingMessage) GetMedia() []byte {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *ClientPendingMessage) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *ClientPendingMessage) GetFileUploadID() string {
	if m != nil {
		return m.FileUploadID
	}
	return ""
}

func (m *ClientPendingMessage) GetThumbUploadID() string {
	if m != nil {
		return m.ThumbUploadID
	}
	return ""
}

func (m *ClientPendingMessage) GetFileID() int64 {
	if m != nil {
		return m.FileID
	}
	return 0
}

func (m *ClientPendingMessage) GetThumbID() int64 {
	if m != nil {
		return m.ThumbID
	}
	return 0
}

func (m *ClientPendingMessage) GetSha256() []byte {
	if m != nil {
		return m.Sha256
	}
	return nil
}

func (m *ClientPendingMessage) GetServerFile() *FileLocation {
	if m != nil {
		return m.ServerFile
	}
	return nil
}

func (m *ClientPendingMessage) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *ClientPendingMessage) GetTeamAccessHash() uint64 {
	if m != nil {
		return m.TeamAccessHash
	}
	return 0
}

func (m *ClientPendingMessage) GetTinyThumb() []byte {
	if m != nil {
		return m.TinyThumb
	}
	return nil
}

// ClientSearchResult
type ClientSearchResult struct {
	Messages      []*UserMessage `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
	Users         []*User        `protobuf:"bytes,2,rep,name=Users,proto3" json:"Users,omitempty"`
	Groups        []*Group       `protobuf:"bytes,3,rep,name=Groups,proto3" json:"Groups,omitempty"`
	MatchedUsers  []*User        `protobuf:"bytes,4,rep,name=MatchedUsers,proto3" json:"MatchedUsers,omitempty"`
	MatchedGroups []*Group       `protobuf:"bytes,5,rep,name=MatchedGroups,proto3" json:"MatchedGroups,omitempty"`
}

func (m *ClientSearchResult) Reset()         { *m = ClientSearchResult{} }
func (m *ClientSearchResult) String() string { return proto.CompactTextString(m) }
func (*ClientSearchResult) ProtoMessage()    {}
func (*ClientSearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{14}
}
func (m *ClientSearchResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientSearchResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientSearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSearchResult.Merge(m, src)
}
func (m *ClientSearchResult) XXX_Size() int {
	return m.Size()
}
func (m *ClientSearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSearchResult proto.InternalMessageInfo

func (m *ClientSearchResult) GetMessages() []*UserMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ClientSearchResult) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ClientSearchResult) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ClientSearchResult) GetMatchedUsers() []*User {
	if m != nil {
		return m.MatchedUsers
	}
	return nil
}

func (m *ClientSearchResult) GetMatchedGroups() []*Group {
	if m != nil {
		return m.MatchedGroups
	}
	return nil
}

// ClientFilesMany
type ClientFilesMany struct {
	Gifs  []*ClientFile `protobuf:"bytes,1,rep,name=Gifs,proto3" json:"Gifs,omitempty"`
	Total int32         `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (m *ClientFilesMany) Reset()         { *m = ClientFilesMany{} }
func (m *ClientFilesMany) String() string { return proto.CompactTextString(m) }
func (*ClientFilesMany) ProtoMessage()    {}
func (*ClientFilesMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{15}
}
func (m *ClientFilesMany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientFilesMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientFilesMany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientFilesMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientFilesMany.Merge(m, src)
}
func (m *ClientFilesMany) XXX_Size() int {
	return m.Size()
}
func (m *ClientFilesMany) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientFilesMany.DiscardUnknown(m)
}

var xxx_messageInfo_ClientFilesMany proto.InternalMessageInfo

func (m *ClientFilesMany) GetGifs() []*ClientFile {
	if m != nil {
		return m.Gifs
	}
	return nil
}

func (m *ClientFilesMany) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// ClientFile
type ClientFile struct {
	ClusterID   int32                `protobuf:"varint,1,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	FileID      int64                `protobuf:"varint,2,opt,name=FileID,proto3" json:"FileID,omitempty"`
	AccessHash  uint64               `protobuf:"varint,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Type        ClientFileType       `protobuf:"varint,4,opt,name=Type,proto3,enum=msg.ClientFileType" json:"Type,omitempty"`
	MimeType    string               `protobuf:"bytes,5,opt,name=MimeType,proto3" json:"MimeType,omitempty"`
	UserID      int64                `protobuf:"varint,6,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GroupID     int64                `protobuf:"varint,7,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	FileSize    int64                `protobuf:"varint,8,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	MessageID   int64                `protobuf:"varint,9,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	PeerID      int64                `protobuf:"varint,10,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	PeerType    int32                `protobuf:"varint,11,opt,name=PeerType,proto3" json:"PeerType,omitempty"`
	Version     int32                `protobuf:"varint,12,opt,name=Version,proto3" json:"Version,omitempty"`
	Extension   string               `protobuf:"bytes,13,opt,name=Extension,proto3" json:"Extension,omitempty"`
	MD5Checksum string               `protobuf:"bytes,14,opt,name=MD5Checksum,proto3" json:"MD5Checksum,omitempty"`
	WallpaperID int64                `protobuf:"varint,15,opt,name=WallpaperID,proto3" json:"WallpaperID,omitempty"`
	Attributes  []*DocumentAttribute `protobuf:"bytes,16,rep,name=Attributes,proto3" json:"Attributes,omitempty"`
}

func (m *ClientFile) Reset()         { *m = ClientFile{} }
func (m *ClientFile) String() string { return proto.CompactTextString(m) }
func (*ClientFile) ProtoMessage()    {}
func (*ClientFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{16}
}
func (m *ClientFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientFile.Merge(m, src)
}
func (m *ClientFile) XXX_Size() int {
	return m.Size()
}
func (m *ClientFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientFile.DiscardUnknown(m)
}

var xxx_messageInfo_ClientFile proto.InternalMessageInfo

func (m *ClientFile) GetClusterID() int32 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *ClientFile) GetFileID() int64 {
	if m != nil {
		return m.FileID
	}
	return 0
}

func (m *ClientFile) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ClientFile) GetType() ClientFileType {
	if m != nil {
		return m.Type
	}
	return Unknown
}

func (m *ClientFile) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *ClientFile) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ClientFile) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *ClientFile) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *ClientFile) GetMessageID() int64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *ClientFile) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *ClientFile) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *ClientFile) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ClientFile) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *ClientFile) GetMD5Checksum() string {
	if m != nil {
		return m.MD5Checksum
	}
	return ""
}

func (m *ClientFile) GetWallpaperID() int64 {
	if m != nil {
		return m.WallpaperID
	}
	return 0
}

func (m *ClientFile) GetAttributes() []*DocumentAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// ClientFileRequest
type ClientFileRequest struct {
	Next *ClientFileRequest `protobuf:"bytes,100,opt,name=Next,proto3" json:"Next,omitempty"`
	// Logical Location
	PeerID    int64 `protobuf:"varint,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	PeerType  int32 `protobuf:"varint,2,opt,name=PeerType,proto3" json:"PeerType,omitempty"`
	MessageID int64 `protobuf:"varint,3,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	// Storage Location
	ClusterID        int32   `protobuf:"varint,4,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	FileID           int64   `protobuf:"varint,5,opt,name=FileID,proto3" json:"FileID,omitempty"`
	AccessHash       uint64  `protobuf:"fixed64,6,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Version          int32   `protobuf:"varint,7,opt,name=Version,proto3" json:"Version,omitempty"`
	FileSize         int64   `protobuf:"varint,8,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	ChunkSize        int32   `protobuf:"varint,9,opt,name=ChunkSize,proto3" json:"ChunkSize,omitempty"`
	FinishedParts    []int32 `protobuf:"varint,10,rep,packed,name=FinishedParts,proto3" json:"FinishedParts,omitempty"`
	TotalParts       int32   `protobuf:"varint,11,opt,name=TotalParts,proto3" json:"TotalParts,omitempty"`
	SkipDelegateCall bool    `protobuf:"varint,12,opt,name=SkipDelegateCall,proto3" json:"SkipDelegateCall,omitempty"`
	FilePath         string  `protobuf:"bytes,13,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	TempPath         string  `protobuf:"bytes,14,opt,name=TempPath,proto3" json:"TempPath,omitempty"`
	CheckSha256      bool    `protobuf:"varint,15,opt,name=CheckSha256,proto3" json:"CheckSha256,omitempty"`
	FileSha256       []byte  `protobuf:"bytes,16,opt,name=FileSha256,proto3" json:"FileSha256,omitempty"`
	IsProfilePhoto   bool    `protobuf:"varint,17,opt,name=IsProfilePhoto,proto3" json:"IsProfilePhoto,omitempty"`
	GroupID          int64   `protobuf:"varint,18,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	ThumbID          int64   `protobuf:"varint,19,opt,name=ThumbID,proto3" json:"ThumbID,omitempty"`
	ThumbPath        string  `protobuf:"bytes,20,opt,name=ThumbPath,proto3" json:"ThumbPath,omitempty"`
}

func (m *ClientFileRequest) Reset()         { *m = ClientFileRequest{} }
func (m *ClientFileRequest) String() string { return proto.CompactTextString(m) }
func (*ClientFileRequest) ProtoMessage()    {}
func (*ClientFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{17}
}
func (m *ClientFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientFileRequest.Merge(m, src)
}
func (m *ClientFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClientFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientFileRequest proto.InternalMessageInfo

func (m *ClientFileRequest) GetNext() *ClientFileRequest {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *ClientFileRequest) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *ClientFileRequest) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *ClientFileRequest) GetMessageID() int64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *ClientFileRequest) GetClusterID() int32 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *ClientFileRequest) GetFileID() int64 {
	if m != nil {
		return m.FileID
	}
	return 0
}

func (m *ClientFileRequest) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ClientFileRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ClientFileRequest) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *ClientFileRequest) GetChunkSize() int32 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

func (m *ClientFileRequest) GetFinishedParts() []int32 {
	if m != nil {
		return m.FinishedParts
	}
	return nil
}

func (m *ClientFileRequest) GetTotalParts() int32 {
	if m != nil {
		return m.TotalParts
	}
	return 0
}

func (m *ClientFileRequest) GetSkipDelegateCall() bool {
	if m != nil {
		return m.SkipDelegateCall
	}
	return false
}

func (m *ClientFileRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *ClientFileRequest) GetTempPath() string {
	if m != nil {
		return m.TempPath
	}
	return ""
}

func (m *ClientFileRequest) GetCheckSha256() bool {
	if m != nil {
		return m.CheckSha256
	}
	return false
}

func (m *ClientFileRequest) GetFileSha256() []byte {
	if m != nil {
		return m.FileSha256
	}
	return nil
}

func (m *ClientFileRequest) GetIsProfilePhoto() bool {
	if m != nil {
		return m.IsProfilePhoto
	}
	return false
}

func (m *ClientFileRequest) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *ClientFileRequest) GetThumbID() int64 {
	if m != nil {
		return m.ThumbID
	}
	return 0
}

func (m *ClientFileRequest) GetThumbPath() string {
	if m != nil {
		return m.ThumbPath
	}
	return ""
}

// ClientFileStatus
type ClientFileStatus struct {
	Status   int32  `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Progress int64  `protobuf:"varint,2,opt,name=Progress,proto3" json:"Progress,omitempty"`
	FilePath string `protobuf:"bytes,3,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
}

func (m *ClientFileStatus) Reset()         { *m = ClientFileStatus{} }
func (m *ClientFileStatus) String() string { return proto.CompactTextString(m) }
func (*ClientFileStatus) ProtoMessage()    {}
func (*ClientFileStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{18}
}
func (m *ClientFileStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientFileStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientFileStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientFileStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientFileStatus.Merge(m, src)
}
func (m *ClientFileStatus) XXX_Size() int {
	return m.Size()
}
func (m *ClientFileStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientFileStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClientFileStatus proto.InternalMessageInfo

func (m *ClientFileStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ClientFileStatus) GetProgress() int64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *ClientFileStatus) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

// CachedMediaInfo
type ClientCachedMediaInfo struct {
	MediaInfo []*ClientPeerMediaInfo `protobuf:"bytes,1,rep,name=MediaInfo,proto3" json:"MediaInfo,omitempty"`
}

func (m *ClientCachedMediaInfo) Reset()         { *m = ClientCachedMediaInfo{} }
func (m *ClientCachedMediaInfo) String() string { return proto.CompactTextString(m) }
func (*ClientCachedMediaInfo) ProtoMessage()    {}
func (*ClientCachedMediaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{19}
}
func (m *ClientCachedMediaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientCachedMediaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientCachedMediaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientCachedMediaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientCachedMediaInfo.Merge(m, src)
}
func (m *ClientCachedMediaInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientCachedMediaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientCachedMediaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientCachedMediaInfo proto.InternalMessageInfo

func (m *ClientCachedMediaInfo) GetMediaInfo() []*ClientPeerMediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

// PeerMediaInfo
type ClientPeerMediaInfo struct {
	PeerID   int64              `protobuf:"varint,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	PeerType PeerType           `protobuf:"varint,2,opt,name=PeerType,proto3,enum=msg.PeerType" json:"PeerType,omitempty"`
	Media    []*ClientMediaSize `protobuf:"bytes,3,rep,name=Media,proto3" json:"Media,omitempty"`
}

func (m *ClientPeerMediaInfo) Reset()         { *m = ClientPeerMediaInfo{} }
func (m *ClientPeerMediaInfo) String() string { return proto.CompactTextString(m) }
func (*ClientPeerMediaInfo) ProtoMessage()    {}
func (*ClientPeerMediaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{20}
}
func (m *ClientPeerMediaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientPeerMediaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientPeerMediaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientPeerMediaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientPeerMediaInfo.Merge(m, src)
}
func (m *ClientPeerMediaInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientPeerMediaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientPeerMediaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientPeerMediaInfo proto.InternalMessageInfo

func (m *ClientPeerMediaInfo) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *ClientPeerMediaInfo) GetPeerType() PeerType {
	if m != nil {
		return m.PeerType
	}
	return PeerSelf
}

func (m *ClientPeerMediaInfo) GetMedia() []*ClientMediaSize {
	if m != nil {
		return m.Media
	}
	return nil
}

// ClientMediaSize
type ClientMediaSize struct {
	MediaType ClientMediaType `protobuf:"varint,1,opt,name=MediaType,proto3,enum=msg.ClientMediaType" json:"MediaType,omitempty"`
	TotalSize int64           `protobuf:"varint,2,opt,name=TotalSize,proto3" json:"TotalSize,omitempty"`
}

func (m *ClientMediaSize) Reset()         { *m = ClientMediaSize{} }
func (m *ClientMediaSize) String() string { return proto.CompactTextString(m) }
func (*ClientMediaSize) ProtoMessage()    {}
func (*ClientMediaSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{21}
}
func (m *ClientMediaSize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientMediaSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientMediaSize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientMediaSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMediaSize.Merge(m, src)
}
func (m *ClientMediaSize) XXX_Size() int {
	return m.Size()
}
func (m *ClientMediaSize) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMediaSize.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMediaSize proto.InternalMessageInfo

func (m *ClientMediaSize) GetMediaType() ClientMediaType {
	if m != nil {
		return m.MediaType
	}
	return ClientMediaNone
}

func (m *ClientMediaSize) GetTotalSize() int64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

// ClientRecentSearch
type ClientRecentSearch struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=Peer,proto3" json:"Peer,omitempty"`
	Date int32 `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (m *ClientRecentSearch) Reset()         { *m = ClientRecentSearch{} }
func (m *ClientRecentSearch) String() string { return proto.CompactTextString(m) }
func (*ClientRecentSearch) ProtoMessage()    {}
func (*ClientRecentSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{22}
}
func (m *ClientRecentSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientRecentSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientRecentSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientRecentSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRecentSearch.Merge(m, src)
}
func (m *ClientRecentSearch) XXX_Size() int {
	return m.Size()
}
func (m *ClientRecentSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRecentSearch.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRecentSearch proto.InternalMessageInfo

func (m *ClientRecentSearch) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ClientRecentSearch) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

// RecentSearchMany
type ClientRecentSearchMany struct {
	RecentSearches []*ClientRecentSearch `protobuf:"bytes,1,rep,name=RecentSearches,proto3" json:"RecentSearches,omitempty"`
	Users          []*User               `protobuf:"bytes,2,rep,name=Users,proto3" json:"Users,omitempty"`
	Groups         []*Group              `protobuf:"bytes,3,rep,name=Groups,proto3" json:"Groups,omitempty"`
}

func (m *ClientRecentSearchMany) Reset()         { *m = ClientRecentSearchMany{} }
func (m *ClientRecentSearchMany) String() string { return proto.CompactTextString(m) }
func (*ClientRecentSearchMany) ProtoMessage()    {}
func (*ClientRecentSearchMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{23}
}
func (m *ClientRecentSearchMany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientRecentSearchMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientRecentSearchMany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientRecentSearchMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRecentSearchMany.Merge(m, src)
}
func (m *ClientRecentSearchMany) XXX_Size() int {
	return m.Size()
}
func (m *ClientRecentSearchMany) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRecentSearchMany.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRecentSearchMany proto.InternalMessageInfo

func (m *ClientRecentSearchMany) GetRecentSearches() []*ClientRecentSearch {
	if m != nil {
		return m.RecentSearches
	}
	return nil
}

func (m *ClientRecentSearchMany) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ClientRecentSearchMany) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// ClientTeamCounters
type ClientTeamCounters struct {
	UnreadCount  int64 `protobuf:"varint,1,opt,name=UnreadCount,proto3" json:"UnreadCount,omitempty"`
	MentionCount int64 `protobuf:"varint,2,opt,name=MentionCount,proto3" json:"MentionCount,omitempty"`
}

func (m *ClientTeamCounters) Reset()         { *m = ClientTeamCounters{} }
func (m *ClientTeamCounters) String() string { return proto.CompactTextString(m) }
func (*ClientTeamCounters) ProtoMessage()    {}
func (*ClientTeamCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{24}
}
func (m *ClientTeamCounters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientTeamCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientTeamCounters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientTeamCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientTeamCounters.Merge(m, src)
}
func (m *ClientTeamCounters) XXX_Size() int {
	return m.Size()
}
func (m *ClientTeamCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientTeamCounters.DiscardUnknown(m)
}

var xxx_messageInfo_ClientTeamCounters proto.InternalMessageInfo

func (m *ClientTeamCounters) GetUnreadCount() int64 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *ClientTeamCounters) GetMentionCount() int64 {
	if m != nil {
		return m.MentionCount
	}
	return 0
}

// RecentSearchMany
// return ClientFrequentlyReactions
type ClientGetFrequentlyReactions struct {
}

func (m *ClientGetFrequentlyReactions) Reset()         { *m = ClientGetFrequentlyReactions{} }
func (m *ClientGetFrequentlyReactions) String() string { return proto.CompactTextString(m) }
func (*ClientGetFrequentlyReactions) ProtoMessage()    {}
func (*ClientGetFrequentlyReactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{25}
}
func (m *ClientGetFrequentlyReactions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientGetFrequentlyReactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientGetFrequentlyReactions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientGetFrequentlyReactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientGetFrequentlyReactions.Merge(m, src)
}
func (m *ClientGetFrequentlyReactions) XXX_Size() int {
	return m.Size()
}
func (m *ClientGetFrequentlyReactions) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientGetFrequentlyReactions.DiscardUnknown(m)
}

var xxx_messageInfo_ClientGetFrequentlyReactions proto.InternalMessageInfo

type ClientFrequentlyReactions struct {
	Reactions []string `protobuf:"bytes,1,rep,name=Reactions,proto3" json:"Reactions,omitempty"`
}

func (m *ClientFrequentlyReactions) Reset()         { *m = ClientFrequentlyReactions{} }
func (m *ClientFrequentlyReactions) String() string { return proto.CompactTextString(m) }
func (*ClientFrequentlyReactions) ProtoMessage()    {}
func (*ClientFrequentlyReactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{26}
}
func (m *ClientFrequentlyReactions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientFrequentlyReactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientFrequentlyReactions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientFrequentlyReactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientFrequentlyReactions.Merge(m, src)
}
func (m *ClientFrequentlyReactions) XXX_Size() int {
	return m.Size()
}
func (m *ClientFrequentlyReactions) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientFrequentlyReactions.DiscardUnknown(m)
}

var xxx_messageInfo_ClientFrequentlyReactions proto.InternalMessageInfo

func (m *ClientFrequentlyReactions) GetReactions() []string {
	if m != nil {
		return m.Reactions
	}
	return nil
}

type ClientDismissNotification struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=Peer,proto3" json:"Peer,omitempty"`
	Ts   int64      `protobuf:"varint,2,opt,name=Ts,proto3" json:"Ts,omitempty"`
}

func (m *ClientDismissNotification) Reset()         { *m = ClientDismissNotification{} }
func (m *ClientDismissNotification) String() string { return proto.CompactTextString(m) }
func (*ClientDismissNotification) ProtoMessage()    {}
func (*ClientDismissNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{27}
}
func (m *ClientDismissNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientDismissNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientDismissNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientDismissNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientDismissNotification.Merge(m, src)
}
func (m *ClientDismissNotification) XXX_Size() int {
	return m.Size()
}
func (m *ClientDismissNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientDismissNotification.DiscardUnknown(m)
}

var xxx_messageInfo_ClientDismissNotification proto.InternalMessageInfo

func (m *ClientDismissNotification) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ClientDismissNotification) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

type ClientGetNotificationDismissTime struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=Peer,proto3" json:"Peer,omitempty"`
}

func (m *ClientGetNotificationDismissTime) Reset()         { *m = ClientGetNotificationDismissTime{} }
func (m *ClientGetNotificationDismissTime) String() string { return proto.CompactTextString(m) }
func (*ClientGetNotificationDismissTime) ProtoMessage()    {}
func (*ClientGetNotificationDismissTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{28}
}
func (m *ClientGetNotificationDismissTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientGetNotificationDismissTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientGetNotificationDismissTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientGetNotificationDismissTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientGetNotificationDismissTime.Merge(m, src)
}
func (m *ClientGetNotificationDismissTime) XXX_Size() int {
	return m.Size()
}
func (m *ClientGetNotificationDismissTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientGetNotificationDismissTime.DiscardUnknown(m)
}

var xxx_messageInfo_ClientGetNotificationDismissTime proto.InternalMessageInfo

func (m *ClientGetNotificationDismissTime) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type ClientNotificationDismissTime struct {
	Ts int64 `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`
}

func (m *ClientNotificationDismissTime) Reset()         { *m = ClientNotificationDismissTime{} }
func (m *ClientNotificationDismissTime) String() string { return proto.CompactTextString(m) }
func (*ClientNotificationDismissTime) ProtoMessage()    {}
func (*ClientNotificationDismissTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{29}
}
func (m *ClientNotificationDismissTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientNotificationDismissTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientNotificationDismissTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientNotificationDismissTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientNotificationDismissTime.Merge(m, src)
}
func (m *ClientNotificationDismissTime) XXX_Size() int {
	return m.Size()
}
func (m *ClientNotificationDismissTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientNotificationDismissTime.DiscardUnknown(m)
}

var xxx_messageInfo_ClientNotificationDismissTime proto.InternalMessageInfo

func (m *ClientNotificationDismissTime) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func init() {
	proto.RegisterEnum("msg.ClientFileType", ClientFileType_name, ClientFileType_value)
	proto.RegisterEnum("msg.ClientMediaType", ClientMediaType_name, ClientMediaType_value)
	proto.RegisterType((*ClientSendMessageMedia)(nil), "msg.ClientSendMessageMedia")
	proto.RegisterType((*ClientGlobalSearch)(nil), "msg.ClientGlobalSearch")
	proto.RegisterType((*ClientContactSearch)(nil), "msg.ClientContactSearch")
	proto.RegisterType((*ClientGetCachedMedia)(nil), "msg.ClientGetCachedMedia")
	proto.RegisterType((*ClientClearCachedMedia)(nil), "msg.ClientClearCachedMedia")
	proto.RegisterType((*ClientGetLastBotKeyboard)(nil), "msg.ClientGetLastBotKeyboard")
	proto.RegisterType((*ClientGetMediaHistory)(nil), "msg.ClientGetMediaHistory")
	proto.RegisterType((*ClientGetRecentSearch)(nil), "msg.ClientGetRecentSearch")
	proto.RegisterType((*ClientPutRecentSearch)(nil), "msg.ClientPutRecentSearch")
	proto.RegisterType((*ClientRemoveRecentSearch)(nil), "msg.ClientRemoveRecentSearch")
	proto.RegisterType((*ClientRemoveAllRecentSearches)(nil), "msg.ClientRemoveAllRecentSearches")
	proto.RegisterType((*ClientGetSavedGifs)(nil), "msg.ClientGetSavedGifs")
	proto.RegisterType((*ClientGetTeamCounters)(nil), "msg.ClientGetTeamCounters")
	proto.RegisterType((*ClientPendingMessage)(nil), "msg.ClientPendingMessage")
	proto.RegisterType((*ClientSearchResult)(nil), "msg.ClientSearchResult")
	proto.RegisterType((*ClientFilesMany)(nil), "msg.ClientFilesMany")
	proto.RegisterType((*ClientFile)(nil), "msg.ClientFile")
	proto.RegisterType((*ClientFileRequest)(nil), "msg.ClientFileRequest")
	proto.RegisterType((*ClientFileStatus)(nil), "msg.ClientFileStatus")
	proto.RegisterType((*ClientCachedMediaInfo)(nil), "msg.ClientCachedMediaInfo")
	proto.RegisterType((*ClientPeerMediaInfo)(nil), "msg.ClientPeerMediaInfo")
	proto.RegisterType((*ClientMediaSize)(nil), "msg.ClientMediaSize")
	proto.RegisterType((*ClientRecentSearch)(nil), "msg.ClientRecentSearch")
	proto.RegisterType((*ClientRecentSearchMany)(nil), "msg.ClientRecentSearchMany")
	proto.RegisterType((*ClientTeamCounters)(nil), "msg.ClientTeamCounters")
	proto.RegisterType((*ClientGetFrequentlyReactions)(nil), "msg.ClientGetFrequentlyReactions")
	proto.RegisterType((*ClientFrequentlyReactions)(nil), "msg.ClientFrequentlyReactions")
	proto.RegisterType((*ClientDismissNotification)(nil), "msg.ClientDismissNotification")
	proto.RegisterType((*ClientGetNotificationDismissTime)(nil), "msg.ClientGetNotificationDismissTime")
	proto.RegisterType((*ClientNotificationDismissTime)(nil), "msg.ClientNotificationDismissTime")
}

func init() { proto.RegisterFile("client.proto", fileDescriptor_014de31d7ac8c57c) }

var fileDescriptor_014de31d7ac8c57c = []byte{
	// 1904 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x41, 0x6f, 0x23, 0x49,
	0xf5, 0x4f, 0xbb, 0xed, 0x24, 0xae, 0x24, 0x4e, 0xa7, 0x92, 0xc9, 0xf6, 0x3f, 0xda, 0xcd, 0xdf,
	0xea, 0x45, 0xe0, 0x8d, 0x18, 0x0f, 0x1b, 0x98, 0x91, 0xd0, 0x4a, 0xa0, 0x8c, 0x7b, 0x26, 0x6b,
	0x6d, 0x3c, 0x13, 0x95, 0x3d, 0xbb, 0x62, 0x6f, 0xe5, 0x76, 0xc5, 0x6e, 0xa5, 0xdd, 0x6d, 0xba,
	0xca, 0xc3, 0x98, 0x33, 0x5c, 0x11, 0x67, 0x0e, 0x48, 0x5c, 0xf8, 0x18, 0x9c, 0x39, 0xce, 0x91,
	0x23, 0xcc, 0x5c, 0xf8, 0x0e, 0x5c, 0x50, 0xbd, 0xaa, 0xee, 0xae, 0xee, 0x90, 0xc1, 0x20, 0x2e,
	0x51, 0xbf, 0xdf, 0x7b, 0x7e, 0xf5, 0xaa, 0xea, 0xbd, 0xdf, 0x7b, 0x15, 0xb4, 0x1b, 0x44, 0x21,
	0x8b, 0x45, 0x77, 0x91, 0x26, 0x22, 0xc1, 0xf6, 0x9c, 0x4f, 0x4f, 0x9c, 0x20, 0x49, 0x59, 0x57,
	0xac, 0x16, 0x8c, 0x2b, 0xf8, 0xe4, 0x24, 0x98, 0x51, 0xd1, 0x9d, 0x33, 0xce, 0xe9, 0x94, 0xf1,
	0xee, 0x9c, 0x4d, 0x42, 0x9a, 0xe9, 0x1e, 0x4e, 0x43, 0x31, 0x5b, 0x8e, 0xbb, 0x41, 0x32, 0x7f,
	0x34, 0x4d, 0xa6, 0xc9, 0x23, 0x80, 0xc7, 0xcb, 0x1b, 0x90, 0x40, 0x80, 0x2f, 0x65, 0xee, 0xfd,
	0xba, 0x81, 0x8e, 0x7b, 0xb0, 0xe4, 0x90, 0xc5, 0x93, 0x81, 0x72, 0x39, 0x90, 0x0e, 0xb1, 0x87,
	0xea, 0xd7, 0x8c, 0xa5, 0xae, 0xd5, 0xb6, 0x3a, 0x3b, 0xe7, 0xad, 0xee, 0x9c, 0x4f, 0xbb, 0xfd,
	0x78, 0xb1, 0x14, 0x12, 0x25, 0xa0, 0xc3, 0x9f, 0xa3, 0x26, 0x18, 0x8f, 0x56, 0x0b, 0xe6, 0xd6,
	0xda, 0x56, 0xa7, 0x75, 0x7e, 0x58, 0x18, 0xe6, 0x2a, 0x52, 0x58, 0x61, 0x17, 0x6d, 0xf5, 0xe8,
	0x42, 0x84, 0x49, 0xec, 0xda, 0x6d, 0xab, 0xd3, 0x24, 0x99, 0x88, 0x4f, 0xd0, 0xf6, 0xf3, 0x30,
	0x62, 0x2f, 0xe8, 0x9c, 0xb9, 0x75, 0x50, 0xe5, 0x72, 0xa6, 0xbb, 0xa6, 0x62, 0xe6, 0x36, 0x0a,
	0x9d, 0x94, 0xf1, 0x77, 0xd0, 0xde, 0x68, 0xb6, 0x9c, 0x8f, 0x73, 0x83, 0x4d, 0x30, 0x28, 0x83,
	0x99, 0x87, 0x41, 0x7f, 0xf0, 0xcc, 0xdd, 0x2a, 0x3c, 0x48, 0x19, 0x7f, 0x8c, 0x9a, 0x60, 0x0c,
	0xca, 0x6d, 0x50, 0x16, 0x80, 0x8c, 0x98, 0xb0, 0x45, 0xb4, 0x1a, 0x25, 0x6e, 0xb3, 0x6d, 0x75,
	0x6c, 0x92, 0x89, 0xf8, 0x14, 0xa1, 0x5e, 0xc4, 0x68, 0xea, 0xa7, 0xf4, 0x46, 0xb8, 0xa8, 0x6d,
	0x75, 0xb6, 0x89, 0x81, 0xe0, 0x27, 0x08, 0x5d, 0x08, 0x91, 0x86, 0xe3, 0xa5, 0x60, 0xdc, 0xdd,
	0x69, 0xdb, 0x9d, 0x9d, 0xf3, 0x63, 0x38, 0x1f, 0x3f, 0x09, 0x96, 0x73, 0x16, 0x8b, 0x5c, 0x4d,
	0x0c, 0x4b, 0xec, 0xa1, 0x5d, 0x19, 0xdb, 0xab, 0x45, 0x94, 0xd0, 0x49, 0xdf, 0x77, 0x77, 0x21,
	0xa4, 0x12, 0x96, 0xef, 0x3a, 0x37, 0xda, 0x33, 0x76, 0x9d, 0x5b, 0x1d, 0xa3, 0x4d, 0xf9, 0xab,
	0xbe, 0xef, 0xb6, 0x20, 0x74, 0x2d, 0xc9, 0x3d, 0x81, 0x61, 0xdf, 0x77, 0xf7, 0xd5, 0x9e, 0xb4,
	0x88, 0xbf, 0x8b, 0x5a, 0xd2, 0x66, 0x94, 0x08, 0x1a, 0x5d, 0xd3, 0x54, 0x70, 0xd7, 0x69, 0x5b,
	0x9d, 0x06, 0xa9, 0xa0, 0xb8, 0x8b, 0xb6, 0x9f, 0xc5, 0x22, 0x14, 0x21, 0xe3, 0xee, 0x01, 0xec,
	0x0c, 0xc3, 0xce, 0x74, 0x0e, 0x81, 0x6e, 0x45, 0x72, 0x1b, 0x38, 0xe3, 0x30, 0x5e, 0xc1, 0x32,
	0x2e, 0x6e, 0x5b, 0x9d, 0x5d, 0x52, 0x00, 0xde, 0xef, 0x2c, 0x84, 0x55, 0x1e, 0x5e, 0x46, 0xc9,
	0x98, 0x46, 0x43, 0x46, 0xd3, 0x60, 0x86, 0x31, 0xaa, 0x8f, 0xd8, 0x1b, 0x01, 0x39, 0xd8, 0x24,
	0xf0, 0x2d, 0x2f, 0xf2, 0x8a, 0x8e, 0x59, 0xd4, 0xf7, 0xb9, 0x5b, 0x6b, 0xdb, 0x9d, 0x06, 0xc9,
	0xe5, 0x3c, 0x67, 0xed, 0x0f, 0xe4, 0xec, 0x11, 0x6a, 0x5c, 0x85, 0xf3, 0x50, 0x40, 0x8e, 0x35,
	0x88, 0x12, 0xa4, 0x57, 0x59, 0x01, 0x2c, 0xed, 0xfb, 0x90, 0x60, 0x36, 0xc9, 0x65, 0xef, 0x33,
	0x74, 0xa8, 0x62, 0xeb, 0x25, 0xb1, 0xa0, 0x81, 0xb8, 0x3f, 0x38, 0xef, 0x18, 0x1d, 0xe9, 0x6d,
	0x30, 0xd1, 0xa3, 0xc1, 0x8c, 0x4d, 0x20, 0xf3, 0xbd, 0x34, 0x2b, 0x33, 0xc8, 0x0e, 0x43, 0xb3,
	0x56, 0x99, 0xfd, 0x08, 0xa1, 0xbc, 0x80, 0xd4, 0xa6, 0x5b, 0xe7, 0x47, 0x60, 0xa9, 0x9c, 0x16,
	0x85, 0x66, 0xd8, 0x79, 0x3f, 0x41, 0x6e, 0x1e, 0xcb, 0x15, 0xe5, 0xe2, 0x69, 0x22, 0xbe, 0x62,
	0xab, 0x71, 0x42, 0xd3, 0xc9, 0x3a, 0xab, 0x7a, 0x5f, 0xa1, 0x07, 0xf9, 0xef, 0xc1, 0xed, 0x97,
	0x21, 0x17, 0x49, 0xba, 0xc2, 0xe7, 0x66, 0xd5, 0x5b, 0x50, 0xf5, 0xff, 0x3a, 0x9a, 0xc2, 0xcc,
	0x7b, 0x68, 0x38, 0x23, 0x2c, 0x00, 0xc2, 0x81, 0x53, 0xcc, 0xaf, 0xc3, 0x32, 0xae, 0xc3, 0xfb,
	0x22, 0x33, 0xbf, 0x5e, 0x96, 0xcd, 0xd7, 0x09, 0x3c, 0xdf, 0x38, 0x61, 0xf3, 0xe4, 0x35, 0xfb,
	0x8f, 0x7f, 0xff, 0x18, 0x7d, 0x62, 0xfe, 0xfe, 0x22, 0x8a, 0x4c, 0x17, 0x8c, 0xcb, 0x98, 0x9f,
	0xbd, 0x11, 0x29, 0x05, 0x2f, 0xdb, 0x44, 0x09, 0xde, 0x51, 0x9e, 0xc2, 0x4c, 0x0c, 0xe9, 0x6b,
	0x36, 0xb9, 0x0c, 0x6f, 0xb8, 0xf7, 0x33, 0x63, 0xe3, 0x23, 0x46, 0xe7, 0xbd, 0x64, 0x19, 0x0b,
	0x96, 0x42, 0xae, 0x4a, 0xf9, 0x6e, 0x24, 0x12, 0x25, 0xa0, 0x93, 0x45, 0xf3, 0x4d, 0x28, 0x66,
	0x03, 0xe0, 0x8f, 0x1a, 0x2c, 0x56, 0x00, 0xde, 0x9f, 0x1a, 0x59, 0xb6, 0x5d, 0xb3, 0x78, 0x12,
	0xc6, 0x53, 0x5d, 0x7b, 0xb8, 0x85, 0x6a, 0x7d, 0x1f, 0x1c, 0xdb, 0xa4, 0xd6, 0xf7, 0xa5, 0x1b,
	0xc2, 0x7e, 0xbe, 0x64, 0x5c, 0xf4, 0x7d, 0x70, 0x63, 0x93, 0x02, 0x90, 0x1c, 0x21, 0xb7, 0xdd,
	0xf7, 0xa1, 0x6c, 0x6c, 0xa2, 0x25, 0x59, 0x12, 0xf2, 0x0b, 0x6e, 0x59, 0xd5, 0x4a, 0x2e, 0x4b,
	0xe6, 0xbb, 0x08, 0x02, 0xc6, 0xf9, 0x97, 0x94, 0x2b, 0x46, 0xde, 0x24, 0x06, 0x22, 0x57, 0xec,
	0xa5, 0x8c, 0x0a, 0x36, 0x79, 0x19, 0x03, 0x1f, 0xdb, 0xa4, 0x00, 0x4c, 0x46, 0xdd, 0x2a, 0x33,
	0x2a, 0x46, 0xf5, 0xa7, 0xc9, 0x64, 0xa5, 0x49, 0x18, 0xbe, 0x4b, 0xa5, 0xd9, 0x2c, 0x97, 0x66,
	0x89, 0x85, 0xd0, 0x1a, 0x2c, 0x54, 0x6a, 0x58, 0x3b, 0x6b, 0x35, 0xac, 0x23, 0xd4, 0x00, 0x01,
	0x58, 0x78, 0x97, 0x28, 0xa1, 0x42, 0xfd, 0x7b, 0x77, 0xa8, 0xbf, 0x4a, 0xe1, 0xad, 0x75, 0x28,
	0x7c, 0xff, 0xc3, 0x14, 0xee, 0xdc, 0x47, 0xe1, 0x07, 0x65, 0x0a, 0x3f, 0x46, 0x9b, 0xc3, 0x19,
	0x3d, 0x7f, 0xfc, 0x44, 0xf3, 0xac, 0x96, 0xf0, 0xe7, 0x08, 0x0d, 0x59, 0xfa, 0x9a, 0xa5, 0xd2,
	0x83, 0x7b, 0x08, 0x79, 0x77, 0x00, 0xbb, 0x97, 0xc0, 0x55, 0x12, 0x50, 0xd9, 0x87, 0x89, 0x61,
	0x24, 0x5d, 0xc9, 0x44, 0xec, 0xfb, 0xee, 0x91, 0x5a, 0x5c, 0x49, 0xb2, 0x4b, 0xc8, 0x2f, 0x23,
	0x07, 0x1e, 0xb4, 0xad, 0x4e, 0x9d, 0x54, 0xd0, 0x32, 0xeb, 0x1f, 0x57, 0x59, 0xff, 0xef, 0x39,
	0xeb, 0xab, 0xd2, 0x22, 0x8c, 0x2f, 0x23, 0x81, 0xbf, 0x8f, 0xb6, 0xf5, 0xfd, 0x71, 0xd7, 0x82,
	0x4b, 0x75, 0x20, 0xca, 0x57, 0x9c, 0xa5, 0x5a, 0x41, 0x72, 0x0b, 0xfc, 0xff, 0xa8, 0x21, 0x15,
	0x8a, 0x17, 0x77, 0xce, 0x9b, 0xb9, 0x29, 0x51, 0x38, 0xf6, 0xd0, 0xe6, 0x65, 0x9a, 0x2c, 0x17,
	0xdc, 0xb5, 0xc1, 0x02, 0x81, 0x05, 0x40, 0x44, 0x6b, 0xf0, 0x43, 0xb4, 0x3b, 0xa0, 0x42, 0xb2,
	0xb2, 0xf2, 0x55, 0xaf, 0xfa, 0x2a, 0xa9, 0xf1, 0x0f, 0xd0, 0x9e, 0x96, 0xb5, 0xe7, 0xc6, 0x1d,
	0xcf, 0x65, 0x03, 0xef, 0x0a, 0xed, 0xab, 0x9d, 0xca, 0x63, 0xe5, 0x03, 0x1a, 0xaf, 0xf0, 0xa7,
	0xa8, 0x2e, 0x19, 0x42, 0x6f, 0x71, 0xdf, 0x60, 0x50, 0x69, 0x43, 0x40, 0x29, 0xb3, 0x0f, 0x9a,
	0x2e, 0x94, 0x6d, 0x83, 0x28, 0xc1, 0xfb, 0x87, 0x2d, 0xd3, 0x2f, 0x33, 0x85, 0x6a, 0x8b, 0x96,
	0x5c, 0x40, 0x89, 0x28, 0x1e, 0x2d, 0x00, 0x23, 0x81, 0x6a, 0xa5, 0x04, 0x2a, 0xd7, 0xb0, 0x0d,
	0xf7, 0x67, 0xd6, 0xf0, 0xf7, 0x50, 0x3d, 0xaf, 0xfd, 0xac, 0x4c, 0x8a, 0x45, 0xa1, 0x4c, 0xc0,
	0x40, 0x16, 0xe8, 0x20, 0x9c, 0x03, 0x92, 0x0d, 0x67, 0x99, 0x2c, 0x17, 0x97, 0x47, 0xd6, 0xf7,
	0x35, 0x0b, 0x68, 0x49, 0x66, 0x2f, 0x9c, 0x4c, 0xdf, 0xcf, 0x28, 0x40, 0x8b, 0xd9, 0xa0, 0x36,
	0x0c, 0x7f, 0xc9, 0x80, 0x06, 0x6c, 0x92, 0xcb, 0x72, 0xa3, 0xfa, 0xde, 0x73, 0x2e, 0x28, 0x00,
	0x83, 0xc8, 0xd0, 0xbd, 0x44, 0xb6, 0x53, 0x21, 0x32, 0x17, 0x6d, 0x7d, 0xcd, 0x52, 0x2e, 0xc7,
	0xd1, 0x5d, 0x50, 0x65, 0xa2, 0x5c, 0xeb, 0xd9, 0x1b, 0xc1, 0x62, 0xd0, 0xa9, 0xe1, 0xaa, 0x00,
	0x70, 0x1b, 0xed, 0x0c, 0xfc, 0xc7, 0xbd, 0x19, 0x0b, 0x6e, 0xf9, 0x72, 0xae, 0xcb, 0xdb, 0x84,
	0xa4, 0xc5, 0x37, 0x34, 0x8a, 0x16, 0x74, 0x01, 0x21, 0xa9, 0x31, 0xcb, 0x84, 0x2a, 0xe3, 0xa1,
	0xb3, 0xee, 0x78, 0xe8, 0xfd, 0xa1, 0x81, 0x0e, 0x8c, 0x44, 0x51, 0x44, 0x8e, 0xcf, 0x50, 0xfd,
	0x85, 0x1c, 0x47, 0x26, 0x50, 0xd7, 0xc7, 0xd5, 0x74, 0x52, 0x56, 0x04, 0x6c, 0x8c, 0x93, 0xb2,
	0xee, 0x3d, 0xa9, 0x5a, 0xe5, 0xa4, 0x4a, 0x67, 0x6f, 0x57, 0xcf, 0xbe, 0x94, 0x82, 0xf5, 0xfb,
	0x53, 0xb0, 0xf1, 0x81, 0x14, 0xdc, 0xbc, 0xd3, 0x46, 0x8c, 0xdb, 0xd9, 0x2a, 0xdf, 0xce, 0xbf,
	0xc9, 0x92, 0xde, 0x6c, 0x19, 0xdf, 0x82, 0xb2, 0xa9, 0x63, 0xc9, 0x00, 0xc9, 0xba, 0xcf, 0xc3,
	0x38, 0xe4, 0x33, 0x36, 0x51, 0xf3, 0x2d, 0x82, 0x21, 0xb2, 0x0c, 0xca, 0xc8, 0x8c, 0x11, 0x58,
	0x65, 0x8d, 0x81, 0xe0, 0x33, 0xe4, 0x0c, 0x6f, 0xc3, 0x85, 0xcf, 0x22, 0x36, 0xa5, 0x82, 0xf5,
	0x68, 0x14, 0x41, 0x02, 0x6d, 0x93, 0x3b, 0x78, 0xe9, 0xf1, 0xb2, 0x57, 0x79, 0xbc, 0x9c, 0xa0,
	0xed, 0x11, 0x9b, 0x2f, 0x40, 0xa7, 0x92, 0x28, 0x97, 0x65, 0x06, 0x41, 0x36, 0x69, 0x32, 0xdf,
	0x07, 0xf7, 0x26, 0x24, 0xa3, 0x84, 0x5d, 0x2b, 0x03, 0x07, 0xf8, 0xd5, 0x40, 0x24, 0x4d, 0xf7,
	0xf9, 0x75, 0x9a, 0xdc, 0xc8, 0xe5, 0x66, 0x89, 0x48, 0xa0, 0x55, 0x6c, 0x93, 0x0a, 0x6a, 0x56,
	0x23, 0x2e, 0x57, 0xa3, 0xd1, 0x65, 0x0e, 0xcb, 0x5d, 0x26, 0x7b, 0x34, 0x41, 0xe8, 0x47, 0xc6,
	0xa3, 0x49, 0x02, 0xde, 0x18, 0x39, 0x45, 0xf2, 0x0d, 0x05, 0x15, 0x4b, 0x0e, 0x7d, 0x09, 0xbe,
	0x34, 0x47, 0x69, 0x09, 0xb2, 0x2e, 0x4d, 0xa6, 0x29, 0xe3, 0x5c, 0x53, 0x54, 0x2e, 0x97, 0xce,
	0xce, 0x2e, 0x9f, 0x9d, 0xf7, 0x32, 0x1b, 0xad, 0x8c, 0x79, 0xba, 0x1f, 0xdf, 0x24, 0xf8, 0x89,
	0xee, 0xf2, 0x52, 0xd0, 0xf4, 0xea, 0x1a, 0xf5, 0x20, 0x53, 0x3a, 0xd7, 0x93, 0xc2, 0xd4, 0xfb,
	0x95, 0x95, 0x4d, 0xfa, 0x25, 0x93, 0x7b, 0xcb, 0xe5, 0xb3, 0x4a, 0xb9, 0xb4, 0xce, 0xf7, 0x60,
	0x99, 0x0c, 0x34, 0xaa, 0xe7, 0x2c, 0x9b, 0x22, 0x54, 0x0f, 0xba, 0x33, 0x2f, 0xcb, 0xd4, 0xd4,
	0xb3, 0x85, 0x17, 0x64, 0xbd, 0x22, 0xd7, 0xfc, 0x37, 0x23, 0x37, 0x5c, 0x90, 0x4c, 0x58, 0x28,
	0x03, 0x3d, 0xf5, 0xe5, 0x80, 0x77, 0x99, 0xb5, 0xde, 0xd2, 0x78, 0xfc, 0x49, 0x69, 0x3c, 0x6e,
	0xe6, 0xbb, 0xd1, 0x0f, 0x11, 0x8c, 0xea, 0x3e, 0x15, 0x19, 0x37, 0xc0, 0xb7, 0xf7, 0x7b, 0x2b,
	0x7b, 0xdb, 0x98, 0x9e, 0xa0, 0xc3, 0xfd, 0x14, 0xb5, 0xca, 0x93, 0xb3, 0xbe, 0x8c, 0x8f, 0x8c,
	0xd0, 0x4d, 0x03, 0x52, 0x31, 0xff, 0x9f, 0xf4, 0x76, 0xef, 0xdb, 0x6c, 0xa7, 0xa5, 0xf1, 0xbb,
	0x8d, 0x76, 0x5e, 0xc5, 0x29, 0xa3, 0x13, 0x40, 0xf4, 0xc5, 0x9a, 0x90, 0x1c, 0xe1, 0x06, 0x2c,
	0x96, 0x23, 0x91, 0x32, 0x51, 0x47, 0x58, 0xc2, 0xbc, 0x53, 0xf4, 0x71, 0x3e, 0xdd, 0x3f, 0x4f,
	0x25, 0xc7, 0xc6, 0x22, 0x5a, 0x11, 0x46, 0x03, 0x69, 0xc3, 0xbd, 0x1f, 0xa3, 0xff, 0xd3, 0x65,
	0x70, 0x57, 0xa9, 0xc6, 0x72, 0x2d, 0xc0, 0xc9, 0x34, 0x49, 0x01, 0x78, 0x2f, 0xb3, 0x9f, 0xfa,
	0x21, 0x9f, 0x87, 0x9c, 0xbf, 0x48, 0x44, 0x78, 0x13, 0xaa, 0x19, 0x6d, 0xad, 0x57, 0x63, 0x0b,
	0xd5, 0x46, 0x59, 0x41, 0xd5, 0x46, 0xdc, 0x7b, 0x8e, 0xda, 0x79, 0xac, 0xa6, 0x33, 0xed, 0x7f,
	0x14, 0xce, 0xd9, 0x5a, 0xcf, 0xa3, 0x47, 0xd9, 0xf3, 0xe8, 0x3e, 0x27, 0x6a, 0x61, 0x2b, 0x5b,
	0xf8, 0xec, 0x37, 0x16, 0x6a, 0x95, 0x07, 0x07, 0xbc, 0x83, 0xb6, 0x5e, 0xc5, 0xb7, 0x71, 0xf2,
	0x8b, 0xd8, 0xd9, 0x90, 0x82, 0x6e, 0x24, 0x8e, 0x85, 0x3f, 0x42, 0x87, 0x17, 0x41, 0x20, 0x0f,
	0xd7, 0x64, 0x28, 0xa7, 0x86, 0x1f, 0xa0, 0x03, 0xb8, 0xd0, 0x12, 0x6c, 0xcb, 0x1f, 0x0f, 0x45,
	0x18, 0xdc, 0xb2, 0xd4, 0xa9, 0xe3, 0x3d, 0xcd, 0x49, 0x31, 0x0d, 0x23, 0xa7, 0x21, 0xc5, 0xbc,
	0xdf, 0x3a, 0x9b, 0x78, 0x0b, 0xd9, 0x97, 0xe1, 0x8d, 0xb3, 0x75, 0xf6, 0x47, 0xab, 0x54, 0x61,
	0x10, 0xd1, 0x61, 0x09, 0x7a, 0x91, 0xc4, 0xcc, 0xd9, 0xa8, 0x80, 0x32, 0x7a, 0xc7, 0xc2, 0x47,
	0x19, 0xb5, 0x01, 0x08, 0x7f, 0x9c, 0x5a, 0x05, 0xfd, 0x3a, 0x09, 0x03, 0xe6, 0xd8, 0x15, 0xf4,
	0x62, 0x39, 0x09, 0x13, 0xa7, 0x5e, 0x71, 0x7b, 0x15, 0xc6, 0xb7, 0x4e, 0x03, 0xe3, 0xec, 0x90,
	0x00, 0x94, 0x81, 0x6e, 0x3e, 0xfd, 0xf4, 0xed, 0xdf, 0x4e, 0x37, 0xfe, 0xfc, 0xee, 0xd4, 0x7a,
	0xfb, 0xee, 0xd4, 0xfa, 0xeb, 0xbb, 0x53, 0xeb, 0xb7, 0xef, 0x4f, 0x37, 0xde, 0xbe, 0x3f, 0xdd,
	0xf8, 0xcb, 0xfb, 0xd3, 0x8d, 0x6f, 0x1b, 0xdd, 0x2f, 0xe6, 0x7c, 0x3a, 0xde, 0x84, 0x7f, 0xe5,
	0xfd, 0xf0, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x6a, 0x35, 0x42, 0x3c, 0x14, 0x00, 0x00,
}

func (m *ClientSendMessageMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSendMessageMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSendMessageMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TinyThumb) > 0 {
		i -= len(m.TinyThumb)
		copy(dAtA[i:], m.TinyThumb)
		i = encodeVarintClient(dAtA, i, uint64(len(m.TinyThumb)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.FileTotalParts != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.FileTotalParts))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ThumbID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.ThumbID))
		i--
		dAtA[i] = 0x78
	}
	if m.FileID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.FileID))
		i--
		dAtA[i] = 0x70
	}
	if len(m.ThumbUploadID) > 0 {
		i -= len(m.ThumbUploadID)
		copy(dAtA[i:], m.ThumbUploadID)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ThumbUploadID)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.FileUploadID) > 0 {
		i -= len(m.FileUploadID)
		copy(dAtA[i:], m.FileUploadID)
		i = encodeVarintClient(dAtA, i, uint64(len(m.FileUploadID)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.ClearDraft {
		i--
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.ReplyTo != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.ReplyTo))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ThumbMIME) > 0 {
		i -= len(m.ThumbMIME)
		copy(dAtA[i:], m.ThumbMIME)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ThumbMIME)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FileMIME) > 0 {
		i -= len(m.FileMIME)
		copy(dAtA[i:], m.FileMIME)
		i = encodeVarintClient(dAtA, i, uint64(len(m.FileMIME)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ThumbFilePath) > 0 {
		i -= len(m.ThumbFilePath)
		copy(dAtA[i:], m.ThumbFilePath)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ThumbFilePath)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintClient(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintClient(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Caption) > 0 {
		i -= len(m.Caption)
		copy(dAtA[i:], m.Caption)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Caption)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MediaType != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.MediaType))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientGlobalSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientGlobalSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientGlobalSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SenderID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x28
	}
	if m.Limit != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LabelIDs) > 0 {
		dAtA4 := make([]byte, len(m.LabelIDs)*10)
		var j3 int
		for _, num1 := range m.LabelIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintClient(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientContactSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientContactSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientContactSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientGetCachedMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientGetCachedMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientGetCachedMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ClientClearCachedMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientClearCachedMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientClearCachedMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MediaTypes) > 0 {
		dAtA6 := make([]byte, len(m.MediaTypes)*10)
		var j5 int
		for _, num := range m.MediaTypes {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintClient(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientGetLastBotKeyboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientGetLastBotKeyboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientGetLastBotKeyboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientGetMediaHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientGetMediaHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientGetMediaHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MediaType != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.MediaType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientGetRecentSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientGetRecentSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientGetRecentSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientPutRecentSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientPutRecentSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientPutRecentSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientRemoveRecentSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientRemoveRecentSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientRemoveRecentSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientRemoveAllRecentSearches) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientRemoveAllRecentSearches) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientRemoveAllRecentSearches) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Extra {
		i--
		if m.Extra {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientGetSavedGifs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientGetSavedGifs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientGetSavedGifs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ClientGetTeamCounters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientGetTeamCounters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientGetTeamCounters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithMutes {
		i--
		if m.WithMutes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientPendingMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientPendingMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientPendingMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TinyThumb) > 0 {
		i -= len(m.TinyThumb)
		copy(dAtA[i:], m.TinyThumb)
		i = encodeVarintClient(dAtA, i, uint64(len(m.TinyThumb)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.TeamAccessHash != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.TeamAccessHash))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.TeamID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerFile != nil {
		{
			size, err := m.ServerFile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Sha256) > 0 {
		i -= len(m.Sha256)
		copy(dAtA[i:], m.Sha256)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Sha256)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.ThumbID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.ThumbID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.FileID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.FileID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.ThumbUploadID) > 0 {
		i -= len(m.ThumbUploadID)
		copy(dAtA[i:], m.ThumbUploadID)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ThumbUploadID)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.FileUploadID) > 0 {
		i -= len(m.FileUploadID)
		copy(dAtA[i:], m.FileUploadID)
		i = encodeVarintClient(dAtA, i, uint64(len(m.FileUploadID)))
		i--
		dAtA[i] = 0x72
	}
	if m.ClearDraft {
		i--
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.Media) > 0 {
		i -= len(m.Media)
		copy(dAtA[i:], m.Media)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Media)))
		i--
		dAtA[i] = 0x62
	}
	if m.MediaType != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.MediaType))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.SenderID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.SenderID))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x42
	}
	if m.ReplyTo != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.ReplyTo))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedOn != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.CreatedOn))
		i--
		dAtA[i] = 0x30
	}
	if m.AccessHash != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
		i--
		dAtA[i] = 0x29
	}
	if m.PeerType != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x20
	}
	if m.PeerID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.PeerID))
		i--
		dAtA[i] = 0x18
	}
	if m.RequestID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientSearchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSearchResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSearchResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MatchedGroups) > 0 {
		for iNdEx := len(m.MatchedGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatchedGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MatchedUsers) > 0 {
		for iNdEx := len(m.MatchedUsers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatchedUsers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientFilesMany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientFilesMany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientFilesMany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Gifs) > 0 {
		for iNdEx := len(m.Gifs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gifs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.WallpaperID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.WallpaperID))
		i--
		dAtA[i] = 0x78
	}
	if len(m.MD5Checksum) > 0 {
		i -= len(m.MD5Checksum)
		copy(dAtA[i:], m.MD5Checksum)
		i = encodeVarintClient(dAtA, i, uint64(len(m.MD5Checksum)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Extension) > 0 {
		i -= len(m.Extension)
		copy(dAtA[i:], m.Extension)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Extension)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Version != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x60
	}
	if m.PeerType != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x58
	}
	if m.PeerID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.PeerID))
		i--
		dAtA[i] = 0x50
	}
	if m.MessageID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x48
	}
	if m.FileSize != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x40
	}
	if m.GroupID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.GroupID))
		i--
		dAtA[i] = 0x38
	}
	if m.UserID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintClient(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.AccessHash != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x18
	}
	if m.FileID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.FileID))
		i--
		dAtA[i] = 0x10
	}
	if m.ClusterID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.ClusterID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Next != nil {
		{
			size, err := m.Next.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if len(m.ThumbPath) > 0 {
		i -= len(m.ThumbPath)
		copy(dAtA[i:], m.ThumbPath)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ThumbPath)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.ThumbID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.ThumbID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.GroupID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.GroupID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.IsProfilePhoto {
		i--
		if m.IsProfilePhoto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.FileSha256) > 0 {
		i -= len(m.FileSha256)
		copy(dAtA[i:], m.FileSha256)
		i = encodeVarintClient(dAtA, i, uint64(len(m.FileSha256)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.CheckSha256 {
		i--
		if m.CheckSha256 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if len(m.TempPath) > 0 {
		i -= len(m.TempPath)
		copy(dAtA[i:], m.TempPath)
		i = encodeVarintClient(dAtA, i, uint64(len(m.TempPath)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintClient(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0x6a
	}
	if m.SkipDelegateCall {
		i--
		if m.SkipDelegateCall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.TotalParts != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.TotalParts))
		i--
		dAtA[i] = 0x58
	}
	if len(m.FinishedParts) > 0 {
		dAtA15 := make([]byte, len(m.FinishedParts)*10)
		var j14 int
		for _, num1 := range m.FinishedParts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintClient(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x52
	}
	if m.ChunkSize != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.ChunkSize))
		i--
		dAtA[i] = 0x48
	}
	if m.FileSize != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x40
	}
	if m.Version != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x38
	}
	if m.AccessHash != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
		i--
		dAtA[i] = 0x31
	}
	if m.FileID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.FileID))
		i--
		dAtA[i] = 0x28
	}
	if m.ClusterID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.ClusterID))
		i--
		dAtA[i] = 0x20
	}
	if m.MessageID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x18
	}
	if m.PeerType != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x10
	}
	if m.PeerID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.PeerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientFileStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientFileStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientFileStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintClient(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Progress != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientCachedMediaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientCachedMediaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientCachedMediaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MediaInfo) > 0 {
		for iNdEx := len(m.MediaInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MediaInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientPeerMediaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientPeerMediaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientPeerMediaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Media) > 0 {
		for iNdEx := len(m.Media) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Media[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PeerType != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x10
	}
	if m.PeerID != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.PeerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientMediaSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientMediaSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMediaSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalSize != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.TotalSize))
		i--
		dAtA[i] = 0x10
	}
	if m.MediaType != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.MediaType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientRecentSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientRecentSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientRecentSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Date != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientRecentSearchMany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientRecentSearchMany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientRecentSearchMany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RecentSearches) > 0 {
		for iNdEx := len(m.RecentSearches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecentSearches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientTeamCounters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientTeamCounters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientTeamCounters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MentionCount != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.MentionCount))
		i--
		dAtA[i] = 0x10
	}
	if m.UnreadCount != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.UnreadCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientGetFrequentlyReactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientGetFrequentlyReactions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientGetFrequentlyReactions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ClientFrequentlyReactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientFrequentlyReactions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientFrequentlyReactions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reactions) > 0 {
		for iNdEx := len(m.Reactions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Reactions[iNdEx])
			copy(dAtA[i:], m.Reactions[iNdEx])
			i = encodeVarintClient(dAtA, i, uint64(len(m.Reactions[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientDismissNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientDismissNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientDismissNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ts != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientGetNotificationDismissTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientGetNotificationDismissTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientGetNotificationDismissTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientNotificationDismissTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientNotificationDismissTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientNotificationDismissTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ts != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintClient(dAtA []byte, offset int, v uint64) int {
	offset -= sovClient(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientSendMessageMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.MediaType != 0 {
		n += 1 + sovClient(uint64(m.MediaType))
	}
	l = len(m.Caption)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.ThumbFilePath)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.FileMIME)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.ThumbMIME)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.ReplyTo != 0 {
		n += 1 + sovClient(uint64(m.ReplyTo))
	}
	if m.ClearDraft {
		n += 2
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	l = len(m.FileUploadID)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.ThumbUploadID)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.FileID != 0 {
		n += 1 + sovClient(uint64(m.FileID))
	}
	if m.ThumbID != 0 {
		n += 1 + sovClient(uint64(m.ThumbID))
	}
	if m.FileTotalParts != 0 {
		n += 2 + sovClient(uint64(m.FileTotalParts))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 2 + l + sovClient(uint64(l))
		}
	}
	l = len(m.TinyThumb)
	if l > 0 {
		n += 2 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ClientGlobalSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if len(m.LabelIDs) > 0 {
		l = 0
		for _, e := range m.LabelIDs {
			l += sovClient(uint64(e))
		}
		n += 1 + sovClient(uint64(l)) + l
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovClient(uint64(m.Limit))
	}
	if m.SenderID != 0 {
		n += 1 + sovClient(uint64(m.SenderID))
	}
	return n
}

func (m *ClientContactSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ClientGetCachedMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClientClearCachedMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if len(m.MediaTypes) > 0 {
		l = 0
		for _, e := range m.MediaTypes {
			l += sovClient(uint64(e))
		}
		n += 1 + sovClient(uint64(l)) + l
	}
	return n
}

func (m *ClientGetLastBotKeyboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ClientGetMediaHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MediaType != 0 {
		n += 1 + sovClient(uint64(m.MediaType))
	}
	return n
}

func (m *ClientGetRecentSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovClient(uint64(m.Limit))
	}
	return n
}

func (m *ClientPutRecentSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ClientRemoveRecentSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ClientRemoveAllRecentSearches) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Extra {
		n += 2
	}
	return n
}

func (m *ClientGetSavedGifs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClientGetTeamCounters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.WithMutes {
		n += 2
	}
	return n
}

func (m *ClientPendingMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovClient(uint64(m.ID))
	}
	if m.RequestID != 0 {
		n += 1 + sovClient(uint64(m.RequestID))
	}
	if m.PeerID != 0 {
		n += 1 + sovClient(uint64(m.PeerID))
	}
	if m.PeerType != 0 {
		n += 1 + sovClient(uint64(m.PeerType))
	}
	if m.AccessHash != 0 {
		n += 9
	}
	if m.CreatedOn != 0 {
		n += 1 + sovClient(uint64(m.CreatedOn))
	}
	if m.ReplyTo != 0 {
		n += 1 + sovClient(uint64(m.ReplyTo))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.SenderID != 0 {
		n += 1 + sovClient(uint64(m.SenderID))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if m.MediaType != 0 {
		n += 1 + sovClient(uint64(m.MediaType))
	}
	l = len(m.Media)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.ClearDraft {
		n += 2
	}
	l = len(m.FileUploadID)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.ThumbUploadID)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.FileID != 0 {
		n += 2 + sovClient(uint64(m.FileID))
	}
	if m.ThumbID != 0 {
		n += 2 + sovClient(uint64(m.ThumbID))
	}
	l = len(m.Sha256)
	if l > 0 {
		n += 2 + l + sovClient(uint64(l))
	}
	if m.ServerFile != nil {
		l = m.ServerFile.Size()
		n += 2 + l + sovClient(uint64(l))
	}
	if m.TeamID != 0 {
		n += 2 + sovClient(uint64(m.TeamID))
	}
	if m.TeamAccessHash != 0 {
		n += 2 + sovClient(uint64(m.TeamAccessHash))
	}
	l = len(m.TinyThumb)
	if l > 0 {
		n += 2 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ClientSearchResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if len(m.MatchedUsers) > 0 {
		for _, e := range m.MatchedUsers {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if len(m.MatchedGroups) > 0 {
		for _, e := range m.MatchedGroups {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	return n
}

func (m *ClientFilesMany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gifs) > 0 {
		for _, e := range m.Gifs {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovClient(uint64(m.Total))
	}
	return n
}

func (m *ClientFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != 0 {
		n += 1 + sovClient(uint64(m.ClusterID))
	}
	if m.FileID != 0 {
		n += 1 + sovClient(uint64(m.FileID))
	}
	if m.AccessHash != 0 {
		n += 1 + sovClient(uint64(m.AccessHash))
	}
	if m.Type != 0 {
		n += 1 + sovClient(uint64(m.Type))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.UserID != 0 {
		n += 1 + sovClient(uint64(m.UserID))
	}
	if m.GroupID != 0 {
		n += 1 + sovClient(uint64(m.GroupID))
	}
	if m.FileSize != 0 {
		n += 1 + sovClient(uint64(m.FileSize))
	}
	if m.MessageID != 0 {
		n += 1 + sovClient(uint64(m.MessageID))
	}
	if m.PeerID != 0 {
		n += 1 + sovClient(uint64(m.PeerID))
	}
	if m.PeerType != 0 {
		n += 1 + sovClient(uint64(m.PeerType))
	}
	if m.Version != 0 {
		n += 1 + sovClient(uint64(m.Version))
	}
	l = len(m.Extension)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.MD5Checksum)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.WallpaperID != 0 {
		n += 1 + sovClient(uint64(m.WallpaperID))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 2 + l + sovClient(uint64(l))
		}
	}
	return n
}

func (m *ClientFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerID != 0 {
		n += 1 + sovClient(uint64(m.PeerID))
	}
	if m.PeerType != 0 {
		n += 1 + sovClient(uint64(m.PeerType))
	}
	if m.MessageID != 0 {
		n += 1 + sovClient(uint64(m.MessageID))
	}
	if m.ClusterID != 0 {
		n += 1 + sovClient(uint64(m.ClusterID))
	}
	if m.FileID != 0 {
		n += 1 + sovClient(uint64(m.FileID))
	}
	if m.AccessHash != 0 {
		n += 9
	}
	if m.Version != 0 {
		n += 1 + sovClient(uint64(m.Version))
	}
	if m.FileSize != 0 {
		n += 1 + sovClient(uint64(m.FileSize))
	}
	if m.ChunkSize != 0 {
		n += 1 + sovClient(uint64(m.ChunkSize))
	}
	if len(m.FinishedParts) > 0 {
		l = 0
		for _, e := range m.FinishedParts {
			l += sovClient(uint64(e))
		}
		n += 1 + sovClient(uint64(l)) + l
	}
	if m.TotalParts != 0 {
		n += 1 + sovClient(uint64(m.TotalParts))
	}
	if m.SkipDelegateCall {
		n += 2
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.TempPath)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.CheckSha256 {
		n += 2
	}
	l = len(m.FileSha256)
	if l > 0 {
		n += 2 + l + sovClient(uint64(l))
	}
	if m.IsProfilePhoto {
		n += 3
	}
	if m.GroupID != 0 {
		n += 2 + sovClient(uint64(m.GroupID))
	}
	if m.ThumbID != 0 {
		n += 2 + sovClient(uint64(m.ThumbID))
	}
	l = len(m.ThumbPath)
	if l > 0 {
		n += 2 + l + sovClient(uint64(l))
	}
	if m.Next != nil {
		l = m.Next.Size()
		n += 2 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ClientFileStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovClient(uint64(m.Status))
	}
	if m.Progress != 0 {
		n += 1 + sovClient(uint64(m.Progress))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ClientCachedMediaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MediaInfo) > 0 {
		for _, e := range m.MediaInfo {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	return n
}

func (m *ClientPeerMediaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerID != 0 {
		n += 1 + sovClient(uint64(m.PeerID))
	}
	if m.PeerType != 0 {
		n += 1 + sovClient(uint64(m.PeerType))
	}
	if len(m.Media) > 0 {
		for _, e := range m.Media {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	return n
}

func (m *ClientMediaSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MediaType != 0 {
		n += 1 + sovClient(uint64(m.MediaType))
	}
	if m.TotalSize != 0 {
		n += 1 + sovClient(uint64(m.TotalSize))
	}
	return n
}

func (m *ClientRecentSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovClient(uint64(m.Date))
	}
	return n
}

func (m *ClientRecentSearchMany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecentSearches) > 0 {
		for _, e := range m.RecentSearches {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	return n
}

func (m *ClientTeamCounters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnreadCount != 0 {
		n += 1 + sovClient(uint64(m.UnreadCount))
	}
	if m.MentionCount != 0 {
		n += 1 + sovClient(uint64(m.MentionCount))
	}
	return n
}

func (m *ClientGetFrequentlyReactions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClientFrequentlyReactions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reactions) > 0 {
		for _, s := range m.Reactions {
			l = len(s)
			n += 1 + l + sovClient(uint64(l))
		}
	}
	return n
}

func (m *ClientDismissNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovClient(uint64(m.Ts))
	}
	return n
}

func (m *ClientGetNotificationDismissTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ClientNotificationDismissTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ts != 0 {
		n += 1 + sovClient(uint64(m.Ts))
	}
	return n
}

func sovClient(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClient(x uint64) (n int) {
	return sovClient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientSendMessageMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSendMessageMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSendMessageMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= InputMediaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbFilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbFilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileMIME", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileMIME = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbMIME", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbMIME = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			m.ReplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &DocumentAttribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileUploadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileUploadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUploadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbUploadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			m.FileID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbID", wireType)
			}
			m.ThumbID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThumbID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileTotalParts", wireType)
			}
			m.FileTotalParts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileTotalParts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TinyThumb", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TinyThumb = append(m.TinyThumb[:0], dAtA[iNdEx:postIndex]...)
			if m.TinyThumb == nil {
				m.TinyThumb = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGlobalSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGlobalSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGlobalSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClient
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthClient
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClient
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientContactSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientContactSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientContactSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGetCachedMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGetCachedMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGetCachedMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientClearCachedMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientClearCachedMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientClearCachedMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v ClientMediaType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ClientMediaType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MediaTypes = append(m.MediaTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClient
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthClient
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.MediaTypes) == 0 {
					m.MediaTypes = make([]ClientMediaType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ClientMediaType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClient
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ClientMediaType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MediaTypes = append(m.MediaTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaTypes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGetLastBotKeyboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGetLastBotKeyboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGetLastBotKeyboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGetMediaHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGetMediaHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGetMediaHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= ClientMediaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGetRecentSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGetRecentSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGetRecentSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientPutRecentSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientPutRecentSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientPutRecentSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientRemoveRecentSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientRemoveRecentSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientRemoveRecentSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientRemoveAllRecentSearches) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientRemoveAllRecentSearches: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientRemoveAllRecentSearches: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Extra = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGetSavedGifs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGetSavedGifs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGetSavedGifs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGetTeamCounters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGetTeamCounters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGetTeamCounters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &InputTeam{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithMutes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithMutes = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientPendingMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientPendingMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientPendingMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			m.ReplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= InputMediaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media[:0], dAtA[iNdEx:postIndex]...)
			if m.Media == nil {
				m.Media = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileUploadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileUploadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUploadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbUploadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			m.FileID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbID", wireType)
			}
			m.ThumbID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThumbID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256 = append(m.Sha256[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha256 == nil {
				m.Sha256 = []byte{}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerFile == nil {
				m.ServerFile = &FileLocation{}
			}
			if err := m.ServerFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamAccessHash", wireType)
			}
			m.TeamAccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamAccessHash |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TinyThumb", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TinyThumb = append(m.TinyThumb[:0], dAtA[iNdEx:postIndex]...)
			if m.TinyThumb == nil {
				m.TinyThumb = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSearchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSearchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSearchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &UserMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchedUsers = append(m.MatchedUsers, &User{})
			if err := m.MatchedUsers[len(m.MatchedUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchedGroups = append(m.MatchedGroups, &Group{})
			if err := m.MatchedGroups[len(m.MatchedGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientFilesMany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientFilesMany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientFilesMany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gifs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gifs = append(m.Gifs, &ClientFile{})
			if err := m.Gifs[len(m.Gifs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			m.FileID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ClientFileType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MD5Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MD5Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WallpaperID", wireType)
			}
			m.WallpaperID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WallpaperID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &DocumentAttribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			m.FileID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			m.ChunkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FinishedParts = append(m.FinishedParts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClient
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthClient
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FinishedParts) == 0 {
					m.FinishedParts = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClient
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FinishedParts = append(m.FinishedParts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedParts", wireType)
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalParts", wireType)
			}
			m.TotalParts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalParts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipDelegateCall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipDelegateCall = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TempPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckSha256", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CheckSha256 = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSha256", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSha256 = append(m.FileSha256[:0], dAtA[iNdEx:postIndex]...)
			if m.FileSha256 == nil {
				m.FileSha256 = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsProfilePhoto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsProfilePhoto = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbID", wireType)
			}
			m.ThumbID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThumbID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Next == nil {
				m.Next = &ClientFileRequest{}
			}
			if err := m.Next.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientFileStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientFileStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientFileStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientCachedMediaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientCachedMediaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientCachedMediaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaInfo = append(m.MediaInfo, &ClientPeerMediaInfo{})
			if err := m.MediaInfo[len(m.MediaInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientPeerMediaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientPeerMediaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientPeerMediaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= PeerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media, &ClientMediaSize{})
			if err := m.Media[len(m.Media)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientMediaSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientMediaSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientMediaSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= ClientMediaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			m.TotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientRecentSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientRecentSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientRecentSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientRecentSearchMany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientRecentSearchMany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientRecentSearchMany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentSearches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentSearches = append(m.RecentSearches, &ClientRecentSearch{})
			if err := m.RecentSearches[len(m.RecentSearches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientTeamCounters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientTeamCounters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientTeamCounters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MentionCount", wireType)
			}
			m.MentionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MentionCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGetFrequentlyReactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGetFrequentlyReactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGetFrequentlyReactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientFrequentlyReactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientFrequentlyReactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientFrequentlyReactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientDismissNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientDismissNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientDismissNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGetNotificationDismissTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGetNotificationDismissTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGetNotificationDismissTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientNotificationDismissTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientNotificationDismissTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientNotificationDismissTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClient
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClient
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClient
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClient        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClient          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClient = fmt.Errorf("proto: unexpected end of group")
)
