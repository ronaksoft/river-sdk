// Code generated by Rony's protoc plugin; DO NOT EDIT.

package msg

import (
	edge "github.com/ronaksoft/rony/edge"
	registry "github.com/ronaksoft/rony/registry"
	proto "google.golang.org/protobuf/proto"
	sync "sync"
)

const C_ClientCallToggleVideo int64 = 2873625233

type poolClientCallToggleVideo struct {
	pool sync.Pool
}

func (p *poolClientCallToggleVideo) Get() *ClientCallToggleVideo {
	x, ok := p.pool.Get().(*ClientCallToggleVideo)
	if !ok {
		x = &ClientCallToggleVideo{}
	}
	return x
}

func (p *poolClientCallToggleVideo) Put(x *ClientCallToggleVideo) {
	if x == nil {
		return
	}
	x.Video = false
	p.pool.Put(x)
}

var PoolClientCallToggleVideo = poolClientCallToggleVideo{}

func (x *ClientCallToggleVideo) DeepCopy(z *ClientCallToggleVideo) {
	z.Video = x.Video
}

func (x *ClientCallToggleVideo) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallToggleVideo) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallToggleVideo) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallToggleVideo, x)
}

const C_ClientCallToggleAudio int64 = 3488802344

type poolClientCallToggleAudio struct {
	pool sync.Pool
}

func (p *poolClientCallToggleAudio) Get() *ClientCallToggleAudio {
	x, ok := p.pool.Get().(*ClientCallToggleAudio)
	if !ok {
		x = &ClientCallToggleAudio{}
	}
	return x
}

func (p *poolClientCallToggleAudio) Put(x *ClientCallToggleAudio) {
	if x == nil {
		return
	}
	x.Audio = false
	p.pool.Put(x)
}

var PoolClientCallToggleAudio = poolClientCallToggleAudio{}

func (x *ClientCallToggleAudio) DeepCopy(z *ClientCallToggleAudio) {
	z.Audio = x.Audio
}

func (x *ClientCallToggleAudio) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallToggleAudio) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallToggleAudio) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallToggleAudio, x)
}

const C_ClientCallTryReconnect int64 = 346556278

type poolClientCallTryReconnect struct {
	pool sync.Pool
}

func (p *poolClientCallTryReconnect) Get() *ClientCallTryReconnect {
	x, ok := p.pool.Get().(*ClientCallTryReconnect)
	if !ok {
		x = &ClientCallTryReconnect{}
	}
	return x
}

func (p *poolClientCallTryReconnect) Put(x *ClientCallTryReconnect) {
	if x == nil {
		return
	}
	x.ConnId = 0
	p.pool.Put(x)
}

var PoolClientCallTryReconnect = poolClientCallTryReconnect{}

func (x *ClientCallTryReconnect) DeepCopy(z *ClientCallTryReconnect) {
	z.ConnId = x.ConnId
}

func (x *ClientCallTryReconnect) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallTryReconnect) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallTryReconnect) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallTryReconnect, x)
}

const C_ClientCallDestroy int64 = 3560765778

type poolClientCallDestroy struct {
	pool sync.Pool
}

func (p *poolClientCallDestroy) Get() *ClientCallDestroy {
	x, ok := p.pool.Get().(*ClientCallDestroy)
	if !ok {
		x = &ClientCallDestroy{}
	}
	return x
}

func (p *poolClientCallDestroy) Put(x *ClientCallDestroy) {
	if x == nil {
		return
	}
	x.CallID = 0
	p.pool.Put(x)
}

var PoolClientCallDestroy = poolClientCallDestroy{}

func (x *ClientCallDestroy) DeepCopy(z *ClientCallDestroy) {
	z.CallID = x.CallID
}

func (x *ClientCallDestroy) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallDestroy) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallDestroy) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallDestroy, x)
}

const C_ClientCallAreAllAudio int64 = 4108555878

type poolClientCallAreAllAudio struct {
	pool sync.Pool
}

func (p *poolClientCallAreAllAudio) Get() *ClientCallAreAllAudio {
	x, ok := p.pool.Get().(*ClientCallAreAllAudio)
	if !ok {
		x = &ClientCallAreAllAudio{}
	}
	return x
}

func (p *poolClientCallAreAllAudio) Put(x *ClientCallAreAllAudio) {
	if x == nil {
		return
	}
	p.pool.Put(x)
}

var PoolClientCallAreAllAudio = poolClientCallAreAllAudio{}

func (x *ClientCallAreAllAudio) DeepCopy(z *ClientCallAreAllAudio) {
}

func (x *ClientCallAreAllAudio) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallAreAllAudio) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallAreAllAudio) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallAreAllAudio, x)
}

const C_ClientCallSendIceCandidate int64 = 1007531716

type poolClientCallSendIceCandidate struct {
	pool sync.Pool
}

func (p *poolClientCallSendIceCandidate) Get() *ClientCallSendIceCandidate {
	x, ok := p.pool.Get().(*ClientCallSendIceCandidate)
	if !ok {
		x = &ClientCallSendIceCandidate{}
	}
	return x
}

func (p *poolClientCallSendIceCandidate) Put(x *ClientCallSendIceCandidate) {
	if x == nil {
		return
	}
	x.ConnId = 0
	PoolCallRTCIceCandidate.Put(x.Candidate)
	x.Candidate = nil
	p.pool.Put(x)
}

var PoolClientCallSendIceCandidate = poolClientCallSendIceCandidate{}

func (x *ClientCallSendIceCandidate) DeepCopy(z *ClientCallSendIceCandidate) {
	z.ConnId = x.ConnId
	if x.Candidate != nil {
		if z.Candidate == nil {
			z.Candidate = PoolCallRTCIceCandidate.Get()
		}
		x.Candidate.DeepCopy(z.Candidate)
	} else {
		z.Candidate = nil
	}
}

func (x *ClientCallSendIceCandidate) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallSendIceCandidate) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallSendIceCandidate) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallSendIceCandidate, x)
}

const C_ClientCallSendIceConnectionStatus int64 = 3421647876

type poolClientCallSendIceConnectionStatus struct {
	pool sync.Pool
}

func (p *poolClientCallSendIceConnectionStatus) Get() *ClientCallSendIceConnectionStatus {
	x, ok := p.pool.Get().(*ClientCallSendIceConnectionStatus)
	if !ok {
		x = &ClientCallSendIceConnectionStatus{}
	}
	return x
}

func (p *poolClientCallSendIceConnectionStatus) Put(x *ClientCallSendIceConnectionStatus) {
	if x == nil {
		return
	}
	x.ConnId = 0
	x.State = ""
	x.HasIceError = false
	x.IceError = ""
	p.pool.Put(x)
}

var PoolClientCallSendIceConnectionStatus = poolClientCallSendIceConnectionStatus{}

func (x *ClientCallSendIceConnectionStatus) DeepCopy(z *ClientCallSendIceConnectionStatus) {
	z.ConnId = x.ConnId
	z.State = x.State
	z.HasIceError = x.HasIceError
	z.IceError = x.IceError
}

func (x *ClientCallSendIceConnectionStatus) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallSendIceConnectionStatus) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallSendIceConnectionStatus) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallSendIceConnectionStatus, x)
}

const C_ClientCallSendTrack int64 = 2856076314

type poolClientCallSendTrack struct {
	pool sync.Pool
}

func (p *poolClientCallSendTrack) Get() *ClientCallSendTrack {
	x, ok := p.pool.Get().(*ClientCallSendTrack)
	if !ok {
		x = &ClientCallSendTrack{}
	}
	return x
}

func (p *poolClientCallSendTrack) Put(x *ClientCallSendTrack) {
	if x == nil {
		return
	}
	x.ConnId = 0
	x.StreamID = ""
	p.pool.Put(x)
}

var PoolClientCallSendTrack = poolClientCallSendTrack{}

func (x *ClientCallSendTrack) DeepCopy(z *ClientCallSendTrack) {
	z.ConnId = x.ConnId
	z.StreamID = x.StreamID
}

func (x *ClientCallSendTrack) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallSendTrack) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallSendTrack) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallSendTrack, x)
}

const C_ClientCallSendMediaSettings int64 = 2959794351

type poolClientCallSendMediaSettings struct {
	pool sync.Pool
}

func (p *poolClientCallSendMediaSettings) Get() *ClientCallSendMediaSettings {
	x, ok := p.pool.Get().(*ClientCallSendMediaSettings)
	if !ok {
		x = &ClientCallSendMediaSettings{}
	}
	return x
}

func (p *poolClientCallSendMediaSettings) Put(x *ClientCallSendMediaSettings) {
	if x == nil {
		return
	}
	PoolCallMediaSettings.Put(x.MediaSettings)
	x.MediaSettings = nil
	p.pool.Put(x)
}

var PoolClientCallSendMediaSettings = poolClientCallSendMediaSettings{}

func (x *ClientCallSendMediaSettings) DeepCopy(z *ClientCallSendMediaSettings) {
	if x.MediaSettings != nil {
		if z.MediaSettings == nil {
			z.MediaSettings = PoolCallMediaSettings.Get()
		}
		x.MediaSettings.DeepCopy(z.MediaSettings)
	} else {
		z.MediaSettings = nil
	}
}

func (x *ClientCallSendMediaSettings) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallSendMediaSettings) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallSendMediaSettings) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallSendMediaSettings, x)
}

const C_ClientCallStart int64 = 1041146964

type poolClientCallStart struct {
	pool sync.Pool
}

func (p *poolClientCallStart) Get() *ClientCallStart {
	x, ok := p.pool.Get().(*ClientCallStart)
	if !ok {
		x = &ClientCallStart{}
	}
	return x
}

func (p *poolClientCallStart) Put(x *ClientCallStart) {
	if x == nil {
		return
	}
	PoolInputPeer.Put(x.Peer)
	x.Peer = nil
	for _, z := range x.InputUsers {
		PoolInputUser.Put(z)
	}
	x.InputUsers = x.InputUsers[:0]
	x.Video = false
	x.CallID = 0
	p.pool.Put(x)
}

var PoolClientCallStart = poolClientCallStart{}

func (x *ClientCallStart) DeepCopy(z *ClientCallStart) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		z.Peer = nil
	}
	for idx := range x.InputUsers {
		if x.InputUsers[idx] != nil {
			xx := PoolInputUser.Get()
			x.InputUsers[idx].DeepCopy(xx)
			z.InputUsers = append(z.InputUsers, xx)
		}
	}
	z.Video = x.Video
	z.CallID = x.CallID
}

func (x *ClientCallStart) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallStart) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallStart) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallStart, x)
}

const C_ClientCallStarted int64 = 484502003

type poolClientCallStarted struct {
	pool sync.Pool
}

func (p *poolClientCallStarted) Get() *ClientCallStarted {
	x, ok := p.pool.Get().(*ClientCallStarted)
	if !ok {
		x = &ClientCallStarted{}
	}
	return x
}

func (p *poolClientCallStarted) Put(x *ClientCallStarted) {
	if x == nil {
		return
	}
	x.CallID = 0
	p.pool.Put(x)
}

var PoolClientCallStarted = poolClientCallStarted{}

func (x *ClientCallStarted) DeepCopy(z *ClientCallStarted) {
	z.CallID = x.CallID
}

func (x *ClientCallStarted) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallStarted) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallStarted) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallStarted, x)
}

const C_ClientCallJoin int64 = 2382593398

type poolClientCallJoin struct {
	pool sync.Pool
}

func (p *poolClientCallJoin) Get() *ClientCallJoin {
	x, ok := p.pool.Get().(*ClientCallJoin)
	if !ok {
		x = &ClientCallJoin{}
	}
	return x
}

func (p *poolClientCallJoin) Put(x *ClientCallJoin) {
	if x == nil {
		return
	}
	PoolInputPeer.Put(x.Peer)
	x.Peer = nil
	x.CallID = 0
	p.pool.Put(x)
}

var PoolClientCallJoin = poolClientCallJoin{}

func (x *ClientCallJoin) DeepCopy(z *ClientCallJoin) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		z.Peer = nil
	}
	z.CallID = x.CallID
}

func (x *ClientCallJoin) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallJoin) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallJoin) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallJoin, x)
}

const C_ClientCallAccept int64 = 2726334873

type poolClientCallAccept struct {
	pool sync.Pool
}

func (p *poolClientCallAccept) Get() *ClientCallAccept {
	x, ok := p.pool.Get().(*ClientCallAccept)
	if !ok {
		x = &ClientCallAccept{}
	}
	return x
}

func (p *poolClientCallAccept) Put(x *ClientCallAccept) {
	if x == nil {
		return
	}
	x.CallID = 0
	x.Video = false
	p.pool.Put(x)
}

var PoolClientCallAccept = poolClientCallAccept{}

func (x *ClientCallAccept) DeepCopy(z *ClientCallAccept) {
	z.CallID = x.CallID
	z.Video = x.Video
}

func (x *ClientCallAccept) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallAccept) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallAccept) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallAccept, x)
}

const C_ClientCallReject int64 = 3026524692

type poolClientCallReject struct {
	pool sync.Pool
}

func (p *poolClientCallReject) Get() *ClientCallReject {
	x, ok := p.pool.Get().(*ClientCallReject)
	if !ok {
		x = &ClientCallReject{}
	}
	return x
}

func (p *poolClientCallReject) Put(x *ClientCallReject) {
	if x == nil {
		return
	}
	x.CallID = 0
	x.Duration = 0
	x.Reason = 0
	PoolInputPeer.Put(x.TargetPeer)
	x.TargetPeer = nil
	p.pool.Put(x)
}

var PoolClientCallReject = poolClientCallReject{}

func (x *ClientCallReject) DeepCopy(z *ClientCallReject) {
	z.CallID = x.CallID
	z.Duration = x.Duration
	z.Reason = x.Reason
	if x.TargetPeer != nil {
		if z.TargetPeer == nil {
			z.TargetPeer = PoolInputPeer.Get()
		}
		x.TargetPeer.DeepCopy(z.TargetPeer)
	} else {
		z.TargetPeer = nil
	}
}

func (x *ClientCallReject) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallReject) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallReject) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallReject, x)
}

const C_ClientCallGetParticipantByUserID int64 = 1253505450

type poolClientCallGetParticipantByUserID struct {
	pool sync.Pool
}

func (p *poolClientCallGetParticipantByUserID) Get() *ClientCallGetParticipantByUserID {
	x, ok := p.pool.Get().(*ClientCallGetParticipantByUserID)
	if !ok {
		x = &ClientCallGetParticipantByUserID{}
	}
	return x
}

func (p *poolClientCallGetParticipantByUserID) Put(x *ClientCallGetParticipantByUserID) {
	if x == nil {
		return
	}
	x.CallID = 0
	x.UserID = 0
	p.pool.Put(x)
}

var PoolClientCallGetParticipantByUserID = poolClientCallGetParticipantByUserID{}

func (x *ClientCallGetParticipantByUserID) DeepCopy(z *ClientCallGetParticipantByUserID) {
	z.CallID = x.CallID
	z.UserID = x.UserID
}

func (x *ClientCallGetParticipantByUserID) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallGetParticipantByUserID) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallGetParticipantByUserID) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallGetParticipantByUserID, x)
}

const C_ClientCallGetParticipantByConnId int64 = 3279593330

type poolClientCallGetParticipantByConnId struct {
	pool sync.Pool
}

func (p *poolClientCallGetParticipantByConnId) Get() *ClientCallGetParticipantByConnId {
	x, ok := p.pool.Get().(*ClientCallGetParticipantByConnId)
	if !ok {
		x = &ClientCallGetParticipantByConnId{}
	}
	return x
}

func (p *poolClientCallGetParticipantByConnId) Put(x *ClientCallGetParticipantByConnId) {
	if x == nil {
		return
	}
	x.ConnId = 0
	p.pool.Put(x)
}

var PoolClientCallGetParticipantByConnId = poolClientCallGetParticipantByConnId{}

func (x *ClientCallGetParticipantByConnId) DeepCopy(z *ClientCallGetParticipantByConnId) {
	z.ConnId = x.ConnId
}

func (x *ClientCallGetParticipantByConnId) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallGetParticipantByConnId) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallGetParticipantByConnId) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallGetParticipantByConnId, x)
}

const C_ClientCallGetParticipantList int64 = 348508034

type poolClientCallGetParticipantList struct {
	pool sync.Pool
}

func (p *poolClientCallGetParticipantList) Get() *ClientCallGetParticipantList {
	x, ok := p.pool.Get().(*ClientCallGetParticipantList)
	if !ok {
		x = &ClientCallGetParticipantList{}
	}
	return x
}

func (p *poolClientCallGetParticipantList) Put(x *ClientCallGetParticipantList) {
	if x == nil {
		return
	}
	x.CallID = 0
	x.ExcludeCurrent = false
	p.pool.Put(x)
}

var PoolClientCallGetParticipantList = poolClientCallGetParticipantList{}

func (x *ClientCallGetParticipantList) DeepCopy(z *ClientCallGetParticipantList) {
	z.CallID = x.CallID
	z.ExcludeCurrent = x.ExcludeCurrent
}

func (x *ClientCallGetParticipantList) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallGetParticipantList) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallGetParticipantList) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallGetParticipantList, x)
}

const C_ClientCallMuteParticipant int64 = 2518831668

type poolClientCallMuteParticipant struct {
	pool sync.Pool
}

func (p *poolClientCallMuteParticipant) Get() *ClientCallMuteParticipant {
	x, ok := p.pool.Get().(*ClientCallMuteParticipant)
	if !ok {
		x = &ClientCallMuteParticipant{}
	}
	return x
}

func (p *poolClientCallMuteParticipant) Put(x *ClientCallMuteParticipant) {
	if x == nil {
		return
	}
	x.UserID = 0
	x.Muted = false
	p.pool.Put(x)
}

var PoolClientCallMuteParticipant = poolClientCallMuteParticipant{}

func (x *ClientCallMuteParticipant) DeepCopy(z *ClientCallMuteParticipant) {
	z.UserID = x.UserID
	z.Muted = x.Muted
}

func (x *ClientCallMuteParticipant) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallMuteParticipant) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallMuteParticipant) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallMuteParticipant, x)
}

const C_ClientCallGroupAddParticipant int64 = 1850196430

type poolClientCallGroupAddParticipant struct {
	pool sync.Pool
}

func (p *poolClientCallGroupAddParticipant) Get() *ClientCallGroupAddParticipant {
	x, ok := p.pool.Get().(*ClientCallGroupAddParticipant)
	if !ok {
		x = &ClientCallGroupAddParticipant{}
	}
	return x
}

func (p *poolClientCallGroupAddParticipant) Put(x *ClientCallGroupAddParticipant) {
	if x == nil {
		return
	}
	x.CallID = 0
	for _, z := range x.Participants {
		PoolInputUser.Put(z)
	}
	x.Participants = x.Participants[:0]
	p.pool.Put(x)
}

var PoolClientCallGroupAddParticipant = poolClientCallGroupAddParticipant{}

func (x *ClientCallGroupAddParticipant) DeepCopy(z *ClientCallGroupAddParticipant) {
	z.CallID = x.CallID
	for idx := range x.Participants {
		if x.Participants[idx] != nil {
			xx := PoolInputUser.Get()
			x.Participants[idx].DeepCopy(xx)
			z.Participants = append(z.Participants, xx)
		}
	}
}

func (x *ClientCallGroupAddParticipant) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallGroupAddParticipant) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallGroupAddParticipant) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallGroupAddParticipant, x)
}

const C_ClientCallGroupRemoveParticipant int64 = 2417422237

type poolClientCallGroupRemoveParticipant struct {
	pool sync.Pool
}

func (p *poolClientCallGroupRemoveParticipant) Get() *ClientCallGroupRemoveParticipant {
	x, ok := p.pool.Get().(*ClientCallGroupRemoveParticipant)
	if !ok {
		x = &ClientCallGroupRemoveParticipant{}
	}
	return x
}

func (p *poolClientCallGroupRemoveParticipant) Put(x *ClientCallGroupRemoveParticipant) {
	if x == nil {
		return
	}
	x.CallID = 0
	x.UserIDs = x.UserIDs[:0]
	x.Timeout = false
	p.pool.Put(x)
}

var PoolClientCallGroupRemoveParticipant = poolClientCallGroupRemoveParticipant{}

func (x *ClientCallGroupRemoveParticipant) DeepCopy(z *ClientCallGroupRemoveParticipant) {
	z.CallID = x.CallID
	z.UserIDs = append(z.UserIDs[:0], x.UserIDs...)
	z.Timeout = x.Timeout
}

func (x *ClientCallGroupRemoveParticipant) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallGroupRemoveParticipant) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallGroupRemoveParticipant) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallGroupRemoveParticipant, x)
}

const C_ClientCallGroupUpdateAdmin int64 = 3544832701

type poolClientCallGroupUpdateAdmin struct {
	pool sync.Pool
}

func (p *poolClientCallGroupUpdateAdmin) Get() *ClientCallGroupUpdateAdmin {
	x, ok := p.pool.Get().(*ClientCallGroupUpdateAdmin)
	if !ok {
		x = &ClientCallGroupUpdateAdmin{}
	}
	return x
}

func (p *poolClientCallGroupUpdateAdmin) Put(x *ClientCallGroupUpdateAdmin) {
	if x == nil {
		return
	}
	x.CallID = 0
	x.UserID = 0
	x.Admin = false
	p.pool.Put(x)
}

var PoolClientCallGroupUpdateAdmin = poolClientCallGroupUpdateAdmin{}

func (x *ClientCallGroupUpdateAdmin) DeepCopy(z *ClientCallGroupUpdateAdmin) {
	z.CallID = x.CallID
	z.UserID = x.UserID
	z.Admin = x.Admin
}

func (x *ClientCallGroupUpdateAdmin) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCallGroupUpdateAdmin) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *ClientCallGroupUpdateAdmin) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCallGroupUpdateAdmin, x)
}

const C_CallMediaSettings int64 = 1147111688

type poolCallMediaSettings struct {
	pool sync.Pool
}

func (p *poolCallMediaSettings) Get() *CallMediaSettings {
	x, ok := p.pool.Get().(*CallMediaSettings)
	if !ok {
		x = &CallMediaSettings{}
	}
	return x
}

func (p *poolCallMediaSettings) Put(x *CallMediaSettings) {
	if x == nil {
		return
	}
	x.Audio = false
	x.ScreenShare = false
	x.Video = false
	p.pool.Put(x)
}

var PoolCallMediaSettings = poolCallMediaSettings{}

func (x *CallMediaSettings) DeepCopy(z *CallMediaSettings) {
	z.Audio = x.Audio
	z.ScreenShare = x.ScreenShare
	z.Video = x.Video
}

func (x *CallMediaSettings) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallMediaSettings) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallMediaSettings) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallMediaSettings, x)
}

const C_CallParticipant int64 = 2652007354

type poolCallParticipant struct {
	pool sync.Pool
}

func (p *poolCallParticipant) Get() *CallParticipant {
	x, ok := p.pool.Get().(*CallParticipant)
	if !ok {
		x = &CallParticipant{}
	}
	return x
}

func (p *poolCallParticipant) Put(x *CallParticipant) {
	if x == nil {
		return
	}
	PoolPhoneParticipant.Put(x.PhoneParticipant)
	x.PhoneParticipant = nil
	x.DeviceType = 0
	PoolCallMediaSettings.Put(x.MediaSettings)
	x.MediaSettings = nil
	x.Muted = false
	x.Started = false
	p.pool.Put(x)
}

var PoolCallParticipant = poolCallParticipant{}

func (x *CallParticipant) DeepCopy(z *CallParticipant) {
	if x.PhoneParticipant != nil {
		if z.PhoneParticipant == nil {
			z.PhoneParticipant = PoolPhoneParticipant.Get()
		}
		x.PhoneParticipant.DeepCopy(z.PhoneParticipant)
	} else {
		z.PhoneParticipant = nil
	}
	z.DeviceType = x.DeviceType
	if x.MediaSettings != nil {
		if z.MediaSettings == nil {
			z.MediaSettings = PoolCallMediaSettings.Get()
		}
		x.MediaSettings.DeepCopy(z.MediaSettings)
	} else {
		z.MediaSettings = nil
	}
	z.Muted = x.Muted
	z.Started = x.Started
}

func (x *CallParticipant) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallParticipant) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallParticipant) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallParticipant, x)
}

const C_CallParticipants int64 = 807700466

type poolCallParticipants struct {
	pool sync.Pool
}

func (p *poolCallParticipants) Get() *CallParticipants {
	x, ok := p.pool.Get().(*CallParticipants)
	if !ok {
		x = &CallParticipants{}
	}
	return x
}

func (p *poolCallParticipants) Put(x *CallParticipants) {
	if x == nil {
		return
	}
	for _, z := range x.CallParticipants {
		PoolCallParticipant.Put(z)
	}
	x.CallParticipants = x.CallParticipants[:0]
	p.pool.Put(x)
}

var PoolCallParticipants = poolCallParticipants{}

func (x *CallParticipants) DeepCopy(z *CallParticipants) {
	for idx := range x.CallParticipants {
		if x.CallParticipants[idx] != nil {
			xx := PoolCallParticipant.Get()
			x.CallParticipants[idx].DeepCopy(xx)
			z.CallParticipants = append(z.CallParticipants, xx)
		}
	}
}

func (x *CallParticipants) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallParticipants) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallParticipants) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallParticipants, x)
}

const C_CallRTCIceCandidate int64 = 2748774954

type poolCallRTCIceCandidate struct {
	pool sync.Pool
}

func (p *poolCallRTCIceCandidate) Get() *CallRTCIceCandidate {
	x, ok := p.pool.Get().(*CallRTCIceCandidate)
	if !ok {
		x = &CallRTCIceCandidate{}
	}
	return x
}

func (p *poolCallRTCIceCandidate) Put(x *CallRTCIceCandidate) {
	if x == nil {
		return
	}
	x.Candidate = ""
	x.SdpMLineIndex = 0
	x.SdpMid = ""
	x.UsernameFragment = ""
	p.pool.Put(x)
}

var PoolCallRTCIceCandidate = poolCallRTCIceCandidate{}

func (x *CallRTCIceCandidate) DeepCopy(z *CallRTCIceCandidate) {
	z.Candidate = x.Candidate
	z.SdpMLineIndex = x.SdpMLineIndex
	z.SdpMid = x.SdpMid
	z.UsernameFragment = x.UsernameFragment
}

func (x *CallRTCIceCandidate) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallRTCIceCandidate) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallRTCIceCandidate) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallRTCIceCandidate, x)
}

const C_CallConnection int64 = 3450901888

type poolCallConnection struct {
	pool sync.Pool
}

func (p *poolCallConnection) Get() *CallConnection {
	x, ok := p.pool.Get().(*CallConnection)
	if !ok {
		x = &CallConnection{}
	}
	return x
}

func (p *poolCallConnection) Put(x *CallConnection) {
	if x == nil {
		return
	}
	x.ConnId = 0
	x.Accepted = false
	x.RTCPeerConnectionID = 0
	x.IceConnectionState = ""
	for _, z := range x.IceQueue {
		PoolCallRTCIceCandidate.Put(z)
	}
	x.IceQueue = x.IceQueue[:0]
	for _, z := range x.IceServers {
		PoolIceServer.Put(z)
	}
	x.IceServers = x.IceServers[:0]
	x.Init = false
	x.Try = 0
	x.Reconnecting = false
	x.ReconnectingTry = 0
	x.ScreenShareStreamID = 0
	x.StreamID = ""
	x.IntervalID = 0
	p.pool.Put(x)
}

var PoolCallConnection = poolCallConnection{}

func (x *CallConnection) DeepCopy(z *CallConnection) {
	z.ConnId = x.ConnId
	z.Accepted = x.Accepted
	z.RTCPeerConnectionID = x.RTCPeerConnectionID
	z.IceConnectionState = x.IceConnectionState
	for idx := range x.IceQueue {
		if x.IceQueue[idx] != nil {
			xx := PoolCallRTCIceCandidate.Get()
			x.IceQueue[idx].DeepCopy(xx)
			z.IceQueue = append(z.IceQueue, xx)
		}
	}
	for idx := range x.IceServers {
		if x.IceServers[idx] != nil {
			xx := PoolIceServer.Get()
			x.IceServers[idx].DeepCopy(xx)
			z.IceServers = append(z.IceServers, xx)
		}
	}
	z.Init = x.Init
	z.Try = x.Try
	z.Reconnecting = x.Reconnecting
	z.ReconnectingTry = x.ReconnectingTry
	z.ScreenShareStreamID = x.ScreenShareStreamID
	z.StreamID = x.StreamID
	z.IntervalID = x.IntervalID
}

func (x *CallConnection) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallConnection) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallConnection) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallConnection, x)
}

const C_CallUpdateCallRequested int64 = 2556114354

type poolCallUpdateCallRequested struct {
	pool sync.Pool
}

func (p *poolCallUpdateCallRequested) Get() *CallUpdateCallRequested {
	x, ok := p.pool.Get().(*CallUpdateCallRequested)
	if !ok {
		x = &CallUpdateCallRequested{}
	}
	return x
}

func (p *poolCallUpdateCallRequested) Put(x *CallUpdateCallRequested) {
	if x == nil {
		return
	}
	PoolInputPeer.Put(x.Peer)
	x.Peer = nil
	x.CallID = 0
	p.pool.Put(x)
}

var PoolCallUpdateCallRequested = poolCallUpdateCallRequested{}

func (x *CallUpdateCallRequested) DeepCopy(z *CallUpdateCallRequested) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		z.Peer = nil
	}
	z.CallID = x.CallID
}

func (x *CallUpdateCallRequested) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateCallRequested) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateCallRequested) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateCallRequested, x)
}

const C_CallUpdateCallAccepted int64 = 2134109006

type poolCallUpdateCallAccepted struct {
	pool sync.Pool
}

func (p *poolCallUpdateCallAccepted) Get() *CallUpdateCallAccepted {
	x, ok := p.pool.Get().(*CallUpdateCallAccepted)
	if !ok {
		x = &CallUpdateCallAccepted{}
	}
	return x
}

func (p *poolCallUpdateCallAccepted) Put(x *CallUpdateCallAccepted) {
	if x == nil {
		return
	}
	x.ConnectionID = 0
	p.pool.Put(x)
}

var PoolCallUpdateCallAccepted = poolCallUpdateCallAccepted{}

func (x *CallUpdateCallAccepted) DeepCopy(z *CallUpdateCallAccepted) {
	z.ConnectionID = x.ConnectionID
}

func (x *CallUpdateCallAccepted) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateCallAccepted) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateCallAccepted) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateCallAccepted, x)
}

const C_CallUpdateStreamUpdated int64 = 3496218809

type poolCallUpdateStreamUpdated struct {
	pool sync.Pool
}

func (p *poolCallUpdateStreamUpdated) Get() *CallUpdateStreamUpdated {
	x, ok := p.pool.Get().(*CallUpdateStreamUpdated)
	if !ok {
		x = &CallUpdateStreamUpdated{}
	}
	return x
}

func (p *poolCallUpdateStreamUpdated) Put(x *CallUpdateStreamUpdated) {
	if x == nil {
		return
	}
	x.ConnectionID = 0
	x.StreamID = ""
	p.pool.Put(x)
}

var PoolCallUpdateStreamUpdated = poolCallUpdateStreamUpdated{}

func (x *CallUpdateStreamUpdated) DeepCopy(z *CallUpdateStreamUpdated) {
	z.ConnectionID = x.ConnectionID
	z.StreamID = x.StreamID
}

func (x *CallUpdateStreamUpdated) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateStreamUpdated) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateStreamUpdated) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateStreamUpdated, x)
}

const C_CallUpdateCallRejected int64 = 2339651845

type poolCallUpdateCallRejected struct {
	pool sync.Pool
}

func (p *poolCallUpdateCallRejected) Get() *CallUpdateCallRejected {
	x, ok := p.pool.Get().(*CallUpdateCallRejected)
	if !ok {
		x = &CallUpdateCallRejected{}
	}
	return x
}

func (p *poolCallUpdateCallRejected) Put(x *CallUpdateCallRejected) {
	if x == nil {
		return
	}
	x.CallID = 0
	x.Reason = 0
	p.pool.Put(x)
}

var PoolCallUpdateCallRejected = poolCallUpdateCallRejected{}

func (x *CallUpdateCallRejected) DeepCopy(z *CallUpdateCallRejected) {
	z.CallID = x.CallID
	z.Reason = x.Reason
}

func (x *CallUpdateCallRejected) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateCallRejected) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateCallRejected) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateCallRejected, x)
}

const C_CallUpdateMediaSettingsUpdated int64 = 3922101985

type poolCallUpdateMediaSettingsUpdated struct {
	pool sync.Pool
}

func (p *poolCallUpdateMediaSettingsUpdated) Get() *CallUpdateMediaSettingsUpdated {
	x, ok := p.pool.Get().(*CallUpdateMediaSettingsUpdated)
	if !ok {
		x = &CallUpdateMediaSettingsUpdated{}
	}
	return x
}

func (p *poolCallUpdateMediaSettingsUpdated) Put(x *CallUpdateMediaSettingsUpdated) {
	if x == nil {
		return
	}
	x.ConnectionID = 0
	PoolCallMediaSettings.Put(x.MediaSettings)
	x.MediaSettings = nil
	p.pool.Put(x)
}

var PoolCallUpdateMediaSettingsUpdated = poolCallUpdateMediaSettingsUpdated{}

func (x *CallUpdateMediaSettingsUpdated) DeepCopy(z *CallUpdateMediaSettingsUpdated) {
	z.ConnectionID = x.ConnectionID
	if x.MediaSettings != nil {
		if z.MediaSettings == nil {
			z.MediaSettings = PoolCallMediaSettings.Get()
		}
		x.MediaSettings.DeepCopy(z.MediaSettings)
	} else {
		z.MediaSettings = nil
	}
}

func (x *CallUpdateMediaSettingsUpdated) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateMediaSettingsUpdated) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateMediaSettingsUpdated) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateMediaSettingsUpdated, x)
}

const C_CallUpdateLocalStreamUpdated int64 = 1043624904

type poolCallUpdateLocalStreamUpdated struct {
	pool sync.Pool
}

func (p *poolCallUpdateLocalStreamUpdated) Get() *CallUpdateLocalStreamUpdated {
	x, ok := p.pool.Get().(*CallUpdateLocalStreamUpdated)
	if !ok {
		x = &CallUpdateLocalStreamUpdated{}
	}
	return x
}

func (p *poolCallUpdateLocalStreamUpdated) Put(x *CallUpdateLocalStreamUpdated) {
	if x == nil {
		return
	}
	x.StreamID = ""
	p.pool.Put(x)
}

var PoolCallUpdateLocalStreamUpdated = poolCallUpdateLocalStreamUpdated{}

func (x *CallUpdateLocalStreamUpdated) DeepCopy(z *CallUpdateLocalStreamUpdated) {
	z.StreamID = x.StreamID
}

func (x *CallUpdateLocalStreamUpdated) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateLocalStreamUpdated) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateLocalStreamUpdated) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateLocalStreamUpdated, x)
}

const C_CallUpdateCallTimeout int64 = 420503198

type poolCallUpdateCallTimeout struct {
	pool sync.Pool
}

func (p *poolCallUpdateCallTimeout) Get() *CallUpdateCallTimeout {
	x, ok := p.pool.Get().(*CallUpdateCallTimeout)
	if !ok {
		x = &CallUpdateCallTimeout{}
	}
	return x
}

func (p *poolCallUpdateCallTimeout) Put(x *CallUpdateCallTimeout) {
	if x == nil {
		return
	}
	p.pool.Put(x)
}

var PoolCallUpdateCallTimeout = poolCallUpdateCallTimeout{}

func (x *CallUpdateCallTimeout) DeepCopy(z *CallUpdateCallTimeout) {
}

func (x *CallUpdateCallTimeout) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateCallTimeout) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateCallTimeout) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateCallTimeout, x)
}

const C_CallUpdateCallAck int64 = 1424725011

type poolCallUpdateCallAck struct {
	pool sync.Pool
}

func (p *poolCallUpdateCallAck) Get() *CallUpdateCallAck {
	x, ok := p.pool.Get().(*CallUpdateCallAck)
	if !ok {
		x = &CallUpdateCallAck{}
	}
	return x
}

func (p *poolCallUpdateCallAck) Put(x *CallUpdateCallAck) {
	if x == nil {
		return
	}
	x.ConnectionID = 0
	p.pool.Put(x)
}

var PoolCallUpdateCallAck = poolCallUpdateCallAck{}

func (x *CallUpdateCallAck) DeepCopy(z *CallUpdateCallAck) {
	z.ConnectionID = x.ConnectionID
}

func (x *CallUpdateCallAck) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateCallAck) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateCallAck) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateCallAck, x)
}

const C_CallUpdateParticipantJoined int64 = 1005455524

type poolCallUpdateParticipantJoined struct {
	pool sync.Pool
}

func (p *poolCallUpdateParticipantJoined) Get() *CallUpdateParticipantJoined {
	x, ok := p.pool.Get().(*CallUpdateParticipantJoined)
	if !ok {
		x = &CallUpdateParticipantJoined{}
	}
	return x
}

func (p *poolCallUpdateParticipantJoined) Put(x *CallUpdateParticipantJoined) {
	if x == nil {
		return
	}
	x.UserIDs = x.UserIDs[:0]
	p.pool.Put(x)
}

var PoolCallUpdateParticipantJoined = poolCallUpdateParticipantJoined{}

func (x *CallUpdateParticipantJoined) DeepCopy(z *CallUpdateParticipantJoined) {
	z.UserIDs = append(z.UserIDs[:0], x.UserIDs...)
}

func (x *CallUpdateParticipantJoined) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateParticipantJoined) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateParticipantJoined) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateParticipantJoined, x)
}

const C_CallUpdateParticipantLeft int64 = 2062471712

type poolCallUpdateParticipantLeft struct {
	pool sync.Pool
}

func (p *poolCallUpdateParticipantLeft) Get() *CallUpdateParticipantLeft {
	x, ok := p.pool.Get().(*CallUpdateParticipantLeft)
	if !ok {
		x = &CallUpdateParticipantLeft{}
	}
	return x
}

func (p *poolCallUpdateParticipantLeft) Put(x *CallUpdateParticipantLeft) {
	if x == nil {
		return
	}
	x.UserID = 0
	p.pool.Put(x)
}

var PoolCallUpdateParticipantLeft = poolCallUpdateParticipantLeft{}

func (x *CallUpdateParticipantLeft) DeepCopy(z *CallUpdateParticipantLeft) {
	z.UserID = x.UserID
}

func (x *CallUpdateParticipantLeft) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateParticipantLeft) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateParticipantLeft) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateParticipantLeft, x)
}

const C_CallUpdateParticipantRemoved int64 = 4138786615

type poolCallUpdateParticipantRemoved struct {
	pool sync.Pool
}

func (p *poolCallUpdateParticipantRemoved) Get() *CallUpdateParticipantRemoved {
	x, ok := p.pool.Get().(*CallUpdateParticipantRemoved)
	if !ok {
		x = &CallUpdateParticipantRemoved{}
	}
	return x
}

func (p *poolCallUpdateParticipantRemoved) Put(x *CallUpdateParticipantRemoved) {
	if x == nil {
		return
	}
	x.UserIDs = x.UserIDs[:0]
	x.Timeout = false
	p.pool.Put(x)
}

var PoolCallUpdateParticipantRemoved = poolCallUpdateParticipantRemoved{}

func (x *CallUpdateParticipantRemoved) DeepCopy(z *CallUpdateParticipantRemoved) {
	z.UserIDs = append(z.UserIDs[:0], x.UserIDs...)
	z.Timeout = x.Timeout
}

func (x *CallUpdateParticipantRemoved) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateParticipantRemoved) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateParticipantRemoved) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateParticipantRemoved, x)
}

const C_CallUpdateCallPreview int64 = 567542844

type poolCallUpdateCallPreview struct {
	pool sync.Pool
}

func (p *poolCallUpdateCallPreview) Get() *CallUpdateCallPreview {
	x, ok := p.pool.Get().(*CallUpdateCallPreview)
	if !ok {
		x = &CallUpdateCallPreview{}
	}
	return x
}

func (p *poolCallUpdateCallPreview) Put(x *CallUpdateCallPreview) {
	if x == nil {
		return
	}
	x.CallID = 0
	PoolInputPeer.Put(x.Peer)
	x.Peer = nil
	p.pool.Put(x)
}

var PoolCallUpdateCallPreview = poolCallUpdateCallPreview{}

func (x *CallUpdateCallPreview) DeepCopy(z *CallUpdateCallPreview) {
	z.CallID = x.CallID
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		z.Peer = nil
	}
}

func (x *CallUpdateCallPreview) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateCallPreview) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateCallPreview) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateCallPreview, x)
}

const C_CallUpdateCallCancelled int64 = 4194096602

type poolCallUpdateCallCancelled struct {
	pool sync.Pool
}

func (p *poolCallUpdateCallCancelled) Get() *CallUpdateCallCancelled {
	x, ok := p.pool.Get().(*CallUpdateCallCancelled)
	if !ok {
		x = &CallUpdateCallCancelled{}
	}
	return x
}

func (p *poolCallUpdateCallCancelled) Put(x *CallUpdateCallCancelled) {
	if x == nil {
		return
	}
	x.CallID = 0
	p.pool.Put(x)
}

var PoolCallUpdateCallCancelled = poolCallUpdateCallCancelled{}

func (x *CallUpdateCallCancelled) DeepCopy(z *CallUpdateCallCancelled) {
	z.CallID = x.CallID
}

func (x *CallUpdateCallCancelled) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateCallCancelled) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateCallCancelled) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateCallCancelled, x)
}

const C_CallUpdateCallJoinRequested int64 = 945899454

type poolCallUpdateCallJoinRequested struct {
	pool sync.Pool
}

func (p *poolCallUpdateCallJoinRequested) Get() *CallUpdateCallJoinRequested {
	x, ok := p.pool.Get().(*CallUpdateCallJoinRequested)
	if !ok {
		x = &CallUpdateCallJoinRequested{}
	}
	return x
}

func (p *poolCallUpdateCallJoinRequested) Put(x *CallUpdateCallJoinRequested) {
	if x == nil {
		return
	}
	x.CallID = 0
	x.CalleeID = 0
	PoolInputPeer.Put(x.Peer)
	x.Peer = nil
	p.pool.Put(x)
}

var PoolCallUpdateCallJoinRequested = poolCallUpdateCallJoinRequested{}

func (x *CallUpdateCallJoinRequested) DeepCopy(z *CallUpdateCallJoinRequested) {
	z.CallID = x.CallID
	z.CalleeID = x.CalleeID
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		z.Peer = nil
	}
}

func (x *CallUpdateCallJoinRequested) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateCallJoinRequested) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateCallJoinRequested) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateCallJoinRequested, x)
}

const C_CallUpdateParticipantAdminUpdated int64 = 2487316396

type poolCallUpdateParticipantAdminUpdated struct {
	pool sync.Pool
}

func (p *poolCallUpdateParticipantAdminUpdated) Get() *CallUpdateParticipantAdminUpdated {
	x, ok := p.pool.Get().(*CallUpdateParticipantAdminUpdated)
	if !ok {
		x = &CallUpdateParticipantAdminUpdated{}
	}
	return x
}

func (p *poolCallUpdateParticipantAdminUpdated) Put(x *CallUpdateParticipantAdminUpdated) {
	if x == nil {
		return
	}
	x.UserID = 0
	x.Admin = false
	p.pool.Put(x)
}

var PoolCallUpdateParticipantAdminUpdated = poolCallUpdateParticipantAdminUpdated{}

func (x *CallUpdateParticipantAdminUpdated) DeepCopy(z *CallUpdateParticipantAdminUpdated) {
	z.UserID = x.UserID
	z.Admin = x.Admin
}

func (x *CallUpdateParticipantAdminUpdated) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateParticipantAdminUpdated) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateParticipantAdminUpdated) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateParticipantAdminUpdated, x)
}

const C_CallUpdateShareScreenStreamUpdated int64 = 2763784404

type poolCallUpdateShareScreenStreamUpdated struct {
	pool sync.Pool
}

func (p *poolCallUpdateShareScreenStreamUpdated) Get() *CallUpdateShareScreenStreamUpdated {
	x, ok := p.pool.Get().(*CallUpdateShareScreenStreamUpdated)
	if !ok {
		x = &CallUpdateShareScreenStreamUpdated{}
	}
	return x
}

func (p *poolCallUpdateShareScreenStreamUpdated) Put(x *CallUpdateShareScreenStreamUpdated) {
	if x == nil {
		return
	}
	x.CallID = 0
	x.ConnectionID = 0
	x.StreamID = ""
	p.pool.Put(x)
}

var PoolCallUpdateShareScreenStreamUpdated = poolCallUpdateShareScreenStreamUpdated{}

func (x *CallUpdateShareScreenStreamUpdated) DeepCopy(z *CallUpdateShareScreenStreamUpdated) {
	z.CallID = x.CallID
	z.ConnectionID = x.ConnectionID
	z.StreamID = x.StreamID
}

func (x *CallUpdateShareScreenStreamUpdated) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateShareScreenStreamUpdated) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateShareScreenStreamUpdated) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateShareScreenStreamUpdated, x)
}

const C_CallUpdateAllConnected int64 = 1993183151

type poolCallUpdateAllConnected struct {
	pool sync.Pool
}

func (p *poolCallUpdateAllConnected) Get() *CallUpdateAllConnected {
	x, ok := p.pool.Get().(*CallUpdateAllConnected)
	if !ok {
		x = &CallUpdateAllConnected{}
	}
	return x
}

func (p *poolCallUpdateAllConnected) Put(x *CallUpdateAllConnected) {
	if x == nil {
		return
	}
	p.pool.Put(x)
}

var PoolCallUpdateAllConnected = poolCallUpdateAllConnected{}

func (x *CallUpdateAllConnected) DeepCopy(z *CallUpdateAllConnected) {
}

func (x *CallUpdateAllConnected) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateAllConnected) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateAllConnected) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateAllConnected, x)
}

const C_CallUpdateConnectionStatusChanged int64 = 4028141073

type poolCallUpdateConnectionStatusChanged struct {
	pool sync.Pool
}

func (p *poolCallUpdateConnectionStatusChanged) Get() *CallUpdateConnectionStatusChanged {
	x, ok := p.pool.Get().(*CallUpdateConnectionStatusChanged)
	if !ok {
		x = &CallUpdateConnectionStatusChanged{}
	}
	return x
}

func (p *poolCallUpdateConnectionStatusChanged) Put(x *CallUpdateConnectionStatusChanged) {
	if x == nil {
		return
	}
	x.ConnectionID = 0
	x.State = ""
	p.pool.Put(x)
}

var PoolCallUpdateConnectionStatusChanged = poolCallUpdateConnectionStatusChanged{}

func (x *CallUpdateConnectionStatusChanged) DeepCopy(z *CallUpdateConnectionStatusChanged) {
	z.ConnectionID = x.ConnectionID
	z.State = x.State
}

func (x *CallUpdateConnectionStatusChanged) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateConnectionStatusChanged) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateConnectionStatusChanged) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateConnectionStatusChanged, x)
}

const C_CallUpdateParticipantMuted int64 = 2194386679

type poolCallUpdateParticipantMuted struct {
	pool sync.Pool
}

func (p *poolCallUpdateParticipantMuted) Get() *CallUpdateParticipantMuted {
	x, ok := p.pool.Get().(*CallUpdateParticipantMuted)
	if !ok {
		x = &CallUpdateParticipantMuted{}
	}
	return x
}

func (p *poolCallUpdateParticipantMuted) Put(x *CallUpdateParticipantMuted) {
	if x == nil {
		return
	}
	x.ConnectionID = 0
	x.Muted = false
	x.UserID = 0
	p.pool.Put(x)
}

var PoolCallUpdateParticipantMuted = poolCallUpdateParticipantMuted{}

func (x *CallUpdateParticipantMuted) DeepCopy(z *CallUpdateParticipantMuted) {
	z.ConnectionID = x.ConnectionID
	z.Muted = x.Muted
	z.UserID = x.UserID
}

func (x *CallUpdateParticipantMuted) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateParticipantMuted) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateParticipantMuted) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateParticipantMuted, x)
}

const C_CallUpdateCallDestroyed int64 = 3684039715

type poolCallUpdateCallDestroyed struct {
	pool sync.Pool
}

func (p *poolCallUpdateCallDestroyed) Get() *CallUpdateCallDestroyed {
	x, ok := p.pool.Get().(*CallUpdateCallDestroyed)
	if !ok {
		x = &CallUpdateCallDestroyed{}
	}
	return x
}

func (p *poolCallUpdateCallDestroyed) Put(x *CallUpdateCallDestroyed) {
	if x == nil {
		return
	}
	x.CallID = 0
	p.pool.Put(x)
}

var PoolCallUpdateCallDestroyed = poolCallUpdateCallDestroyed{}

func (x *CallUpdateCallDestroyed) DeepCopy(z *CallUpdateCallDestroyed) {
	z.CallID = x.CallID
}

func (x *CallUpdateCallDestroyed) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateCallDestroyed) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateCallDestroyed) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateCallDestroyed, x)
}

const C_CallUpdateLocalMediaSettingsUpdated int64 = 587913546

type poolCallUpdateLocalMediaSettingsUpdated struct {
	pool sync.Pool
}

func (p *poolCallUpdateLocalMediaSettingsUpdated) Get() *CallUpdateLocalMediaSettingsUpdated {
	x, ok := p.pool.Get().(*CallUpdateLocalMediaSettingsUpdated)
	if !ok {
		x = &CallUpdateLocalMediaSettingsUpdated{}
	}
	return x
}

func (p *poolCallUpdateLocalMediaSettingsUpdated) Put(x *CallUpdateLocalMediaSettingsUpdated) {
	if x == nil {
		return
	}
	PoolCallMediaSettings.Put(x.MediaSettings)
	x.MediaSettings = nil
	p.pool.Put(x)
}

var PoolCallUpdateLocalMediaSettingsUpdated = poolCallUpdateLocalMediaSettingsUpdated{}

func (x *CallUpdateLocalMediaSettingsUpdated) DeepCopy(z *CallUpdateLocalMediaSettingsUpdated) {
	if x.MediaSettings != nil {
		if z.MediaSettings == nil {
			z.MediaSettings = PoolCallMediaSettings.Get()
		}
		x.MediaSettings.DeepCopy(z.MediaSettings)
	} else {
		z.MediaSettings = nil
	}
}

func (x *CallUpdateLocalMediaSettingsUpdated) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *CallUpdateLocalMediaSettingsUpdated) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{}.Unmarshal(b, x)
}

func (x *CallUpdateLocalMediaSettingsUpdated) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_CallUpdateLocalMediaSettingsUpdated, x)
}

func init() {
	registry.RegisterConstructor(2873625233, "ClientCallToggleVideo")
	registry.RegisterConstructor(3488802344, "ClientCallToggleAudio")
	registry.RegisterConstructor(346556278, "ClientCallTryReconnect")
	registry.RegisterConstructor(3560765778, "ClientCallDestroy")
	registry.RegisterConstructor(4108555878, "ClientCallAreAllAudio")
	registry.RegisterConstructor(1007531716, "ClientCallSendIceCandidate")
	registry.RegisterConstructor(3421647876, "ClientCallSendIceConnectionStatus")
	registry.RegisterConstructor(2856076314, "ClientCallSendTrack")
	registry.RegisterConstructor(2959794351, "ClientCallSendMediaSettings")
	registry.RegisterConstructor(1041146964, "ClientCallStart")
	registry.RegisterConstructor(484502003, "ClientCallStarted")
	registry.RegisterConstructor(2382593398, "ClientCallJoin")
	registry.RegisterConstructor(2726334873, "ClientCallAccept")
	registry.RegisterConstructor(3026524692, "ClientCallReject")
	registry.RegisterConstructor(1253505450, "ClientCallGetParticipantByUserID")
	registry.RegisterConstructor(3279593330, "ClientCallGetParticipantByConnId")
	registry.RegisterConstructor(348508034, "ClientCallGetParticipantList")
	registry.RegisterConstructor(2518831668, "ClientCallMuteParticipant")
	registry.RegisterConstructor(1850196430, "ClientCallGroupAddParticipant")
	registry.RegisterConstructor(2417422237, "ClientCallGroupRemoveParticipant")
	registry.RegisterConstructor(3544832701, "ClientCallGroupUpdateAdmin")
	registry.RegisterConstructor(1147111688, "CallMediaSettings")
	registry.RegisterConstructor(2652007354, "CallParticipant")
	registry.RegisterConstructor(807700466, "CallParticipants")
	registry.RegisterConstructor(2748774954, "CallRTCIceCandidate")
	registry.RegisterConstructor(3450901888, "CallConnection")
	registry.RegisterConstructor(2556114354, "CallUpdateCallRequested")
	registry.RegisterConstructor(2134109006, "CallUpdateCallAccepted")
	registry.RegisterConstructor(3496218809, "CallUpdateStreamUpdated")
	registry.RegisterConstructor(2339651845, "CallUpdateCallRejected")
	registry.RegisterConstructor(3922101985, "CallUpdateMediaSettingsUpdated")
	registry.RegisterConstructor(1043624904, "CallUpdateLocalStreamUpdated")
	registry.RegisterConstructor(420503198, "CallUpdateCallTimeout")
	registry.RegisterConstructor(1424725011, "CallUpdateCallAck")
	registry.RegisterConstructor(1005455524, "CallUpdateParticipantJoined")
	registry.RegisterConstructor(2062471712, "CallUpdateParticipantLeft")
	registry.RegisterConstructor(4138786615, "CallUpdateParticipantRemoved")
	registry.RegisterConstructor(567542844, "CallUpdateCallPreview")
	registry.RegisterConstructor(4194096602, "CallUpdateCallCancelled")
	registry.RegisterConstructor(945899454, "CallUpdateCallJoinRequested")
	registry.RegisterConstructor(2487316396, "CallUpdateParticipantAdminUpdated")
	registry.RegisterConstructor(2763784404, "CallUpdateShareScreenStreamUpdated")
	registry.RegisterConstructor(1993183151, "CallUpdateAllConnected")
	registry.RegisterConstructor(4028141073, "CallUpdateConnectionStatusChanged")
	registry.RegisterConstructor(2194386679, "CallUpdateParticipantMuted")
	registry.RegisterConstructor(3684039715, "CallUpdateCallDestroyed")
	registry.RegisterConstructor(587913546, "CallUpdateLocalMediaSettingsUpdated")
}
