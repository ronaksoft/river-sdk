// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: core.types.proto

package msg

import (
	rony "github.com/ronaksoft/rony"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TypingAction
type TypingAction int32

const (
	TypingAction_TypingActionTyping         TypingAction = 0
	TypingAction_TypingActionRecordingVoice TypingAction = 1
	TypingAction_TypingActionRecordingVideo TypingAction = 2
	TypingAction_TypingActionUploading      TypingAction = 3
	TypingAction_TypingActionCancel         TypingAction = 4
)

// Enum value maps for TypingAction.
var (
	TypingAction_name = map[int32]string{
		0: "TypingActionTyping",
		1: "TypingActionRecordingVoice",
		2: "TypingActionRecordingVideo",
		3: "TypingActionUploading",
		4: "TypingActionCancel",
	}
	TypingAction_value = map[string]int32{
		"TypingActionTyping":         0,
		"TypingActionRecordingVoice": 1,
		"TypingActionRecordingVideo": 2,
		"TypingActionUploading":      3,
		"TypingActionCancel":         4,
	}
)

func (x TypingAction) Enum() *TypingAction {
	p := new(TypingAction)
	*p = x
	return p
}

func (x TypingAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypingAction) Descriptor() protoreflect.EnumDescriptor {
	return file_core_types_proto_enumTypes[0].Descriptor()
}

func (TypingAction) Type() protoreflect.EnumType {
	return &file_core_types_proto_enumTypes[0]
}

func (x TypingAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypingAction.Descriptor instead.
func (TypingAction) EnumDescriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{0}
}

// PeerType
type PeerType int32

const (
	PeerType_PeerSelf         PeerType = 0
	PeerType_PeerUser         PeerType = 1
	PeerType_PeerGroup        PeerType = 2
	PeerType_PeerExternalUser PeerType = 3
	PeerType_PeerChannel      PeerType = 4
)

// Enum value maps for PeerType.
var (
	PeerType_name = map[int32]string{
		0: "PeerSelf",
		1: "PeerUser",
		2: "PeerGroup",
		3: "PeerExternalUser",
		4: "PeerChannel",
	}
	PeerType_value = map[string]int32{
		"PeerSelf":         0,
		"PeerUser":         1,
		"PeerGroup":        2,
		"PeerExternalUser": 3,
		"PeerChannel":      4,
	}
)

func (x PeerType) Enum() *PeerType {
	p := new(PeerType)
	*p = x
	return p
}

func (x PeerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_types_proto_enumTypes[1].Descriptor()
}

func (PeerType) Type() protoreflect.EnumType {
	return &file_core_types_proto_enumTypes[1]
}

func (x PeerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerType.Descriptor instead.
func (PeerType) EnumDescriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{1}
}

// UserStatus
type UserStatus int32

const (
	UserStatus_UserStatusOffline   UserStatus = 0
	UserStatus_UserStatusOnline    UserStatus = 1
	UserStatus_UserStatusRecently  UserStatus = 2
	UserStatus_UserStatusLastWeek  UserStatus = 3
	UserStatus_UserStatusLastMonth UserStatus = 4
)

// Enum value maps for UserStatus.
var (
	UserStatus_name = map[int32]string{
		0: "UserStatusOffline",
		1: "UserStatusOnline",
		2: "UserStatusRecently",
		3: "UserStatusLastWeek",
		4: "UserStatusLastMonth",
	}
	UserStatus_value = map[string]int32{
		"UserStatusOffline":   0,
		"UserStatusOnline":    1,
		"UserStatusRecently":  2,
		"UserStatusLastWeek":  3,
		"UserStatusLastMonth": 4,
	}
)

func (x UserStatus) Enum() *UserStatus {
	p := new(UserStatus)
	*p = x
	return p
}

func (x UserStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_core_types_proto_enumTypes[2].Descriptor()
}

func (UserStatus) Type() protoreflect.EnumType {
	return &file_core_types_proto_enumTypes[2]
}

func (x UserStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStatus.Descriptor instead.
func (UserStatus) EnumDescriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{2}
}

// GroupFlags
type GroupFlags int32

const (
	GroupFlags_GroupFlagsEmpty          GroupFlags = 0
	GroupFlags_GroupFlagsCreator        GroupFlags = 1
	GroupFlags_GroupFlagsNonParticipant GroupFlags = 2
	GroupFlags_GroupFlagsAdmin          GroupFlags = 3
	GroupFlags_GroupFlagsAdminsEnabled  GroupFlags = 4
	GroupFlags_GroupFlagsDeactivated    GroupFlags = 5
	GroupFlags_GroupFlagsAdminOnly      GroupFlags = 6
	GroupFlags_GroupFlagsReserved1      GroupFlags = 7
	GroupFlags_GroupFlagsReserved2      GroupFlags = 8
	GroupFlags_GroupFlagsReserved3      GroupFlags = 9
	GroupFlags_GroupFlagsReserved4      GroupFlags = 10
)

// Enum value maps for GroupFlags.
var (
	GroupFlags_name = map[int32]string{
		0:  "GroupFlagsEmpty",
		1:  "GroupFlagsCreator",
		2:  "GroupFlagsNonParticipant",
		3:  "GroupFlagsAdmin",
		4:  "GroupFlagsAdminsEnabled",
		5:  "GroupFlagsDeactivated",
		6:  "GroupFlagsAdminOnly",
		7:  "GroupFlagsReserved1",
		8:  "GroupFlagsReserved2",
		9:  "GroupFlagsReserved3",
		10: "GroupFlagsReserved4",
	}
	GroupFlags_value = map[string]int32{
		"GroupFlagsEmpty":          0,
		"GroupFlagsCreator":        1,
		"GroupFlagsNonParticipant": 2,
		"GroupFlagsAdmin":          3,
		"GroupFlagsAdminsEnabled":  4,
		"GroupFlagsDeactivated":    5,
		"GroupFlagsAdminOnly":      6,
		"GroupFlagsReserved1":      7,
		"GroupFlagsReserved2":      8,
		"GroupFlagsReserved3":      9,
		"GroupFlagsReserved4":      10,
	}
)

func (x GroupFlags) Enum() *GroupFlags {
	p := new(GroupFlags)
	*p = x
	return p
}

func (x GroupFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_core_types_proto_enumTypes[3].Descriptor()
}

func (GroupFlags) Type() protoreflect.EnumType {
	return &file_core_types_proto_enumTypes[3]
}

func (x GroupFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupFlags.Descriptor instead.
func (GroupFlags) EnumDescriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{3}
}

// ParticipantType
type ParticipantType int32

const (
	ParticipantType_ParticipantTypeMember  ParticipantType = 0
	ParticipantType_ParticipantTypeAdmin   ParticipantType = 1
	ParticipantType_ParticipantTypeCreator ParticipantType = 2
)

// Enum value maps for ParticipantType.
var (
	ParticipantType_name = map[int32]string{
		0: "ParticipantTypeMember",
		1: "ParticipantTypeAdmin",
		2: "ParticipantTypeCreator",
	}
	ParticipantType_value = map[string]int32{
		"ParticipantTypeMember":  0,
		"ParticipantTypeAdmin":   1,
		"ParticipantTypeCreator": 2,
	}
)

func (x ParticipantType) Enum() *ParticipantType {
	p := new(ParticipantType)
	*p = x
	return p
}

func (x ParticipantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_types_proto_enumTypes[4].Descriptor()
}

func (ParticipantType) Type() protoreflect.EnumType {
	return &file_core_types_proto_enumTypes[4]
}

func (x ParticipantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantType.Descriptor instead.
func (ParticipantType) EnumDescriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{4}
}

// InputMediaType
type InputMediaType int32

const (
	InputMediaType_InputMediaTypeEmpty            InputMediaType = 0
	InputMediaType_InputMediaTypeInvoice          InputMediaType = 1
	InputMediaType_InputMediaTypePoll             InputMediaType = 2
	InputMediaType_InputMediaTypeContact          InputMediaType = 3
	InputMediaType_InputMediaTypeUploadedDocument InputMediaType = 4
	InputMediaType_InputMediaTypeDocument         InputMediaType = 5
	InputMediaType_InputMediaTypeGeoLocation      InputMediaType = 6
	InputMediaType_InputMediaTypeWebDocument      InputMediaType = 7
	InputMediaType_InputMediaTypeSealed           InputMediaType = 8
	InputMediaType_InputMediaTypeMessageDocument  InputMediaType = 9
	InputMediaType_InputMediaTypeReserved4        InputMediaType = 10
	InputMediaType_InputMediaTypeReserved5        InputMediaType = 11
	InputMediaType_InputMediaTypeReserved6        InputMediaType = 12
	InputMediaType_InputMediaTypeReserved7        InputMediaType = 13
	InputMediaType_InputMediaTypeReserved8        InputMediaType = 14
)

// Enum value maps for InputMediaType.
var (
	InputMediaType_name = map[int32]string{
		0:  "InputMediaTypeEmpty",
		1:  "InputMediaTypeInvoice",
		2:  "InputMediaTypePoll",
		3:  "InputMediaTypeContact",
		4:  "InputMediaTypeUploadedDocument",
		5:  "InputMediaTypeDocument",
		6:  "InputMediaTypeGeoLocation",
		7:  "InputMediaTypeWebDocument",
		8:  "InputMediaTypeSealed",
		9:  "InputMediaTypeMessageDocument",
		10: "InputMediaTypeReserved4",
		11: "InputMediaTypeReserved5",
		12: "InputMediaTypeReserved6",
		13: "InputMediaTypeReserved7",
		14: "InputMediaTypeReserved8",
	}
	InputMediaType_value = map[string]int32{
		"InputMediaTypeEmpty":            0,
		"InputMediaTypeInvoice":          1,
		"InputMediaTypePoll":             2,
		"InputMediaTypeContact":          3,
		"InputMediaTypeUploadedDocument": 4,
		"InputMediaTypeDocument":         5,
		"InputMediaTypeGeoLocation":      6,
		"InputMediaTypeWebDocument":      7,
		"InputMediaTypeSealed":           8,
		"InputMediaTypeMessageDocument":  9,
		"InputMediaTypeReserved4":        10,
		"InputMediaTypeReserved5":        11,
		"InputMediaTypeReserved6":        12,
		"InputMediaTypeReserved7":        13,
		"InputMediaTypeReserved8":        14,
	}
)

func (x InputMediaType) Enum() *InputMediaType {
	p := new(InputMediaType)
	*p = x
	return p
}

func (x InputMediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputMediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_types_proto_enumTypes[5].Descriptor()
}

func (InputMediaType) Type() protoreflect.EnumType {
	return &file_core_types_proto_enumTypes[5]
}

func (x InputMediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputMediaType.Descriptor instead.
func (InputMediaType) EnumDescriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{5}
}

// MediaType
type MediaType int32

const (
	MediaType_MediaTypeEmpty       MediaType = 0
	MediaType_MediaTypePoll        MediaType = 1
	MediaType_MediaTypeDocument    MediaType = 2
	MediaType_MediaTypeContact     MediaType = 3
	MediaType_MediaTypeGeoLocation MediaType = 4
	MediaType_MediaTypeInvoice     MediaType = 5
	MediaType_MediaTypeWebDocument MediaType = 6
	MediaType_MediaTypeSealed      MediaType = 7
	MediaType_MediaTypeReserved1   MediaType = 8
	MediaType_MediaTypeReserved2   MediaType = 9
	MediaType_MediaTypeReserved3   MediaType = 10
	MediaType_MediaTypeReserved4   MediaType = 11
	MediaType_MediaTypeReserved5   MediaType = 12
	MediaType_MediaTypeReserved6   MediaType = 13
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0:  "MediaTypeEmpty",
		1:  "MediaTypePoll",
		2:  "MediaTypeDocument",
		3:  "MediaTypeContact",
		4:  "MediaTypeGeoLocation",
		5:  "MediaTypeInvoice",
		6:  "MediaTypeWebDocument",
		7:  "MediaTypeSealed",
		8:  "MediaTypeReserved1",
		9:  "MediaTypeReserved2",
		10: "MediaTypeReserved3",
		11: "MediaTypeReserved4",
		12: "MediaTypeReserved5",
		13: "MediaTypeReserved6",
	}
	MediaType_value = map[string]int32{
		"MediaTypeEmpty":       0,
		"MediaTypePoll":        1,
		"MediaTypeDocument":    2,
		"MediaTypeContact":     3,
		"MediaTypeGeoLocation": 4,
		"MediaTypeInvoice":     5,
		"MediaTypeWebDocument": 6,
		"MediaTypeSealed":      7,
		"MediaTypeReserved1":   8,
		"MediaTypeReserved2":   9,
		"MediaTypeReserved3":   10,
		"MediaTypeReserved4":   11,
		"MediaTypeReserved5":   12,
		"MediaTypeReserved6":   13,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_types_proto_enumTypes[6].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_core_types_proto_enumTypes[6]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{6}
}

// MediaCategory
type MediaCategory int32

const (
	MediaCategory_MediaCategoryNone      MediaCategory = 0
	MediaCategory_MediaCategoryAudio     MediaCategory = 1
	MediaCategory_MediaCategoryVoice     MediaCategory = 2
	MediaCategory_MediaCategoryMedia     MediaCategory = 3
	MediaCategory_MediaCategoryFile      MediaCategory = 4
	MediaCategory_MediaCategoryGif       MediaCategory = 5
	MediaCategory_MediaCategoryWeb       MediaCategory = 6
	MediaCategory_MediaCategoryContact   MediaCategory = 7
	MediaCategory_MediaCategoryLocation  MediaCategory = 8
	MediaCategory_MediaCategoryPoll      MediaCategory = 9
	MediaCategory_MediaCategoryReserved0 MediaCategory = 10
	MediaCategory_MediaCategoryReserved1 MediaCategory = 11
	MediaCategory_MediaCategoryReserved2 MediaCategory = 12
	MediaCategory_MediaCategoryReserved3 MediaCategory = 13
	MediaCategory_MediaCategoryReserved4 MediaCategory = 14
	MediaCategory_MediaCategoryReserved5 MediaCategory = 15
)

// Enum value maps for MediaCategory.
var (
	MediaCategory_name = map[int32]string{
		0:  "MediaCategoryNone",
		1:  "MediaCategoryAudio",
		2:  "MediaCategoryVoice",
		3:  "MediaCategoryMedia",
		4:  "MediaCategoryFile",
		5:  "MediaCategoryGif",
		6:  "MediaCategoryWeb",
		7:  "MediaCategoryContact",
		8:  "MediaCategoryLocation",
		9:  "MediaCategoryPoll",
		10: "MediaCategoryReserved0",
		11: "MediaCategoryReserved1",
		12: "MediaCategoryReserved2",
		13: "MediaCategoryReserved3",
		14: "MediaCategoryReserved4",
		15: "MediaCategoryReserved5",
	}
	MediaCategory_value = map[string]int32{
		"MediaCategoryNone":      0,
		"MediaCategoryAudio":     1,
		"MediaCategoryVoice":     2,
		"MediaCategoryMedia":     3,
		"MediaCategoryFile":      4,
		"MediaCategoryGif":       5,
		"MediaCategoryWeb":       6,
		"MediaCategoryContact":   7,
		"MediaCategoryLocation":  8,
		"MediaCategoryPoll":      9,
		"MediaCategoryReserved0": 10,
		"MediaCategoryReserved1": 11,
		"MediaCategoryReserved2": 12,
		"MediaCategoryReserved3": 13,
		"MediaCategoryReserved4": 14,
		"MediaCategoryReserved5": 15,
	}
)

func (x MediaCategory) Enum() *MediaCategory {
	p := new(MediaCategory)
	*p = x
	return p
}

func (x MediaCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_core_types_proto_enumTypes[7].Descriptor()
}

func (MediaCategory) Type() protoreflect.EnumType {
	return &file_core_types_proto_enumTypes[7]
}

func (x MediaCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaCategory.Descriptor instead.
func (MediaCategory) EnumDescriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{7}
}

// MessageEntityType
type MessageEntityType int32

const (
	MessageEntityType_MessageEntityTypeBold       MessageEntityType = 0
	MessageEntityType_MessageEntityTypeItalic     MessageEntityType = 1
	MessageEntityType_MessageEntityTypeMention    MessageEntityType = 2
	MessageEntityType_MessageEntityTypeUrl        MessageEntityType = 3
	MessageEntityType_MessageEntityTypeEmail      MessageEntityType = 4
	MessageEntityType_MessageEntityTypeHashTag    MessageEntityType = 5
	MessageEntityType_MessageEntityTypeCode       MessageEntityType = 6
	MessageEntityType_MessageEntityTypeBotCommand MessageEntityType = 7
	MessageEntityType_MessageEntityTypeMentionAll MessageEntityType = 8
	MessageEntityType_MessageEntityTypeReserved4  MessageEntityType = 9
	MessageEntityType_MessageEntityTypeReserved5  MessageEntityType = 10
	MessageEntityType_MessageEntityTypeReserved6  MessageEntityType = 11
	MessageEntityType_MessageEntityTypeReserved7  MessageEntityType = 12
	MessageEntityType_MessageEntityTypeReserved8  MessageEntityType = 13
)

// Enum value maps for MessageEntityType.
var (
	MessageEntityType_name = map[int32]string{
		0:  "MessageEntityTypeBold",
		1:  "MessageEntityTypeItalic",
		2:  "MessageEntityTypeMention",
		3:  "MessageEntityTypeUrl",
		4:  "MessageEntityTypeEmail",
		5:  "MessageEntityTypeHashTag",
		6:  "MessageEntityTypeCode",
		7:  "MessageEntityTypeBotCommand",
		8:  "MessageEntityTypeMentionAll",
		9:  "MessageEntityTypeReserved4",
		10: "MessageEntityTypeReserved5",
		11: "MessageEntityTypeReserved6",
		12: "MessageEntityTypeReserved7",
		13: "MessageEntityTypeReserved8",
	}
	MessageEntityType_value = map[string]int32{
		"MessageEntityTypeBold":       0,
		"MessageEntityTypeItalic":     1,
		"MessageEntityTypeMention":    2,
		"MessageEntityTypeUrl":        3,
		"MessageEntityTypeEmail":      4,
		"MessageEntityTypeHashTag":    5,
		"MessageEntityTypeCode":       6,
		"MessageEntityTypeBotCommand": 7,
		"MessageEntityTypeMentionAll": 8,
		"MessageEntityTypeReserved4":  9,
		"MessageEntityTypeReserved5":  10,
		"MessageEntityTypeReserved6":  11,
		"MessageEntityTypeReserved7":  12,
		"MessageEntityTypeReserved8":  13,
	}
)

func (x MessageEntityType) Enum() *MessageEntityType {
	p := new(MessageEntityType)
	*p = x
	return p
}

func (x MessageEntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageEntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_types_proto_enumTypes[8].Descriptor()
}

func (MessageEntityType) Type() protoreflect.EnumType {
	return &file_core_types_proto_enumTypes[8]
}

func (x MessageEntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageEntityType.Descriptor instead.
func (MessageEntityType) EnumDescriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{8}
}

// NotificationType
type PushTokenProvider int32

const (
	PushTokenProvider_PushTokenFirebase PushTokenProvider = 0
	PushTokenProvider_PushTokenApn      PushTokenProvider = 1
	PushTokenProvider_PushTokenPushKit  PushTokenProvider = 2
)

// Enum value maps for PushTokenProvider.
var (
	PushTokenProvider_name = map[int32]string{
		0: "PushTokenFirebase",
		1: "PushTokenApn",
		2: "PushTokenPushKit",
	}
	PushTokenProvider_value = map[string]int32{
		"PushTokenFirebase": 0,
		"PushTokenApn":      1,
		"PushTokenPushKit":  2,
	}
)

func (x PushTokenProvider) Enum() *PushTokenProvider {
	p := new(PushTokenProvider)
	*p = x
	return p
}

func (x PushTokenProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PushTokenProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_core_types_proto_enumTypes[9].Descriptor()
}

func (PushTokenProvider) Type() protoreflect.EnumType {
	return &file_core_types_proto_enumTypes[9]
}

func (x PushTokenProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PushTokenProvider.Descriptor instead.
func (PushTokenProvider) EnumDescriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{9}
}

// AccountPrivacyKey
type PrivacyKey int32

const (
	PrivacyKey_PrivacyKeyNone             PrivacyKey = 0
	PrivacyKey_PrivacyKeyChatInvite       PrivacyKey = 1
	PrivacyKey_PrivacyKeyLastSeen         PrivacyKey = 2
	PrivacyKey_PrivacyKeyPhoneNumber      PrivacyKey = 3
	PrivacyKey_PrivacyKeyProfilePhoto     PrivacyKey = 4
	PrivacyKey_PrivacyKeyForwardedMessage PrivacyKey = 5
	PrivacyKey_PrivacyKeyCall             PrivacyKey = 6
	PrivacyKey_PrivacyKeyReserved1        PrivacyKey = 7
	PrivacyKey_PrivacyKeyReserved2        PrivacyKey = 8
	PrivacyKey_PrivacyKeyReserved3        PrivacyKey = 9
	PrivacyKey_PrivacyKeyReserved4        PrivacyKey = 10
	PrivacyKey_PrivacyKeyReserved5        PrivacyKey = 11
	PrivacyKey_PrivacyKeyReserved6        PrivacyKey = 12
)

// Enum value maps for PrivacyKey.
var (
	PrivacyKey_name = map[int32]string{
		0:  "PrivacyKeyNone",
		1:  "PrivacyKeyChatInvite",
		2:  "PrivacyKeyLastSeen",
		3:  "PrivacyKeyPhoneNumber",
		4:  "PrivacyKeyProfilePhoto",
		5:  "PrivacyKeyForwardedMessage",
		6:  "PrivacyKeyCall",
		7:  "PrivacyKeyReserved1",
		8:  "PrivacyKeyReserved2",
		9:  "PrivacyKeyReserved3",
		10: "PrivacyKeyReserved4",
		11: "PrivacyKeyReserved5",
		12: "PrivacyKeyReserved6",
	}
	PrivacyKey_value = map[string]int32{
		"PrivacyKeyNone":             0,
		"PrivacyKeyChatInvite":       1,
		"PrivacyKeyLastSeen":         2,
		"PrivacyKeyPhoneNumber":      3,
		"PrivacyKeyProfilePhoto":     4,
		"PrivacyKeyForwardedMessage": 5,
		"PrivacyKeyCall":             6,
		"PrivacyKeyReserved1":        7,
		"PrivacyKeyReserved2":        8,
		"PrivacyKeyReserved3":        9,
		"PrivacyKeyReserved4":        10,
		"PrivacyKeyReserved5":        11,
		"PrivacyKeyReserved6":        12,
	}
)

func (x PrivacyKey) Enum() *PrivacyKey {
	p := new(PrivacyKey)
	*p = x
	return p
}

func (x PrivacyKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrivacyKey) Descriptor() protoreflect.EnumDescriptor {
	return file_core_types_proto_enumTypes[10].Descriptor()
}

func (PrivacyKey) Type() protoreflect.EnumType {
	return &file_core_types_proto_enumTypes[10]
}

func (x PrivacyKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrivacyKey.Descriptor instead.
func (PrivacyKey) EnumDescriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{10}
}

// AccountPrivacyValue
type PrivacyType int32

const (
	PrivacyType_PrivacyTypeAllowAll      PrivacyType = 0
	PrivacyType_PrivacyTypeAllowContacts PrivacyType = 1
	PrivacyType_PrivacyTypeDisallowAll   PrivacyType = 2
	//    Order is very important, exceptions are started from 101
	PrivacyType_PrivacyTypeAllowUsers    PrivacyType = 101
	PrivacyType_PrivacyTypeDisallowUsers PrivacyType = 102
)

// Enum value maps for PrivacyType.
var (
	PrivacyType_name = map[int32]string{
		0:   "PrivacyTypeAllowAll",
		1:   "PrivacyTypeAllowContacts",
		2:   "PrivacyTypeDisallowAll",
		101: "PrivacyTypeAllowUsers",
		102: "PrivacyTypeDisallowUsers",
	}
	PrivacyType_value = map[string]int32{
		"PrivacyTypeAllowAll":      0,
		"PrivacyTypeAllowContacts": 1,
		"PrivacyTypeDisallowAll":   2,
		"PrivacyTypeAllowUsers":    101,
		"PrivacyTypeDisallowUsers": 102,
	}
)

func (x PrivacyType) Enum() *PrivacyType {
	p := new(PrivacyType)
	*p = x
	return p
}

func (x PrivacyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrivacyType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_types_proto_enumTypes[11].Descriptor()
}

func (PrivacyType) Type() protoreflect.EnumType {
	return &file_core_types_proto_enumTypes[11]
}

func (x PrivacyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrivacyType.Descriptor instead.
func (PrivacyType) EnumDescriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{11}
}

// TeamFlags
type TeamFlags int32

const (
	TeamFlags_TeamFlagsEmpty     TeamFlags = 0
	TeamFlags_TeamFlagsCreator   TeamFlags = 1
	TeamFlags_TeamFlagsAdmin     TeamFlags = 2
	TeamFlags_TeamFlagsReserved1 TeamFlags = 3
	TeamFlags_TeamFlagsReserved2 TeamFlags = 4
	TeamFlags_TeamFlagsReserved3 TeamFlags = 5
	TeamFlags_TeamFlagsReserved4 TeamFlags = 6
	TeamFlags_TeamFlagsReserved5 TeamFlags = 7
)

// Enum value maps for TeamFlags.
var (
	TeamFlags_name = map[int32]string{
		0: "TeamFlagsEmpty",
		1: "TeamFlagsCreator",
		2: "TeamFlagsAdmin",
		3: "TeamFlagsReserved1",
		4: "TeamFlagsReserved2",
		5: "TeamFlagsReserved3",
		6: "TeamFlagsReserved4",
		7: "TeamFlagsReserved5",
	}
	TeamFlags_value = map[string]int32{
		"TeamFlagsEmpty":     0,
		"TeamFlagsCreator":   1,
		"TeamFlagsAdmin":     2,
		"TeamFlagsReserved1": 3,
		"TeamFlagsReserved2": 4,
		"TeamFlagsReserved3": 5,
		"TeamFlagsReserved4": 6,
		"TeamFlagsReserved5": 7,
	}
)

func (x TeamFlags) Enum() *TeamFlags {
	p := new(TeamFlags)
	*p = x
	return p
}

func (x TeamFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_core_types_proto_enumTypes[12].Descriptor()
}

func (TeamFlags) Type() protoreflect.EnumType {
	return &file_core_types_proto_enumTypes[12]
}

func (x TeamFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeamFlags.Descriptor instead.
func (TeamFlags) EnumDescriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{12}
}

// Ping
type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{0}
}

func (x *Ping) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

// Pong
type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{1}
}

func (x *Pong) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

// UpdateEnvelope
type UpdateEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor int64  `protobuf:"varint,1,opt,name=Constructor,proto3" json:"Constructor,omitempty"`
	Update      []byte `protobuf:"bytes,2,opt,name=Update,proto3" json:"Update,omitempty"`
	UCount      int32  `protobuf:"varint,3,opt,name=UCount,proto3" json:"UCount,omitempty"`
	UpdateID    int64  `protobuf:"varint,4,opt,name=UpdateID,proto3" json:"UpdateID,omitempty"`
	Timestamp   int64  `protobuf:"varint,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *UpdateEnvelope) Reset() {
	*x = UpdateEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvelope) ProtoMessage() {}

func (x *UpdateEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvelope.ProtoReflect.Descriptor instead.
func (*UpdateEnvelope) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateEnvelope) GetConstructor() int64 {
	if x != nil {
		return x.Constructor
	}
	return 0
}

func (x *UpdateEnvelope) GetUpdate() []byte {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdateEnvelope) GetUCount() int32 {
	if x != nil {
		return x.UCount
	}
	return 0
}

func (x *UpdateEnvelope) GetUpdateID() int64 {
	if x != nil {
		return x.UpdateID
	}
	return 0
}

func (x *UpdateEnvelope) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// UpdateContainer
// It is very similar to MessageContainer but holding a list of Updates
type UpdateContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length      int32             `protobuf:"varint,1,opt,name=Length,proto3" json:"Length,omitempty"`
	Updates     []*UpdateEnvelope `protobuf:"bytes,2,rep,name=Updates,proto3" json:"Updates,omitempty"`
	MinUpdateID int64             `protobuf:"varint,3,opt,name=MinUpdateID,proto3" json:"MinUpdateID,omitempty"`
	MaxUpdateID int64             `protobuf:"varint,4,opt,name=MaxUpdateID,proto3" json:"MaxUpdateID,omitempty"`
	Users       []*User           `protobuf:"bytes,5,rep,name=Users,proto3" json:"Users,omitempty"`
	Groups      []*Group          `protobuf:"bytes,6,rep,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *UpdateContainer) Reset() {
	*x = UpdateContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContainer) ProtoMessage() {}

func (x *UpdateContainer) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContainer.ProtoReflect.Descriptor instead.
func (*UpdateContainer) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateContainer) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *UpdateContainer) GetUpdates() []*UpdateEnvelope {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *UpdateContainer) GetMinUpdateID() int64 {
	if x != nil {
		return x.MinUpdateID
	}
	return 0
}

func (x *UpdateContainer) GetMaxUpdateID() int64 {
	if x != nil {
		return x.MaxUpdateID
	}
	return 0
}

func (x *UpdateContainer) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *UpdateContainer) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

// ProtoMessage
// If AuthID == 0 then Payload is a MessageEnvelop otherwise Payload is a ProtoEncryptedPayload
type ProtoMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthID     int64  `protobuf:"varint,1,opt,name=AuthID,proto3" json:"AuthID,omitempty"`
	MessageKey []byte `protobuf:"bytes,2,opt,name=MessageKey,proto3" json:"MessageKey,omitempty"` // 32 bytes
	Payload    []byte `protobuf:"bytes,3,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *ProtoMessage) Reset() {
	*x = ProtoMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMessage) ProtoMessage() {}

func (x *ProtoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMessage.ProtoReflect.Descriptor instead.
func (*ProtoMessage) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{4}
}

func (x *ProtoMessage) GetAuthID() int64 {
	if x != nil {
		return x.AuthID
	}
	return 0
}

func (x *ProtoMessage) GetMessageKey() []byte {
	if x != nil {
		return x.MessageKey
	}
	return nil
}

func (x *ProtoMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// ProtoMessageEncryptedPayload
type ProtoEncryptedPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSalt int64                 `protobuf:"varint,1,opt,name=ServerSalt,proto3" json:"ServerSalt,omitempty"`
	MessageID  uint64                `protobuf:"varint,2,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	SessionID  int64                 `protobuf:"varint,3,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	Envelope   *rony.MessageEnvelope `protobuf:"bytes,4,opt,name=Envelope,proto3" json:"Envelope,omitempty"`
}

func (x *ProtoEncryptedPayload) Reset() {
	*x = ProtoEncryptedPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoEncryptedPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoEncryptedPayload) ProtoMessage() {}

func (x *ProtoEncryptedPayload) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoEncryptedPayload.ProtoReflect.Descriptor instead.
func (*ProtoEncryptedPayload) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{5}
}

func (x *ProtoEncryptedPayload) GetServerSalt() int64 {
	if x != nil {
		return x.ServerSalt
	}
	return 0
}

func (x *ProtoEncryptedPayload) GetMessageID() uint64 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

func (x *ProtoEncryptedPayload) GetSessionID() int64 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *ProtoEncryptedPayload) GetEnvelope() *rony.MessageEnvelope {
	if x != nil {
		return x.Envelope
	}
	return nil
}

// Ack
type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageIDs []uint64 `protobuf:"varint,1,rep,packed,name=MessageIDs,proto3" json:"MessageIDs,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{6}
}

func (x *Ack) GetMessageIDs() []uint64 {
	if x != nil {
		return x.MessageIDs
	}
	return nil
}

// Bool
type Bool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *Bool) Reset() {
	*x = Bool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bool) ProtoMessage() {}

func (x *Bool) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bool.ProtoReflect.Descriptor instead.
func (*Bool) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{7}
}

func (x *Bool) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Dialog
type Dialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamID          int64               `protobuf:"varint,100,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	PeerID          int64               `protobuf:"varint,1,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	PeerType        int32               `protobuf:"varint,2,opt,name=PeerType,proto3" json:"PeerType,omitempty"`
	TopMessageID    int64               `protobuf:"varint,3,opt,name=TopMessageID,proto3" json:"TopMessageID,omitempty"`
	ReadInboxMaxID  int64               `protobuf:"varint,4,opt,name=ReadInboxMaxID,proto3" json:"ReadInboxMaxID,omitempty"`
	ReadOutboxMaxID int64               `protobuf:"varint,5,opt,name=ReadOutboxMaxID,proto3" json:"ReadOutboxMaxID,omitempty"`
	UnreadCount     int32               `protobuf:"varint,6,opt,name=UnreadCount,proto3" json:"UnreadCount,omitempty"`
	AccessHash      uint64              `protobuf:"fixed64,7,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	NotifySettings  *PeerNotifySettings `protobuf:"bytes,8,opt,name=NotifySettings,proto3" json:"NotifySettings,omitempty"`
	MentionedCount  int32               `protobuf:"varint,9,opt,name=MentionedCount,proto3" json:"MentionedCount,omitempty"`
	Pinned          bool                `protobuf:"varint,10,opt,name=Pinned,proto3" json:"Pinned,omitempty"`
	Draft           *DraftMessage       `protobuf:"bytes,11,opt,name=Draft,proto3" json:"Draft,omitempty"`
	PinnedMessageID int64               `protobuf:"varint,12,opt,name=PinnedMessageID,proto3" json:"PinnedMessageID,omitempty"`
	ActiveCallID    int64               `protobuf:"varint,13,opt,name=ActiveCallID,proto3" json:"ActiveCallID,omitempty"`
}

func (x *Dialog) Reset() {
	*x = Dialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dialog) ProtoMessage() {}

func (x *Dialog) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dialog.ProtoReflect.Descriptor instead.
func (*Dialog) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{8}
}

func (x *Dialog) GetTeamID() int64 {
	if x != nil {
		return x.TeamID
	}
	return 0
}

func (x *Dialog) GetPeerID() int64 {
	if x != nil {
		return x.PeerID
	}
	return 0
}

func (x *Dialog) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *Dialog) GetTopMessageID() int64 {
	if x != nil {
		return x.TopMessageID
	}
	return 0
}

func (x *Dialog) GetReadInboxMaxID() int64 {
	if x != nil {
		return x.ReadInboxMaxID
	}
	return 0
}

func (x *Dialog) GetReadOutboxMaxID() int64 {
	if x != nil {
		return x.ReadOutboxMaxID
	}
	return 0
}

func (x *Dialog) GetUnreadCount() int32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *Dialog) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *Dialog) GetNotifySettings() *PeerNotifySettings {
	if x != nil {
		return x.NotifySettings
	}
	return nil
}

func (x *Dialog) GetMentionedCount() int32 {
	if x != nil {
		return x.MentionedCount
	}
	return 0
}

func (x *Dialog) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *Dialog) GetDraft() *DraftMessage {
	if x != nil {
		return x.Draft
	}
	return nil
}

func (x *Dialog) GetPinnedMessageID() int64 {
	if x != nil {
		return x.PinnedMessageID
	}
	return 0
}

func (x *Dialog) GetActiveCallID() int64 {
	if x != nil {
		return x.ActiveCallID
	}
	return 0
}

// InputPeer
type InputPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type       PeerType `protobuf:"varint,2,opt,name=Type,proto3,enum=msg.PeerType" json:"Type,omitempty"`
	AccessHash uint64   `protobuf:"fixed64,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
}

func (x *InputPeer) Reset() {
	*x = InputPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputPeer) ProtoMessage() {}

func (x *InputPeer) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputPeer.ProtoReflect.Descriptor instead.
func (*InputPeer) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{9}
}

func (x *InputPeer) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *InputPeer) GetType() PeerType {
	if x != nil {
		return x.Type
	}
	return PeerType_PeerSelf
}

func (x *InputPeer) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// Peer
type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type       int32  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	AccessHash uint64 `protobuf:"fixed64,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{10}
}

func (x *Peer) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Peer) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Peer) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// InputPassword
type InputPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrpID int64  `protobuf:"varint,1,opt,name=SrpID,proto3" json:"SrpID,omitempty"`
	A     []byte `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	M1    []byte `protobuf:"bytes,3,opt,name=M1,proto3" json:"M1,omitempty"`
}

func (x *InputPassword) Reset() {
	*x = InputPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputPassword) ProtoMessage() {}

func (x *InputPassword) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputPassword.ProtoReflect.Descriptor instead.
func (*InputPassword) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{11}
}

func (x *InputPassword) GetSrpID() int64 {
	if x != nil {
		return x.SrpID
	}
	return 0
}

func (x *InputPassword) GetA() []byte {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *InputPassword) GetM1() []byte {
	if x != nil {
		return x.M1
	}
	return nil
}

// InputFileLocation
type InputFileLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID  int32  `protobuf:"varint,1,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	FileID     int64  `protobuf:"varint,2,opt,name=FileID,proto3" json:"FileID,omitempty"`
	AccessHash uint64 `protobuf:"fixed64,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Version    int32  `protobuf:"varint,4,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *InputFileLocation) Reset() {
	*x = InputFileLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputFileLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputFileLocation) ProtoMessage() {}

func (x *InputFileLocation) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputFileLocation.ProtoReflect.Descriptor instead.
func (*InputFileLocation) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{12}
}

func (x *InputFileLocation) GetClusterID() int32 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *InputFileLocation) GetFileID() int64 {
	if x != nil {
		return x.FileID
	}
	return 0
}

func (x *InputFileLocation) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *InputFileLocation) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// FileLocation
type FileLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID  int32  `protobuf:"varint,1,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	FileID     int64  `protobuf:"varint,2,opt,name=FileID,proto3" json:"FileID,omitempty"`
	AccessHash uint64 `protobuf:"fixed64,3,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
}

func (x *FileLocation) Reset() {
	*x = FileLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileLocation) ProtoMessage() {}

func (x *FileLocation) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileLocation.ProtoReflect.Descriptor instead.
func (*FileLocation) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{13}
}

func (x *FileLocation) GetClusterID() int32 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *FileLocation) GetFileID() int64 {
	if x != nil {
		return x.FileID
	}
	return 0
}

func (x *FileLocation) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// WebLocation
type WebLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *WebLocation) Reset() {
	*x = WebLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebLocation) ProtoMessage() {}

func (x *WebLocation) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebLocation.ProtoReflect.Descriptor instead.
func (*WebLocation) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{14}
}

func (x *WebLocation) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// InputWebLocation
type InputWebLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *InputWebLocation) Reset() {
	*x = InputWebLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputWebLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputWebLocation) ProtoMessage() {}

func (x *InputWebLocation) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputWebLocation.ProtoReflect.Descriptor instead.
func (*InputWebLocation) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{15}
}

func (x *InputWebLocation) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// UserPhoto
type UserPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoBig      *FileLocation `protobuf:"bytes,1,opt,name=PhotoBig,proto3" json:"PhotoBig,omitempty"`
	PhotoSmall    *FileLocation `protobuf:"bytes,2,opt,name=PhotoSmall,proto3" json:"PhotoSmall,omitempty"`
	PhotoID       int64         `protobuf:"varint,3,opt,name=PhotoID,proto3" json:"PhotoID,omitempty"`
	PhotoBigWeb   *WebLocation  `protobuf:"bytes,4,opt,name=PhotoBigWeb,proto3" json:"PhotoBigWeb,omitempty"`
	PhotoSmallWeb *WebLocation  `protobuf:"bytes,5,opt,name=PhotoSmallWeb,proto3" json:"PhotoSmallWeb,omitempty"`
}

func (x *UserPhoto) Reset() {
	*x = UserPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPhoto) ProtoMessage() {}

func (x *UserPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPhoto.ProtoReflect.Descriptor instead.
func (*UserPhoto) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{16}
}

func (x *UserPhoto) GetPhotoBig() *FileLocation {
	if x != nil {
		return x.PhotoBig
	}
	return nil
}

func (x *UserPhoto) GetPhotoSmall() *FileLocation {
	if x != nil {
		return x.PhotoSmall
	}
	return nil
}

func (x *UserPhoto) GetPhotoID() int64 {
	if x != nil {
		return x.PhotoID
	}
	return 0
}

func (x *UserPhoto) GetPhotoBigWeb() *WebLocation {
	if x != nil {
		return x.PhotoBigWeb
	}
	return nil
}

func (x *UserPhoto) GetPhotoSmallWeb() *WebLocation {
	if x != nil {
		return x.PhotoSmallWeb
	}
	return nil
}

// InputUser
type InputUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     int64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AccessHash uint64 `protobuf:"fixed64,2,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
}

func (x *InputUser) Reset() {
	*x = InputUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputUser) ProtoMessage() {}

func (x *InputUser) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputUser.ProtoReflect.Descriptor instead.
func (*InputUser) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{17}
}

func (x *InputUser) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *InputUser) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// User
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int64        `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FirstName    string       `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName     string       `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName,omitempty"`
	Username     string       `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`
	Status       UserStatus   `protobuf:"varint,5,opt,name=Status,proto3,enum=msg.UserStatus" json:"Status,omitempty"`
	Restricted   bool         `protobuf:"varint,6,opt,name=Restricted,proto3" json:"Restricted,omitempty"`
	AccessHash   uint64       `protobuf:"fixed64,7,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Photo        *UserPhoto   `protobuf:"bytes,8,opt,name=Photo,proto3" json:"Photo,omitempty"`
	Bio          string       `protobuf:"bytes,9,opt,name=Bio,proto3" json:"Bio,omitempty"`
	Phone        string       `protobuf:"bytes,10,opt,name=Phone,proto3" json:"Phone,omitempty"`
	LastSeen     int64        `protobuf:"varint,11,opt,name=LastSeen,proto3" json:"LastSeen,omitempty"`
	PhotoGallery []*UserPhoto `protobuf:"bytes,12,rep,name=PhotoGallery,proto3" json:"PhotoGallery,omitempty"`
	IsBot        bool         `protobuf:"varint,13,opt,name=IsBot,proto3" json:"IsBot,omitempty"`
	Deleted      bool         `protobuf:"varint,14,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	Blocked      bool         `protobuf:"varint,15,opt,name=Blocked,proto3" json:"Blocked,omitempty"`
	BotInfo      *BotInfo     `protobuf:"bytes,16,opt,name=BotInfo,proto3" json:"BotInfo,omitempty"`
	Official     bool         `protobuf:"varint,17,opt,name=Official,proto3" json:"Official,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{18}
}

func (x *User) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetStatus() UserStatus {
	if x != nil {
		return x.Status
	}
	return UserStatus_UserStatusOffline
}

func (x *User) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *User) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *User) GetPhoto() *UserPhoto {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *User) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetLastSeen() int64 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

func (x *User) GetPhotoGallery() []*UserPhoto {
	if x != nil {
		return x.PhotoGallery
	}
	return nil
}

func (x *User) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *User) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *User) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *User) GetBotInfo() *BotInfo {
	if x != nil {
		return x.BotInfo
	}
	return nil
}

func (x *User) GetOfficial() bool {
	if x != nil {
		return x.Official
	}
	return false
}

// ContactUser
type ContactUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FirstName  string     `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName   string     `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName,omitempty"`
	AccessHash uint64     `protobuf:"fixed64,4,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Phone      string     `protobuf:"bytes,5,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Username   string     `protobuf:"bytes,6,opt,name=Username,proto3" json:"Username,omitempty"`
	ClientID   int64      `protobuf:"varint,7,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	Photo      *UserPhoto `protobuf:"bytes,8,opt,name=Photo,proto3" json:"Photo,omitempty"`
}

func (x *ContactUser) Reset() {
	*x = ContactUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactUser) ProtoMessage() {}

func (x *ContactUser) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactUser.ProtoReflect.Descriptor instead.
func (*ContactUser) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{19}
}

func (x *ContactUser) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ContactUser) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ContactUser) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ContactUser) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *ContactUser) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ContactUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ContactUser) GetClientID() int64 {
	if x != nil {
		return x.ClientID
	}
	return 0
}

func (x *ContactUser) GetPhoto() *UserPhoto {
	if x != nil {
		return x.Photo
	}
	return nil
}

// Bot
type Bot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=Username,proto3" json:"Username,omitempty"`
	Bio      string `protobuf:"bytes,4,opt,name=Bio,proto3" json:"Bio,omitempty"`
}

func (x *Bot) Reset() {
	*x = Bot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bot) ProtoMessage() {}

func (x *Bot) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bot.ProtoReflect.Descriptor instead.
func (*Bot) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{20}
}

func (x *Bot) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Bot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bot) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Bot) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

// BotCommands
type BotCommands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command     string `protobuf:"bytes,1,opt,name=Command,proto3" json:"Command,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *BotCommands) Reset() {
	*x = BotCommands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotCommands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotCommands) ProtoMessage() {}

func (x *BotCommands) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotCommands.ProtoReflect.Descriptor instead.
func (*BotCommands) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{21}
}

func (x *BotCommands) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *BotCommands) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// BotInfo
type BotInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bot               *Bot           `protobuf:"bytes,1,opt,name=Bot,proto3" json:"Bot,omitempty"`
	UserID            int64          `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Description       string         `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	BotCommands       []*BotCommands `protobuf:"bytes,4,rep,name=BotCommands,proto3" json:"BotCommands,omitempty"`
	InlineGeo         bool           `protobuf:"varint,5,opt,name=InlineGeo,proto3" json:"InlineGeo,omitempty"`
	InlinePlaceHolder string         `protobuf:"bytes,6,opt,name=InlinePlaceHolder,proto3" json:"InlinePlaceHolder,omitempty"`
	InlineQuery       bool           `protobuf:"varint,7,opt,name=InlineQuery,proto3" json:"InlineQuery,omitempty"`
}

func (x *BotInfo) Reset() {
	*x = BotInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotInfo) ProtoMessage() {}

func (x *BotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotInfo.ProtoReflect.Descriptor instead.
func (*BotInfo) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{22}
}

func (x *BotInfo) GetBot() *Bot {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *BotInfo) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *BotInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BotInfo) GetBotCommands() []*BotCommands {
	if x != nil {
		return x.BotCommands
	}
	return nil
}

func (x *BotInfo) GetInlineGeo() bool {
	if x != nil {
		return x.InlineGeo
	}
	return false
}

func (x *BotInfo) GetInlinePlaceHolder() string {
	if x != nil {
		return x.InlinePlaceHolder
	}
	return ""
}

func (x *BotInfo) GetInlineQuery() bool {
	if x != nil {
		return x.InlineQuery
	}
	return false
}

// GroupPhoto
type GroupPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoBig   *FileLocation `protobuf:"bytes,1,opt,name=PhotoBig,proto3" json:"PhotoBig,omitempty"`
	PhotoSmall *FileLocation `protobuf:"bytes,2,opt,name=PhotoSmall,proto3" json:"PhotoSmall,omitempty"`
	PhotoID    int64         `protobuf:"varint,3,opt,name=PhotoID,proto3" json:"PhotoID,omitempty"`
}

func (x *GroupPhoto) Reset() {
	*x = GroupPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupPhoto) ProtoMessage() {}

func (x *GroupPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupPhoto.ProtoReflect.Descriptor instead.
func (*GroupPhoto) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{23}
}

func (x *GroupPhoto) GetPhotoBig() *FileLocation {
	if x != nil {
		return x.PhotoBig
	}
	return nil
}

func (x *GroupPhoto) GetPhotoSmall() *FileLocation {
	if x != nil {
		return x.PhotoSmall
	}
	return nil
}

func (x *GroupPhoto) GetPhotoID() int64 {
	if x != nil {
		return x.PhotoID
	}
	return 0
}

// Group
type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamID       int64        `protobuf:"varint,100,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	ID           int64        `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title        string       `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	CreatedOn    int64        `protobuf:"varint,3,opt,name=CreatedOn,proto3" json:"CreatedOn,omitempty"`
	Participants int32        `protobuf:"varint,4,opt,name=Participants,proto3" json:"Participants,omitempty"`
	EditedOn     int64        `protobuf:"varint,5,opt,name=EditedOn,proto3" json:"EditedOn,omitempty"`
	Flags        []GroupFlags `protobuf:"varint,6,rep,packed,name=Flags,proto3,enum=msg.GroupFlags" json:"Flags,omitempty"`
	Photo        *GroupPhoto  `protobuf:"bytes,7,opt,name=Photo,proto3" json:"Photo,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{24}
}

func (x *Group) GetTeamID() int64 {
	if x != nil {
		return x.TeamID
	}
	return 0
}

func (x *Group) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Group) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Group) GetCreatedOn() int64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

func (x *Group) GetParticipants() int32 {
	if x != nil {
		return x.Participants
	}
	return 0
}

func (x *Group) GetEditedOn() int64 {
	if x != nil {
		return x.EditedOn
	}
	return 0
}

func (x *Group) GetFlags() []GroupFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Group) GetPhoto() *GroupPhoto {
	if x != nil {
		return x.Photo
	}
	return nil
}

// GroupFull
type GroupFull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group          *Group              `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Users          []*User             `protobuf:"bytes,2,rep,name=Users,proto3" json:"Users,omitempty"`
	Participants   []*GroupParticipant `protobuf:"bytes,3,rep,name=Participants,proto3" json:"Participants,omitempty"`
	NotifySettings *PeerNotifySettings `protobuf:"bytes,4,opt,name=NotifySettings,proto3" json:"NotifySettings,omitempty"`
	PhotoGallery   []*GroupPhoto       `protobuf:"bytes,5,rep,name=PhotoGallery,proto3" json:"PhotoGallery,omitempty"`
}

func (x *GroupFull) Reset() {
	*x = GroupFull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupFull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupFull) ProtoMessage() {}

func (x *GroupFull) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupFull.ProtoReflect.Descriptor instead.
func (*GroupFull) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{25}
}

func (x *GroupFull) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupFull) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GroupFull) GetParticipants() []*GroupParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *GroupFull) GetNotifySettings() *PeerNotifySettings {
	if x != nil {
		return x.NotifySettings
	}
	return nil
}

func (x *GroupFull) GetPhotoGallery() []*GroupPhoto {
	if x != nil {
		return x.PhotoGallery
	}
	return nil
}

// GroupParticipant
type GroupParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     int64           `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	FirstName  string          `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName   string          `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName,omitempty"`
	Type       ParticipantType `protobuf:"varint,4,opt,name=Type,proto3,enum=msg.ParticipantType" json:"Type,omitempty"`
	AccessHash uint64          `protobuf:"varint,5,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Username   string          `protobuf:"bytes,6,opt,name=Username,proto3" json:"Username,omitempty"`
	Photo      *UserPhoto      `protobuf:"bytes,8,opt,name=Photo,proto3" json:"Photo,omitempty"`
}

func (x *GroupParticipant) Reset() {
	*x = GroupParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupParticipant) ProtoMessage() {}

func (x *GroupParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupParticipant.ProtoReflect.Descriptor instead.
func (*GroupParticipant) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{26}
}

func (x *GroupParticipant) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GroupParticipant) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *GroupParticipant) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *GroupParticipant) GetType() ParticipantType {
	if x != nil {
		return x.Type
	}
	return ParticipantType_ParticipantTypeMember
}

func (x *GroupParticipant) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *GroupParticipant) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GroupParticipant) GetPhoto() *UserPhoto {
	if x != nil {
		return x.Photo
	}
	return nil
}

// UserMessage
type UserMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamID              int64              `protobuf:"varint,100,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	ID                  int64              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PeerID              int64              `protobuf:"varint,2,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	PeerType            int32              `protobuf:"varint,3,opt,name=PeerType,proto3" json:"PeerType,omitempty"`
	CreatedOn           int64              `protobuf:"varint,4,opt,name=CreatedOn,proto3" json:"CreatedOn,omitempty"`
	EditedOn            int64              `protobuf:"varint,5,opt,name=EditedOn,proto3" json:"EditedOn,omitempty"`
	Fwd                 bool               `protobuf:"varint,601,opt,name=Fwd,proto3" json:"Fwd,omitempty"`
	FwdSenderID         int64              `protobuf:"varint,6,opt,name=FwdSenderID,proto3" json:"FwdSenderID,omitempty"`
	FwdChannelID        int64              `protobuf:"varint,7,opt,name=FwdChannelID,proto3" json:"FwdChannelID,omitempty"`
	FwdChannelMessageID int64              `protobuf:"varint,8,opt,name=FwdChannelMessageID,proto3" json:"FwdChannelMessageID,omitempty"`
	Flags               int32              `protobuf:"varint,9,opt,name=Flags,proto3" json:"Flags,omitempty"`
	MessageType         int64              `protobuf:"varint,10,opt,name=MessageType,proto3" json:"MessageType,omitempty"`
	Body                string             `protobuf:"bytes,11,opt,name=Body,proto3" json:"Body,omitempty"`
	SenderID            int64              `protobuf:"varint,12,opt,name=SenderID,proto3" json:"SenderID,omitempty"`
	ContentRead         bool               `protobuf:"varint,13,opt,name=ContentRead,proto3" json:"ContentRead,omitempty"`
	Inbox               bool               `protobuf:"varint,14,opt,name=Inbox,proto3" json:"Inbox,omitempty"`
	ReplyTo             int64              `protobuf:"varint,15,opt,name=ReplyTo,proto3" json:"ReplyTo,omitempty"`
	MessageAction       int32              `protobuf:"varint,16,opt,name=MessageAction,proto3" json:"MessageAction,omitempty"`
	MessageActionData   []byte             `protobuf:"bytes,17,opt,name=MessageActionData,proto3" json:"MessageActionData,omitempty"`
	Entities            []*MessageEntity   `protobuf:"bytes,18,rep,name=Entities,proto3" json:"Entities,omitempty"`
	MediaType           MediaType          `protobuf:"varint,19,opt,name=MediaType,proto3,enum=msg.MediaType" json:"MediaType,omitempty"`
	Media               []byte             `protobuf:"bytes,20,opt,name=Media,proto3" json:"Media,omitempty"`
	ReplyMarkup         int64              `protobuf:"varint,21,opt,name=ReplyMarkup,proto3" json:"ReplyMarkup,omitempty"`
	ReplyMarkupData     []byte             `protobuf:"bytes,22,opt,name=ReplyMarkupData,proto3" json:"ReplyMarkupData,omitempty"`
	LabelIDs            []int32            `protobuf:"varint,23,rep,packed,name=LabelIDs,proto3" json:"LabelIDs,omitempty"`
	ViaBotID            int64              `protobuf:"varint,24,opt,name=ViaBotID,proto3" json:"ViaBotID,omitempty"`
	Reactions           []*ReactionCounter `protobuf:"bytes,25,rep,name=Reactions,proto3" json:"Reactions,omitempty"`
	YourReactions       []string           `protobuf:"bytes,26,rep,name=YourReactions,proto3" json:"YourReactions,omitempty"`
	MediaCat            MediaCategory      `protobuf:"varint,27,opt,name=MediaCat,proto3,enum=msg.MediaCategory" json:"MediaCat,omitempty"`
}

func (x *UserMessage) Reset() {
	*x = UserMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMessage) ProtoMessage() {}

func (x *UserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMessage.ProtoReflect.Descriptor instead.
func (*UserMessage) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{27}
}

func (x *UserMessage) GetTeamID() int64 {
	if x != nil {
		return x.TeamID
	}
	return 0
}

func (x *UserMessage) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UserMessage) GetPeerID() int64 {
	if x != nil {
		return x.PeerID
	}
	return 0
}

func (x *UserMessage) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *UserMessage) GetCreatedOn() int64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

func (x *UserMessage) GetEditedOn() int64 {
	if x != nil {
		return x.EditedOn
	}
	return 0
}

func (x *UserMessage) GetFwd() bool {
	if x != nil {
		return x.Fwd
	}
	return false
}

func (x *UserMessage) GetFwdSenderID() int64 {
	if x != nil {
		return x.FwdSenderID
	}
	return 0
}

func (x *UserMessage) GetFwdChannelID() int64 {
	if x != nil {
		return x.FwdChannelID
	}
	return 0
}

func (x *UserMessage) GetFwdChannelMessageID() int64 {
	if x != nil {
		return x.FwdChannelMessageID
	}
	return 0
}

func (x *UserMessage) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UserMessage) GetMessageType() int64 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *UserMessage) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *UserMessage) GetSenderID() int64 {
	if x != nil {
		return x.SenderID
	}
	return 0
}

func (x *UserMessage) GetContentRead() bool {
	if x != nil {
		return x.ContentRead
	}
	return false
}

func (x *UserMessage) GetInbox() bool {
	if x != nil {
		return x.Inbox
	}
	return false
}

func (x *UserMessage) GetReplyTo() int64 {
	if x != nil {
		return x.ReplyTo
	}
	return 0
}

func (x *UserMessage) GetMessageAction() int32 {
	if x != nil {
		return x.MessageAction
	}
	return 0
}

func (x *UserMessage) GetMessageActionData() []byte {
	if x != nil {
		return x.MessageActionData
	}
	return nil
}

func (x *UserMessage) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *UserMessage) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_MediaTypeEmpty
}

func (x *UserMessage) GetMedia() []byte {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *UserMessage) GetReplyMarkup() int64 {
	if x != nil {
		return x.ReplyMarkup
	}
	return 0
}

func (x *UserMessage) GetReplyMarkupData() []byte {
	if x != nil {
		return x.ReplyMarkupData
	}
	return nil
}

func (x *UserMessage) GetLabelIDs() []int32 {
	if x != nil {
		return x.LabelIDs
	}
	return nil
}

func (x *UserMessage) GetViaBotID() int64 {
	if x != nil {
		return x.ViaBotID
	}
	return 0
}

func (x *UserMessage) GetReactions() []*ReactionCounter {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *UserMessage) GetYourReactions() []string {
	if x != nil {
		return x.YourReactions
	}
	return nil
}

func (x *UserMessage) GetMediaCat() MediaCategory {
	if x != nil {
		return x.MediaCat
	}
	return MediaCategory_MediaCategoryNone
}

// ReactionCounter
type ReactionCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reaction string `protobuf:"bytes,1,opt,name=Reaction,proto3" json:"Reaction,omitempty"`
	Total    int32  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *ReactionCounter) Reset() {
	*x = ReactionCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactionCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionCounter) ProtoMessage() {}

func (x *ReactionCounter) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionCounter.ProtoReflect.Descriptor instead.
func (*ReactionCounter) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{28}
}

func (x *ReactionCounter) GetReaction() string {
	if x != nil {
		return x.Reaction
	}
	return ""
}

func (x *ReactionCounter) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// DraftMessage
type DraftMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamID   int64            `protobuf:"varint,100,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	PeerID   int64            `protobuf:"varint,2,opt,name=PeerID,proto3" json:"PeerID,omitempty"`
	PeerType int32            `protobuf:"varint,3,opt,name=PeerType,proto3" json:"PeerType,omitempty"`
	Date     int64            `protobuf:"varint,4,opt,name=Date,proto3" json:"Date,omitempty"`
	Body     string           `protobuf:"bytes,5,opt,name=Body,proto3" json:"Body,omitempty"`
	Entities []*MessageEntity `protobuf:"bytes,6,rep,name=Entities,proto3" json:"Entities,omitempty"`
	ReplyTo  int64            `protobuf:"varint,7,opt,name=ReplyTo,proto3" json:"ReplyTo,omitempty"`
	EditedID int64            `protobuf:"varint,8,opt,name=EditedID,proto3" json:"EditedID,omitempty"`
}

func (x *DraftMessage) Reset() {
	*x = DraftMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DraftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DraftMessage) ProtoMessage() {}

func (x *DraftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DraftMessage.ProtoReflect.Descriptor instead.
func (*DraftMessage) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{29}
}

func (x *DraftMessage) GetTeamID() int64 {
	if x != nil {
		return x.TeamID
	}
	return 0
}

func (x *DraftMessage) GetPeerID() int64 {
	if x != nil {
		return x.PeerID
	}
	return 0
}

func (x *DraftMessage) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *DraftMessage) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *DraftMessage) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *DraftMessage) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *DraftMessage) GetReplyTo() int64 {
	if x != nil {
		return x.ReplyTo
	}
	return 0
}

func (x *DraftMessage) GetEditedID() int64 {
	if x != nil {
		return x.EditedID
	}
	return 0
}

// MessageEntity
type MessageEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   MessageEntityType `protobuf:"varint,1,opt,name=Type,proto3,enum=msg.MessageEntityType" json:"Type,omitempty"`
	Offset int32             `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Length int32             `protobuf:"varint,3,opt,name=Length,proto3" json:"Length,omitempty"`
	UserID int64             `protobuf:"varint,4,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *MessageEntity) Reset() {
	*x = MessageEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEntity) ProtoMessage() {}

func (x *MessageEntity) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEntity.ProtoReflect.Descriptor instead.
func (*MessageEntity) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{30}
}

func (x *MessageEntity) GetType() MessageEntityType {
	if x != nil {
		return x.Type
	}
	return MessageEntityType_MessageEntityTypeBold
}

func (x *MessageEntity) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MessageEntity) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *MessageEntity) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

// RSAPublicKey
type RSAPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FingerPrint int64  `protobuf:"varint,1,opt,name=FingerPrint,proto3" json:"FingerPrint,omitempty"`
	N           string `protobuf:"bytes,2,opt,name=N,proto3" json:"N,omitempty"`
	E           uint32 `protobuf:"varint,3,opt,name=E,proto3" json:"E,omitempty"`
}

func (x *RSAPublicKey) Reset() {
	*x = RSAPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RSAPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RSAPublicKey) ProtoMessage() {}

func (x *RSAPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RSAPublicKey.ProtoReflect.Descriptor instead.
func (*RSAPublicKey) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{31}
}

func (x *RSAPublicKey) GetFingerPrint() int64 {
	if x != nil {
		return x.FingerPrint
	}
	return 0
}

func (x *RSAPublicKey) GetN() string {
	if x != nil {
		return x.N
	}
	return ""
}

func (x *RSAPublicKey) GetE() uint32 {
	if x != nil {
		return x.E
	}
	return 0
}

// DHGroup
type DHGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FingerPrint int64  `protobuf:"varint,1,opt,name=FingerPrint,proto3" json:"FingerPrint,omitempty"`
	Prime       string `protobuf:"bytes,2,opt,name=Prime,proto3" json:"Prime,omitempty"`
	Gen         int32  `protobuf:"varint,3,opt,name=Gen,proto3" json:"Gen,omitempty"`
}

func (x *DHGroup) Reset() {
	*x = DHGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHGroup) ProtoMessage() {}

func (x *DHGroup) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHGroup.ProtoReflect.Descriptor instead.
func (*DHGroup) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{32}
}

func (x *DHGroup) GetFingerPrint() int64 {
	if x != nil {
		return x.FingerPrint
	}
	return 0
}

func (x *DHGroup) GetPrime() string {
	if x != nil {
		return x.Prime
	}
	return ""
}

func (x *DHGroup) GetGen() int32 {
	if x != nil {
		return x.Gen
	}
	return 0
}

// PhoneContact
type PhoneContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID  int64  `protobuf:"varint,1,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName,omitempty"`
	Phone     string `protobuf:"bytes,4,opt,name=Phone,proto3" json:"Phone,omitempty"`
}

func (x *PhoneContact) Reset() {
	*x = PhoneContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneContact) ProtoMessage() {}

func (x *PhoneContact) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneContact.ProtoReflect.Descriptor instead.
func (*PhoneContact) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{33}
}

func (x *PhoneContact) GetClientID() int64 {
	if x != nil {
		return x.ClientID
	}
	return 0
}

func (x *PhoneContact) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *PhoneContact) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *PhoneContact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

// PeerNotifySettings
type PeerNotifySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags     int32  `protobuf:"varint,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
	MuteUntil int64  `protobuf:"varint,2,opt,name=MuteUntil,proto3" json:"MuteUntil,omitempty"`
	Sound     string `protobuf:"bytes,3,opt,name=Sound,proto3" json:"Sound,omitempty"`
}

func (x *PeerNotifySettings) Reset() {
	*x = PeerNotifySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerNotifySettings) ProtoMessage() {}

func (x *PeerNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerNotifySettings.ProtoReflect.Descriptor instead.
func (*PeerNotifySettings) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{34}
}

func (x *PeerNotifySettings) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *PeerNotifySettings) GetMuteUntil() int64 {
	if x != nil {
		return x.MuteUntil
	}
	return 0
}

func (x *PeerNotifySettings) GetSound() string {
	if x != nil {
		return x.Sound
	}
	return ""
}

// InputFile
type InputFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileID      int64  `protobuf:"varint,1,opt,name=FileID,proto3" json:"FileID,omitempty"`
	TotalParts  int32  `protobuf:"varint,2,opt,name=TotalParts,proto3" json:"TotalParts,omitempty"`
	FileName    string `protobuf:"bytes,3,opt,name=FileName,proto3" json:"FileName,omitempty"`
	MD5Checksum string `protobuf:"bytes,4,opt,name=MD5Checksum,proto3" json:"MD5Checksum,omitempty"`
}

func (x *InputFile) Reset() {
	*x = InputFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputFile) ProtoMessage() {}

func (x *InputFile) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputFile.ProtoReflect.Descriptor instead.
func (*InputFile) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{35}
}

func (x *InputFile) GetFileID() int64 {
	if x != nil {
		return x.FileID
	}
	return 0
}

func (x *InputFile) GetTotalParts() int32 {
	if x != nil {
		return x.TotalParts
	}
	return 0
}

func (x *InputFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *InputFile) GetMD5Checksum() string {
	if x != nil {
		return x.MD5Checksum
	}
	return ""
}

// InputDocument
type InputDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AccessHash uint64 `protobuf:"fixed64,2,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	ClusterID  int32  `protobuf:"varint,3,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
}

func (x *InputDocument) Reset() {
	*x = InputDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputDocument) ProtoMessage() {}

func (x *InputDocument) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputDocument.ProtoReflect.Descriptor instead.
func (*InputDocument) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{36}
}

func (x *InputDocument) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *InputDocument) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *InputDocument) GetClusterID() int32 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

// PrivacyRule
type PrivacyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivacyType PrivacyType `protobuf:"varint,1,opt,name=PrivacyType,proto3,enum=msg.PrivacyType" json:"PrivacyType,omitempty"`
	UserIDs     []int64     `protobuf:"varint,2,rep,packed,name=UserIDs,proto3" json:"UserIDs,omitempty"`
}

func (x *PrivacyRule) Reset() {
	*x = PrivacyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivacyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivacyRule) ProtoMessage() {}

func (x *PrivacyRule) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivacyRule.ProtoReflect.Descriptor instead.
func (*PrivacyRule) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{37}
}

func (x *PrivacyRule) GetPrivacyType() PrivacyType {
	if x != nil {
		return x.PrivacyType
	}
	return PrivacyType_PrivacyTypeAllowAll
}

func (x *PrivacyRule) GetUserIDs() []int64 {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

// Label
type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Colour string `protobuf:"bytes,3,opt,name=Colour,proto3" json:"Colour,omitempty"`
	Count  int32  `protobuf:"varint,4,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{38}
}

func (x *Label) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Label) GetColour() string {
	if x != nil {
		return x.Colour
	}
	return ""
}

func (x *Label) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// LabelsMany
type LabelsMany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []*Label `protobuf:"bytes,1,rep,name=Labels,proto3" json:"Labels,omitempty"`
	Empty  bool     `protobuf:"varint,5,opt,name=Empty,proto3" json:"Empty,omitempty"`
}

func (x *LabelsMany) Reset() {
	*x = LabelsMany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelsMany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelsMany) ProtoMessage() {}

func (x *LabelsMany) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelsMany.ProtoReflect.Descriptor instead.
func (*LabelsMany) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{39}
}

func (x *LabelsMany) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LabelsMany) GetEmpty() bool {
	if x != nil {
		return x.Empty
	}
	return false
}

// InputGeoLocation
type InputGeoLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat  float32 `protobuf:"fixed32,1,opt,name=Lat,proto3" json:"Lat,omitempty"`
	Long float32 `protobuf:"fixed32,2,opt,name=Long,proto3" json:"Long,omitempty"`
}

func (x *InputGeoLocation) Reset() {
	*x = InputGeoLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputGeoLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputGeoLocation) ProtoMessage() {}

func (x *InputGeoLocation) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputGeoLocation.ProtoReflect.Descriptor instead.
func (*InputGeoLocation) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{40}
}

func (x *InputGeoLocation) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *InputGeoLocation) GetLong() float32 {
	if x != nil {
		return x.Long
	}
	return 0
}

// GeoLocation
type GeoLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat  float32 `protobuf:"fixed32,1,opt,name=Lat,proto3" json:"Lat,omitempty"`
	Long float32 `protobuf:"fixed32,2,opt,name=Long,proto3" json:"Long,omitempty"`
}

func (x *GeoLocation) Reset() {
	*x = GeoLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLocation) ProtoMessage() {}

func (x *GeoLocation) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLocation.ProtoReflect.Descriptor instead.
func (*GeoLocation) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{41}
}

func (x *GeoLocation) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *GeoLocation) GetLong() float32 {
	if x != nil {
		return x.Long
	}
	return 0
}

// InputTeam
type InputTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AccessHash uint64 `protobuf:"fixed64,2,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
}

func (x *InputTeam) Reset() {
	*x = InputTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputTeam) ProtoMessage() {}

func (x *InputTeam) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputTeam.ProtoReflect.Descriptor instead.
func (*InputTeam) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{42}
}

func (x *InputTeam) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *InputTeam) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// TeamPhoto
type TeamPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoBig   *FileLocation `protobuf:"bytes,1,opt,name=PhotoBig,proto3" json:"PhotoBig,omitempty"`
	PhotoSmall *FileLocation `protobuf:"bytes,2,opt,name=PhotoSmall,proto3" json:"PhotoSmall,omitempty"`
}

func (x *TeamPhoto) Reset() {
	*x = TeamPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamPhoto) ProtoMessage() {}

func (x *TeamPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamPhoto.ProtoReflect.Descriptor instead.
func (*TeamPhoto) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{43}
}

func (x *TeamPhoto) GetPhotoBig() *FileLocation {
	if x != nil {
		return x.PhotoBig
	}
	return nil
}

func (x *TeamPhoto) GetPhotoSmall() *FileLocation {
	if x != nil {
		return x.PhotoSmall
	}
	return nil
}

// Team
type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string      `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	CreatorID  int64       `protobuf:"varint,3,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
	AccessHash uint64      `protobuf:"fixed64,6,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Flags      []TeamFlags `protobuf:"varint,7,rep,packed,name=Flags,proto3,enum=msg.TeamFlags" json:"Flags,omitempty"`
	Capacity   int32       `protobuf:"varint,8,opt,name=Capacity,proto3" json:"Capacity,omitempty"`
	Community  bool        `protobuf:"varint,9,opt,name=Community,proto3" json:"Community,omitempty"`
	Photo      *TeamPhoto  `protobuf:"bytes,10,opt,name=Photo,proto3" json:"Photo,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_types_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_core_types_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_core_types_proto_rawDescGZIP(), []int{44}
}

func (x *Team) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetCreatorID() int64 {
	if x != nil {
		return x.CreatorID
	}
	return 0
}

func (x *Team) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *Team) GetFlags() []TeamFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Team) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Team) GetCommunity() bool {
	if x != nil {
		return x.Community
	}
	return false
}

func (x *Team) GetPhoto() *TeamPhoto {
	if x != nil {
		return x.Photo
	}
	return nil
}

var File_core_types_proto protoreflect.FileDescriptor

var file_core_types_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x6d, 0x73, 0x67, 0x1a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x6f, 0x6e, 0x61, 0x6b, 0x73, 0x6f, 0x66, 0x74, 0x2f, 0x72, 0x6f,
	0x6e, 0x79, 0x2f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a, 0x04,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x16, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x9c, 0x01, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xe1, 0x01, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x07, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x69, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d,
	0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x05, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22,
	0x60, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x41, 0x75, 0x74, 0x68, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0xa6, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x6f, 0x6e, 0x79,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x52, 0x08, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x22, 0x25, 0x0a, 0x03, 0x41, 0x63,
	0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x73, 0x22, 0x1e, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x94, 0x04, 0x0a, 0x06, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x06,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x06, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x06, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x62, 0x6f,
	0x78, 0x4d, 0x61, 0x78, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x78, 0x4d, 0x61, 0x78, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3f, 0x0a, 0x0e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x05, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x22, 0x66, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x52, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x47, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x05, 0x53, 0x72, 0x70, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x05, 0x53, 0x72, 0x70, 0x49, 0x44, 0x12,
	0x0c, 0x0a, 0x01, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x41, 0x12, 0x0e, 0x0a,
	0x02, 0x4d, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x4d, 0x31, 0x22, 0x8b, 0x01,
	0x0a, 0x11, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x0c, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x1f, 0x0a, 0x0b, 0x57, 0x65, 0x62,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x22, 0x24, 0x0a, 0x10, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x57, 0x65, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c,
	0x22, 0xf7, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x2d,
	0x0a, 0x08, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x69, 0x67, 0x12, 0x31, 0x0a,
	0x0a, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x12, 0x1c, 0x0a, 0x07, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x44, 0x12, 0x32,
	0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x69, 0x67, 0x57, 0x65, 0x62, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x69, 0x67, 0x57,
	0x65, 0x62, 0x12, 0x36, 0x0a, 0x0d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x57, 0x65, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x57, 0x65, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x57, 0x65, 0x62, 0x22, 0x4b, 0x0a, 0x09, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x89, 0x04, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x42, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x42, 0x69, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x12, 0x32, 0x0a, 0x0c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x42, 0x6f, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x07, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x22, 0xf7, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a,
	0x03, 0x42, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x69, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x42, 0x69, 0x6f, 0x22, 0x49, 0x0a, 0x0b, 0x42, 0x6f,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x02, 0x0a, 0x07, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x03, 0x42, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x03, 0x42, 0x6f, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x42, 0x6f, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x0b,
	0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x65, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x0a, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x42, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x42, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x0a, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x07, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x07, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x44, 0x22, 0xf9, 0x01, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1a, 0x0a, 0x06, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x45, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a,
	0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x75,
	0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x3f, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x33, 0x0a, 0x0c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x47,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x22, 0xf8, 0x01, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x22, 0xda, 0x07, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x06, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x65, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12,
	0x11, 0x0a, 0x03, 0x46, 0x77, 0x64, 0x18, 0xd9, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x46,
	0x77, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x46, 0x77, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x46, 0x77, 0x64,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0c, 0x46, 0x77, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x0c, 0x46, 0x77, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x12, 0x34, 0x0a, 0x13, 0x46, 0x77, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x13, 0x46, 0x77, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x1e, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61,
	0x72, 0x6b, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x49, 0x44, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x56, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x49, 0x44,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x56, 0x69, 0x61, 0x42,
	0x6f, 0x74, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x6f, 0x75, 0x72,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x59, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e,
	0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x22, 0x43,
	0x0a, 0x0f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xf0, 0x01, 0x0a, 0x0c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x2e, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x45, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x49, 0x44, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x4c, 0x0a, 0x0c, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x4e,
	0x12, 0x0c, 0x0a, 0x01, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x45, 0x22, 0x53,
	0x0a, 0x07, 0x44, 0x48, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x72, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x47, 0x65, 0x6e, 0x22, 0x7e, 0x0a, 0x0c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x22, 0x5e, 0x0a, 0x12, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x44, 0x35,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4d, 0x44, 0x35, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x65, 0x0a, 0x0d, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x5f, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x32, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x22, 0x59, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x46,
	0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x22, 0x0a, 0x06,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x38, 0x0a, 0x10, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47,
	0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4c, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x4c, 0x6f, 0x6e, 0x67,
	0x22, 0x33, 0x0a, 0x0b, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x4c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4c, 0x61,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x4c, 0x6f, 0x6e, 0x67, 0x22, 0x43, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x12, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0x6d, 0x0a, 0x09, 0x54, 0x65,
	0x61, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x42, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x42, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x0a, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x22, 0xfa, 0x01, 0x0a, 0x04, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x12, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0a,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x24, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x12, 0x24, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52,
	0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x2a, 0x99, 0x01, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x79, 0x70, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x10, 0x01, 0x12,
	0x1e, 0x0a, 0x1a, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x79,
	0x70, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x10, 0x04, 0x2a, 0x5c, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x66, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x65,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x65, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x04,
	0x2a, 0x82, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x15, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x10, 0x04, 0x2a, 0xa0, 0x02, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x4e, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x6e,
	0x6c, 0x79, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x10, 0x07, 0x12, 0x17, 0x0a,
	0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x32, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x33, 0x10, 0x09, 0x12,
	0x17, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x34, 0x10, 0x0a, 0x2a, 0x62, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x02, 0x2a, 0xc3, 0x03, 0x0a,
	0x0e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x57, 0x65, 0x62, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x10, 0x08, 0x12, 0x21,
	0x0a, 0x1d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x09, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x34, 0x10, 0x0a, 0x12, 0x1b,
	0x0a, 0x17, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x35, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x36, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x37, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x38,
	0x10, 0x0e, 0x2a, 0xce, 0x02, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x57, 0x65, 0x62, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x13,
	0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x61, 0x6c, 0x65,
	0x64, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x32, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x33, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x34, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x35, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x36, 0x10, 0x0d, 0x2a, 0xa5, 0x03, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x66, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x57, 0x65, 0x62, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x10,
	0x07, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x6c,
	0x6c, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x10, 0x0a, 0x12,
	0x1a, 0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x32, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x33, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x34, 0x10, 0x0e, 0x12,
	0x1a, 0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x35, 0x10, 0x0f, 0x2a, 0xba, 0x03, 0x0a, 0x11,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6c, 0x64, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x55, 0x72, 0x6c, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x04, 0x12, 0x1c, 0x0a,
	0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x61, 0x73, 0x68, 0x54, 0x61, 0x67, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x34, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x35, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x36, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x37, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x38, 0x10, 0x0d, 0x2a, 0x52, 0x0a, 0x11, 0x50, 0x75, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x72, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x70, 0x6e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x4b, 0x69, 0x74, 0x10, 0x02, 0x2a, 0xd3, 0x02, 0x0a,
	0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x31, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x32, 0x10, 0x08, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x33, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x34, 0x10, 0x0a,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x35, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x36,
	0x10, 0x0c, 0x2a, 0x99, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x41, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73, 0x10, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73, 0x10, 0x66, 0x2a, 0xc1,
	0x01, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x65,
	0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31,
	0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x32, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x65,
	0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x33,
	0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x34, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x65,
	0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x35,
	0x10, 0x07, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x3b, 0x6d, 0x73, 0x67, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_types_proto_rawDescOnce sync.Once
	file_core_types_proto_rawDescData = file_core_types_proto_rawDesc
)

func file_core_types_proto_rawDescGZIP() []byte {
	file_core_types_proto_rawDescOnce.Do(func() {
		file_core_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_types_proto_rawDescData)
	})
	return file_core_types_proto_rawDescData
}

var file_core_types_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_core_types_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_core_types_proto_goTypes = []interface{}{
	(TypingAction)(0),             // 0: msg.TypingAction
	(PeerType)(0),                 // 1: msg.PeerType
	(UserStatus)(0),               // 2: msg.UserStatus
	(GroupFlags)(0),               // 3: msg.GroupFlags
	(ParticipantType)(0),          // 4: msg.ParticipantType
	(InputMediaType)(0),           // 5: msg.InputMediaType
	(MediaType)(0),                // 6: msg.MediaType
	(MediaCategory)(0),            // 7: msg.MediaCategory
	(MessageEntityType)(0),        // 8: msg.MessageEntityType
	(PushTokenProvider)(0),        // 9: msg.PushTokenProvider
	(PrivacyKey)(0),               // 10: msg.PrivacyKey
	(PrivacyType)(0),              // 11: msg.PrivacyType
	(TeamFlags)(0),                // 12: msg.TeamFlags
	(*Ping)(nil),                  // 13: msg.Ping
	(*Pong)(nil),                  // 14: msg.Pong
	(*UpdateEnvelope)(nil),        // 15: msg.UpdateEnvelope
	(*UpdateContainer)(nil),       // 16: msg.UpdateContainer
	(*ProtoMessage)(nil),          // 17: msg.ProtoMessage
	(*ProtoEncryptedPayload)(nil), // 18: msg.ProtoEncryptedPayload
	(*Ack)(nil),                   // 19: msg.Ack
	(*Bool)(nil),                  // 20: msg.Bool
	(*Dialog)(nil),                // 21: msg.Dialog
	(*InputPeer)(nil),             // 22: msg.InputPeer
	(*Peer)(nil),                  // 23: msg.Peer
	(*InputPassword)(nil),         // 24: msg.InputPassword
	(*InputFileLocation)(nil),     // 25: msg.InputFileLocation
	(*FileLocation)(nil),          // 26: msg.FileLocation
	(*WebLocation)(nil),           // 27: msg.WebLocation
	(*InputWebLocation)(nil),      // 28: msg.InputWebLocation
	(*UserPhoto)(nil),             // 29: msg.UserPhoto
	(*InputUser)(nil),             // 30: msg.InputUser
	(*User)(nil),                  // 31: msg.User
	(*ContactUser)(nil),           // 32: msg.ContactUser
	(*Bot)(nil),                   // 33: msg.Bot
	(*BotCommands)(nil),           // 34: msg.BotCommands
	(*BotInfo)(nil),               // 35: msg.BotInfo
	(*GroupPhoto)(nil),            // 36: msg.GroupPhoto
	(*Group)(nil),                 // 37: msg.Group
	(*GroupFull)(nil),             // 38: msg.GroupFull
	(*GroupParticipant)(nil),      // 39: msg.GroupParticipant
	(*UserMessage)(nil),           // 40: msg.UserMessage
	(*ReactionCounter)(nil),       // 41: msg.ReactionCounter
	(*DraftMessage)(nil),          // 42: msg.DraftMessage
	(*MessageEntity)(nil),         // 43: msg.MessageEntity
	(*RSAPublicKey)(nil),          // 44: msg.RSAPublicKey
	(*DHGroup)(nil),               // 45: msg.DHGroup
	(*PhoneContact)(nil),          // 46: msg.PhoneContact
	(*PeerNotifySettings)(nil),    // 47: msg.PeerNotifySettings
	(*InputFile)(nil),             // 48: msg.InputFile
	(*InputDocument)(nil),         // 49: msg.InputDocument
	(*PrivacyRule)(nil),           // 50: msg.PrivacyRule
	(*Label)(nil),                 // 51: msg.Label
	(*LabelsMany)(nil),            // 52: msg.LabelsMany
	(*InputGeoLocation)(nil),      // 53: msg.InputGeoLocation
	(*GeoLocation)(nil),           // 54: msg.GeoLocation
	(*InputTeam)(nil),             // 55: msg.InputTeam
	(*TeamPhoto)(nil),             // 56: msg.TeamPhoto
	(*Team)(nil),                  // 57: msg.Team
	(*rony.MessageEnvelope)(nil),  // 58: rony.MessageEnvelope
}
var file_core_types_proto_depIdxs = []int32{
	15, // 0: msg.UpdateContainer.Updates:type_name -> msg.UpdateEnvelope
	31, // 1: msg.UpdateContainer.Users:type_name -> msg.User
	37, // 2: msg.UpdateContainer.Groups:type_name -> msg.Group
	58, // 3: msg.ProtoEncryptedPayload.Envelope:type_name -> rony.MessageEnvelope
	47, // 4: msg.Dialog.NotifySettings:type_name -> msg.PeerNotifySettings
	42, // 5: msg.Dialog.Draft:type_name -> msg.DraftMessage
	1,  // 6: msg.InputPeer.Type:type_name -> msg.PeerType
	26, // 7: msg.UserPhoto.PhotoBig:type_name -> msg.FileLocation
	26, // 8: msg.UserPhoto.PhotoSmall:type_name -> msg.FileLocation
	27, // 9: msg.UserPhoto.PhotoBigWeb:type_name -> msg.WebLocation
	27, // 10: msg.UserPhoto.PhotoSmallWeb:type_name -> msg.WebLocation
	2,  // 11: msg.User.Status:type_name -> msg.UserStatus
	29, // 12: msg.User.Photo:type_name -> msg.UserPhoto
	29, // 13: msg.User.PhotoGallery:type_name -> msg.UserPhoto
	35, // 14: msg.User.BotInfo:type_name -> msg.BotInfo
	29, // 15: msg.ContactUser.Photo:type_name -> msg.UserPhoto
	33, // 16: msg.BotInfo.Bot:type_name -> msg.Bot
	34, // 17: msg.BotInfo.BotCommands:type_name -> msg.BotCommands
	26, // 18: msg.GroupPhoto.PhotoBig:type_name -> msg.FileLocation
	26, // 19: msg.GroupPhoto.PhotoSmall:type_name -> msg.FileLocation
	3,  // 20: msg.Group.Flags:type_name -> msg.GroupFlags
	36, // 21: msg.Group.Photo:type_name -> msg.GroupPhoto
	37, // 22: msg.GroupFull.Group:type_name -> msg.Group
	31, // 23: msg.GroupFull.Users:type_name -> msg.User
	39, // 24: msg.GroupFull.Participants:type_name -> msg.GroupParticipant
	47, // 25: msg.GroupFull.NotifySettings:type_name -> msg.PeerNotifySettings
	36, // 26: msg.GroupFull.PhotoGallery:type_name -> msg.GroupPhoto
	4,  // 27: msg.GroupParticipant.Type:type_name -> msg.ParticipantType
	29, // 28: msg.GroupParticipant.Photo:type_name -> msg.UserPhoto
	43, // 29: msg.UserMessage.Entities:type_name -> msg.MessageEntity
	6,  // 30: msg.UserMessage.MediaType:type_name -> msg.MediaType
	41, // 31: msg.UserMessage.Reactions:type_name -> msg.ReactionCounter
	7,  // 32: msg.UserMessage.MediaCat:type_name -> msg.MediaCategory
	43, // 33: msg.DraftMessage.Entities:type_name -> msg.MessageEntity
	8,  // 34: msg.MessageEntity.Type:type_name -> msg.MessageEntityType
	11, // 35: msg.PrivacyRule.PrivacyType:type_name -> msg.PrivacyType
	51, // 36: msg.LabelsMany.Labels:type_name -> msg.Label
	26, // 37: msg.TeamPhoto.PhotoBig:type_name -> msg.FileLocation
	26, // 38: msg.TeamPhoto.PhotoSmall:type_name -> msg.FileLocation
	12, // 39: msg.Team.Flags:type_name -> msg.TeamFlags
	56, // 40: msg.Team.Photo:type_name -> msg.TeamPhoto
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_core_types_proto_init() }
func file_core_types_proto_init() {
	if File_core_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_core_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoEncryptedPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputFileLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputWebLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotCommands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupFull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactionCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DraftMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RSAPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerNotifySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivacyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelsMany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputGeoLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_types_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_types_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_core_types_proto_goTypes,
		DependencyIndexes: file_core_types_proto_depIdxs,
		EnumInfos:         file_core_types_proto_enumTypes,
		MessageInfos:      file_core_types_proto_msgTypes,
	}.Build()
	File_core_types_proto = out.File
	file_core_types_proto_rawDesc = nil
	file_core_types_proto_goTypes = nil
	file_core_types_proto_depIdxs = nil
}
