// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: system.proto

package msg

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SystemGetPublicKeys
// @Function
// @Return: SystemPublicKeys
type SystemGetPublicKeys struct {
}

func (m *SystemGetPublicKeys) Reset()         { *m = SystemGetPublicKeys{} }
func (m *SystemGetPublicKeys) String() string { return proto.CompactTextString(m) }
func (*SystemGetPublicKeys) ProtoMessage()    {}
func (*SystemGetPublicKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{0}
}
func (m *SystemGetPublicKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemGetPublicKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemGetPublicKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemGetPublicKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemGetPublicKeys.Merge(m, src)
}
func (m *SystemGetPublicKeys) XXX_Size() int {
	return m.Size()
}
func (m *SystemGetPublicKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemGetPublicKeys.DiscardUnknown(m)
}

var xxx_messageInfo_SystemGetPublicKeys proto.InternalMessageInfo

// SystemGetDHGroups
// @Function
// @Return: SystemDHGroups
type SystemGetDHGroups struct {
}

func (m *SystemGetDHGroups) Reset()         { *m = SystemGetDHGroups{} }
func (m *SystemGetDHGroups) String() string { return proto.CompactTextString(m) }
func (*SystemGetDHGroups) ProtoMessage()    {}
func (*SystemGetDHGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{1}
}
func (m *SystemGetDHGroups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemGetDHGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemGetDHGroups.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemGetDHGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemGetDHGroups.Merge(m, src)
}
func (m *SystemGetDHGroups) XXX_Size() int {
	return m.Size()
}
func (m *SystemGetDHGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemGetDHGroups.DiscardUnknown(m)
}

var xxx_messageInfo_SystemGetDHGroups proto.InternalMessageInfo

// SystemGetServerTime
// @Function
// @Returns: SystemServerTime
type SystemGetServerTime struct {
}

func (m *SystemGetServerTime) Reset()         { *m = SystemGetServerTime{} }
func (m *SystemGetServerTime) String() string { return proto.CompactTextString(m) }
func (*SystemGetServerTime) ProtoMessage()    {}
func (*SystemGetServerTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{2}
}
func (m *SystemGetServerTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemGetServerTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemGetServerTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemGetServerTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemGetServerTime.Merge(m, src)
}
func (m *SystemGetServerTime) XXX_Size() int {
	return m.Size()
}
func (m *SystemGetServerTime) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemGetServerTime.DiscardUnknown(m)
}

var xxx_messageInfo_SystemGetServerTime proto.InternalMessageInfo

// SystemGetInfo
// @Function
// @Returns: SystemInfo
type SystemGetInfo struct {
}

func (m *SystemGetInfo) Reset()         { *m = SystemGetInfo{} }
func (m *SystemGetInfo) String() string { return proto.CompactTextString(m) }
func (*SystemGetInfo) ProtoMessage()    {}
func (*SystemGetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{3}
}
func (m *SystemGetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemGetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemGetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemGetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemGetInfo.Merge(m, src)
}
func (m *SystemGetInfo) XXX_Size() int {
	return m.Size()
}
func (m *SystemGetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemGetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SystemGetInfo proto.InternalMessageInfo

// SystemGetSalts
// @Function
// @Returns: SystemSalts
type SystemGetSalts struct {
}

func (m *SystemGetSalts) Reset()         { *m = SystemGetSalts{} }
func (m *SystemGetSalts) String() string { return proto.CompactTextString(m) }
func (*SystemGetSalts) ProtoMessage()    {}
func (*SystemGetSalts) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{4}
}
func (m *SystemGetSalts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemGetSalts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemGetSalts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemGetSalts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemGetSalts.Merge(m, src)
}
func (m *SystemGetSalts) XXX_Size() int {
	return m.Size()
}
func (m *SystemGetSalts) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemGetSalts.DiscardUnknown(m)
}

var xxx_messageInfo_SystemGetSalts proto.InternalMessageInfo

// SystemGetConfig
// @Function
// @Returns: SystemConfig
type SystemGetConfig struct {
}

func (m *SystemGetConfig) Reset()         { *m = SystemGetConfig{} }
func (m *SystemGetConfig) String() string { return proto.CompactTextString(m) }
func (*SystemGetConfig) ProtoMessage()    {}
func (*SystemGetConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{5}
}
func (m *SystemGetConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemGetConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemGetConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemGetConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemGetConfig.Merge(m, src)
}
func (m *SystemGetConfig) XXX_Size() int {
	return m.Size()
}
func (m *SystemGetConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemGetConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SystemGetConfig proto.InternalMessageInfo

// SystemUploadUsage
// @Function
// @Returns: Bool
type SystemUploadUsage struct {
	Usage []*ClientUsage `protobuf:"bytes,1,rep,name=Usage,proto3" json:"Usage,omitempty"`
}

func (m *SystemUploadUsage) Reset()         { *m = SystemUploadUsage{} }
func (m *SystemUploadUsage) String() string { return proto.CompactTextString(m) }
func (*SystemUploadUsage) ProtoMessage()    {}
func (*SystemUploadUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{6}
}
func (m *SystemUploadUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemUploadUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemUploadUsage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemUploadUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemUploadUsage.Merge(m, src)
}
func (m *SystemUploadUsage) XXX_Size() int {
	return m.Size()
}
func (m *SystemUploadUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemUploadUsage.DiscardUnknown(m)
}

var xxx_messageInfo_SystemUploadUsage proto.InternalMessageInfo

func (m *SystemUploadUsage) GetUsage() []*ClientUsage {
	if m != nil {
		return m.Usage
	}
	return nil
}

// SystemGetResponse
// @Function
// @Return: MessageEnvelope / MessageContainer
type SystemGetResponse struct {
	RequestIDs []uint64 `protobuf:"fixed64,1,rep,packed,name=RequestIDs,proto3" json:"RequestIDs,omitempty"`
}

func (m *SystemGetResponse) Reset()         { *m = SystemGetResponse{} }
func (m *SystemGetResponse) String() string { return proto.CompactTextString(m) }
func (*SystemGetResponse) ProtoMessage()    {}
func (*SystemGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{7}
}
func (m *SystemGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemGetResponse.Merge(m, src)
}
func (m *SystemGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *SystemGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SystemGetResponse proto.InternalMessageInfo

func (m *SystemGetResponse) GetRequestIDs() []uint64 {
	if m != nil {
		return m.RequestIDs
	}
	return nil
}

// ClientUsage
type ClientUsage struct {
	Year             int32 `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	Month            int32 `protobuf:"varint,2,opt,name=Month,proto3" json:"Month,omitempty"`
	Day              int32 `protobuf:"varint,3,opt,name=Day,proto3" json:"Day,omitempty"`
	UserID           int64 `protobuf:"varint,4,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ForegroundTime   int64 `protobuf:"varint,5,opt,name=ForegroundTime,proto3" json:"ForegroundTime,omitempty"`
	AvgResponseTime  int64 `protobuf:"varint,6,opt,name=AvgResponseTime,proto3" json:"AvgResponseTime,omitempty"`
	TotalRequests    int64 `protobuf:"varint,7,opt,name=TotalRequests,proto3" json:"TotalRequests,omitempty"`
	ReceivedMessages int64 `protobuf:"varint,8,opt,name=ReceivedMessages,proto3" json:"ReceivedMessages,omitempty"`
	SentMessages     int64 `protobuf:"varint,9,opt,name=SentMessages,proto3" json:"SentMessages,omitempty"`
	ReceivedMedia    int64 `protobuf:"varint,10,opt,name=ReceivedMedia,proto3" json:"ReceivedMedia,omitempty"`
	SentMedia        int64 `protobuf:"varint,11,opt,name=SentMedia,proto3" json:"SentMedia,omitempty"`
	UploadBytes      int64 `protobuf:"varint,12,opt,name=UploadBytes,proto3" json:"UploadBytes,omitempty"`
	DownloadBytes    int64 `protobuf:"varint,13,opt,name=DownloadBytes,proto3" json:"DownloadBytes,omitempty"`
}

func (m *ClientUsage) Reset()         { *m = ClientUsage{} }
func (m *ClientUsage) String() string { return proto.CompactTextString(m) }
func (*ClientUsage) ProtoMessage()    {}
func (*ClientUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{8}
}
func (m *ClientUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientUsage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientUsage.Merge(m, src)
}
func (m *ClientUsage) XXX_Size() int {
	return m.Size()
}
func (m *ClientUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientUsage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientUsage proto.InternalMessageInfo

func (m *ClientUsage) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *ClientUsage) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *ClientUsage) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *ClientUsage) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ClientUsage) GetForegroundTime() int64 {
	if m != nil {
		return m.ForegroundTime
	}
	return 0
}

func (m *ClientUsage) GetAvgResponseTime() int64 {
	if m != nil {
		return m.AvgResponseTime
	}
	return 0
}

func (m *ClientUsage) GetTotalRequests() int64 {
	if m != nil {
		return m.TotalRequests
	}
	return 0
}

func (m *ClientUsage) GetReceivedMessages() int64 {
	if m != nil {
		return m.ReceivedMessages
	}
	return 0
}

func (m *ClientUsage) GetSentMessages() int64 {
	if m != nil {
		return m.SentMessages
	}
	return 0
}

func (m *ClientUsage) GetReceivedMedia() int64 {
	if m != nil {
		return m.ReceivedMedia
	}
	return 0
}

func (m *ClientUsage) GetSentMedia() int64 {
	if m != nil {
		return m.SentMedia
	}
	return 0
}

func (m *ClientUsage) GetUploadBytes() int64 {
	if m != nil {
		return m.UploadBytes
	}
	return 0
}

func (m *ClientUsage) GetDownloadBytes() int64 {
	if m != nil {
		return m.DownloadBytes
	}
	return 0
}

// SystemConfig
type SystemConfig struct {
	GifBot                  string        `protobuf:"bytes,110,opt,name=GifBot,proto3" json:"GifBot,omitempty"`
	WikiBot                 string        `protobuf:"bytes,111,opt,name=WikiBot,proto3" json:"WikiBot,omitempty"`
	TestMode                bool          `protobuf:"varint,1,opt,name=TestMode,proto3" json:"TestMode,omitempty"`
	PhoneCallEnabled        bool          `protobuf:"varint,2,opt,name=PhoneCallEnabled,proto3" json:"PhoneCallEnabled,omitempty"`
	ExpireOn                int64         `protobuf:"varint,3,opt,name=ExpireOn,proto3" json:"ExpireOn,omitempty"`
	GroupMaxSize            int32         `protobuf:"varint,4,opt,name=GroupMaxSize,proto3" json:"GroupMaxSize,omitempty"`
	ForwardedMaxCount       int32         `protobuf:"varint,5,opt,name=ForwardedMaxCount,proto3" json:"ForwardedMaxCount,omitempty"`
	OnlineUpdatePeriodInSec int32         `protobuf:"varint,6,opt,name=OnlineUpdatePeriodInSec,proto3" json:"OnlineUpdatePeriodInSec,omitempty"`
	EditTimeLimitInSec      int32         `protobuf:"varint,7,opt,name=EditTimeLimitInSec,proto3" json:"EditTimeLimitInSec,omitempty"`
	RevokeTimeLimitInSec    int32         `protobuf:"varint,8,opt,name=RevokeTimeLimitInSec,proto3" json:"RevokeTimeLimitInSec,omitempty"`
	PinnedDialogsMaxCount   int32         `protobuf:"varint,9,opt,name=PinnedDialogsMaxCount,proto3" json:"PinnedDialogsMaxCount,omitempty"`
	UrlPrefix               int32         `protobuf:"varint,10,opt,name=UrlPrefix,proto3" json:"UrlPrefix,omitempty"`
	MessageMaxLength        int32         `protobuf:"varint,11,opt,name=MessageMaxLength,proto3" json:"MessageMaxLength,omitempty"`
	CaptionMaxLength        int32         `protobuf:"varint,12,opt,name=CaptionMaxLength,proto3" json:"CaptionMaxLength,omitempty"`
	DCs                     []*DataCenter `protobuf:"bytes,13,rep,name=DCs,proto3" json:"DCs,omitempty"`
	MaxLabels               int32         `protobuf:"varint,14,opt,name=MaxLabels,proto3" json:"MaxLabels,omitempty"`
	TopPeerDecayRate        float32       `protobuf:"fixed32,15,opt,name=TopPeerDecayRate,proto3" json:"TopPeerDecayRate,omitempty"`
	TopPeerMaxStep          float32       `protobuf:"fixed32,16,opt,name=TopPeerMaxStep,proto3" json:"TopPeerMaxStep,omitempty"`
	MaxActiveSessions       uint32        `protobuf:"varint,17,opt,name=MaxActiveSessions,proto3" json:"MaxActiveSessions,omitempty"`
	Reactions               []string      `protobuf:"bytes,18,rep,name=Reactions,proto3" json:"Reactions,omitempty"`
	MaxUploadSize           int64         `protobuf:"varint,19,opt,name=MaxUploadSize,proto3" json:"MaxUploadSize,omitempty"`
	MaxUploadPartSize       int64         `protobuf:"varint,20,opt,name=MaxUploadPartSize,proto3" json:"MaxUploadPartSize,omitempty"`
	MaxUploadParts          int64         `protobuf:"varint,21,opt,name=MaxUploadParts,proto3" json:"MaxUploadParts,omitempty"`
}

func (m *SystemConfig) Reset()         { *m = SystemConfig{} }
func (m *SystemConfig) String() string { return proto.CompactTextString(m) }
func (*SystemConfig) ProtoMessage()    {}
func (*SystemConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{9}
}
func (m *SystemConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemConfig.Merge(m, src)
}
func (m *SystemConfig) XXX_Size() int {
	return m.Size()
}
func (m *SystemConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SystemConfig proto.InternalMessageInfo

func (m *SystemConfig) GetGifBot() string {
	if m != nil {
		return m.GifBot
	}
	return ""
}

func (m *SystemConfig) GetWikiBot() string {
	if m != nil {
		return m.WikiBot
	}
	return ""
}

func (m *SystemConfig) GetTestMode() bool {
	if m != nil {
		return m.TestMode
	}
	return false
}

func (m *SystemConfig) GetPhoneCallEnabled() bool {
	if m != nil {
		return m.PhoneCallEnabled
	}
	return false
}

func (m *SystemConfig) GetExpireOn() int64 {
	if m != nil {
		return m.ExpireOn
	}
	return 0
}

func (m *SystemConfig) GetGroupMaxSize() int32 {
	if m != nil {
		return m.GroupMaxSize
	}
	return 0
}

func (m *SystemConfig) GetForwardedMaxCount() int32 {
	if m != nil {
		return m.ForwardedMaxCount
	}
	return 0
}

func (m *SystemConfig) GetOnlineUpdatePeriodInSec() int32 {
	if m != nil {
		return m.OnlineUpdatePeriodInSec
	}
	return 0
}

func (m *SystemConfig) GetEditTimeLimitInSec() int32 {
	if m != nil {
		return m.EditTimeLimitInSec
	}
	return 0
}

func (m *SystemConfig) GetRevokeTimeLimitInSec() int32 {
	if m != nil {
		return m.RevokeTimeLimitInSec
	}
	return 0
}

func (m *SystemConfig) GetPinnedDialogsMaxCount() int32 {
	if m != nil {
		return m.PinnedDialogsMaxCount
	}
	return 0
}

func (m *SystemConfig) GetUrlPrefix() int32 {
	if m != nil {
		return m.UrlPrefix
	}
	return 0
}

func (m *SystemConfig) GetMessageMaxLength() int32 {
	if m != nil {
		return m.MessageMaxLength
	}
	return 0
}

func (m *SystemConfig) GetCaptionMaxLength() int32 {
	if m != nil {
		return m.CaptionMaxLength
	}
	return 0
}

func (m *SystemConfig) GetDCs() []*DataCenter {
	if m != nil {
		return m.DCs
	}
	return nil
}

func (m *SystemConfig) GetMaxLabels() int32 {
	if m != nil {
		return m.MaxLabels
	}
	return 0
}

func (m *SystemConfig) GetTopPeerDecayRate() float32 {
	if m != nil {
		return m.TopPeerDecayRate
	}
	return 0
}

func (m *SystemConfig) GetTopPeerMaxStep() float32 {
	if m != nil {
		return m.TopPeerMaxStep
	}
	return 0
}

func (m *SystemConfig) GetMaxActiveSessions() uint32 {
	if m != nil {
		return m.MaxActiveSessions
	}
	return 0
}

func (m *SystemConfig) GetReactions() []string {
	if m != nil {
		return m.Reactions
	}
	return nil
}

func (m *SystemConfig) GetMaxUploadSize() int64 {
	if m != nil {
		return m.MaxUploadSize
	}
	return 0
}

func (m *SystemConfig) GetMaxUploadPartSize() int64 {
	if m != nil {
		return m.MaxUploadPartSize
	}
	return 0
}

func (m *SystemConfig) GetMaxUploadParts() int64 {
	if m != nil {
		return m.MaxUploadParts
	}
	return 0
}

// DataCenter
type DataCenter struct {
	IP        string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port      int32  `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	Http      bool   `protobuf:"varint,3,opt,name=Http,proto3" json:"Http,omitempty"`
	Websocket bool   `protobuf:"varint,4,opt,name=Websocket,proto3" json:"Websocket,omitempty"`
	Quic      bool   `protobuf:"varint,5,opt,name=Quic,proto3" json:"Quic,omitempty"`
}

func (m *DataCenter) Reset()         { *m = DataCenter{} }
func (m *DataCenter) String() string { return proto.CompactTextString(m) }
func (*DataCenter) ProtoMessage()    {}
func (*DataCenter) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{10}
}
func (m *DataCenter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataCenter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataCenter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataCenter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCenter.Merge(m, src)
}
func (m *DataCenter) XXX_Size() int {
	return m.Size()
}
func (m *DataCenter) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCenter.DiscardUnknown(m)
}

var xxx_messageInfo_DataCenter proto.InternalMessageInfo

func (m *DataCenter) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *DataCenter) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *DataCenter) GetHttp() bool {
	if m != nil {
		return m.Http
	}
	return false
}

func (m *DataCenter) GetWebsocket() bool {
	if m != nil {
		return m.Websocket
	}
	return false
}

func (m *DataCenter) GetQuic() bool {
	if m != nil {
		return m.Quic
	}
	return false
}

// SystemSalts
type SystemSalts struct {
	Salts      []int64 `protobuf:"varint,1,rep,packed,name=Salts,proto3" json:"Salts,omitempty"`
	StartsFrom int64   `protobuf:"varint,2,opt,name=StartsFrom,proto3" json:"StartsFrom,omitempty"`
	Duration   int64   `protobuf:"varint,3,opt,name=Duration,proto3" json:"Duration,omitempty"`
}

func (m *SystemSalts) Reset()         { *m = SystemSalts{} }
func (m *SystemSalts) String() string { return proto.CompactTextString(m) }
func (*SystemSalts) ProtoMessage()    {}
func (*SystemSalts) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{11}
}
func (m *SystemSalts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemSalts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemSalts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemSalts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemSalts.Merge(m, src)
}
func (m *SystemSalts) XXX_Size() int {
	return m.Size()
}
func (m *SystemSalts) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemSalts.DiscardUnknown(m)
}

var xxx_messageInfo_SystemSalts proto.InternalMessageInfo

func (m *SystemSalts) GetSalts() []int64 {
	if m != nil {
		return m.Salts
	}
	return nil
}

func (m *SystemSalts) GetStartsFrom() int64 {
	if m != nil {
		return m.StartsFrom
	}
	return 0
}

func (m *SystemSalts) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// AppUpdate
type AppUpdate struct {
	Available       bool   `protobuf:"varint,1,opt,name=Available,proto3" json:"Available,omitempty"`
	Mandatory       bool   `protobuf:"varint,2,opt,name=Mandatory,proto3" json:"Mandatory,omitempty"`
	Identifier      string `protobuf:"bytes,3,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	VersionName     string `protobuf:"bytes,4,opt,name=VersionName,proto3" json:"VersionName,omitempty"`
	DownloadUrl     string `protobuf:"bytes,5,opt,name=DownloadUrl,proto3" json:"DownloadUrl,omitempty"`
	Description     string `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	DisplayInterval int32  `protobuf:"varint,7,opt,name=DisplayInterval,proto3" json:"DisplayInterval,omitempty"`
}

func (m *AppUpdate) Reset()         { *m = AppUpdate{} }
func (m *AppUpdate) String() string { return proto.CompactTextString(m) }
func (*AppUpdate) ProtoMessage()    {}
func (*AppUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{12}
}
func (m *AppUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppUpdate.Merge(m, src)
}
func (m *AppUpdate) XXX_Size() int {
	return m.Size()
}
func (m *AppUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_AppUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_AppUpdate proto.InternalMessageInfo

func (m *AppUpdate) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *AppUpdate) GetMandatory() bool {
	if m != nil {
		return m.Mandatory
	}
	return false
}

func (m *AppUpdate) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *AppUpdate) GetVersionName() string {
	if m != nil {
		return m.VersionName
	}
	return ""
}

func (m *AppUpdate) GetDownloadUrl() string {
	if m != nil {
		return m.DownloadUrl
	}
	return ""
}

func (m *AppUpdate) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AppUpdate) GetDisplayInterval() int32 {
	if m != nil {
		return m.DisplayInterval
	}
	return 0
}

// SystemInfo
type SystemInfo struct {
	WorkGroupName string `protobuf:"bytes,1,opt,name=WorkGroupName,proto3" json:"WorkGroupName,omitempty"`
	BigPhotoUrl   string `protobuf:"bytes,2,opt,name=BigPhotoUrl,proto3" json:"BigPhotoUrl,omitempty"`
	SmallPhotoUrl string `protobuf:"bytes,3,opt,name=SmallPhotoUrl,proto3" json:"SmallPhotoUrl,omitempty"`
	StorageUrl    string `protobuf:"bytes,4,opt,name=StorageUrl,proto3" json:"StorageUrl,omitempty"`
}

func (m *SystemInfo) Reset()         { *m = SystemInfo{} }
func (m *SystemInfo) String() string { return proto.CompactTextString(m) }
func (*SystemInfo) ProtoMessage()    {}
func (*SystemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{13}
}
func (m *SystemInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemInfo.Merge(m, src)
}
func (m *SystemInfo) XXX_Size() int {
	return m.Size()
}
func (m *SystemInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SystemInfo proto.InternalMessageInfo

func (m *SystemInfo) GetWorkGroupName() string {
	if m != nil {
		return m.WorkGroupName
	}
	return ""
}

func (m *SystemInfo) GetBigPhotoUrl() string {
	if m != nil {
		return m.BigPhotoUrl
	}
	return ""
}

func (m *SystemInfo) GetSmallPhotoUrl() string {
	if m != nil {
		return m.SmallPhotoUrl
	}
	return ""
}

func (m *SystemInfo) GetStorageUrl() string {
	if m != nil {
		return m.StorageUrl
	}
	return ""
}

// SystemServerTime
type SystemServerTime struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (m *SystemServerTime) Reset()         { *m = SystemServerTime{} }
func (m *SystemServerTime) String() string { return proto.CompactTextString(m) }
func (*SystemServerTime) ProtoMessage()    {}
func (*SystemServerTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{14}
}
func (m *SystemServerTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemServerTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemServerTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemServerTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemServerTime.Merge(m, src)
}
func (m *SystemServerTime) XXX_Size() int {
	return m.Size()
}
func (m *SystemServerTime) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemServerTime.DiscardUnknown(m)
}

var xxx_messageInfo_SystemServerTime proto.InternalMessageInfo

func (m *SystemServerTime) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// SystemPublicKeys
type SystemPublicKeys struct {
	RSAPublicKeys []*RSAPublicKey `protobuf:"bytes,1,rep,name=RSAPublicKeys,proto3" json:"RSAPublicKeys,omitempty"`
}

func (m *SystemPublicKeys) Reset()         { *m = SystemPublicKeys{} }
func (m *SystemPublicKeys) String() string { return proto.CompactTextString(m) }
func (*SystemPublicKeys) ProtoMessage()    {}
func (*SystemPublicKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{15}
}
func (m *SystemPublicKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemPublicKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemPublicKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemPublicKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemPublicKeys.Merge(m, src)
}
func (m *SystemPublicKeys) XXX_Size() int {
	return m.Size()
}
func (m *SystemPublicKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemPublicKeys.DiscardUnknown(m)
}

var xxx_messageInfo_SystemPublicKeys proto.InternalMessageInfo

func (m *SystemPublicKeys) GetRSAPublicKeys() []*RSAPublicKey {
	if m != nil {
		return m.RSAPublicKeys
	}
	return nil
}

// SystemDHGroups
type SystemDHGroups struct {
	DHGroups []*DHGroup `protobuf:"bytes,1,rep,name=DHGroups,proto3" json:"DHGroups,omitempty"`
}

func (m *SystemDHGroups) Reset()         { *m = SystemDHGroups{} }
func (m *SystemDHGroups) String() string { return proto.CompactTextString(m) }
func (*SystemDHGroups) ProtoMessage()    {}
func (*SystemDHGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{16}
}
func (m *SystemDHGroups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemDHGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemDHGroups.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemDHGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemDHGroups.Merge(m, src)
}
func (m *SystemDHGroups) XXX_Size() int {
	return m.Size()
}
func (m *SystemDHGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemDHGroups.DiscardUnknown(m)
}

var xxx_messageInfo_SystemDHGroups proto.InternalMessageInfo

func (m *SystemDHGroups) GetDHGroups() []*DHGroup {
	if m != nil {
		return m.DHGroups
	}
	return nil
}

func init() {
	proto.RegisterType((*SystemGetPublicKeys)(nil), "msg.SystemGetPublicKeys")
	proto.RegisterType((*SystemGetDHGroups)(nil), "msg.SystemGetDHGroups")
	proto.RegisterType((*SystemGetServerTime)(nil), "msg.SystemGetServerTime")
	proto.RegisterType((*SystemGetInfo)(nil), "msg.SystemGetInfo")
	proto.RegisterType((*SystemGetSalts)(nil), "msg.SystemGetSalts")
	proto.RegisterType((*SystemGetConfig)(nil), "msg.SystemGetConfig")
	proto.RegisterType((*SystemUploadUsage)(nil), "msg.SystemUploadUsage")
	proto.RegisterType((*SystemGetResponse)(nil), "msg.SystemGetResponse")
	proto.RegisterType((*ClientUsage)(nil), "msg.ClientUsage")
	proto.RegisterType((*SystemConfig)(nil), "msg.SystemConfig")
	proto.RegisterType((*DataCenter)(nil), "msg.DataCenter")
	proto.RegisterType((*SystemSalts)(nil), "msg.SystemSalts")
	proto.RegisterType((*AppUpdate)(nil), "msg.AppUpdate")
	proto.RegisterType((*SystemInfo)(nil), "msg.SystemInfo")
	proto.RegisterType((*SystemServerTime)(nil), "msg.SystemServerTime")
	proto.RegisterType((*SystemPublicKeys)(nil), "msg.SystemPublicKeys")
	proto.RegisterType((*SystemDHGroups)(nil), "msg.SystemDHGroups")
}

func init() { proto.RegisterFile("system.proto", fileDescriptor_86a7260ebdc12f47) }

var fileDescriptor_86a7260ebdc12f47 = []byte{
	// 1164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x96, 0xcb, 0x6e, 0x1b, 0x37,
	0x17, 0xc7, 0x23, 0x2b, 0xb2, 0x25, 0xfa, 0x26, 0x33, 0xc9, 0xf7, 0x0d, 0x82, 0x42, 0x55, 0x07,
	0x45, 0x20, 0x14, 0x85, 0x51, 0x24, 0x05, 0x5a, 0x34, 0x2b, 0x5b, 0xca, 0x45, 0x48, 0xd4, 0xa8,
	0x94, 0xdd, 0xa0, 0xdd, 0x14, 0xb4, 0xe6, 0x58, 0x26, 0x3c, 0x22, 0xa7, 0x24, 0xa5, 0x48, 0x7d,
	0x8a, 0xae, 0x0b, 0xf4, 0x31, 0xfa, 0x0e, 0x5d, 0x66, 0xd9, 0x65, 0x91, 0x3c, 0x44, 0xb7, 0xc5,
	0x39, 0x1c, 0x69, 0x24, 0x2b, 0x5d, 0x89, 0xfc, 0x9d, 0x3f, 0x87, 0x67, 0xce, 0x4d, 0xc3, 0xf6,
	0xdc, 0xdc, 0x79, 0x18, 0x1f, 0x67, 0xd6, 0x78, 0xc3, 0xcb, 0x63, 0x37, 0xba, 0x5f, 0x1f, 0x1a,
	0x0b, 0xc7, 0x7e, 0x9e, 0x81, 0x0b, 0x38, 0xbe, 0xc7, 0xee, 0x0c, 0x48, 0xf6, 0x0c, 0x7c, 0x7f,
	0x72, 0x91, 0xaa, 0xe1, 0x0b, 0x98, 0xbb, 0xf8, 0x0e, 0x3b, 0x5a, 0xe2, 0xce, 0xf3, 0x67, 0xd6,
	0x4c, 0x32, 0xb7, 0xa6, 0x1d, 0x80, 0x9d, 0x82, 0x3d, 0x53, 0x63, 0x88, 0x0f, 0xd9, 0xfe, 0x12,
	0x77, 0xf5, 0xa5, 0x89, 0xeb, 0xec, 0xa0, 0xd0, 0xc9, 0xd4, 0xbb, 0xf8, 0x88, 0x1d, 0x2e, 0x49,
	0xdb, 0xe8, 0x4b, 0x35, 0x8a, 0x1f, 0x2f, 0x6e, 0x38, 0xcf, 0x52, 0x23, 0x93, 0x73, 0x27, 0x47,
	0xc0, 0x1f, 0xb0, 0x0a, 0x2d, 0xa2, 0x52, 0xb3, 0xdc, 0xda, 0x7d, 0x58, 0x3f, 0x1e, 0xbb, 0xd1,
	0x71, 0x3b, 0x55, 0xa0, 0x3d, 0x71, 0x11, 0xcc, 0xf1, 0xa3, 0x15, 0xf7, 0x04, 0xb8, 0xcc, 0x68,
	0x07, 0xbc, 0xc1, 0x98, 0x80, 0x9f, 0x27, 0xe0, 0x7c, 0xb7, 0xe3, 0xe8, 0x09, 0xdb, 0x62, 0x85,
	0xc4, 0x7f, 0x94, 0xd9, 0xee, 0xca, 0xb3, 0x38, 0x67, 0xb7, 0x7f, 0x00, 0x69, 0xa3, 0x52, 0xb3,
	0xd4, 0xaa, 0x08, 0x5a, 0xf3, 0xbb, 0xac, 0xd2, 0x33, 0xda, 0x5f, 0x45, 0x5b, 0x04, 0xc3, 0x86,
	0xd7, 0x59, 0xb9, 0x23, 0xe7, 0x51, 0x99, 0x18, 0x2e, 0xf9, 0xff, 0xd8, 0xf6, 0xb9, 0x03, 0xdb,
	0xed, 0x44, 0xb7, 0x9b, 0xa5, 0x56, 0x59, 0xe4, 0x3b, 0xfe, 0x80, 0x1d, 0x3c, 0x35, 0x16, 0x46,
	0xd6, 0x4c, 0x74, 0x82, 0xd1, 0x89, 0x2a, 0x64, 0xbf, 0x41, 0x79, 0x8b, 0x1d, 0x9e, 0x4c, 0x47,
	0x0b, 0xd7, 0x49, 0xb8, 0x4d, 0xc2, 0x9b, 0x98, 0x7f, 0xca, 0xf6, 0xcf, 0x8c, 0x97, 0x69, 0xfe,
	0x22, 0x2e, 0xda, 0x21, 0xdd, 0x3a, 0xe4, 0x9f, 0xb1, 0xba, 0x80, 0x21, 0xa8, 0x29, 0x24, 0x3d,
	0x70, 0xf8, 0x7a, 0x2e, 0xaa, 0x92, 0x70, 0x83, 0xf3, 0x98, 0xed, 0x0d, 0x40, 0xfb, 0xa5, 0xae,
	0x46, 0xba, 0x35, 0x86, 0xb7, 0x16, 0xe7, 0x12, 0x25, 0x23, 0x16, 0x6e, 0x5d, 0x83, 0xfc, 0x23,
	0x56, 0x0b, 0xa7, 0x50, 0xb1, 0x4b, 0x8a, 0x02, 0xf0, 0x26, 0xdb, 0x0d, 0xb9, 0x3d, 0x9d, 0x7b,
	0x70, 0xd1, 0x1e, 0xd9, 0x57, 0x11, 0xde, 0xd2, 0x31, 0x6f, 0x74, 0xa1, 0xd9, 0x0f, 0xb7, 0xac,
	0xc1, 0xf8, 0xf7, 0x1d, 0xb6, 0x17, 0xb2, 0x1d, 0x4a, 0x07, 0x83, 0xff, 0x4c, 0x5d, 0x9e, 0x1a,
	0x1f, 0xe9, 0x66, 0xa9, 0x55, 0x13, 0xf9, 0x8e, 0x47, 0x6c, 0xe7, 0xb5, 0xba, 0x56, 0x68, 0x30,
	0x64, 0x58, 0x6c, 0xf9, 0x7d, 0x56, 0x3d, 0x03, 0xe7, 0x7b, 0x26, 0x01, 0x4a, 0x77, 0x55, 0x2c,
	0xf7, 0x18, 0xba, 0xfe, 0x95, 0xd1, 0xd0, 0x96, 0x69, 0xfa, 0x44, 0xcb, 0x8b, 0x14, 0x12, 0xca,
	0x7e, 0x55, 0x6c, 0x70, 0x7c, 0xce, 0x93, 0x59, 0xa6, 0x2c, 0xbc, 0xd2, 0x54, 0x0d, 0x65, 0xb1,
	0xdc, 0x63, 0x58, 0xa9, 0x4f, 0x7a, 0x72, 0x36, 0x50, 0xbf, 0x00, 0x15, 0x46, 0x45, 0xac, 0x31,
	0xfe, 0x39, 0x3b, 0x7a, 0x6a, 0xec, 0x1b, 0x69, 0x13, 0x48, 0x7a, 0x72, 0xd6, 0x36, 0x13, 0xed,
	0xa9, 0x42, 0x2a, 0x62, 0xd3, 0xc0, 0xbf, 0x66, 0xff, 0x7f, 0xa5, 0x53, 0xa5, 0xe1, 0x3c, 0x4b,
	0xa4, 0x87, 0x3e, 0x58, 0x65, 0x92, 0xae, 0x1e, 0xc0, 0x90, 0x8a, 0xa5, 0x22, 0xfe, 0xcb, 0xcc,
	0x8f, 0x19, 0x7f, 0x92, 0x28, 0x8f, 0x05, 0xf4, 0x52, 0x8d, 0x95, 0x0f, 0x87, 0x76, 0xe8, 0xd0,
	0x07, 0x2c, 0xfc, 0x21, 0xbb, 0x2b, 0x60, 0x6a, 0xae, 0xe1, 0xc6, 0x89, 0x2a, 0x9d, 0xf8, 0xa0,
	0x8d, 0x7f, 0xc9, 0xee, 0xf5, 0x95, 0xd6, 0x90, 0x74, 0x94, 0x4c, 0xcd, 0xc8, 0x2d, 0xdf, 0xa7,
	0x46, 0x87, 0x3e, 0x6c, 0xc4, 0x92, 0x39, 0xb7, 0x69, 0xdf, 0xc2, 0xa5, 0x9a, 0x51, 0x51, 0x55,
	0x44, 0x01, 0x30, 0x17, 0x79, 0x09, 0xf6, 0xe4, 0xec, 0x25, 0xe8, 0x91, 0xbf, 0xa2, 0xba, 0xaa,
	0x88, 0x0d, 0x8e, 0xda, 0xb6, 0xcc, 0xbc, 0x32, 0xba, 0xd0, 0xee, 0x05, 0xed, 0x4d, 0xce, 0x3f,
	0x61, 0xe5, 0x4e, 0x1b, 0xcb, 0x0b, 0xa7, 0xca, 0x21, 0x4d, 0x95, 0x8e, 0xf4, 0xb2, 0x0d, 0xda,
	0x83, 0x15, 0x68, 0x43, 0xc7, 0x50, 0x2f, 0x2f, 0x20, 0x75, 0xd1, 0x41, 0x70, 0x6c, 0x09, 0xf0,
	0xb2, 0x33, 0x93, 0xf5, 0x01, 0x6c, 0x07, 0x86, 0x72, 0x2e, 0xa4, 0x87, 0xe8, 0xb0, 0x59, 0x6a,
	0x6d, 0x89, 0x0d, 0x8e, 0x33, 0x20, 0x67, 0x98, 0x76, 0x0f, 0x59, 0x54, 0x27, 0xe5, 0x0d, 0x8a,
	0xc5, 0xd0, 0x93, 0xb3, 0x93, 0xa1, 0x57, 0x53, 0x18, 0x80, 0x73, 0xca, 0x68, 0x17, 0x1d, 0x35,
	0x4b, 0xad, 0x7d, 0xb1, 0x69, 0x40, 0xff, 0x04, 0xc8, 0xa1, 0x27, 0x15, 0x6f, 0x96, 0x5b, 0x35,
	0x51, 0x00, 0xec, 0xa4, 0x9e, 0x9c, 0x85, 0xde, 0xa2, 0xea, 0xbb, 0x13, 0x3a, 0x69, 0x0d, 0xe6,
	0x37, 0x06, 0xd0, 0x97, 0xd6, 0x93, 0xf2, 0x2e, 0x29, 0x37, 0x0d, 0xf8, 0x1e, 0x6b, 0xd0, 0x45,
	0xf7, 0xc2, 0x2c, 0x5b, 0xa7, 0xf1, 0x94, 0xb1, 0x22, 0x98, 0xfc, 0x80, 0x6d, 0x75, 0xfb, 0xd4,
	0x64, 0x35, 0xb1, 0xd5, 0xed, 0xe3, 0x94, 0xed, 0x1b, 0xeb, 0xf3, 0x81, 0x4a, 0x6b, 0x64, 0xcf,
	0xbd, 0xcf, 0xa8, 0x85, 0xaa, 0x82, 0xd6, 0xf8, 0x7e, 0xaf, 0xe1, 0xc2, 0x99, 0xe1, 0x35, 0x78,
	0xea, 0x9d, 0xaa, 0x28, 0x00, 0x9e, 0xf8, 0x6e, 0xa2, 0x86, 0xd4, 0x2b, 0x55, 0x41, 0xeb, 0xf8,
	0x27, 0xb6, 0x1b, 0xc6, 0x02, 0xfd, 0xc7, 0xe0, 0xe8, 0xa6, 0x05, 0x4d, 0xfe, 0xb2, 0x08, 0x1b,
	0xfc, 0x53, 0x18, 0x78, 0x74, 0xf3, 0xa9, 0x35, 0x63, 0x72, 0xa2, 0x2c, 0x56, 0x08, 0x76, 0x74,
	0x67, 0x62, 0x25, 0x46, 0x71, 0xd1, 0xd1, 0x8b, 0x7d, 0xfc, 0x4f, 0x89, 0xd5, 0x4e, 0xb2, 0x2c,
	0xb4, 0x17, 0x3a, 0x78, 0x32, 0x95, 0x2a, 0xc5, 0x49, 0x90, 0x0f, 0x91, 0x02, 0x84, 0xf2, 0xd1,
	0x89, 0xf4, 0xc6, 0xce, 0xf3, 0xf1, 0x51, 0x00, 0xf4, 0xa2, 0x9b, 0x80, 0xf6, 0xea, 0x52, 0x81,
	0xa5, 0x7b, 0x6a, 0x62, 0x85, 0xe0, 0xa8, 0xfc, 0x1e, 0x2c, 0x26, 0xfa, 0x5b, 0x39, 0x0e, 0xa3,
	0xa3, 0x26, 0x56, 0x11, 0x2a, 0x16, 0x53, 0xf1, 0xdc, 0xa6, 0x14, 0x87, 0x9a, 0x58, 0x45, 0xa4,
	0x00, 0x37, 0xb4, 0x8a, 0x6a, 0x9f, 0x26, 0x04, 0x2a, 0x0a, 0x84, 0x7f, 0x3a, 0x1d, 0xe5, 0xb2,
	0x54, 0xce, 0xbb, 0x98, 0xaa, 0xa9, 0x4c, 0xf3, 0x91, 0x70, 0x13, 0xc7, 0xbf, 0x95, 0x18, 0x0b,
	0xb1, 0xc5, 0x3f, 0x74, 0xac, 0xae, 0xd7, 0xc6, 0x5e, 0xd3, 0x28, 0x23, 0x07, 0x43, 0x7a, 0xd7,
	0x21, 0x3a, 0x70, 0xaa, 0x46, 0xfd, 0x2b, 0xe3, 0x0d, 0xba, 0xb8, 0x15, 0x1c, 0x58, 0x41, 0xf8,
	0x9c, 0xc1, 0x58, 0xa6, 0xe9, 0x52, 0x13, 0x22, 0xb1, 0x0e, 0x43, 0xca, 0x8c, 0x95, 0x23, 0x40,
	0x49, 0x88, 0xc5, 0x0a, 0x89, 0xbf, 0x60, 0xf5, 0x3c, 0xef, 0xcb, 0x6f, 0x10, 0x0c, 0x3f, 0xfe,
	0x3a, 0x2f, 0xc7, 0x19, 0x79, 0x57, 0x16, 0x05, 0x88, 0x5f, 0x2c, 0x4e, 0x14, 0x5f, 0x38, 0xfc,
	0x2b, 0xb6, 0x2f, 0x06, 0x27, 0x05, 0xc8, 0x3f, 0x39, 0x8e, 0x68, 0x38, 0xac, 0x5a, 0xc4, 0xba,
	0x2e, 0xfe, 0x66, 0xf1, 0x75, 0xb3, 0xf8, 0x2e, 0xe2, 0x2d, 0x56, 0x5d, 0xac, 0xf3, 0xa7, 0xec,
	0x85, 0x11, 0x13, 0xa0, 0x58, 0x5a, 0x4f, 0x3f, 0xfe, 0xf3, 0x5d, 0xa3, 0xf4, 0xf6, 0x5d, 0xa3,
	0xf4, 0xf7, 0xbb, 0x46, 0xe9, 0xd7, 0xf7, 0x8d, 0x5b, 0x6f, 0xdf, 0x37, 0x6e, 0xfd, 0xf5, 0xbe,
	0x71, 0xeb, 0xc7, 0xca, 0xf1, 0xe3, 0xb1, 0x1b, 0x5d, 0x6c, 0xd3, 0x57, 0xd9, 0xa3, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xd7, 0xe1, 0xc9, 0xa8, 0xbc, 0x09, 0x00, 0x00,
}

func (m *SystemGetPublicKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemGetPublicKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemGetPublicKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SystemGetDHGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemGetDHGroups) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemGetDHGroups) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SystemGetServerTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemGetServerTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemGetServerTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SystemGetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemGetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemGetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SystemGetSalts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemGetSalts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemGetSalts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SystemGetConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemGetConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemGetConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SystemUploadUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemUploadUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemUploadUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Usage) > 0 {
		for iNdEx := len(m.Usage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Usage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSystem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SystemGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestIDs) > 0 {
		for iNdEx := len(m.RequestIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.RequestIDs[iNdEx]))
		}
		i = encodeVarintSystem(dAtA, i, uint64(len(m.RequestIDs)*8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DownloadBytes != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.DownloadBytes))
		i--
		dAtA[i] = 0x68
	}
	if m.UploadBytes != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.UploadBytes))
		i--
		dAtA[i] = 0x60
	}
	if m.SentMedia != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.SentMedia))
		i--
		dAtA[i] = 0x58
	}
	if m.ReceivedMedia != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ReceivedMedia))
		i--
		dAtA[i] = 0x50
	}
	if m.SentMessages != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.SentMessages))
		i--
		dAtA[i] = 0x48
	}
	if m.ReceivedMessages != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ReceivedMessages))
		i--
		dAtA[i] = 0x40
	}
	if m.TotalRequests != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.TotalRequests))
		i--
		dAtA[i] = 0x38
	}
	if m.AvgResponseTime != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.AvgResponseTime))
		i--
		dAtA[i] = 0x30
	}
	if m.ForegroundTime != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ForegroundTime))
		i--
		dAtA[i] = 0x28
	}
	if m.UserID != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x20
	}
	if m.Day != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.Day))
		i--
		dAtA[i] = 0x18
	}
	if m.Month != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.Month))
		i--
		dAtA[i] = 0x10
	}
	if m.Year != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.Year))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SystemConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WikiBot) > 0 {
		i -= len(m.WikiBot)
		copy(dAtA[i:], m.WikiBot)
		i = encodeVarintSystem(dAtA, i, uint64(len(m.WikiBot)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xfa
	}
	if len(m.GifBot) > 0 {
		i -= len(m.GifBot)
		copy(dAtA[i:], m.GifBot)
		i = encodeVarintSystem(dAtA, i, uint64(len(m.GifBot)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf2
	}
	if m.MaxUploadParts != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.MaxUploadParts))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.MaxUploadPartSize != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.MaxUploadPartSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.MaxUploadSize != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.MaxUploadSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Reactions) > 0 {
		for iNdEx := len(m.Reactions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Reactions[iNdEx])
			copy(dAtA[i:], m.Reactions[iNdEx])
			i = encodeVarintSystem(dAtA, i, uint64(len(m.Reactions[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.MaxActiveSessions != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.MaxActiveSessions))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.TopPeerMaxStep != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TopPeerMaxStep))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x85
	}
	if m.TopPeerDecayRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TopPeerDecayRate))))
		i--
		dAtA[i] = 0x7d
	}
	if m.MaxLabels != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.MaxLabels))
		i--
		dAtA[i] = 0x70
	}
	if len(m.DCs) > 0 {
		for iNdEx := len(m.DCs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DCs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSystem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.CaptionMaxLength != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.CaptionMaxLength))
		i--
		dAtA[i] = 0x60
	}
	if m.MessageMaxLength != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.MessageMaxLength))
		i--
		dAtA[i] = 0x58
	}
	if m.UrlPrefix != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.UrlPrefix))
		i--
		dAtA[i] = 0x50
	}
	if m.PinnedDialogsMaxCount != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.PinnedDialogsMaxCount))
		i--
		dAtA[i] = 0x48
	}
	if m.RevokeTimeLimitInSec != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.RevokeTimeLimitInSec))
		i--
		dAtA[i] = 0x40
	}
	if m.EditTimeLimitInSec != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.EditTimeLimitInSec))
		i--
		dAtA[i] = 0x38
	}
	if m.OnlineUpdatePeriodInSec != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.OnlineUpdatePeriodInSec))
		i--
		dAtA[i] = 0x30
	}
	if m.ForwardedMaxCount != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ForwardedMaxCount))
		i--
		dAtA[i] = 0x28
	}
	if m.GroupMaxSize != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.GroupMaxSize))
		i--
		dAtA[i] = 0x20
	}
	if m.ExpireOn != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ExpireOn))
		i--
		dAtA[i] = 0x18
	}
	if m.PhoneCallEnabled {
		i--
		if m.PhoneCallEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.TestMode {
		i--
		if m.TestMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataCenter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataCenter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataCenter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quic {
		i--
		if m.Quic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Websocket {
		i--
		if m.Websocket {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Http {
		i--
		if m.Http {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Port != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintSystem(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SystemSalts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemSalts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemSalts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.StartsFrom != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.StartsFrom))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Salts) > 0 {
		dAtA2 := make([]byte, len(m.Salts)*10)
		var j1 int
		for _, num1 := range m.Salts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSystem(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisplayInterval != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.DisplayInterval))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintSystem(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DownloadUrl) > 0 {
		i -= len(m.DownloadUrl)
		copy(dAtA[i:], m.DownloadUrl)
		i = encodeVarintSystem(dAtA, i, uint64(len(m.DownloadUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VersionName) > 0 {
		i -= len(m.VersionName)
		copy(dAtA[i:], m.VersionName)
		i = encodeVarintSystem(dAtA, i, uint64(len(m.VersionName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintSystem(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mandatory {
		i--
		if m.Mandatory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Available {
		i--
		if m.Available {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SystemInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StorageUrl) > 0 {
		i -= len(m.StorageUrl)
		copy(dAtA[i:], m.StorageUrl)
		i = encodeVarintSystem(dAtA, i, uint64(len(m.StorageUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SmallPhotoUrl) > 0 {
		i -= len(m.SmallPhotoUrl)
		copy(dAtA[i:], m.SmallPhotoUrl)
		i = encodeVarintSystem(dAtA, i, uint64(len(m.SmallPhotoUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BigPhotoUrl) > 0 {
		i -= len(m.BigPhotoUrl)
		copy(dAtA[i:], m.BigPhotoUrl)
		i = encodeVarintSystem(dAtA, i, uint64(len(m.BigPhotoUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WorkGroupName) > 0 {
		i -= len(m.WorkGroupName)
		copy(dAtA[i:], m.WorkGroupName)
		i = encodeVarintSystem(dAtA, i, uint64(len(m.WorkGroupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SystemServerTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemServerTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemServerTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SystemPublicKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemPublicKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemPublicKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RSAPublicKeys) > 0 {
		for iNdEx := len(m.RSAPublicKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RSAPublicKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSystem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SystemDHGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemDHGroups) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemDHGroups) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DHGroups) > 0 {
		for iNdEx := len(m.DHGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DHGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSystem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSystem(dAtA []byte, offset int, v uint64) int {
	offset -= sovSystem(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SystemGetPublicKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SystemGetDHGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SystemGetServerTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SystemGetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SystemGetSalts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SystemGetConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SystemUploadUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Usage) > 0 {
		for _, e := range m.Usage {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *SystemGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestIDs) > 0 {
		n += 1 + sovSystem(uint64(len(m.RequestIDs)*8)) + len(m.RequestIDs)*8
	}
	return n
}

func (m *ClientUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Year != 0 {
		n += 1 + sovSystem(uint64(m.Year))
	}
	if m.Month != 0 {
		n += 1 + sovSystem(uint64(m.Month))
	}
	if m.Day != 0 {
		n += 1 + sovSystem(uint64(m.Day))
	}
	if m.UserID != 0 {
		n += 1 + sovSystem(uint64(m.UserID))
	}
	if m.ForegroundTime != 0 {
		n += 1 + sovSystem(uint64(m.ForegroundTime))
	}
	if m.AvgResponseTime != 0 {
		n += 1 + sovSystem(uint64(m.AvgResponseTime))
	}
	if m.TotalRequests != 0 {
		n += 1 + sovSystem(uint64(m.TotalRequests))
	}
	if m.ReceivedMessages != 0 {
		n += 1 + sovSystem(uint64(m.ReceivedMessages))
	}
	if m.SentMessages != 0 {
		n += 1 + sovSystem(uint64(m.SentMessages))
	}
	if m.ReceivedMedia != 0 {
		n += 1 + sovSystem(uint64(m.ReceivedMedia))
	}
	if m.SentMedia != 0 {
		n += 1 + sovSystem(uint64(m.SentMedia))
	}
	if m.UploadBytes != 0 {
		n += 1 + sovSystem(uint64(m.UploadBytes))
	}
	if m.DownloadBytes != 0 {
		n += 1 + sovSystem(uint64(m.DownloadBytes))
	}
	return n
}

func (m *SystemConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestMode {
		n += 2
	}
	if m.PhoneCallEnabled {
		n += 2
	}
	if m.ExpireOn != 0 {
		n += 1 + sovSystem(uint64(m.ExpireOn))
	}
	if m.GroupMaxSize != 0 {
		n += 1 + sovSystem(uint64(m.GroupMaxSize))
	}
	if m.ForwardedMaxCount != 0 {
		n += 1 + sovSystem(uint64(m.ForwardedMaxCount))
	}
	if m.OnlineUpdatePeriodInSec != 0 {
		n += 1 + sovSystem(uint64(m.OnlineUpdatePeriodInSec))
	}
	if m.EditTimeLimitInSec != 0 {
		n += 1 + sovSystem(uint64(m.EditTimeLimitInSec))
	}
	if m.RevokeTimeLimitInSec != 0 {
		n += 1 + sovSystem(uint64(m.RevokeTimeLimitInSec))
	}
	if m.PinnedDialogsMaxCount != 0 {
		n += 1 + sovSystem(uint64(m.PinnedDialogsMaxCount))
	}
	if m.UrlPrefix != 0 {
		n += 1 + sovSystem(uint64(m.UrlPrefix))
	}
	if m.MessageMaxLength != 0 {
		n += 1 + sovSystem(uint64(m.MessageMaxLength))
	}
	if m.CaptionMaxLength != 0 {
		n += 1 + sovSystem(uint64(m.CaptionMaxLength))
	}
	if len(m.DCs) > 0 {
		for _, e := range m.DCs {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	if m.MaxLabels != 0 {
		n += 1 + sovSystem(uint64(m.MaxLabels))
	}
	if m.TopPeerDecayRate != 0 {
		n += 5
	}
	if m.TopPeerMaxStep != 0 {
		n += 6
	}
	if m.MaxActiveSessions != 0 {
		n += 2 + sovSystem(uint64(m.MaxActiveSessions))
	}
	if len(m.Reactions) > 0 {
		for _, s := range m.Reactions {
			l = len(s)
			n += 2 + l + sovSystem(uint64(l))
		}
	}
	if m.MaxUploadSize != 0 {
		n += 2 + sovSystem(uint64(m.MaxUploadSize))
	}
	if m.MaxUploadPartSize != 0 {
		n += 2 + sovSystem(uint64(m.MaxUploadPartSize))
	}
	if m.MaxUploadParts != 0 {
		n += 2 + sovSystem(uint64(m.MaxUploadParts))
	}
	l = len(m.GifBot)
	if l > 0 {
		n += 2 + l + sovSystem(uint64(l))
	}
	l = len(m.WikiBot)
	if l > 0 {
		n += 2 + l + sovSystem(uint64(l))
	}
	return n
}

func (m *DataCenter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovSystem(uint64(m.Port))
	}
	if m.Http {
		n += 2
	}
	if m.Websocket {
		n += 2
	}
	if m.Quic {
		n += 2
	}
	return n
}

func (m *SystemSalts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Salts) > 0 {
		l = 0
		for _, e := range m.Salts {
			l += sovSystem(uint64(e))
		}
		n += 1 + sovSystem(uint64(l)) + l
	}
	if m.StartsFrom != 0 {
		n += 1 + sovSystem(uint64(m.StartsFrom))
	}
	if m.Duration != 0 {
		n += 1 + sovSystem(uint64(m.Duration))
	}
	return n
}

func (m *AppUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Available {
		n += 2
	}
	if m.Mandatory {
		n += 2
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	l = len(m.VersionName)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	l = len(m.DownloadUrl)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.DisplayInterval != 0 {
		n += 1 + sovSystem(uint64(m.DisplayInterval))
	}
	return n
}

func (m *SystemInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkGroupName)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	l = len(m.BigPhotoUrl)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	l = len(m.SmallPhotoUrl)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	l = len(m.StorageUrl)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	return n
}

func (m *SystemServerTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovSystem(uint64(m.Timestamp))
	}
	return n
}

func (m *SystemPublicKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RSAPublicKeys) > 0 {
		for _, e := range m.RSAPublicKeys {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *SystemDHGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DHGroups) > 0 {
		for _, e := range m.DHGroups {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func sovSystem(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSystem(x uint64) (n int) {
	return sovSystem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SystemGetPublicKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemGetPublicKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemGetPublicKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemGetDHGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemGetDHGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemGetDHGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemGetServerTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemGetServerTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemGetServerTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemGetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemGetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemGetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemGetSalts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemGetSalts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemGetSalts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemGetConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemGetConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemGetConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemUploadUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemUploadUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemUploadUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usage = append(m.Usage, &ClientUsage{})
			if err := m.Usage[len(m.Usage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.RequestIDs = append(m.RequestIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSystem
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSystem
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSystem
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.RequestIDs) == 0 {
					m.RequestIDs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.RequestIDs = append(m.RequestIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			m.Year = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Year |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForegroundTime", wireType)
			}
			m.ForegroundTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForegroundTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgResponseTime", wireType)
			}
			m.AvgResponseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvgResponseTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRequests", wireType)
			}
			m.TotalRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRequests |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedMessages", wireType)
			}
			m.ReceivedMessages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedMessages |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentMessages", wireType)
			}
			m.SentMessages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SentMessages |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedMedia", wireType)
			}
			m.ReceivedMedia = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedMedia |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentMedia", wireType)
			}
			m.SentMedia = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SentMedia |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadBytes", wireType)
			}
			m.UploadBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadBytes", wireType)
			}
			m.DownloadBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownloadBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestMode = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCallEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneCallEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireOn", wireType)
			}
			m.ExpireOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMaxSize", wireType)
			}
			m.GroupMaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupMaxSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedMaxCount", wireType)
			}
			m.ForwardedMaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwardedMaxCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineUpdatePeriodInSec", wireType)
			}
			m.OnlineUpdatePeriodInSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineUpdatePeriodInSec |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditTimeLimitInSec", wireType)
			}
			m.EditTimeLimitInSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditTimeLimitInSec |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokeTimeLimitInSec", wireType)
			}
			m.RevokeTimeLimitInSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevokeTimeLimitInSec |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedDialogsMaxCount", wireType)
			}
			m.PinnedDialogsMaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PinnedDialogsMaxCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlPrefix", wireType)
			}
			m.UrlPrefix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UrlPrefix |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageMaxLength", wireType)
			}
			m.MessageMaxLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageMaxLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptionMaxLength", wireType)
			}
			m.CaptionMaxLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptionMaxLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DCs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DCs = append(m.DCs, &DataCenter{})
			if err := m.DCs[len(m.DCs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLabels", wireType)
			}
			m.MaxLabels = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLabels |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopPeerDecayRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TopPeerDecayRate = float32(math.Float32frombits(v))
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopPeerMaxStep", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TopPeerMaxStep = float32(math.Float32frombits(v))
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxActiveSessions", wireType)
			}
			m.MaxActiveSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxActiveSessions |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUploadSize", wireType)
			}
			m.MaxUploadSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUploadSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUploadPartSize", wireType)
			}
			m.MaxUploadPartSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUploadPartSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUploadParts", wireType)
			}
			m.MaxUploadParts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUploadParts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GifBot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GifBot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 111:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WikiBot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WikiBot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataCenter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataCenter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataCenter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Http = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Websocket", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Websocket = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Quic = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemSalts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemSalts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemSalts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSystem
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Salts = append(m.Salts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSystem
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSystem
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSystem
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Salts) == 0 {
					m.Salts = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSystem
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Salts = append(m.Salts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Salts", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartsFrom", wireType)
			}
			m.StartsFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartsFrom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Available = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mandatory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mandatory = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayInterval", wireType)
			}
			m.DisplayInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayInterval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigPhotoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigPhotoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallPhotoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmallPhotoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemServerTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemServerTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemServerTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemPublicKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemPublicKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemPublicKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RSAPublicKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RSAPublicKeys = append(m.RSAPublicKeys, &RSAPublicKey{})
			if err := m.RSAPublicKeys[len(m.RSAPublicKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemDHGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemDHGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemDHGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DHGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DHGroups = append(m.DHGroups, &DHGroup{})
			if err := m.DHGroups[len(m.DHGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSystem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSystem
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSystem
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSystem
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSystem        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSystem          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSystem = fmt.Errorf("proto: unexpected end of group")
)
