// Code generated by Rony's protoc plugin; DO NOT EDIT.
// ProtoC ver. v3.15.8
// Rony ver. v0.12.22
// Source: accounts.proto

package msg

import (
	bytes "bytes"
	edge "github.com/ronaksoft/rony/edge"
	pools "github.com/ronaksoft/rony/pools"
	registry "github.com/ronaksoft/rony/registry"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	sync "sync"
)

var _ = pools.Imported

const C_AccountSetNotifySettings int64 = 2016882075

type poolAccountSetNotifySettings struct {
	pool sync.Pool
}

func (p *poolAccountSetNotifySettings) Get() *AccountSetNotifySettings {
	x, ok := p.pool.Get().(*AccountSetNotifySettings)
	if !ok {
		x = &AccountSetNotifySettings{}
	}

	x.Peer = PoolInputPeer.Get()

	x.Settings = PoolPeerNotifySettings.Get()

	return x
}

func (p *poolAccountSetNotifySettings) Put(x *AccountSetNotifySettings) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	PoolPeerNotifySettings.Put(x.Settings)

	p.pool.Put(x)
}

var PoolAccountSetNotifySettings = poolAccountSetNotifySettings{}

func (x *AccountSetNotifySettings) DeepCopy(z *AccountSetNotifySettings) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	if x.Settings != nil {
		if z.Settings == nil {
			z.Settings = PoolPeerNotifySettings.Get()
		}
		x.Settings.DeepCopy(z.Settings)
	} else {
		PoolPeerNotifySettings.Put(z.Settings)
		z.Settings = nil
	}
}

func (x *AccountSetNotifySettings) Clone() *AccountSetNotifySettings {
	z := &AccountSetNotifySettings{}
	x.DeepCopy(z)
	return z
}

func (x *AccountSetNotifySettings) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountSetNotifySettings) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountSetNotifySettings) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountSetNotifySettings) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountSetNotifySettings) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountSetNotifySettings, x)
}

const C_AccountGetNotifySettings int64 = 477008681

type poolAccountGetNotifySettings struct {
	pool sync.Pool
}

func (p *poolAccountGetNotifySettings) Get() *AccountGetNotifySettings {
	x, ok := p.pool.Get().(*AccountGetNotifySettings)
	if !ok {
		x = &AccountGetNotifySettings{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolAccountGetNotifySettings) Put(x *AccountGetNotifySettings) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)

	p.pool.Put(x)
}

var PoolAccountGetNotifySettings = poolAccountGetNotifySettings{}

func (x *AccountGetNotifySettings) DeepCopy(z *AccountGetNotifySettings) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
}

func (x *AccountGetNotifySettings) Clone() *AccountGetNotifySettings {
	z := &AccountGetNotifySettings{}
	x.DeepCopy(z)
	return z
}

func (x *AccountGetNotifySettings) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountGetNotifySettings) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountGetNotifySettings) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountGetNotifySettings) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountGetNotifySettings) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountGetNotifySettings, x)
}

const C_AccountRegisterDevice int64 = 946059841

type poolAccountRegisterDevice struct {
	pool sync.Pool
}

func (p *poolAccountRegisterDevice) Get() *AccountRegisterDevice {
	x, ok := p.pool.Get().(*AccountRegisterDevice)
	if !ok {
		x = &AccountRegisterDevice{}
	}

	return x
}

func (p *poolAccountRegisterDevice) Put(x *AccountRegisterDevice) {
	if x == nil {
		return
	}

	x.Token = ""
	x.DeviceModel = ""
	x.SystemVersion = ""
	x.AppVersion = ""
	x.LangCode = ""
	x.TokenType = 0
	x.ClientID = ""

	p.pool.Put(x)
}

var PoolAccountRegisterDevice = poolAccountRegisterDevice{}

func (x *AccountRegisterDevice) DeepCopy(z *AccountRegisterDevice) {
	z.Token = x.Token
	z.DeviceModel = x.DeviceModel
	z.SystemVersion = x.SystemVersion
	z.AppVersion = x.AppVersion
	z.LangCode = x.LangCode
	z.TokenType = x.TokenType
	z.ClientID = x.ClientID
}

func (x *AccountRegisterDevice) Clone() *AccountRegisterDevice {
	z := &AccountRegisterDevice{}
	x.DeepCopy(z)
	return z
}

func (x *AccountRegisterDevice) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountRegisterDevice) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountRegisterDevice) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountRegisterDevice) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountRegisterDevice) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountRegisterDevice, x)
}

const C_AccountUnregisterDevice int64 = 3981251588

type poolAccountUnregisterDevice struct {
	pool sync.Pool
}

func (p *poolAccountUnregisterDevice) Get() *AccountUnregisterDevice {
	x, ok := p.pool.Get().(*AccountUnregisterDevice)
	if !ok {
		x = &AccountUnregisterDevice{}
	}

	return x
}

func (p *poolAccountUnregisterDevice) Put(x *AccountUnregisterDevice) {
	if x == nil {
		return
	}

	x.TokenType = 0
	x.Token = ""

	p.pool.Put(x)
}

var PoolAccountUnregisterDevice = poolAccountUnregisterDevice{}

func (x *AccountUnregisterDevice) DeepCopy(z *AccountUnregisterDevice) {
	z.TokenType = x.TokenType
	z.Token = x.Token
}

func (x *AccountUnregisterDevice) Clone() *AccountUnregisterDevice {
	z := &AccountUnregisterDevice{}
	x.DeepCopy(z)
	return z
}

func (x *AccountUnregisterDevice) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountUnregisterDevice) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountUnregisterDevice) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountUnregisterDevice) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountUnregisterDevice) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountUnregisterDevice, x)
}

const C_AccountUpdateProfile int64 = 3725499887

type poolAccountUpdateProfile struct {
	pool sync.Pool
}

func (p *poolAccountUpdateProfile) Get() *AccountUpdateProfile {
	x, ok := p.pool.Get().(*AccountUpdateProfile)
	if !ok {
		x = &AccountUpdateProfile{}
	}

	return x
}

func (p *poolAccountUpdateProfile) Put(x *AccountUpdateProfile) {
	if x == nil {
		return
	}

	x.FirstName = ""
	x.LastName = ""
	x.Bio = ""

	p.pool.Put(x)
}

var PoolAccountUpdateProfile = poolAccountUpdateProfile{}

func (x *AccountUpdateProfile) DeepCopy(z *AccountUpdateProfile) {
	z.FirstName = x.FirstName
	z.LastName = x.LastName
	z.Bio = x.Bio
}

func (x *AccountUpdateProfile) Clone() *AccountUpdateProfile {
	z := &AccountUpdateProfile{}
	x.DeepCopy(z)
	return z
}

func (x *AccountUpdateProfile) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountUpdateProfile) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountUpdateProfile) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountUpdateProfile) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountUpdateProfile) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountUpdateProfile, x)
}

const C_AccountCheckUsername int64 = 1501406413

type poolAccountCheckUsername struct {
	pool sync.Pool
}

func (p *poolAccountCheckUsername) Get() *AccountCheckUsername {
	x, ok := p.pool.Get().(*AccountCheckUsername)
	if !ok {
		x = &AccountCheckUsername{}
	}

	return x
}

func (p *poolAccountCheckUsername) Put(x *AccountCheckUsername) {
	if x == nil {
		return
	}

	x.Username = ""

	p.pool.Put(x)
}

var PoolAccountCheckUsername = poolAccountCheckUsername{}

func (x *AccountCheckUsername) DeepCopy(z *AccountCheckUsername) {
	z.Username = x.Username
}

func (x *AccountCheckUsername) Clone() *AccountCheckUsername {
	z := &AccountCheckUsername{}
	x.DeepCopy(z)
	return z
}

func (x *AccountCheckUsername) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountCheckUsername) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountCheckUsername) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountCheckUsername) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountCheckUsername) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountCheckUsername, x)
}

const C_AccountUpdateUsername int64 = 1477164344

type poolAccountUpdateUsername struct {
	pool sync.Pool
}

func (p *poolAccountUpdateUsername) Get() *AccountUpdateUsername {
	x, ok := p.pool.Get().(*AccountUpdateUsername)
	if !ok {
		x = &AccountUpdateUsername{}
	}

	return x
}

func (p *poolAccountUpdateUsername) Put(x *AccountUpdateUsername) {
	if x == nil {
		return
	}

	x.Username = ""

	p.pool.Put(x)
}

var PoolAccountUpdateUsername = poolAccountUpdateUsername{}

func (x *AccountUpdateUsername) DeepCopy(z *AccountUpdateUsername) {
	z.Username = x.Username
}

func (x *AccountUpdateUsername) Clone() *AccountUpdateUsername {
	z := &AccountUpdateUsername{}
	x.DeepCopy(z)
	return z
}

func (x *AccountUpdateUsername) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountUpdateUsername) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountUpdateUsername) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountUpdateUsername) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountUpdateUsername) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountUpdateUsername, x)
}

const C_AccountUploadPhoto int64 = 1222469957

type poolAccountUploadPhoto struct {
	pool sync.Pool
}

func (p *poolAccountUploadPhoto) Get() *AccountUploadPhoto {
	x, ok := p.pool.Get().(*AccountUploadPhoto)
	if !ok {
		x = &AccountUploadPhoto{}
	}

	x.File = PoolInputFile.Get()

	return x
}

func (p *poolAccountUploadPhoto) Put(x *AccountUploadPhoto) {
	if x == nil {
		return
	}

	PoolInputFile.Put(x.File)
	x.ReturnObject = false

	p.pool.Put(x)
}

var PoolAccountUploadPhoto = poolAccountUploadPhoto{}

func (x *AccountUploadPhoto) DeepCopy(z *AccountUploadPhoto) {
	if x.File != nil {
		if z.File == nil {
			z.File = PoolInputFile.Get()
		}
		x.File.DeepCopy(z.File)
	} else {
		PoolInputFile.Put(z.File)
		z.File = nil
	}
	z.ReturnObject = x.ReturnObject
}

func (x *AccountUploadPhoto) Clone() *AccountUploadPhoto {
	z := &AccountUploadPhoto{}
	x.DeepCopy(z)
	return z
}

func (x *AccountUploadPhoto) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountUploadPhoto) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountUploadPhoto) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountUploadPhoto) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountUploadPhoto) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountUploadPhoto, x)
}

const C_AccountUpdatePhoto int64 = 406174115

type poolAccountUpdatePhoto struct {
	pool sync.Pool
}

func (p *poolAccountUpdatePhoto) Get() *AccountUpdatePhoto {
	x, ok := p.pool.Get().(*AccountUpdatePhoto)
	if !ok {
		x = &AccountUpdatePhoto{}
	}

	return x
}

func (p *poolAccountUpdatePhoto) Put(x *AccountUpdatePhoto) {
	if x == nil {
		return
	}

	x.PhotoID = 0

	p.pool.Put(x)
}

var PoolAccountUpdatePhoto = poolAccountUpdatePhoto{}

func (x *AccountUpdatePhoto) DeepCopy(z *AccountUpdatePhoto) {
	z.PhotoID = x.PhotoID
}

func (x *AccountUpdatePhoto) Clone() *AccountUpdatePhoto {
	z := &AccountUpdatePhoto{}
	x.DeepCopy(z)
	return z
}

func (x *AccountUpdatePhoto) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountUpdatePhoto) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountUpdatePhoto) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountUpdatePhoto) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountUpdatePhoto) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountUpdatePhoto, x)
}

const C_AccountSetWebPhoto int64 = 46761477

type poolAccountSetWebPhoto struct {
	pool sync.Pool
}

func (p *poolAccountSetWebPhoto) Get() *AccountSetWebPhoto {
	x, ok := p.pool.Get().(*AccountSetWebPhoto)
	if !ok {
		x = &AccountSetWebPhoto{}
	}

	x.BigPhoto = PoolInputWebLocation.Get()

	x.SmallPhoto = PoolInputWebLocation.Get()

	return x
}

func (p *poolAccountSetWebPhoto) Put(x *AccountSetWebPhoto) {
	if x == nil {
		return
	}

	PoolInputWebLocation.Put(x.BigPhoto)
	PoolInputWebLocation.Put(x.SmallPhoto)

	p.pool.Put(x)
}

var PoolAccountSetWebPhoto = poolAccountSetWebPhoto{}

func (x *AccountSetWebPhoto) DeepCopy(z *AccountSetWebPhoto) {
	if x.BigPhoto != nil {
		if z.BigPhoto == nil {
			z.BigPhoto = PoolInputWebLocation.Get()
		}
		x.BigPhoto.DeepCopy(z.BigPhoto)
	} else {
		PoolInputWebLocation.Put(z.BigPhoto)
		z.BigPhoto = nil
	}
	if x.SmallPhoto != nil {
		if z.SmallPhoto == nil {
			z.SmallPhoto = PoolInputWebLocation.Get()
		}
		x.SmallPhoto.DeepCopy(z.SmallPhoto)
	} else {
		PoolInputWebLocation.Put(z.SmallPhoto)
		z.SmallPhoto = nil
	}
}

func (x *AccountSetWebPhoto) Clone() *AccountSetWebPhoto {
	z := &AccountSetWebPhoto{}
	x.DeepCopy(z)
	return z
}

func (x *AccountSetWebPhoto) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountSetWebPhoto) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountSetWebPhoto) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountSetWebPhoto) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountSetWebPhoto) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountSetWebPhoto, x)
}

const C_AccountRemovePhoto int64 = 3728692172

type poolAccountRemovePhoto struct {
	pool sync.Pool
}

func (p *poolAccountRemovePhoto) Get() *AccountRemovePhoto {
	x, ok := p.pool.Get().(*AccountRemovePhoto)
	if !ok {
		x = &AccountRemovePhoto{}
	}

	return x
}

func (p *poolAccountRemovePhoto) Put(x *AccountRemovePhoto) {
	if x == nil {
		return
	}

	x.PhotoID = 0

	p.pool.Put(x)
}

var PoolAccountRemovePhoto = poolAccountRemovePhoto{}

func (x *AccountRemovePhoto) DeepCopy(z *AccountRemovePhoto) {
	z.PhotoID = x.PhotoID
}

func (x *AccountRemovePhoto) Clone() *AccountRemovePhoto {
	z := &AccountRemovePhoto{}
	x.DeepCopy(z)
	return z
}

func (x *AccountRemovePhoto) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountRemovePhoto) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountRemovePhoto) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountRemovePhoto) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountRemovePhoto) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountRemovePhoto, x)
}

const C_AccountSendChangePhoneCode int64 = 1389121902

type poolAccountSendChangePhoneCode struct {
	pool sync.Pool
}

func (p *poolAccountSendChangePhoneCode) Get() *AccountSendChangePhoneCode {
	x, ok := p.pool.Get().(*AccountSendChangePhoneCode)
	if !ok {
		x = &AccountSendChangePhoneCode{}
	}

	return x
}

func (p *poolAccountSendChangePhoneCode) Put(x *AccountSendChangePhoneCode) {
	if x == nil {
		return
	}

	x.Phone = ""
	x.AppHash = ""

	p.pool.Put(x)
}

var PoolAccountSendChangePhoneCode = poolAccountSendChangePhoneCode{}

func (x *AccountSendChangePhoneCode) DeepCopy(z *AccountSendChangePhoneCode) {
	z.Phone = x.Phone
	z.AppHash = x.AppHash
}

func (x *AccountSendChangePhoneCode) Clone() *AccountSendChangePhoneCode {
	z := &AccountSendChangePhoneCode{}
	x.DeepCopy(z)
	return z
}

func (x *AccountSendChangePhoneCode) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountSendChangePhoneCode) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountSendChangePhoneCode) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountSendChangePhoneCode) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountSendChangePhoneCode) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountSendChangePhoneCode, x)
}

const C_AccountSendVerifyPhoneCode int64 = 328900044

type poolAccountSendVerifyPhoneCode struct {
	pool sync.Pool
}

func (p *poolAccountSendVerifyPhoneCode) Get() *AccountSendVerifyPhoneCode {
	x, ok := p.pool.Get().(*AccountSendVerifyPhoneCode)
	if !ok {
		x = &AccountSendVerifyPhoneCode{}
	}

	return x
}

func (p *poolAccountSendVerifyPhoneCode) Put(x *AccountSendVerifyPhoneCode) {
	if x == nil {
		return
	}

	x.Phone = ""
	x.AppHash = ""

	p.pool.Put(x)
}

var PoolAccountSendVerifyPhoneCode = poolAccountSendVerifyPhoneCode{}

func (x *AccountSendVerifyPhoneCode) DeepCopy(z *AccountSendVerifyPhoneCode) {
	z.Phone = x.Phone
	z.AppHash = x.AppHash
}

func (x *AccountSendVerifyPhoneCode) Clone() *AccountSendVerifyPhoneCode {
	z := &AccountSendVerifyPhoneCode{}
	x.DeepCopy(z)
	return z
}

func (x *AccountSendVerifyPhoneCode) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountSendVerifyPhoneCode) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountSendVerifyPhoneCode) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountSendVerifyPhoneCode) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountSendVerifyPhoneCode) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountSendVerifyPhoneCode, x)
}

const C_AccountResendVerifyPhoneCode int64 = 3140772691

type poolAccountResendVerifyPhoneCode struct {
	pool sync.Pool
}

func (p *poolAccountResendVerifyPhoneCode) Get() *AccountResendVerifyPhoneCode {
	x, ok := p.pool.Get().(*AccountResendVerifyPhoneCode)
	if !ok {
		x = &AccountResendVerifyPhoneCode{}
	}

	return x
}

func (p *poolAccountResendVerifyPhoneCode) Put(x *AccountResendVerifyPhoneCode) {
	if x == nil {
		return
	}

	x.Phone = ""
	x.PhoneCodeHash = ""
	x.AppHash = ""

	p.pool.Put(x)
}

var PoolAccountResendVerifyPhoneCode = poolAccountResendVerifyPhoneCode{}

func (x *AccountResendVerifyPhoneCode) DeepCopy(z *AccountResendVerifyPhoneCode) {
	z.Phone = x.Phone
	z.PhoneCodeHash = x.PhoneCodeHash
	z.AppHash = x.AppHash
}

func (x *AccountResendVerifyPhoneCode) Clone() *AccountResendVerifyPhoneCode {
	z := &AccountResendVerifyPhoneCode{}
	x.DeepCopy(z)
	return z
}

func (x *AccountResendVerifyPhoneCode) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountResendVerifyPhoneCode) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountResendVerifyPhoneCode) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountResendVerifyPhoneCode) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountResendVerifyPhoneCode) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountResendVerifyPhoneCode, x)
}

const C_AccountChangePhone int64 = 4285969474

type poolAccountChangePhone struct {
	pool sync.Pool
}

func (p *poolAccountChangePhone) Get() *AccountChangePhone {
	x, ok := p.pool.Get().(*AccountChangePhone)
	if !ok {
		x = &AccountChangePhone{}
	}

	x.Password = PoolInputPassword.Get()

	return x
}

func (p *poolAccountChangePhone) Put(x *AccountChangePhone) {
	if x == nil {
		return
	}

	x.Phone = ""
	x.PhoneCodeHash = ""
	x.PhoneCode = ""
	PoolInputPassword.Put(x.Password)

	p.pool.Put(x)
}

var PoolAccountChangePhone = poolAccountChangePhone{}

func (x *AccountChangePhone) DeepCopy(z *AccountChangePhone) {
	z.Phone = x.Phone
	z.PhoneCodeHash = x.PhoneCodeHash
	z.PhoneCode = x.PhoneCode
	if x.Password != nil {
		if z.Password == nil {
			z.Password = PoolInputPassword.Get()
		}
		x.Password.DeepCopy(z.Password)
	} else {
		PoolInputPassword.Put(z.Password)
		z.Password = nil
	}
}

func (x *AccountChangePhone) Clone() *AccountChangePhone {
	z := &AccountChangePhone{}
	x.DeepCopy(z)
	return z
}

func (x *AccountChangePhone) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountChangePhone) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountChangePhone) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountChangePhone) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountChangePhone) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountChangePhone, x)
}

const C_AccountDelete int64 = 846661545

type poolAccountDelete struct {
	pool sync.Pool
}

func (p *poolAccountDelete) Get() *AccountDelete {
	x, ok := p.pool.Get().(*AccountDelete)
	if !ok {
		x = &AccountDelete{}
	}

	x.Password = PoolInputPassword.Get()

	return x
}

func (p *poolAccountDelete) Put(x *AccountDelete) {
	if x == nil {
		return
	}

	x.Phone = ""
	x.PhoneCodeHash = ""
	x.PhoneCode = ""
	PoolInputPassword.Put(x.Password)
	x.Reason = ""

	p.pool.Put(x)
}

var PoolAccountDelete = poolAccountDelete{}

func (x *AccountDelete) DeepCopy(z *AccountDelete) {
	z.Phone = x.Phone
	z.PhoneCodeHash = x.PhoneCodeHash
	z.PhoneCode = x.PhoneCode
	if x.Password != nil {
		if z.Password == nil {
			z.Password = PoolInputPassword.Get()
		}
		x.Password.DeepCopy(z.Password)
	} else {
		PoolInputPassword.Put(z.Password)
		z.Password = nil
	}
	z.Reason = x.Reason
}

func (x *AccountDelete) Clone() *AccountDelete {
	z := &AccountDelete{}
	x.DeepCopy(z)
	return z
}

func (x *AccountDelete) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountDelete) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountDelete) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountDelete) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountDelete) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountDelete, x)
}

const C_AccountSetPrivacy int64 = 1599585002

type poolAccountSetPrivacy struct {
	pool sync.Pool
}

func (p *poolAccountSetPrivacy) Get() *AccountSetPrivacy {
	x, ok := p.pool.Get().(*AccountSetPrivacy)
	if !ok {
		x = &AccountSetPrivacy{}
	}

	return x
}

func (p *poolAccountSetPrivacy) Put(x *AccountSetPrivacy) {
	if x == nil {
		return
	}

	for _, z := range x.ChatInvite {
		PoolPrivacyRule.Put(z)
	}
	x.ChatInvite = x.ChatInvite[:0]
	for _, z := range x.LastSeen {
		PoolPrivacyRule.Put(z)
	}
	x.LastSeen = x.LastSeen[:0]
	for _, z := range x.PhoneNumber {
		PoolPrivacyRule.Put(z)
	}
	x.PhoneNumber = x.PhoneNumber[:0]
	for _, z := range x.ProfilePhoto {
		PoolPrivacyRule.Put(z)
	}
	x.ProfilePhoto = x.ProfilePhoto[:0]
	for _, z := range x.ForwardedMessage {
		PoolPrivacyRule.Put(z)
	}
	x.ForwardedMessage = x.ForwardedMessage[:0]
	for _, z := range x.Call {
		PoolPrivacyRule.Put(z)
	}
	x.Call = x.Call[:0]

	p.pool.Put(x)
}

var PoolAccountSetPrivacy = poolAccountSetPrivacy{}

func (x *AccountSetPrivacy) DeepCopy(z *AccountSetPrivacy) {
	for idx := range x.ChatInvite {
		if x.ChatInvite[idx] == nil {
			continue
		}
		xx := PoolPrivacyRule.Get()
		x.ChatInvite[idx].DeepCopy(xx)
		z.ChatInvite = append(z.ChatInvite, xx)
	}
	for idx := range x.LastSeen {
		if x.LastSeen[idx] == nil {
			continue
		}
		xx := PoolPrivacyRule.Get()
		x.LastSeen[idx].DeepCopy(xx)
		z.LastSeen = append(z.LastSeen, xx)
	}
	for idx := range x.PhoneNumber {
		if x.PhoneNumber[idx] == nil {
			continue
		}
		xx := PoolPrivacyRule.Get()
		x.PhoneNumber[idx].DeepCopy(xx)
		z.PhoneNumber = append(z.PhoneNumber, xx)
	}
	for idx := range x.ProfilePhoto {
		if x.ProfilePhoto[idx] == nil {
			continue
		}
		xx := PoolPrivacyRule.Get()
		x.ProfilePhoto[idx].DeepCopy(xx)
		z.ProfilePhoto = append(z.ProfilePhoto, xx)
	}
	for idx := range x.ForwardedMessage {
		if x.ForwardedMessage[idx] == nil {
			continue
		}
		xx := PoolPrivacyRule.Get()
		x.ForwardedMessage[idx].DeepCopy(xx)
		z.ForwardedMessage = append(z.ForwardedMessage, xx)
	}
	for idx := range x.Call {
		if x.Call[idx] == nil {
			continue
		}
		xx := PoolPrivacyRule.Get()
		x.Call[idx].DeepCopy(xx)
		z.Call = append(z.Call, xx)
	}
}

func (x *AccountSetPrivacy) Clone() *AccountSetPrivacy {
	z := &AccountSetPrivacy{}
	x.DeepCopy(z)
	return z
}

func (x *AccountSetPrivacy) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountSetPrivacy) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountSetPrivacy) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountSetPrivacy) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountSetPrivacy) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountSetPrivacy, x)
}

const C_AccountGetPrivacy int64 = 1897044856

type poolAccountGetPrivacy struct {
	pool sync.Pool
}

func (p *poolAccountGetPrivacy) Get() *AccountGetPrivacy {
	x, ok := p.pool.Get().(*AccountGetPrivacy)
	if !ok {
		x = &AccountGetPrivacy{}
	}

	return x
}

func (p *poolAccountGetPrivacy) Put(x *AccountGetPrivacy) {
	if x == nil {
		return
	}

	x.Key = 0

	p.pool.Put(x)
}

var PoolAccountGetPrivacy = poolAccountGetPrivacy{}

func (x *AccountGetPrivacy) DeepCopy(z *AccountGetPrivacy) {
	z.Key = x.Key
}

func (x *AccountGetPrivacy) Clone() *AccountGetPrivacy {
	z := &AccountGetPrivacy{}
	x.DeepCopy(z)
	return z
}

func (x *AccountGetPrivacy) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountGetPrivacy) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountGetPrivacy) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountGetPrivacy) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountGetPrivacy) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountGetPrivacy, x)
}

const C_AccountGetAuthorizations int64 = 2112646192

type poolAccountGetAuthorizations struct {
	pool sync.Pool
}

func (p *poolAccountGetAuthorizations) Get() *AccountGetAuthorizations {
	x, ok := p.pool.Get().(*AccountGetAuthorizations)
	if !ok {
		x = &AccountGetAuthorizations{}
	}

	return x
}

func (p *poolAccountGetAuthorizations) Put(x *AccountGetAuthorizations) {
	if x == nil {
		return
	}

	p.pool.Put(x)
}

var PoolAccountGetAuthorizations = poolAccountGetAuthorizations{}

func (x *AccountGetAuthorizations) DeepCopy(z *AccountGetAuthorizations) {
}

func (x *AccountGetAuthorizations) Clone() *AccountGetAuthorizations {
	z := &AccountGetAuthorizations{}
	x.DeepCopy(z)
	return z
}

func (x *AccountGetAuthorizations) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountGetAuthorizations) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountGetAuthorizations) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountGetAuthorizations) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountGetAuthorizations) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountGetAuthorizations, x)
}

const C_AccountResetAuthorization int64 = 1045069116

type poolAccountResetAuthorization struct {
	pool sync.Pool
}

func (p *poolAccountResetAuthorization) Get() *AccountResetAuthorization {
	x, ok := p.pool.Get().(*AccountResetAuthorization)
	if !ok {
		x = &AccountResetAuthorization{}
	}

	return x
}

func (p *poolAccountResetAuthorization) Put(x *AccountResetAuthorization) {
	if x == nil {
		return
	}

	x.AuthID = 0

	p.pool.Put(x)
}

var PoolAccountResetAuthorization = poolAccountResetAuthorization{}

func (x *AccountResetAuthorization) DeepCopy(z *AccountResetAuthorization) {
	z.AuthID = x.AuthID
}

func (x *AccountResetAuthorization) Clone() *AccountResetAuthorization {
	z := &AccountResetAuthorization{}
	x.DeepCopy(z)
	return z
}

func (x *AccountResetAuthorization) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountResetAuthorization) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountResetAuthorization) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountResetAuthorization) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountResetAuthorization) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountResetAuthorization, x)
}

const C_AccountUpdateStatus int64 = 666864933

type poolAccountUpdateStatus struct {
	pool sync.Pool
}

func (p *poolAccountUpdateStatus) Get() *AccountUpdateStatus {
	x, ok := p.pool.Get().(*AccountUpdateStatus)
	if !ok {
		x = &AccountUpdateStatus{}
	}

	return x
}

func (p *poolAccountUpdateStatus) Put(x *AccountUpdateStatus) {
	if x == nil {
		return
	}

	x.Online = false

	p.pool.Put(x)
}

var PoolAccountUpdateStatus = poolAccountUpdateStatus{}

func (x *AccountUpdateStatus) DeepCopy(z *AccountUpdateStatus) {
	z.Online = x.Online
}

func (x *AccountUpdateStatus) Clone() *AccountUpdateStatus {
	z := &AccountUpdateStatus{}
	x.DeepCopy(z)
	return z
}

func (x *AccountUpdateStatus) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountUpdateStatus) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountUpdateStatus) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountUpdateStatus) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountUpdateStatus) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountUpdateStatus, x)
}

const C_AccountSetLang int64 = 2015777242

type poolAccountSetLang struct {
	pool sync.Pool
}

func (p *poolAccountSetLang) Get() *AccountSetLang {
	x, ok := p.pool.Get().(*AccountSetLang)
	if !ok {
		x = &AccountSetLang{}
	}

	return x
}

func (p *poolAccountSetLang) Put(x *AccountSetLang) {
	if x == nil {
		return
	}

	x.LangCode = ""

	p.pool.Put(x)
}

var PoolAccountSetLang = poolAccountSetLang{}

func (x *AccountSetLang) DeepCopy(z *AccountSetLang) {
	z.LangCode = x.LangCode
}

func (x *AccountSetLang) Clone() *AccountSetLang {
	z := &AccountSetLang{}
	x.DeepCopy(z)
	return z
}

func (x *AccountSetLang) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountSetLang) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountSetLang) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountSetLang) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountSetLang) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountSetLang, x)
}

const C_AccountGetPassword int64 = 1702207851

type poolAccountGetPassword struct {
	pool sync.Pool
}

func (p *poolAccountGetPassword) Get() *AccountGetPassword {
	x, ok := p.pool.Get().(*AccountGetPassword)
	if !ok {
		x = &AccountGetPassword{}
	}

	return x
}

func (p *poolAccountGetPassword) Put(x *AccountGetPassword) {
	if x == nil {
		return
	}

	p.pool.Put(x)
}

var PoolAccountGetPassword = poolAccountGetPassword{}

func (x *AccountGetPassword) DeepCopy(z *AccountGetPassword) {
}

func (x *AccountGetPassword) Clone() *AccountGetPassword {
	z := &AccountGetPassword{}
	x.DeepCopy(z)
	return z
}

func (x *AccountGetPassword) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountGetPassword) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountGetPassword) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountGetPassword) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountGetPassword) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountGetPassword, x)
}

const C_AccountGetPasswordSettings int64 = 2052309739

type poolAccountGetPasswordSettings struct {
	pool sync.Pool
}

func (p *poolAccountGetPasswordSettings) Get() *AccountGetPasswordSettings {
	x, ok := p.pool.Get().(*AccountGetPasswordSettings)
	if !ok {
		x = &AccountGetPasswordSettings{}
	}

	x.Password = PoolInputPassword.Get()

	return x
}

func (p *poolAccountGetPasswordSettings) Put(x *AccountGetPasswordSettings) {
	if x == nil {
		return
	}

	PoolInputPassword.Put(x.Password)

	p.pool.Put(x)
}

var PoolAccountGetPasswordSettings = poolAccountGetPasswordSettings{}

func (x *AccountGetPasswordSettings) DeepCopy(z *AccountGetPasswordSettings) {
	if x.Password != nil {
		if z.Password == nil {
			z.Password = PoolInputPassword.Get()
		}
		x.Password.DeepCopy(z.Password)
	} else {
		PoolInputPassword.Put(z.Password)
		z.Password = nil
	}
}

func (x *AccountGetPasswordSettings) Clone() *AccountGetPasswordSettings {
	z := &AccountGetPasswordSettings{}
	x.DeepCopy(z)
	return z
}

func (x *AccountGetPasswordSettings) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountGetPasswordSettings) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountGetPasswordSettings) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountGetPasswordSettings) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountGetPasswordSettings) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountGetPasswordSettings, x)
}

const C_AccountUpdatePasswordSettings int64 = 3193945896

type poolAccountUpdatePasswordSettings struct {
	pool sync.Pool
}

func (p *poolAccountUpdatePasswordSettings) Get() *AccountUpdatePasswordSettings {
	x, ok := p.pool.Get().(*AccountUpdatePasswordSettings)
	if !ok {
		x = &AccountUpdatePasswordSettings{}
	}

	x.Password = PoolInputPassword.Get()

	return x
}

func (p *poolAccountUpdatePasswordSettings) Put(x *AccountUpdatePasswordSettings) {
	if x == nil {
		return
	}

	PoolInputPassword.Put(x.Password)
	x.PasswordHash = x.PasswordHash[:0]
	x.Algorithm = 0
	x.AlgorithmData = x.AlgorithmData[:0]
	x.Hint = ""
	for _, z := range x.Questions {
		PoolSecurityQuestion.Put(z)
	}
	x.Questions = x.Questions[:0]

	p.pool.Put(x)
}

var PoolAccountUpdatePasswordSettings = poolAccountUpdatePasswordSettings{}

func (x *AccountUpdatePasswordSettings) DeepCopy(z *AccountUpdatePasswordSettings) {
	if x.Password != nil {
		if z.Password == nil {
			z.Password = PoolInputPassword.Get()
		}
		x.Password.DeepCopy(z.Password)
	} else {
		PoolInputPassword.Put(z.Password)
		z.Password = nil
	}
	z.PasswordHash = append(z.PasswordHash[:0], x.PasswordHash...)
	z.Algorithm = x.Algorithm
	z.AlgorithmData = append(z.AlgorithmData[:0], x.AlgorithmData...)
	z.Hint = x.Hint
	for idx := range x.Questions {
		if x.Questions[idx] == nil {
			continue
		}
		xx := PoolSecurityQuestion.Get()
		x.Questions[idx].DeepCopy(xx)
		z.Questions = append(z.Questions, xx)
	}
}

func (x *AccountUpdatePasswordSettings) Clone() *AccountUpdatePasswordSettings {
	z := &AccountUpdatePasswordSettings{}
	x.DeepCopy(z)
	return z
}

func (x *AccountUpdatePasswordSettings) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountUpdatePasswordSettings) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountUpdatePasswordSettings) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountUpdatePasswordSettings) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountUpdatePasswordSettings) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountUpdatePasswordSettings, x)
}

const C_AccountRecoverPassword int64 = 1086766738

type poolAccountRecoverPassword struct {
	pool sync.Pool
}

func (p *poolAccountRecoverPassword) Get() *AccountRecoverPassword {
	x, ok := p.pool.Get().(*AccountRecoverPassword)
	if !ok {
		x = &AccountRecoverPassword{}
	}

	return x
}

func (p *poolAccountRecoverPassword) Put(x *AccountRecoverPassword) {
	if x == nil {
		return
	}

	for _, z := range x.Answers {
		PoolSecurityAnswer.Put(z)
	}
	x.Answers = x.Answers[:0]
	x.Algorithm = 0
	x.AlgorithmData = x.AlgorithmData[:0]
	x.SrpID = 0

	p.pool.Put(x)
}

var PoolAccountRecoverPassword = poolAccountRecoverPassword{}

func (x *AccountRecoverPassword) DeepCopy(z *AccountRecoverPassword) {
	for idx := range x.Answers {
		if x.Answers[idx] == nil {
			continue
		}
		xx := PoolSecurityAnswer.Get()
		x.Answers[idx].DeepCopy(xx)
		z.Answers = append(z.Answers, xx)
	}
	z.Algorithm = x.Algorithm
	z.AlgorithmData = append(z.AlgorithmData[:0], x.AlgorithmData...)
	z.SrpID = x.SrpID
}

func (x *AccountRecoverPassword) Clone() *AccountRecoverPassword {
	z := &AccountRecoverPassword{}
	x.DeepCopy(z)
	return z
}

func (x *AccountRecoverPassword) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountRecoverPassword) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountRecoverPassword) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountRecoverPassword) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountRecoverPassword) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountRecoverPassword, x)
}

const C_AccountGetTeams int64 = 2881489378

type poolAccountGetTeams struct {
	pool sync.Pool
}

func (p *poolAccountGetTeams) Get() *AccountGetTeams {
	x, ok := p.pool.Get().(*AccountGetTeams)
	if !ok {
		x = &AccountGetTeams{}
	}

	return x
}

func (p *poolAccountGetTeams) Put(x *AccountGetTeams) {
	if x == nil {
		return
	}

	p.pool.Put(x)
}

var PoolAccountGetTeams = poolAccountGetTeams{}

func (x *AccountGetTeams) DeepCopy(z *AccountGetTeams) {
}

func (x *AccountGetTeams) Clone() *AccountGetTeams {
	z := &AccountGetTeams{}
	x.DeepCopy(z)
	return z
}

func (x *AccountGetTeams) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountGetTeams) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountGetTeams) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountGetTeams) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountGetTeams) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountGetTeams, x)
}

const C_AccountPasswordSettings int64 = 3362978866

type poolAccountPasswordSettings struct {
	pool sync.Pool
}

func (p *poolAccountPasswordSettings) Get() *AccountPasswordSettings {
	x, ok := p.pool.Get().(*AccountPasswordSettings)
	if !ok {
		x = &AccountPasswordSettings{}
	}

	return x
}

func (p *poolAccountPasswordSettings) Put(x *AccountPasswordSettings) {
	if x == nil {
		return
	}

	x.Hint = ""
	for _, z := range x.Questions {
		PoolRecoveryQuestion.Put(z)
	}
	x.Questions = x.Questions[:0]

	p.pool.Put(x)
}

var PoolAccountPasswordSettings = poolAccountPasswordSettings{}

func (x *AccountPasswordSettings) DeepCopy(z *AccountPasswordSettings) {
	z.Hint = x.Hint
	for idx := range x.Questions {
		if x.Questions[idx] == nil {
			continue
		}
		xx := PoolRecoveryQuestion.Get()
		x.Questions[idx].DeepCopy(xx)
		z.Questions = append(z.Questions, xx)
	}
}

func (x *AccountPasswordSettings) Clone() *AccountPasswordSettings {
	z := &AccountPasswordSettings{}
	x.DeepCopy(z)
	return z
}

func (x *AccountPasswordSettings) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountPasswordSettings) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountPasswordSettings) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountPasswordSettings) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountPasswordSettings) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountPasswordSettings, x)
}

const C_SecurityQuestions int64 = 1797596734

type poolSecurityQuestions struct {
	pool sync.Pool
}

func (p *poolSecurityQuestions) Get() *SecurityQuestions {
	x, ok := p.pool.Get().(*SecurityQuestions)
	if !ok {
		x = &SecurityQuestions{}
	}

	return x
}

func (p *poolSecurityQuestions) Put(x *SecurityQuestions) {
	if x == nil {
		return
	}

	for _, z := range x.Questions {
		PoolSecurityQuestion.Put(z)
	}
	x.Questions = x.Questions[:0]

	p.pool.Put(x)
}

var PoolSecurityQuestions = poolSecurityQuestions{}

func (x *SecurityQuestions) DeepCopy(z *SecurityQuestions) {
	for idx := range x.Questions {
		if x.Questions[idx] == nil {
			continue
		}
		xx := PoolSecurityQuestion.Get()
		x.Questions[idx].DeepCopy(xx)
		z.Questions = append(z.Questions, xx)
	}
}

func (x *SecurityQuestions) Clone() *SecurityQuestions {
	z := &SecurityQuestions{}
	x.DeepCopy(z)
	return z
}

func (x *SecurityQuestions) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *SecurityQuestions) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *SecurityQuestions) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *SecurityQuestions) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *SecurityQuestions) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_SecurityQuestions, x)
}

const C_RecoveryQuestion int64 = 1697591959

type poolRecoveryQuestion struct {
	pool sync.Pool
}

func (p *poolRecoveryQuestion) Get() *RecoveryQuestion {
	x, ok := p.pool.Get().(*RecoveryQuestion)
	if !ok {
		x = &RecoveryQuestion{}
	}

	return x
}

func (p *poolRecoveryQuestion) Put(x *RecoveryQuestion) {
	if x == nil {
		return
	}

	x.ID = 0
	x.Text = ""

	p.pool.Put(x)
}

var PoolRecoveryQuestion = poolRecoveryQuestion{}

func (x *RecoveryQuestion) DeepCopy(z *RecoveryQuestion) {
	z.ID = x.ID
	z.Text = x.Text
}

func (x *RecoveryQuestion) Clone() *RecoveryQuestion {
	z := &RecoveryQuestion{}
	x.DeepCopy(z)
	return z
}

func (x *RecoveryQuestion) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *RecoveryQuestion) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *RecoveryQuestion) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *RecoveryQuestion) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *RecoveryQuestion) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_RecoveryQuestion, x)
}

const C_SecurityQuestion int64 = 1092467205

type poolSecurityQuestion struct {
	pool sync.Pool
}

func (p *poolSecurityQuestion) Get() *SecurityQuestion {
	x, ok := p.pool.Get().(*SecurityQuestion)
	if !ok {
		x = &SecurityQuestion{}
	}

	return x
}

func (p *poolSecurityQuestion) Put(x *SecurityQuestion) {
	if x == nil {
		return
	}

	x.ID = 0
	x.Text = ""
	x.Answer = ""

	p.pool.Put(x)
}

var PoolSecurityQuestion = poolSecurityQuestion{}

func (x *SecurityQuestion) DeepCopy(z *SecurityQuestion) {
	z.ID = x.ID
	z.Text = x.Text
	z.Answer = x.Answer
}

func (x *SecurityQuestion) Clone() *SecurityQuestion {
	z := &SecurityQuestion{}
	x.DeepCopy(z)
	return z
}

func (x *SecurityQuestion) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *SecurityQuestion) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *SecurityQuestion) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *SecurityQuestion) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *SecurityQuestion) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_SecurityQuestion, x)
}

const C_SecurityAnswer int64 = 1989228797

type poolSecurityAnswer struct {
	pool sync.Pool
}

func (p *poolSecurityAnswer) Get() *SecurityAnswer {
	x, ok := p.pool.Get().(*SecurityAnswer)
	if !ok {
		x = &SecurityAnswer{}
	}

	return x
}

func (p *poolSecurityAnswer) Put(x *SecurityAnswer) {
	if x == nil {
		return
	}

	x.QuestionID = 0
	x.Answer = ""

	p.pool.Put(x)
}

var PoolSecurityAnswer = poolSecurityAnswer{}

func (x *SecurityAnswer) DeepCopy(z *SecurityAnswer) {
	z.QuestionID = x.QuestionID
	z.Answer = x.Answer
}

func (x *SecurityAnswer) Clone() *SecurityAnswer {
	z := &SecurityAnswer{}
	x.DeepCopy(z)
	return z
}

func (x *SecurityAnswer) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *SecurityAnswer) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *SecurityAnswer) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *SecurityAnswer) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *SecurityAnswer) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_SecurityAnswer, x)
}

const C_AccountPassword int64 = 4178767656

type poolAccountPassword struct {
	pool sync.Pool
}

func (p *poolAccountPassword) Get() *AccountPassword {
	x, ok := p.pool.Get().(*AccountPassword)
	if !ok {
		x = &AccountPassword{}
	}

	return x
}

func (p *poolAccountPassword) Put(x *AccountPassword) {
	if x == nil {
		return
	}

	x.HasPassword = false
	x.Hint = ""
	x.Algorithm = 0
	x.AlgorithmData = x.AlgorithmData[:0]
	x.SrpB = x.SrpB[:0]
	x.RandomData = x.RandomData[:0]
	x.SrpID = 0
	for _, z := range x.Questions {
		PoolRecoveryQuestion.Put(z)
	}
	x.Questions = x.Questions[:0]

	p.pool.Put(x)
}

var PoolAccountPassword = poolAccountPassword{}

func (x *AccountPassword) DeepCopy(z *AccountPassword) {
	z.HasPassword = x.HasPassword
	z.Hint = x.Hint
	z.Algorithm = x.Algorithm
	z.AlgorithmData = append(z.AlgorithmData[:0], x.AlgorithmData...)
	z.SrpB = append(z.SrpB[:0], x.SrpB...)
	z.RandomData = append(z.RandomData[:0], x.RandomData...)
	z.SrpID = x.SrpID
	for idx := range x.Questions {
		if x.Questions[idx] == nil {
			continue
		}
		xx := PoolRecoveryQuestion.Get()
		x.Questions[idx].DeepCopy(xx)
		z.Questions = append(z.Questions, xx)
	}
}

func (x *AccountPassword) Clone() *AccountPassword {
	z := &AccountPassword{}
	x.DeepCopy(z)
	return z
}

func (x *AccountPassword) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountPassword) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountPassword) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountPassword) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountPassword) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountPassword, x)
}

const C_AccountAuthorizations int64 = 1092320500

type poolAccountAuthorizations struct {
	pool sync.Pool
}

func (p *poolAccountAuthorizations) Get() *AccountAuthorizations {
	x, ok := p.pool.Get().(*AccountAuthorizations)
	if !ok {
		x = &AccountAuthorizations{}
	}

	return x
}

func (p *poolAccountAuthorizations) Put(x *AccountAuthorizations) {
	if x == nil {
		return
	}

	for _, z := range x.Authorizations {
		PoolAccountAuthorization.Put(z)
	}
	x.Authorizations = x.Authorizations[:0]

	p.pool.Put(x)
}

var PoolAccountAuthorizations = poolAccountAuthorizations{}

func (x *AccountAuthorizations) DeepCopy(z *AccountAuthorizations) {
	for idx := range x.Authorizations {
		if x.Authorizations[idx] == nil {
			continue
		}
		xx := PoolAccountAuthorization.Get()
		x.Authorizations[idx].DeepCopy(xx)
		z.Authorizations = append(z.Authorizations, xx)
	}
}

func (x *AccountAuthorizations) Clone() *AccountAuthorizations {
	z := &AccountAuthorizations{}
	x.DeepCopy(z)
	return z
}

func (x *AccountAuthorizations) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountAuthorizations) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountAuthorizations) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountAuthorizations) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountAuthorizations) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountAuthorizations, x)
}

const C_AccountAuthorization int64 = 275571966

type poolAccountAuthorization struct {
	pool sync.Pool
}

func (p *poolAccountAuthorization) Get() *AccountAuthorization {
	x, ok := p.pool.Get().(*AccountAuthorization)
	if !ok {
		x = &AccountAuthorization{}
	}

	return x
}

func (p *poolAccountAuthorization) Put(x *AccountAuthorization) {
	if x == nil {
		return
	}

	x.AuthID = 0
	x.Model = ""
	x.AppVersion = ""
	x.SystemVersion = ""
	x.LangCode = ""
	x.CreatedAt = 0
	x.ActiveAt = 0
	x.ClientIP = ""
	x.LastAccess = 0

	p.pool.Put(x)
}

var PoolAccountAuthorization = poolAccountAuthorization{}

func (x *AccountAuthorization) DeepCopy(z *AccountAuthorization) {
	z.AuthID = x.AuthID
	z.Model = x.Model
	z.AppVersion = x.AppVersion
	z.SystemVersion = x.SystemVersion
	z.LangCode = x.LangCode
	z.CreatedAt = x.CreatedAt
	z.ActiveAt = x.ActiveAt
	z.ClientIP = x.ClientIP
	z.LastAccess = x.LastAccess
}

func (x *AccountAuthorization) Clone() *AccountAuthorization {
	z := &AccountAuthorization{}
	x.DeepCopy(z)
	return z
}

func (x *AccountAuthorization) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountAuthorization) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountAuthorization) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountAuthorization) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountAuthorization) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountAuthorization, x)
}

const C_AccountPrivacyRules int64 = 3802018092

type poolAccountPrivacyRules struct {
	pool sync.Pool
}

func (p *poolAccountPrivacyRules) Get() *AccountPrivacyRules {
	x, ok := p.pool.Get().(*AccountPrivacyRules)
	if !ok {
		x = &AccountPrivacyRules{}
	}

	return x
}

func (p *poolAccountPrivacyRules) Put(x *AccountPrivacyRules) {
	if x == nil {
		return
	}

	for _, z := range x.Rules {
		PoolPrivacyRule.Put(z)
	}
	x.Rules = x.Rules[:0]

	p.pool.Put(x)
}

var PoolAccountPrivacyRules = poolAccountPrivacyRules{}

func (x *AccountPrivacyRules) DeepCopy(z *AccountPrivacyRules) {
	for idx := range x.Rules {
		if x.Rules[idx] == nil {
			continue
		}
		xx := PoolPrivacyRule.Get()
		x.Rules[idx].DeepCopy(xx)
		z.Rules = append(z.Rules, xx)
	}
}

func (x *AccountPrivacyRules) Clone() *AccountPrivacyRules {
	z := &AccountPrivacyRules{}
	x.DeepCopy(z)
	return z
}

func (x *AccountPrivacyRules) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *AccountPrivacyRules) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *AccountPrivacyRules) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *AccountPrivacyRules) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *AccountPrivacyRules) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_AccountPrivacyRules, x)
}

func init() {
	registry.RegisterConstructor(2016882075, "AccountSetNotifySettings")
	registry.RegisterConstructor(477008681, "AccountGetNotifySettings")
	registry.RegisterConstructor(946059841, "AccountRegisterDevice")
	registry.RegisterConstructor(3981251588, "AccountUnregisterDevice")
	registry.RegisterConstructor(3725499887, "AccountUpdateProfile")
	registry.RegisterConstructor(1501406413, "AccountCheckUsername")
	registry.RegisterConstructor(1477164344, "AccountUpdateUsername")
	registry.RegisterConstructor(1222469957, "AccountUploadPhoto")
	registry.RegisterConstructor(406174115, "AccountUpdatePhoto")
	registry.RegisterConstructor(46761477, "AccountSetWebPhoto")
	registry.RegisterConstructor(3728692172, "AccountRemovePhoto")
	registry.RegisterConstructor(1389121902, "AccountSendChangePhoneCode")
	registry.RegisterConstructor(328900044, "AccountSendVerifyPhoneCode")
	registry.RegisterConstructor(3140772691, "AccountResendVerifyPhoneCode")
	registry.RegisterConstructor(4285969474, "AccountChangePhone")
	registry.RegisterConstructor(846661545, "AccountDelete")
	registry.RegisterConstructor(1599585002, "AccountSetPrivacy")
	registry.RegisterConstructor(1897044856, "AccountGetPrivacy")
	registry.RegisterConstructor(2112646192, "AccountGetAuthorizations")
	registry.RegisterConstructor(1045069116, "AccountResetAuthorization")
	registry.RegisterConstructor(666864933, "AccountUpdateStatus")
	registry.RegisterConstructor(2015777242, "AccountSetLang")
	registry.RegisterConstructor(1702207851, "AccountGetPassword")
	registry.RegisterConstructor(2052309739, "AccountGetPasswordSettings")
	registry.RegisterConstructor(3193945896, "AccountUpdatePasswordSettings")
	registry.RegisterConstructor(1086766738, "AccountRecoverPassword")
	registry.RegisterConstructor(2881489378, "AccountGetTeams")
	registry.RegisterConstructor(3362978866, "AccountPasswordSettings")
	registry.RegisterConstructor(1797596734, "SecurityQuestions")
	registry.RegisterConstructor(1697591959, "RecoveryQuestion")
	registry.RegisterConstructor(1092467205, "SecurityQuestion")
	registry.RegisterConstructor(1989228797, "SecurityAnswer")
	registry.RegisterConstructor(4178767656, "AccountPassword")
	registry.RegisterConstructor(1092320500, "AccountAuthorizations")
	registry.RegisterConstructor(275571966, "AccountAuthorization")
	registry.RegisterConstructor(3802018092, "AccountPrivacyRules")
}

var _ = bytes.MinRead
