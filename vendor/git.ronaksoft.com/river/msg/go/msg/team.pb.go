// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: team.proto

package msg

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TeamGet
// @Function
// @Return: Team
type TeamGet struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *TeamGet) Reset()         { *m = TeamGet{} }
func (m *TeamGet) String() string { return proto.CompactTextString(m) }
func (*TeamGet) ProtoMessage()    {}
func (*TeamGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4e9e93d7b2c6bb, []int{0}
}
func (m *TeamGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamGet.Merge(m, src)
}
func (m *TeamGet) XXX_Size() int {
	return m.Size()
}
func (m *TeamGet) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamGet.DiscardUnknown(m)
}

var xxx_messageInfo_TeamGet proto.InternalMessageInfo

func (m *TeamGet) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

// TeamAddMember
// @Function
// @Return: Bool
type TeamAddMember struct {
	TeamID  int64 `protobuf:"varint,1,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	UserID  int64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Manager bool  `protobuf:"varint,3,opt,name=Manager,proto3" json:"Manager,omitempty"`
}

func (m *TeamAddMember) Reset()         { *m = TeamAddMember{} }
func (m *TeamAddMember) String() string { return proto.CompactTextString(m) }
func (*TeamAddMember) ProtoMessage()    {}
func (*TeamAddMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4e9e93d7b2c6bb, []int{1}
}
func (m *TeamAddMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamAddMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamAddMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamAddMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamAddMember.Merge(m, src)
}
func (m *TeamAddMember) XXX_Size() int {
	return m.Size()
}
func (m *TeamAddMember) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamAddMember.DiscardUnknown(m)
}

var xxx_messageInfo_TeamAddMember proto.InternalMessageInfo

func (m *TeamAddMember) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *TeamAddMember) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *TeamAddMember) GetManager() bool {
	if m != nil {
		return m.Manager
	}
	return false
}

// TeamRemoveMember
// @Function
// @Return: Bool
type TeamRemoveMember struct {
	TeamID int64 `protobuf:"varint,1,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	UserID int64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (m *TeamRemoveMember) Reset()         { *m = TeamRemoveMember{} }
func (m *TeamRemoveMember) String() string { return proto.CompactTextString(m) }
func (*TeamRemoveMember) ProtoMessage()    {}
func (*TeamRemoveMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4e9e93d7b2c6bb, []int{2}
}
func (m *TeamRemoveMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamRemoveMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamRemoveMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamRemoveMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamRemoveMember.Merge(m, src)
}
func (m *TeamRemoveMember) XXX_Size() int {
	return m.Size()
}
func (m *TeamRemoveMember) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamRemoveMember.DiscardUnknown(m)
}

var xxx_messageInfo_TeamRemoveMember proto.InternalMessageInfo

func (m *TeamRemoveMember) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *TeamRemoveMember) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

// TeamPromote
// @Function
// @Return: Bool
type TeamPromote struct {
	TeamID int64 `protobuf:"varint,1,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	UserID int64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (m *TeamPromote) Reset()         { *m = TeamPromote{} }
func (m *TeamPromote) String() string { return proto.CompactTextString(m) }
func (*TeamPromote) ProtoMessage()    {}
func (*TeamPromote) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4e9e93d7b2c6bb, []int{3}
}
func (m *TeamPromote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamPromote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamPromote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamPromote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamPromote.Merge(m, src)
}
func (m *TeamPromote) XXX_Size() int {
	return m.Size()
}
func (m *TeamPromote) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamPromote.DiscardUnknown(m)
}

var xxx_messageInfo_TeamPromote proto.InternalMessageInfo

func (m *TeamPromote) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *TeamPromote) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

// TeamDemote
// @Function
// @Return: Bool
type TeamDemote struct {
	TeamID int64 `protobuf:"varint,1,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	UserID int64 `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (m *TeamDemote) Reset()         { *m = TeamDemote{} }
func (m *TeamDemote) String() string { return proto.CompactTextString(m) }
func (*TeamDemote) ProtoMessage()    {}
func (*TeamDemote) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4e9e93d7b2c6bb, []int{4}
}
func (m *TeamDemote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamDemote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamDemote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamDemote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamDemote.Merge(m, src)
}
func (m *TeamDemote) XXX_Size() int {
	return m.Size()
}
func (m *TeamDemote) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamDemote.DiscardUnknown(m)
}

var xxx_messageInfo_TeamDemote proto.InternalMessageInfo

func (m *TeamDemote) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *TeamDemote) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

// TeamLeave
// @Function
// @Return: Bool
type TeamLeave struct {
	TeamID int64 `protobuf:"varint,2,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
}

func (m *TeamLeave) Reset()         { *m = TeamLeave{} }
func (m *TeamLeave) String() string { return proto.CompactTextString(m) }
func (*TeamLeave) ProtoMessage()    {}
func (*TeamLeave) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4e9e93d7b2c6bb, []int{5}
}
func (m *TeamLeave) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamLeave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamLeave.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamLeave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamLeave.Merge(m, src)
}
func (m *TeamLeave) XXX_Size() int {
	return m.Size()
}
func (m *TeamLeave) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamLeave.DiscardUnknown(m)
}

var xxx_messageInfo_TeamLeave proto.InternalMessageInfo

func (m *TeamLeave) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

// TeamJoin
// @Function
// @Return: Bool
type TeamJoin struct {
	TeamID int64  `protobuf:"varint,1,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	Token  []byte `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *TeamJoin) Reset()         { *m = TeamJoin{} }
func (m *TeamJoin) String() string { return proto.CompactTextString(m) }
func (*TeamJoin) ProtoMessage()    {}
func (*TeamJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4e9e93d7b2c6bb, []int{6}
}
func (m *TeamJoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamJoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamJoin.Merge(m, src)
}
func (m *TeamJoin) XXX_Size() int {
	return m.Size()
}
func (m *TeamJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamJoin.DiscardUnknown(m)
}

var xxx_messageInfo_TeamJoin proto.InternalMessageInfo

func (m *TeamJoin) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *TeamJoin) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

// TeamListMembers
// @Function
// @Return: TeamMembers
type TeamListMembers struct {
	TeamID int64 `protobuf:"varint,1,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
}

func (m *TeamListMembers) Reset()         { *m = TeamListMembers{} }
func (m *TeamListMembers) String() string { return proto.CompactTextString(m) }
func (*TeamListMembers) ProtoMessage()    {}
func (*TeamListMembers) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4e9e93d7b2c6bb, []int{7}
}
func (m *TeamListMembers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamListMembers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamListMembers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamListMembers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamListMembers.Merge(m, src)
}
func (m *TeamListMembers) XXX_Size() int {
	return m.Size()
}
func (m *TeamListMembers) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamListMembers.DiscardUnknown(m)
}

var xxx_messageInfo_TeamListMembers proto.InternalMessageInfo

func (m *TeamListMembers) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

// TeamEdit
// @Function
// @Returns: Team
type TeamEdit struct {
	TeamID int64  `protobuf:"varint,1,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *TeamEdit) Reset()         { *m = TeamEdit{} }
func (m *TeamEdit) String() string { return proto.CompactTextString(m) }
func (*TeamEdit) ProtoMessage()    {}
func (*TeamEdit) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4e9e93d7b2c6bb, []int{8}
}
func (m *TeamEdit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamEdit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamEdit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamEdit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamEdit.Merge(m, src)
}
func (m *TeamEdit) XXX_Size() int {
	return m.Size()
}
func (m *TeamEdit) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamEdit.DiscardUnknown(m)
}

var xxx_messageInfo_TeamEdit proto.InternalMessageInfo

func (m *TeamEdit) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *TeamEdit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// TeamUploadPhoto
// @Function
// @Returns: TeamPhoto
type TeamUploadPhoto struct {
	TeamID int64      `protobuf:"varint,1,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	File   *InputFile `protobuf:"bytes,2,opt,name=File,proto3" json:"File,omitempty"`
}

func (m *TeamUploadPhoto) Reset()         { *m = TeamUploadPhoto{} }
func (m *TeamUploadPhoto) String() string { return proto.CompactTextString(m) }
func (*TeamUploadPhoto) ProtoMessage()    {}
func (*TeamUploadPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4e9e93d7b2c6bb, []int{9}
}
func (m *TeamUploadPhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamUploadPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamUploadPhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamUploadPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamUploadPhoto.Merge(m, src)
}
func (m *TeamUploadPhoto) XXX_Size() int {
	return m.Size()
}
func (m *TeamUploadPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamUploadPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_TeamUploadPhoto proto.InternalMessageInfo

func (m *TeamUploadPhoto) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *TeamUploadPhoto) GetFile() *InputFile {
	if m != nil {
		return m.File
	}
	return nil
}

// TeamRemovePhoto
// @Function
// @Returns: Bool
type TeamRemovePhoto struct {
	TeamID int64 `protobuf:"varint,1,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
}

func (m *TeamRemovePhoto) Reset()         { *m = TeamRemovePhoto{} }
func (m *TeamRemovePhoto) String() string { return proto.CompactTextString(m) }
func (*TeamRemovePhoto) ProtoMessage()    {}
func (*TeamRemovePhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4e9e93d7b2c6bb, []int{10}
}
func (m *TeamRemovePhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamRemovePhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamRemovePhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamRemovePhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamRemovePhoto.Merge(m, src)
}
func (m *TeamRemovePhoto) XXX_Size() int {
	return m.Size()
}
func (m *TeamRemovePhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamRemovePhoto.DiscardUnknown(m)
}

var xxx_messageInfo_TeamRemovePhoto proto.InternalMessageInfo

func (m *TeamRemovePhoto) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

// TeamMembers
type TeamMembers struct {
	Members []*TeamMember `protobuf:"bytes,1,rep,name=Members,proto3" json:"Members,omitempty"`
	Users   []*User       `protobuf:"bytes,2,rep,name=Users,proto3" json:"Users,omitempty"`
}

func (m *TeamMembers) Reset()         { *m = TeamMembers{} }
func (m *TeamMembers) String() string { return proto.CompactTextString(m) }
func (*TeamMembers) ProtoMessage()    {}
func (*TeamMembers) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4e9e93d7b2c6bb, []int{11}
}
func (m *TeamMembers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamMembers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamMembers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamMembers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamMembers.Merge(m, src)
}
func (m *TeamMembers) XXX_Size() int {
	return m.Size()
}
func (m *TeamMembers) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamMembers.DiscardUnknown(m)
}

var xxx_messageInfo_TeamMembers proto.InternalMessageInfo

func (m *TeamMembers) GetMembers() []*TeamMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *TeamMembers) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

// TeamMember
type TeamMember struct {
	UserID int64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Admin  bool  `protobuf:"varint,2,opt,name=Admin,proto3" json:"Admin,omitempty"`
	User   *User `protobuf:"bytes,3,opt,name=User,proto3" json:"User,omitempty"`
}

func (m *TeamMember) Reset()         { *m = TeamMember{} }
func (m *TeamMember) String() string { return proto.CompactTextString(m) }
func (*TeamMember) ProtoMessage()    {}
func (*TeamMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4e9e93d7b2c6bb, []int{12}
}
func (m *TeamMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamMember.Merge(m, src)
}
func (m *TeamMember) XXX_Size() int {
	return m.Size()
}
func (m *TeamMember) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamMember.DiscardUnknown(m)
}

var xxx_messageInfo_TeamMember proto.InternalMessageInfo

func (m *TeamMember) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *TeamMember) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

func (m *TeamMember) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

// TeamsMany
type TeamsMany struct {
	Teams []*Team `protobuf:"bytes,1,rep,name=Teams,proto3" json:"Teams,omitempty"`
	Users []*User `protobuf:"bytes,2,rep,name=Users,proto3" json:"Users,omitempty"`
	Empty bool    `protobuf:"varint,3,opt,name=Empty,proto3" json:"Empty,omitempty"`
}

func (m *TeamsMany) Reset()         { *m = TeamsMany{} }
func (m *TeamsMany) String() string { return proto.CompactTextString(m) }
func (*TeamsMany) ProtoMessage()    {}
func (*TeamsMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4e9e93d7b2c6bb, []int{13}
}
func (m *TeamsMany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamsMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamsMany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamsMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamsMany.Merge(m, src)
}
func (m *TeamsMany) XXX_Size() int {
	return m.Size()
}
func (m *TeamsMany) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamsMany.DiscardUnknown(m)
}

var xxx_messageInfo_TeamsMany proto.InternalMessageInfo

func (m *TeamsMany) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *TeamsMany) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *TeamsMany) GetEmpty() bool {
	if m != nil {
		return m.Empty
	}
	return false
}

func init() {
	proto.RegisterType((*TeamGet)(nil), "msg.TeamGet")
	proto.RegisterType((*TeamAddMember)(nil), "msg.TeamAddMember")
	proto.RegisterType((*TeamRemoveMember)(nil), "msg.TeamRemoveMember")
	proto.RegisterType((*TeamPromote)(nil), "msg.TeamPromote")
	proto.RegisterType((*TeamDemote)(nil), "msg.TeamDemote")
	proto.RegisterType((*TeamLeave)(nil), "msg.TeamLeave")
	proto.RegisterType((*TeamJoin)(nil), "msg.TeamJoin")
	proto.RegisterType((*TeamListMembers)(nil), "msg.TeamListMembers")
	proto.RegisterType((*TeamEdit)(nil), "msg.TeamEdit")
	proto.RegisterType((*TeamUploadPhoto)(nil), "msg.TeamUploadPhoto")
	proto.RegisterType((*TeamRemovePhoto)(nil), "msg.TeamRemovePhoto")
	proto.RegisterType((*TeamMembers)(nil), "msg.TeamMembers")
	proto.RegisterType((*TeamMember)(nil), "msg.TeamMember")
	proto.RegisterType((*TeamsMany)(nil), "msg.TeamsMany")
}

func init() { proto.RegisterFile("team.proto", fileDescriptor_8b4e9e93d7b2c6bb) }

var fileDescriptor_8b4e9e93d7b2c6bb = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0xcd, 0x3a, 0x49, 0x93, 0x4c, 0xbe, 0x8f, 0x56, 0x56, 0x0f, 0x56, 0xa4, 0x9a, 0x68, 0x39,
	0x10, 0x0e, 0x75, 0x51, 0xb9, 0x01, 0x97, 0x56, 0x0e, 0x28, 0x15, 0x41, 0x65, 0xd5, 0x1e, 0x40,
	0xe2, 0xb0, 0x89, 0x17, 0xd7, 0xa2, 0xeb, 0xb5, 0xbc, 0x9b, 0x4a, 0xf9, 0x17, 0xfc, 0x2c, 0x8e,
	0x39, 0x72, 0x84, 0xe4, 0x8f, 0xa0, 0xdd, 0x71, 0x08, 0x05, 0x29, 0x95, 0xe8, 0x6d, 0xde, 0x9b,
	0x97, 0xf7, 0x26, 0x9e, 0x59, 0x00, 0x23, 0xb8, 0x8c, 0x8a, 0x52, 0x19, 0xe5, 0xd7, 0xa5, 0x4e,
	0x7b, 0x7b, 0x53, 0x55, 0x8a, 0xc8, 0xcc, 0x0b, 0xa1, 0x91, 0xee, 0x1d, 0xa6, 0x99, 0xb9, 0x9a,
	0x4d, 0xa2, 0xa9, 0x92, 0x47, 0xa9, 0x4a, 0xd5, 0x91, 0xa3, 0x27, 0xb3, 0x4f, 0x0e, 0x39, 0xe0,
	0x2a, 0x94, 0xd3, 0x03, 0x68, 0x5d, 0x08, 0x2e, 0x5f, 0x0b, 0xe3, 0xfb, 0xe0, 0x8d, 0xe2, 0x80,
	0xf4, 0xc9, 0xa0, 0x7e, 0xea, 0x3d, 0x25, 0xcc, 0x1b, 0xc5, 0x94, 0xc3, 0xff, 0xb6, 0x7d, 0x92,
	0x24, 0x63, 0x21, 0x27, 0xa2, 0xf4, 0x7b, 0xb0, 0x63, 0x89, 0x5b, 0xc2, 0x8a, 0xb1, 0xbd, 0x4b,
	0x2d, 0xca, 0x51, 0x1c, 0x78, 0x9b, 0x1e, 0x32, 0x7e, 0x00, 0xad, 0x31, 0xcf, 0x79, 0x2a, 0xca,
	0xa0, 0xde, 0x27, 0x83, 0x36, 0x5b, 0x43, 0x7a, 0x06, 0x7b, 0xf6, 0xf7, 0x4c, 0x48, 0x75, 0x23,
	0xee, 0x97, 0x42, 0x87, 0xd0, 0xb5, 0xaa, 0xf3, 0x52, 0x49, 0x65, 0xc4, 0x3f, 0xdb, 0xc4, 0x00,
	0x56, 0x15, 0x8b, 0x7b, 0xb9, 0x3c, 0x86, 0x8e, 0x55, 0xbd, 0x11, 0xfc, 0xe6, 0x77, 0x13, 0xef,
	0x4f, 0x13, 0xfa, 0x12, 0xda, 0xb6, 0x3a, 0x53, 0x59, 0xbe, 0x35, 0x6c, 0x1f, 0x9a, 0x17, 0xea,
	0xb3, 0xc8, 0x9d, 0xc5, 0x7f, 0x0c, 0x01, 0x3d, 0x84, 0x5d, 0x17, 0x93, 0x69, 0x83, 0x5f, 0x4f,
	0x6f, 0x33, 0xa1, 0xcf, 0x31, 0x6c, 0x98, 0x64, 0x66, 0x6b, 0x98, 0x0f, 0x8d, 0xb7, 0x5c, 0x0a,
	0x97, 0xd5, 0x61, 0xae, 0xa6, 0xef, 0x30, 0xea, 0xb2, 0xb8, 0x56, 0x3c, 0x39, 0xbf, 0xb2, 0x57,
	0xb8, 0xcd, 0x82, 0x42, 0xe3, 0x55, 0x76, 0x8d, 0x16, 0xdd, 0xe3, 0x07, 0x91, 0xd4, 0x69, 0x34,
	0xca, 0x8b, 0x99, 0xb1, 0x2c, 0x73, 0xbd, 0xf5, 0xf4, 0xb8, 0xfd, 0x3b, 0x2d, 0xe9, 0x7b, 0x5c,
	0xf0, 0xfa, 0x8f, 0x3e, 0x81, 0x56, 0x55, 0x06, 0xa4, 0x5f, 0x1f, 0x74, 0x8f, 0x77, 0x5d, 0xc8,
	0x46, 0xc2, 0xd6, 0x7d, 0xff, 0x21, 0x34, 0xed, 0x5e, 0x74, 0xe0, 0x39, 0x61, 0xc7, 0x09, 0x2d,
	0xc3, 0x90, 0xa7, 0x1f, 0x71, 0xe9, 0x9b, 0x0b, 0xac, 0x16, 0x4b, 0xfe, 0xba, 0xe5, 0x7d, 0x68,
	0x9e, 0x24, 0x32, 0xc3, 0x3d, 0xb4, 0x19, 0x02, 0xff, 0x00, 0x1a, 0xb6, 0xef, 0xce, 0xfb, 0x96,
	0xbf, 0xa3, 0xe9, 0x14, 0xaf, 0x41, 0x8f, 0x79, 0x3e, 0xb7, 0xc3, 0x38, 0x50, 0x4d, 0xdd, 0xf9,
	0x35, 0x35, 0x43, 0xfe, 0xce, 0x69, 0xed, 0x0c, 0x43, 0x59, 0x98, 0x79, 0xf5, 0x9a, 0x10, 0x9c,
	0x3e, 0x5a, 0xfc, 0x08, 0x6b, 0x5f, 0x97, 0x21, 0x59, 0x2c, 0x43, 0xf2, 0x7d, 0x19, 0x92, 0x2f,
	0xab, 0xb0, 0xb6, 0x58, 0x85, 0xb5, 0x6f, 0xab, 0xb0, 0xf6, 0xa1, 0x19, 0xbd, 0x90, 0x3a, 0x9d,
	0xec, 0xb8, 0x97, 0xff, 0xec, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0x4d, 0xd6, 0xe5, 0x4d,
	0x04, 0x00, 0x00,
}

func (m *TeamGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamAddMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamAddMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamAddMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Manager {
		i--
		if m.Manager {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.UserID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.TeamID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamRemoveMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamRemoveMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamRemoveMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.TeamID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamPromote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamPromote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamPromote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.TeamID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamDemote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamDemote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamDemote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.TeamID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamLeave) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamLeave) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TeamJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamJoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamJoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintTeam(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.TeamID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamListMembers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamListMembers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamListMembers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamEdit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamEdit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamEdit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTeam(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.TeamID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamUploadPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamUploadPhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamUploadPhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeam(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TeamID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamRemovePhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamRemovePhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamRemovePhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamMembers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamMembers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamMembers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeam(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeam(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TeamMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeam(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Admin {
		i--
		if m.Admin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.UserID != 0 {
		i = encodeVarintTeam(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamsMany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamsMany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamsMany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Empty {
		i--
		if m.Empty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeam(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeam(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTeam(dAtA []byte, offset int, v uint64) int {
	offset -= sovTeam(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TeamGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTeam(uint64(m.ID))
	}
	return n
}

func (m *TeamAddMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovTeam(uint64(m.TeamID))
	}
	if m.UserID != 0 {
		n += 1 + sovTeam(uint64(m.UserID))
	}
	if m.Manager {
		n += 2
	}
	return n
}

func (m *TeamRemoveMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovTeam(uint64(m.TeamID))
	}
	if m.UserID != 0 {
		n += 1 + sovTeam(uint64(m.UserID))
	}
	return n
}

func (m *TeamPromote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovTeam(uint64(m.TeamID))
	}
	if m.UserID != 0 {
		n += 1 + sovTeam(uint64(m.UserID))
	}
	return n
}

func (m *TeamDemote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovTeam(uint64(m.TeamID))
	}
	if m.UserID != 0 {
		n += 1 + sovTeam(uint64(m.UserID))
	}
	return n
}

func (m *TeamLeave) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovTeam(uint64(m.TeamID))
	}
	return n
}

func (m *TeamJoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovTeam(uint64(m.TeamID))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTeam(uint64(l))
	}
	return n
}

func (m *TeamListMembers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovTeam(uint64(m.TeamID))
	}
	return n
}

func (m *TeamEdit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovTeam(uint64(m.TeamID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTeam(uint64(l))
	}
	return n
}

func (m *TeamUploadPhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovTeam(uint64(m.TeamID))
	}
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovTeam(uint64(l))
	}
	return n
}

func (m *TeamRemovePhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovTeam(uint64(m.TeamID))
	}
	return n
}

func (m *TeamMembers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovTeam(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovTeam(uint64(l))
		}
	}
	return n
}

func (m *TeamMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovTeam(uint64(m.UserID))
	}
	if m.Admin {
		n += 2
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovTeam(uint64(l))
	}
	return n
}

func (m *TeamsMany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovTeam(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovTeam(uint64(l))
		}
	}
	if m.Empty {
		n += 2
	}
	return n
}

func sovTeam(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTeam(x uint64) (n int) {
	return sovTeam(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TeamGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamAddMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamAddMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamAddMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Manager = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamRemoveMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamRemoveMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamRemoveMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamPromote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamPromote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamPromote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamDemote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamDemote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamDemote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamListMembers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamListMembers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamListMembers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamEdit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamEdit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamEdit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamUploadPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamUploadPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamUploadPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &InputFile{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamRemovePhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamRemovePhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamRemovePhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamMembers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamMembers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamMembers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &TeamMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admin = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamsMany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamsMany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamsMany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Empty = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTeam(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTeam
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTeam
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTeam
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTeam
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTeam        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTeam          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTeam = fmt.Errorf("proto: unexpected end of group")
)
