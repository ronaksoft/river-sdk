// Code generated by Rony's protoc plugin; DO NOT EDIT.
// ProtoC ver. v3.15.8
// Rony ver. v0.12.22
// Source: client.proto

package msg

import (
	bytes "bytes"
	edge "github.com/ronaksoft/rony/edge"
	pools "github.com/ronaksoft/rony/pools"
	registry "github.com/ronaksoft/rony/registry"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	sync "sync"
)

var _ = pools.Imported

const C_ClientGetMediaHistory int64 = 1354863379

type poolClientGetMediaHistory struct {
	pool sync.Pool
}

func (p *poolClientGetMediaHistory) Get() *ClientGetMediaHistory {
	x, ok := p.pool.Get().(*ClientGetMediaHistory)
	if !ok {
		x = &ClientGetMediaHistory{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolClientGetMediaHistory) Put(x *ClientGetMediaHistory) {
	if x == nil {
		return
	}

	x.Cat = 0
	PoolInputPeer.Put(x.Peer)
	x.Limit = 0
	x.MaxID = 0
	x.MinID = 0

	p.pool.Put(x)
}

var PoolClientGetMediaHistory = poolClientGetMediaHistory{}

func (x *ClientGetMediaHistory) DeepCopy(z *ClientGetMediaHistory) {
	z.Cat = x.Cat
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.Limit = x.Limit
	z.MaxID = x.MaxID
	z.MinID = x.MinID
}

func (x *ClientGetMediaHistory) Clone() *ClientGetMediaHistory {
	z := &ClientGetMediaHistory{}
	x.DeepCopy(z)
	return z
}

func (x *ClientGetMediaHistory) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientGetMediaHistory) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientGetMediaHistory) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientGetMediaHistory) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientGetMediaHistory) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientGetMediaHistory, x)
}

const C_ClientSendMessageMedia int64 = 1095038539

type poolClientSendMessageMedia struct {
	pool sync.Pool
}

func (p *poolClientSendMessageMedia) Get() *ClientSendMessageMedia {
	x, ok := p.pool.Get().(*ClientSendMessageMedia)
	if !ok {
		x = &ClientSendMessageMedia{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolClientSendMessageMedia) Put(x *ClientSendMessageMedia) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.MediaType = 0
	x.Caption = ""
	x.FileName = ""
	x.FilePath = ""
	x.ThumbFilePath = ""
	x.FileMIME = ""
	x.ThumbMIME = ""
	x.ReplyTo = 0
	x.ClearDraft = false
	for _, z := range x.Attributes {
		PoolDocumentAttribute.Put(z)
	}
	x.Attributes = x.Attributes[:0]
	x.FileUploadID = ""
	x.ThumbUploadID = ""
	x.FileID = 0
	x.ThumbID = 0
	x.FileTotalParts = 0
	for _, z := range x.Entities {
		PoolMessageEntity.Put(z)
	}
	x.Entities = x.Entities[:0]
	x.TinyThumb = x.TinyThumb[:0]

	p.pool.Put(x)
}

var PoolClientSendMessageMedia = poolClientSendMessageMedia{}

func (x *ClientSendMessageMedia) DeepCopy(z *ClientSendMessageMedia) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.MediaType = x.MediaType
	z.Caption = x.Caption
	z.FileName = x.FileName
	z.FilePath = x.FilePath
	z.ThumbFilePath = x.ThumbFilePath
	z.FileMIME = x.FileMIME
	z.ThumbMIME = x.ThumbMIME
	z.ReplyTo = x.ReplyTo
	z.ClearDraft = x.ClearDraft
	for idx := range x.Attributes {
		if x.Attributes[idx] == nil {
			continue
		}
		xx := PoolDocumentAttribute.Get()
		x.Attributes[idx].DeepCopy(xx)
		z.Attributes = append(z.Attributes, xx)
	}
	z.FileUploadID = x.FileUploadID
	z.ThumbUploadID = x.ThumbUploadID
	z.FileID = x.FileID
	z.ThumbID = x.ThumbID
	z.FileTotalParts = x.FileTotalParts
	for idx := range x.Entities {
		if x.Entities[idx] == nil {
			continue
		}
		xx := PoolMessageEntity.Get()
		x.Entities[idx].DeepCopy(xx)
		z.Entities = append(z.Entities, xx)
	}
	z.TinyThumb = append(z.TinyThumb[:0], x.TinyThumb...)
}

func (x *ClientSendMessageMedia) Clone() *ClientSendMessageMedia {
	z := &ClientSendMessageMedia{}
	x.DeepCopy(z)
	return z
}

func (x *ClientSendMessageMedia) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientSendMessageMedia) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientSendMessageMedia) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientSendMessageMedia) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientSendMessageMedia) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientSendMessageMedia, x)
}

const C_ClientGlobalSearch int64 = 1742781507

type poolClientGlobalSearch struct {
	pool sync.Pool
}

func (p *poolClientGlobalSearch) Get() *ClientGlobalSearch {
	x, ok := p.pool.Get().(*ClientGlobalSearch)
	if !ok {
		x = &ClientGlobalSearch{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolClientGlobalSearch) Put(x *ClientGlobalSearch) {
	if x == nil {
		return
	}

	x.Text = ""
	x.LabelIDs = x.LabelIDs[:0]
	PoolInputPeer.Put(x.Peer)
	x.Limit = 0
	x.SenderID = 0

	p.pool.Put(x)
}

var PoolClientGlobalSearch = poolClientGlobalSearch{}

func (x *ClientGlobalSearch) DeepCopy(z *ClientGlobalSearch) {
	z.Text = x.Text
	z.LabelIDs = append(z.LabelIDs[:0], x.LabelIDs...)
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.Limit = x.Limit
	z.SenderID = x.SenderID
}

func (x *ClientGlobalSearch) Clone() *ClientGlobalSearch {
	z := &ClientGlobalSearch{}
	x.DeepCopy(z)
	return z
}

func (x *ClientGlobalSearch) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientGlobalSearch) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientGlobalSearch) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientGlobalSearch) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientGlobalSearch) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientGlobalSearch, x)
}

const C_ClientSearchResult int64 = 2957647709

type poolClientSearchResult struct {
	pool sync.Pool
}

func (p *poolClientSearchResult) Get() *ClientSearchResult {
	x, ok := p.pool.Get().(*ClientSearchResult)
	if !ok {
		x = &ClientSearchResult{}
	}

	return x
}

func (p *poolClientSearchResult) Put(x *ClientSearchResult) {
	if x == nil {
		return
	}

	for _, z := range x.Messages {
		PoolUserMessage.Put(z)
	}
	x.Messages = x.Messages[:0]
	for _, z := range x.Users {
		PoolUser.Put(z)
	}
	x.Users = x.Users[:0]
	for _, z := range x.Groups {
		PoolGroup.Put(z)
	}
	x.Groups = x.Groups[:0]
	for _, z := range x.MatchedUsers {
		PoolUser.Put(z)
	}
	x.MatchedUsers = x.MatchedUsers[:0]
	for _, z := range x.MatchedGroups {
		PoolGroup.Put(z)
	}
	x.MatchedGroups = x.MatchedGroups[:0]

	p.pool.Put(x)
}

var PoolClientSearchResult = poolClientSearchResult{}

func (x *ClientSearchResult) DeepCopy(z *ClientSearchResult) {
	for idx := range x.Messages {
		if x.Messages[idx] == nil {
			continue
		}
		xx := PoolUserMessage.Get()
		x.Messages[idx].DeepCopy(xx)
		z.Messages = append(z.Messages, xx)
	}
	for idx := range x.Users {
		if x.Users[idx] == nil {
			continue
		}
		xx := PoolUser.Get()
		x.Users[idx].DeepCopy(xx)
		z.Users = append(z.Users, xx)
	}
	for idx := range x.Groups {
		if x.Groups[idx] == nil {
			continue
		}
		xx := PoolGroup.Get()
		x.Groups[idx].DeepCopy(xx)
		z.Groups = append(z.Groups, xx)
	}
	for idx := range x.MatchedUsers {
		if x.MatchedUsers[idx] == nil {
			continue
		}
		xx := PoolUser.Get()
		x.MatchedUsers[idx].DeepCopy(xx)
		z.MatchedUsers = append(z.MatchedUsers, xx)
	}
	for idx := range x.MatchedGroups {
		if x.MatchedGroups[idx] == nil {
			continue
		}
		xx := PoolGroup.Get()
		x.MatchedGroups[idx].DeepCopy(xx)
		z.MatchedGroups = append(z.MatchedGroups, xx)
	}
}

func (x *ClientSearchResult) Clone() *ClientSearchResult {
	z := &ClientSearchResult{}
	x.DeepCopy(z)
	return z
}

func (x *ClientSearchResult) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientSearchResult) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientSearchResult) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientSearchResult) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientSearchResult) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientSearchResult, x)
}

const C_ClientContactSearch int64 = 1793449803

type poolClientContactSearch struct {
	pool sync.Pool
}

func (p *poolClientContactSearch) Get() *ClientContactSearch {
	x, ok := p.pool.Get().(*ClientContactSearch)
	if !ok {
		x = &ClientContactSearch{}
	}

	return x
}

func (p *poolClientContactSearch) Put(x *ClientContactSearch) {
	if x == nil {
		return
	}

	x.Text = ""

	p.pool.Put(x)
}

var PoolClientContactSearch = poolClientContactSearch{}

func (x *ClientContactSearch) DeepCopy(z *ClientContactSearch) {
	z.Text = x.Text
}

func (x *ClientContactSearch) Clone() *ClientContactSearch {
	z := &ClientContactSearch{}
	x.DeepCopy(z)
	return z
}

func (x *ClientContactSearch) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientContactSearch) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientContactSearch) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientContactSearch) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientContactSearch) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientContactSearch, x)
}

const C_ClientGetCachedMedia int64 = 856595701

type poolClientGetCachedMedia struct {
	pool sync.Pool
}

func (p *poolClientGetCachedMedia) Get() *ClientGetCachedMedia {
	x, ok := p.pool.Get().(*ClientGetCachedMedia)
	if !ok {
		x = &ClientGetCachedMedia{}
	}

	return x
}

func (p *poolClientGetCachedMedia) Put(x *ClientGetCachedMedia) {
	if x == nil {
		return
	}

	p.pool.Put(x)
}

var PoolClientGetCachedMedia = poolClientGetCachedMedia{}

func (x *ClientGetCachedMedia) DeepCopy(z *ClientGetCachedMedia) {
}

func (x *ClientGetCachedMedia) Clone() *ClientGetCachedMedia {
	z := &ClientGetCachedMedia{}
	x.DeepCopy(z)
	return z
}

func (x *ClientGetCachedMedia) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientGetCachedMedia) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientGetCachedMedia) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientGetCachedMedia) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientGetCachedMedia) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientGetCachedMedia, x)
}

const C_ClientCachedMediaInfo int64 = 442767121

type poolClientCachedMediaInfo struct {
	pool sync.Pool
}

func (p *poolClientCachedMediaInfo) Get() *ClientCachedMediaInfo {
	x, ok := p.pool.Get().(*ClientCachedMediaInfo)
	if !ok {
		x = &ClientCachedMediaInfo{}
	}

	return x
}

func (p *poolClientCachedMediaInfo) Put(x *ClientCachedMediaInfo) {
	if x == nil {
		return
	}

	for _, z := range x.MediaInfo {
		PoolClientPeerMediaInfo.Put(z)
	}
	x.MediaInfo = x.MediaInfo[:0]

	p.pool.Put(x)
}

var PoolClientCachedMediaInfo = poolClientCachedMediaInfo{}

func (x *ClientCachedMediaInfo) DeepCopy(z *ClientCachedMediaInfo) {
	for idx := range x.MediaInfo {
		if x.MediaInfo[idx] == nil {
			continue
		}
		xx := PoolClientPeerMediaInfo.Get()
		x.MediaInfo[idx].DeepCopy(xx)
		z.MediaInfo = append(z.MediaInfo, xx)
	}
}

func (x *ClientCachedMediaInfo) Clone() *ClientCachedMediaInfo {
	z := &ClientCachedMediaInfo{}
	x.DeepCopy(z)
	return z
}

func (x *ClientCachedMediaInfo) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientCachedMediaInfo) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientCachedMediaInfo) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientCachedMediaInfo) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientCachedMediaInfo) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientCachedMediaInfo, x)
}

const C_ClientPeerMediaInfo int64 = 2711408875

type poolClientPeerMediaInfo struct {
	pool sync.Pool
}

func (p *poolClientPeerMediaInfo) Get() *ClientPeerMediaInfo {
	x, ok := p.pool.Get().(*ClientPeerMediaInfo)
	if !ok {
		x = &ClientPeerMediaInfo{}
	}

	return x
}

func (p *poolClientPeerMediaInfo) Put(x *ClientPeerMediaInfo) {
	if x == nil {
		return
	}

	x.PeerID = 0
	x.PeerType = 0
	for _, z := range x.Media {
		PoolClientMediaSize.Put(z)
	}
	x.Media = x.Media[:0]

	p.pool.Put(x)
}

var PoolClientPeerMediaInfo = poolClientPeerMediaInfo{}

func (x *ClientPeerMediaInfo) DeepCopy(z *ClientPeerMediaInfo) {
	z.PeerID = x.PeerID
	z.PeerType = x.PeerType
	for idx := range x.Media {
		if x.Media[idx] == nil {
			continue
		}
		xx := PoolClientMediaSize.Get()
		x.Media[idx].DeepCopy(xx)
		z.Media = append(z.Media, xx)
	}
}

func (x *ClientPeerMediaInfo) Clone() *ClientPeerMediaInfo {
	z := &ClientPeerMediaInfo{}
	x.DeepCopy(z)
	return z
}

func (x *ClientPeerMediaInfo) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientPeerMediaInfo) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientPeerMediaInfo) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientPeerMediaInfo) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientPeerMediaInfo) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientPeerMediaInfo, x)
}

const C_ClientMediaSize int64 = 1541024203

type poolClientMediaSize struct {
	pool sync.Pool
}

func (p *poolClientMediaSize) Get() *ClientMediaSize {
	x, ok := p.pool.Get().(*ClientMediaSize)
	if !ok {
		x = &ClientMediaSize{}
	}

	return x
}

func (p *poolClientMediaSize) Put(x *ClientMediaSize) {
	if x == nil {
		return
	}

	x.MediaType = 0
	x.TotalSize = 0

	p.pool.Put(x)
}

var PoolClientMediaSize = poolClientMediaSize{}

func (x *ClientMediaSize) DeepCopy(z *ClientMediaSize) {
	z.MediaType = x.MediaType
	z.TotalSize = x.TotalSize
}

func (x *ClientMediaSize) Clone() *ClientMediaSize {
	z := &ClientMediaSize{}
	x.DeepCopy(z)
	return z
}

func (x *ClientMediaSize) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientMediaSize) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientMediaSize) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientMediaSize) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientMediaSize) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientMediaSize, x)
}

const C_ClientClearCachedMedia int64 = 1199927718

type poolClientClearCachedMedia struct {
	pool sync.Pool
}

func (p *poolClientClearCachedMedia) Get() *ClientClearCachedMedia {
	x, ok := p.pool.Get().(*ClientClearCachedMedia)
	if !ok {
		x = &ClientClearCachedMedia{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolClientClearCachedMedia) Put(x *ClientClearCachedMedia) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.MediaTypes = x.MediaTypes[:0]

	p.pool.Put(x)
}

var PoolClientClearCachedMedia = poolClientClearCachedMedia{}

func (x *ClientClearCachedMedia) DeepCopy(z *ClientClearCachedMedia) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.MediaTypes = append(z.MediaTypes[:0], x.MediaTypes...)
}

func (x *ClientClearCachedMedia) Clone() *ClientClearCachedMedia {
	z := &ClientClearCachedMedia{}
	x.DeepCopy(z)
	return z
}

func (x *ClientClearCachedMedia) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientClearCachedMedia) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientClearCachedMedia) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientClearCachedMedia) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientClearCachedMedia) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientClearCachedMedia, x)
}

const C_ClientGetLastBotKeyboard int64 = 177544569

type poolClientGetLastBotKeyboard struct {
	pool sync.Pool
}

func (p *poolClientGetLastBotKeyboard) Get() *ClientGetLastBotKeyboard {
	x, ok := p.pool.Get().(*ClientGetLastBotKeyboard)
	if !ok {
		x = &ClientGetLastBotKeyboard{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolClientGetLastBotKeyboard) Put(x *ClientGetLastBotKeyboard) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)

	p.pool.Put(x)
}

var PoolClientGetLastBotKeyboard = poolClientGetLastBotKeyboard{}

func (x *ClientGetLastBotKeyboard) DeepCopy(z *ClientGetLastBotKeyboard) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
}

func (x *ClientGetLastBotKeyboard) Clone() *ClientGetLastBotKeyboard {
	z := &ClientGetLastBotKeyboard{}
	x.DeepCopy(z)
	return z
}

func (x *ClientGetLastBotKeyboard) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientGetLastBotKeyboard) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientGetLastBotKeyboard) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientGetLastBotKeyboard) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientGetLastBotKeyboard) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientGetLastBotKeyboard, x)
}

const C_ClientGetAllDownloadedMedia int64 = 729082453

type poolClientGetAllDownloadedMedia struct {
	pool sync.Pool
}

func (p *poolClientGetAllDownloadedMedia) Get() *ClientGetAllDownloadedMedia {
	x, ok := p.pool.Get().(*ClientGetAllDownloadedMedia)
	if !ok {
		x = &ClientGetAllDownloadedMedia{}
	}

	return x
}

func (p *poolClientGetAllDownloadedMedia) Put(x *ClientGetAllDownloadedMedia) {
	if x == nil {
		return
	}

	x.MediaType = 0

	p.pool.Put(x)
}

var PoolClientGetAllDownloadedMedia = poolClientGetAllDownloadedMedia{}

func (x *ClientGetAllDownloadedMedia) DeepCopy(z *ClientGetAllDownloadedMedia) {
	z.MediaType = x.MediaType
}

func (x *ClientGetAllDownloadedMedia) Clone() *ClientGetAllDownloadedMedia {
	z := &ClientGetAllDownloadedMedia{}
	x.DeepCopy(z)
	return z
}

func (x *ClientGetAllDownloadedMedia) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientGetAllDownloadedMedia) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientGetAllDownloadedMedia) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientGetAllDownloadedMedia) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientGetAllDownloadedMedia) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientGetAllDownloadedMedia, x)
}

const C_ClientGetRecentSearch int64 = 2622949116

type poolClientGetRecentSearch struct {
	pool sync.Pool
}

func (p *poolClientGetRecentSearch) Get() *ClientGetRecentSearch {
	x, ok := p.pool.Get().(*ClientGetRecentSearch)
	if !ok {
		x = &ClientGetRecentSearch{}
	}

	return x
}

func (p *poolClientGetRecentSearch) Put(x *ClientGetRecentSearch) {
	if x == nil {
		return
	}

	x.Limit = 0

	p.pool.Put(x)
}

var PoolClientGetRecentSearch = poolClientGetRecentSearch{}

func (x *ClientGetRecentSearch) DeepCopy(z *ClientGetRecentSearch) {
	z.Limit = x.Limit
}

func (x *ClientGetRecentSearch) Clone() *ClientGetRecentSearch {
	z := &ClientGetRecentSearch{}
	x.DeepCopy(z)
	return z
}

func (x *ClientGetRecentSearch) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientGetRecentSearch) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientGetRecentSearch) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientGetRecentSearch) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientGetRecentSearch) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientGetRecentSearch, x)
}

const C_ClientRecentSearch int64 = 2069517672

type poolClientRecentSearch struct {
	pool sync.Pool
}

func (p *poolClientRecentSearch) Get() *ClientRecentSearch {
	x, ok := p.pool.Get().(*ClientRecentSearch)
	if !ok {
		x = &ClientRecentSearch{}
	}

	x.Peer = PoolPeer.Get()

	return x
}

func (p *poolClientRecentSearch) Put(x *ClientRecentSearch) {
	if x == nil {
		return
	}

	PoolPeer.Put(x.Peer)
	x.Date = 0

	p.pool.Put(x)
}

var PoolClientRecentSearch = poolClientRecentSearch{}

func (x *ClientRecentSearch) DeepCopy(z *ClientRecentSearch) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.Date = x.Date
}

func (x *ClientRecentSearch) Clone() *ClientRecentSearch {
	z := &ClientRecentSearch{}
	x.DeepCopy(z)
	return z
}

func (x *ClientRecentSearch) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientRecentSearch) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientRecentSearch) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientRecentSearch) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientRecentSearch) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientRecentSearch, x)
}

const C_ClientRecentSearchMany int64 = 3236847495

type poolClientRecentSearchMany struct {
	pool sync.Pool
}

func (p *poolClientRecentSearchMany) Get() *ClientRecentSearchMany {
	x, ok := p.pool.Get().(*ClientRecentSearchMany)
	if !ok {
		x = &ClientRecentSearchMany{}
	}

	return x
}

func (p *poolClientRecentSearchMany) Put(x *ClientRecentSearchMany) {
	if x == nil {
		return
	}

	for _, z := range x.RecentSearches {
		PoolClientRecentSearch.Put(z)
	}
	x.RecentSearches = x.RecentSearches[:0]
	for _, z := range x.Users {
		PoolUser.Put(z)
	}
	x.Users = x.Users[:0]
	for _, z := range x.Groups {
		PoolGroup.Put(z)
	}
	x.Groups = x.Groups[:0]

	p.pool.Put(x)
}

var PoolClientRecentSearchMany = poolClientRecentSearchMany{}

func (x *ClientRecentSearchMany) DeepCopy(z *ClientRecentSearchMany) {
	for idx := range x.RecentSearches {
		if x.RecentSearches[idx] == nil {
			continue
		}
		xx := PoolClientRecentSearch.Get()
		x.RecentSearches[idx].DeepCopy(xx)
		z.RecentSearches = append(z.RecentSearches, xx)
	}
	for idx := range x.Users {
		if x.Users[idx] == nil {
			continue
		}
		xx := PoolUser.Get()
		x.Users[idx].DeepCopy(xx)
		z.Users = append(z.Users, xx)
	}
	for idx := range x.Groups {
		if x.Groups[idx] == nil {
			continue
		}
		xx := PoolGroup.Get()
		x.Groups[idx].DeepCopy(xx)
		z.Groups = append(z.Groups, xx)
	}
}

func (x *ClientRecentSearchMany) Clone() *ClientRecentSearchMany {
	z := &ClientRecentSearchMany{}
	x.DeepCopy(z)
	return z
}

func (x *ClientRecentSearchMany) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientRecentSearchMany) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientRecentSearchMany) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientRecentSearchMany) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientRecentSearchMany) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientRecentSearchMany, x)
}

const C_ClientPutRecentSearch int64 = 629582533

type poolClientPutRecentSearch struct {
	pool sync.Pool
}

func (p *poolClientPutRecentSearch) Get() *ClientPutRecentSearch {
	x, ok := p.pool.Get().(*ClientPutRecentSearch)
	if !ok {
		x = &ClientPutRecentSearch{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolClientPutRecentSearch) Put(x *ClientPutRecentSearch) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)

	p.pool.Put(x)
}

var PoolClientPutRecentSearch = poolClientPutRecentSearch{}

func (x *ClientPutRecentSearch) DeepCopy(z *ClientPutRecentSearch) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
}

func (x *ClientPutRecentSearch) Clone() *ClientPutRecentSearch {
	z := &ClientPutRecentSearch{}
	x.DeepCopy(z)
	return z
}

func (x *ClientPutRecentSearch) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientPutRecentSearch) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientPutRecentSearch) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientPutRecentSearch) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientPutRecentSearch) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientPutRecentSearch, x)
}

const C_ClientRemoveRecentSearch int64 = 1281490259

type poolClientRemoveRecentSearch struct {
	pool sync.Pool
}

func (p *poolClientRemoveRecentSearch) Get() *ClientRemoveRecentSearch {
	x, ok := p.pool.Get().(*ClientRemoveRecentSearch)
	if !ok {
		x = &ClientRemoveRecentSearch{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolClientRemoveRecentSearch) Put(x *ClientRemoveRecentSearch) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)

	p.pool.Put(x)
}

var PoolClientRemoveRecentSearch = poolClientRemoveRecentSearch{}

func (x *ClientRemoveRecentSearch) DeepCopy(z *ClientRemoveRecentSearch) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
}

func (x *ClientRemoveRecentSearch) Clone() *ClientRemoveRecentSearch {
	z := &ClientRemoveRecentSearch{}
	x.DeepCopy(z)
	return z
}

func (x *ClientRemoveRecentSearch) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientRemoveRecentSearch) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientRemoveRecentSearch) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientRemoveRecentSearch) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientRemoveRecentSearch) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientRemoveRecentSearch, x)
}

const C_ClientRemoveAllRecentSearches int64 = 3599155822

type poolClientRemoveAllRecentSearches struct {
	pool sync.Pool
}

func (p *poolClientRemoveAllRecentSearches) Get() *ClientRemoveAllRecentSearches {
	x, ok := p.pool.Get().(*ClientRemoveAllRecentSearches)
	if !ok {
		x = &ClientRemoveAllRecentSearches{}
	}

	return x
}

func (p *poolClientRemoveAllRecentSearches) Put(x *ClientRemoveAllRecentSearches) {
	if x == nil {
		return
	}

	x.Extra = false

	p.pool.Put(x)
}

var PoolClientRemoveAllRecentSearches = poolClientRemoveAllRecentSearches{}

func (x *ClientRemoveAllRecentSearches) DeepCopy(z *ClientRemoveAllRecentSearches) {
	z.Extra = x.Extra
}

func (x *ClientRemoveAllRecentSearches) Clone() *ClientRemoveAllRecentSearches {
	z := &ClientRemoveAllRecentSearches{}
	x.DeepCopy(z)
	return z
}

func (x *ClientRemoveAllRecentSearches) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientRemoveAllRecentSearches) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientRemoveAllRecentSearches) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientRemoveAllRecentSearches) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientRemoveAllRecentSearches) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientRemoveAllRecentSearches, x)
}

const C_ClientGetSavedGifs int64 = 3028067090

type poolClientGetSavedGifs struct {
	pool sync.Pool
}

func (p *poolClientGetSavedGifs) Get() *ClientGetSavedGifs {
	x, ok := p.pool.Get().(*ClientGetSavedGifs)
	if !ok {
		x = &ClientGetSavedGifs{}
	}

	return x
}

func (p *poolClientGetSavedGifs) Put(x *ClientGetSavedGifs) {
	if x == nil {
		return
	}

	p.pool.Put(x)
}

var PoolClientGetSavedGifs = poolClientGetSavedGifs{}

func (x *ClientGetSavedGifs) DeepCopy(z *ClientGetSavedGifs) {
}

func (x *ClientGetSavedGifs) Clone() *ClientGetSavedGifs {
	z := &ClientGetSavedGifs{}
	x.DeepCopy(z)
	return z
}

func (x *ClientGetSavedGifs) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientGetSavedGifs) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientGetSavedGifs) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientGetSavedGifs) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientGetSavedGifs) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientGetSavedGifs, x)
}

const C_ClientGetTeamCounters int64 = 3403301140

type poolClientGetTeamCounters struct {
	pool sync.Pool
}

func (p *poolClientGetTeamCounters) Get() *ClientGetTeamCounters {
	x, ok := p.pool.Get().(*ClientGetTeamCounters)
	if !ok {
		x = &ClientGetTeamCounters{}
	}

	x.Team = PoolInputTeam.Get()

	return x
}

func (p *poolClientGetTeamCounters) Put(x *ClientGetTeamCounters) {
	if x == nil {
		return
	}

	PoolInputTeam.Put(x.Team)
	x.WithMutes = false

	p.pool.Put(x)
}

var PoolClientGetTeamCounters = poolClientGetTeamCounters{}

func (x *ClientGetTeamCounters) DeepCopy(z *ClientGetTeamCounters) {
	if x.Team != nil {
		if z.Team == nil {
			z.Team = PoolInputTeam.Get()
		}
		x.Team.DeepCopy(z.Team)
	} else {
		PoolInputTeam.Put(z.Team)
		z.Team = nil
	}
	z.WithMutes = x.WithMutes
}

func (x *ClientGetTeamCounters) Clone() *ClientGetTeamCounters {
	z := &ClientGetTeamCounters{}
	x.DeepCopy(z)
	return z
}

func (x *ClientGetTeamCounters) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientGetTeamCounters) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientGetTeamCounters) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientGetTeamCounters) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientGetTeamCounters) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientGetTeamCounters, x)
}

const C_ClientTeamCounters int64 = 769069696

type poolClientTeamCounters struct {
	pool sync.Pool
}

func (p *poolClientTeamCounters) Get() *ClientTeamCounters {
	x, ok := p.pool.Get().(*ClientTeamCounters)
	if !ok {
		x = &ClientTeamCounters{}
	}

	return x
}

func (p *poolClientTeamCounters) Put(x *ClientTeamCounters) {
	if x == nil {
		return
	}

	x.UnreadCount = 0
	x.MentionCount = 0

	p.pool.Put(x)
}

var PoolClientTeamCounters = poolClientTeamCounters{}

func (x *ClientTeamCounters) DeepCopy(z *ClientTeamCounters) {
	z.UnreadCount = x.UnreadCount
	z.MentionCount = x.MentionCount
}

func (x *ClientTeamCounters) Clone() *ClientTeamCounters {
	z := &ClientTeamCounters{}
	x.DeepCopy(z)
	return z
}

func (x *ClientTeamCounters) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientTeamCounters) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientTeamCounters) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientTeamCounters) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientTeamCounters) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientTeamCounters, x)
}

const C_ClientPendingMessage int64 = 2164891929

type poolClientPendingMessage struct {
	pool sync.Pool
}

func (p *poolClientPendingMessage) Get() *ClientPendingMessage {
	x, ok := p.pool.Get().(*ClientPendingMessage)
	if !ok {
		x = &ClientPendingMessage{}
	}

	x.ServerFile = PoolFileLocation.Get()

	return x
}

func (p *poolClientPendingMessage) Put(x *ClientPendingMessage) {
	if x == nil {
		return
	}

	x.ID = 0
	x.RequestID = 0
	x.PeerID = 0
	x.PeerType = 0
	x.AccessHash = 0
	x.CreatedOn = 0
	x.ReplyTo = 0
	x.Body = ""
	x.SenderID = 0
	for _, z := range x.Entities {
		PoolMessageEntity.Put(z)
	}
	x.Entities = x.Entities[:0]
	x.MediaType = 0
	x.Media = x.Media[:0]
	x.ClearDraft = false
	x.FileUploadID = ""
	x.ThumbUploadID = ""
	x.FileID = 0
	x.ThumbID = 0
	x.Sha256 = x.Sha256[:0]
	PoolFileLocation.Put(x.ServerFile)
	x.TeamID = 0
	x.TeamAccessHash = 0
	x.TinyThumb = x.TinyThumb[:0]

	p.pool.Put(x)
}

var PoolClientPendingMessage = poolClientPendingMessage{}

func (x *ClientPendingMessage) DeepCopy(z *ClientPendingMessage) {
	z.ID = x.ID
	z.RequestID = x.RequestID
	z.PeerID = x.PeerID
	z.PeerType = x.PeerType
	z.AccessHash = x.AccessHash
	z.CreatedOn = x.CreatedOn
	z.ReplyTo = x.ReplyTo
	z.Body = x.Body
	z.SenderID = x.SenderID
	for idx := range x.Entities {
		if x.Entities[idx] == nil {
			continue
		}
		xx := PoolMessageEntity.Get()
		x.Entities[idx].DeepCopy(xx)
		z.Entities = append(z.Entities, xx)
	}
	z.MediaType = x.MediaType
	z.Media = append(z.Media[:0], x.Media...)
	z.ClearDraft = x.ClearDraft
	z.FileUploadID = x.FileUploadID
	z.ThumbUploadID = x.ThumbUploadID
	z.FileID = x.FileID
	z.ThumbID = x.ThumbID
	z.Sha256 = append(z.Sha256[:0], x.Sha256...)
	if x.ServerFile != nil {
		if z.ServerFile == nil {
			z.ServerFile = PoolFileLocation.Get()
		}
		x.ServerFile.DeepCopy(z.ServerFile)
	} else {
		PoolFileLocation.Put(z.ServerFile)
		z.ServerFile = nil
	}
	z.TeamID = x.TeamID
	z.TeamAccessHash = x.TeamAccessHash
	z.TinyThumb = append(z.TinyThumb[:0], x.TinyThumb...)
}

func (x *ClientPendingMessage) Clone() *ClientPendingMessage {
	z := &ClientPendingMessage{}
	x.DeepCopy(z)
	return z
}

func (x *ClientPendingMessage) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientPendingMessage) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientPendingMessage) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientPendingMessage) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientPendingMessage) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientPendingMessage, x)
}

const C_ClientFilesMany int64 = 1414992553

type poolClientFilesMany struct {
	pool sync.Pool
}

func (p *poolClientFilesMany) Get() *ClientFilesMany {
	x, ok := p.pool.Get().(*ClientFilesMany)
	if !ok {
		x = &ClientFilesMany{}
	}

	return x
}

func (p *poolClientFilesMany) Put(x *ClientFilesMany) {
	if x == nil {
		return
	}

	for _, z := range x.Gifs {
		PoolClientFile.Put(z)
	}
	x.Gifs = x.Gifs[:0]
	x.Total = 0

	p.pool.Put(x)
}

var PoolClientFilesMany = poolClientFilesMany{}

func (x *ClientFilesMany) DeepCopy(z *ClientFilesMany) {
	for idx := range x.Gifs {
		if x.Gifs[idx] == nil {
			continue
		}
		xx := PoolClientFile.Get()
		x.Gifs[idx].DeepCopy(xx)
		z.Gifs = append(z.Gifs, xx)
	}
	z.Total = x.Total
}

func (x *ClientFilesMany) Clone() *ClientFilesMany {
	z := &ClientFilesMany{}
	x.DeepCopy(z)
	return z
}

func (x *ClientFilesMany) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientFilesMany) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientFilesMany) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientFilesMany) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientFilesMany) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientFilesMany, x)
}

const C_ClientFile int64 = 155127968

type poolClientFile struct {
	pool sync.Pool
}

func (p *poolClientFile) Get() *ClientFile {
	x, ok := p.pool.Get().(*ClientFile)
	if !ok {
		x = &ClientFile{}
	}

	return x
}

func (p *poolClientFile) Put(x *ClientFile) {
	if x == nil {
		return
	}

	x.ClusterID = 0
	x.FileID = 0
	x.AccessHash = 0
	x.Type = 0
	x.MimeType = ""
	x.UserID = 0
	x.GroupID = 0
	x.FileSize = 0
	x.MessageID = 0
	x.PeerID = 0
	x.PeerType = 0
	x.Version = 0
	x.Extension = ""
	x.MD5Checksum = ""
	x.WallpaperID = 0
	for _, z := range x.Attributes {
		PoolDocumentAttribute.Put(z)
	}
	x.Attributes = x.Attributes[:0]

	p.pool.Put(x)
}

var PoolClientFile = poolClientFile{}

func (x *ClientFile) DeepCopy(z *ClientFile) {
	z.ClusterID = x.ClusterID
	z.FileID = x.FileID
	z.AccessHash = x.AccessHash
	z.Type = x.Type
	z.MimeType = x.MimeType
	z.UserID = x.UserID
	z.GroupID = x.GroupID
	z.FileSize = x.FileSize
	z.MessageID = x.MessageID
	z.PeerID = x.PeerID
	z.PeerType = x.PeerType
	z.Version = x.Version
	z.Extension = x.Extension
	z.MD5Checksum = x.MD5Checksum
	z.WallpaperID = x.WallpaperID
	for idx := range x.Attributes {
		if x.Attributes[idx] == nil {
			continue
		}
		xx := PoolDocumentAttribute.Get()
		x.Attributes[idx].DeepCopy(xx)
		z.Attributes = append(z.Attributes, xx)
	}
}

func (x *ClientFile) Clone() *ClientFile {
	z := &ClientFile{}
	x.DeepCopy(z)
	return z
}

func (x *ClientFile) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientFile) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientFile) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientFile) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientFile) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientFile, x)
}

const C_ClientFileRequest int64 = 3995993899

type poolClientFileRequest struct {
	pool sync.Pool
}

func (p *poolClientFileRequest) Get() *ClientFileRequest {
	x, ok := p.pool.Get().(*ClientFileRequest)
	if !ok {
		x = &ClientFileRequest{}
	}

	x.Next = PoolClientFileRequest.Get()

	return x
}

func (p *poolClientFileRequest) Put(x *ClientFileRequest) {
	if x == nil {
		return
	}

	PoolClientFileRequest.Put(x.Next)
	x.PeerID = 0
	x.PeerType = 0
	x.MessageID = 0
	x.ClusterID = 0
	x.FileID = 0
	x.AccessHash = 0
	x.Version = 0
	x.FileSize = 0
	x.ChunkSize = 0
	x.FinishedParts = x.FinishedParts[:0]
	x.TotalParts = 0
	x.SkipDelegateCall = false
	x.FilePath = ""
	x.TempPath = ""
	x.CheckSha256 = false
	x.FileSha256 = x.FileSha256[:0]
	x.IsProfilePhoto = false
	x.GroupID = 0
	x.ThumbID = 0
	x.ThumbPath = ""

	p.pool.Put(x)
}

var PoolClientFileRequest = poolClientFileRequest{}

func (x *ClientFileRequest) DeepCopy(z *ClientFileRequest) {
	if x.Next != nil {
		if z.Next == nil {
			z.Next = PoolClientFileRequest.Get()
		}
		x.Next.DeepCopy(z.Next)
	} else {
		PoolClientFileRequest.Put(z.Next)
		z.Next = nil
	}
	z.PeerID = x.PeerID
	z.PeerType = x.PeerType
	z.MessageID = x.MessageID
	z.ClusterID = x.ClusterID
	z.FileID = x.FileID
	z.AccessHash = x.AccessHash
	z.Version = x.Version
	z.FileSize = x.FileSize
	z.ChunkSize = x.ChunkSize
	z.FinishedParts = append(z.FinishedParts[:0], x.FinishedParts...)
	z.TotalParts = x.TotalParts
	z.SkipDelegateCall = x.SkipDelegateCall
	z.FilePath = x.FilePath
	z.TempPath = x.TempPath
	z.CheckSha256 = x.CheckSha256
	z.FileSha256 = append(z.FileSha256[:0], x.FileSha256...)
	z.IsProfilePhoto = x.IsProfilePhoto
	z.GroupID = x.GroupID
	z.ThumbID = x.ThumbID
	z.ThumbPath = x.ThumbPath
}

func (x *ClientFileRequest) Clone() *ClientFileRequest {
	z := &ClientFileRequest{}
	x.DeepCopy(z)
	return z
}

func (x *ClientFileRequest) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientFileRequest) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientFileRequest) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientFileRequest) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientFileRequest) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientFileRequest, x)
}

const C_ClientFileStatus int64 = 2731095358

type poolClientFileStatus struct {
	pool sync.Pool
}

func (p *poolClientFileStatus) Get() *ClientFileStatus {
	x, ok := p.pool.Get().(*ClientFileStatus)
	if !ok {
		x = &ClientFileStatus{}
	}

	return x
}

func (p *poolClientFileStatus) Put(x *ClientFileStatus) {
	if x == nil {
		return
	}

	x.Status = 0
	x.Progress = 0
	x.FilePath = ""

	p.pool.Put(x)
}

var PoolClientFileStatus = poolClientFileStatus{}

func (x *ClientFileStatus) DeepCopy(z *ClientFileStatus) {
	z.Status = x.Status
	z.Progress = x.Progress
	z.FilePath = x.FilePath
}

func (x *ClientFileStatus) Clone() *ClientFileStatus {
	z := &ClientFileStatus{}
	x.DeepCopy(z)
	return z
}

func (x *ClientFileStatus) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientFileStatus) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientFileStatus) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientFileStatus) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientFileStatus) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientFileStatus, x)
}

const C_ClientGetFrequentReactions int64 = 2954334910

type poolClientGetFrequentReactions struct {
	pool sync.Pool
}

func (p *poolClientGetFrequentReactions) Get() *ClientGetFrequentReactions {
	x, ok := p.pool.Get().(*ClientGetFrequentReactions)
	if !ok {
		x = &ClientGetFrequentReactions{}
	}

	return x
}

func (p *poolClientGetFrequentReactions) Put(x *ClientGetFrequentReactions) {
	if x == nil {
		return
	}

	p.pool.Put(x)
}

var PoolClientGetFrequentReactions = poolClientGetFrequentReactions{}

func (x *ClientGetFrequentReactions) DeepCopy(z *ClientGetFrequentReactions) {
}

func (x *ClientGetFrequentReactions) Clone() *ClientGetFrequentReactions {
	z := &ClientGetFrequentReactions{}
	x.DeepCopy(z)
	return z
}

func (x *ClientGetFrequentReactions) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientGetFrequentReactions) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientGetFrequentReactions) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientGetFrequentReactions) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientGetFrequentReactions) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientGetFrequentReactions, x)
}

const C_ClientFrequentReactions int64 = 1422804314

type poolClientFrequentReactions struct {
	pool sync.Pool
}

func (p *poolClientFrequentReactions) Get() *ClientFrequentReactions {
	x, ok := p.pool.Get().(*ClientFrequentReactions)
	if !ok {
		x = &ClientFrequentReactions{}
	}

	return x
}

func (p *poolClientFrequentReactions) Put(x *ClientFrequentReactions) {
	if x == nil {
		return
	}

	x.Reactions = x.Reactions[:0]

	p.pool.Put(x)
}

var PoolClientFrequentReactions = poolClientFrequentReactions{}

func (x *ClientFrequentReactions) DeepCopy(z *ClientFrequentReactions) {
	z.Reactions = append(z.Reactions[:0], x.Reactions...)
}

func (x *ClientFrequentReactions) Clone() *ClientFrequentReactions {
	z := &ClientFrequentReactions{}
	x.DeepCopy(z)
	return z
}

func (x *ClientFrequentReactions) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientFrequentReactions) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientFrequentReactions) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientFrequentReactions) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientFrequentReactions) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientFrequentReactions, x)
}

const C_ClientDismissNotification int64 = 1698398006

type poolClientDismissNotification struct {
	pool sync.Pool
}

func (p *poolClientDismissNotification) Get() *ClientDismissNotification {
	x, ok := p.pool.Get().(*ClientDismissNotification)
	if !ok {
		x = &ClientDismissNotification{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolClientDismissNotification) Put(x *ClientDismissNotification) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.Ts = 0

	p.pool.Put(x)
}

var PoolClientDismissNotification = poolClientDismissNotification{}

func (x *ClientDismissNotification) DeepCopy(z *ClientDismissNotification) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.Ts = x.Ts
}

func (x *ClientDismissNotification) Clone() *ClientDismissNotification {
	z := &ClientDismissNotification{}
	x.DeepCopy(z)
	return z
}

func (x *ClientDismissNotification) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientDismissNotification) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientDismissNotification) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientDismissNotification) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientDismissNotification) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientDismissNotification, x)
}

const C_ClientGetNotificationDismissTime int64 = 4106535811

type poolClientGetNotificationDismissTime struct {
	pool sync.Pool
}

func (p *poolClientGetNotificationDismissTime) Get() *ClientGetNotificationDismissTime {
	x, ok := p.pool.Get().(*ClientGetNotificationDismissTime)
	if !ok {
		x = &ClientGetNotificationDismissTime{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolClientGetNotificationDismissTime) Put(x *ClientGetNotificationDismissTime) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)

	p.pool.Put(x)
}

var PoolClientGetNotificationDismissTime = poolClientGetNotificationDismissTime{}

func (x *ClientGetNotificationDismissTime) DeepCopy(z *ClientGetNotificationDismissTime) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
}

func (x *ClientGetNotificationDismissTime) Clone() *ClientGetNotificationDismissTime {
	z := &ClientGetNotificationDismissTime{}
	x.DeepCopy(z)
	return z
}

func (x *ClientGetNotificationDismissTime) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientGetNotificationDismissTime) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientGetNotificationDismissTime) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientGetNotificationDismissTime) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientGetNotificationDismissTime) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientGetNotificationDismissTime, x)
}

const C_ClientNotificationDismissTime int64 = 3077814065

type poolClientNotificationDismissTime struct {
	pool sync.Pool
}

func (p *poolClientNotificationDismissTime) Get() *ClientNotificationDismissTime {
	x, ok := p.pool.Get().(*ClientNotificationDismissTime)
	if !ok {
		x = &ClientNotificationDismissTime{}
	}

	return x
}

func (p *poolClientNotificationDismissTime) Put(x *ClientNotificationDismissTime) {
	if x == nil {
		return
	}

	x.Ts = 0

	p.pool.Put(x)
}

var PoolClientNotificationDismissTime = poolClientNotificationDismissTime{}

func (x *ClientNotificationDismissTime) DeepCopy(z *ClientNotificationDismissTime) {
	z.Ts = x.Ts
}

func (x *ClientNotificationDismissTime) Clone() *ClientNotificationDismissTime {
	z := &ClientNotificationDismissTime{}
	x.DeepCopy(z)
	return z
}

func (x *ClientNotificationDismissTime) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientNotificationDismissTime) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientNotificationDismissTime) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientNotificationDismissTime) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientNotificationDismissTime) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientNotificationDismissTime, x)
}

const C_ClientError int64 = 2520362971

type poolClientError struct {
	pool sync.Pool
}

func (p *poolClientError) Get() *ClientError {
	x, ok := p.pool.Get().(*ClientError)
	if !ok {
		x = &ClientError{}
	}

	return x
}

func (p *poolClientError) Put(x *ClientError) {
	if x == nil {
		return
	}

	x.Error = ""

	p.pool.Put(x)
}

var PoolClientError = poolClientError{}

func (x *ClientError) DeepCopy(z *ClientError) {
	z.Error = x.Error
}

func (x *ClientError) Clone() *ClientError {
	z := &ClientError{}
	x.DeepCopy(z)
	return z
}

func (x *ClientError) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ClientError) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ClientError) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ClientError) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ClientError) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ClientError, x)
}

func init() {
	registry.RegisterConstructor(1354863379, "ClientGetMediaHistory")
	registry.RegisterConstructor(1095038539, "ClientSendMessageMedia")
	registry.RegisterConstructor(1742781507, "ClientGlobalSearch")
	registry.RegisterConstructor(2957647709, "ClientSearchResult")
	registry.RegisterConstructor(1793449803, "ClientContactSearch")
	registry.RegisterConstructor(856595701, "ClientGetCachedMedia")
	registry.RegisterConstructor(442767121, "ClientCachedMediaInfo")
	registry.RegisterConstructor(2711408875, "ClientPeerMediaInfo")
	registry.RegisterConstructor(1541024203, "ClientMediaSize")
	registry.RegisterConstructor(1199927718, "ClientClearCachedMedia")
	registry.RegisterConstructor(177544569, "ClientGetLastBotKeyboard")
	registry.RegisterConstructor(729082453, "ClientGetAllDownloadedMedia")
	registry.RegisterConstructor(2622949116, "ClientGetRecentSearch")
	registry.RegisterConstructor(2069517672, "ClientRecentSearch")
	registry.RegisterConstructor(3236847495, "ClientRecentSearchMany")
	registry.RegisterConstructor(629582533, "ClientPutRecentSearch")
	registry.RegisterConstructor(1281490259, "ClientRemoveRecentSearch")
	registry.RegisterConstructor(3599155822, "ClientRemoveAllRecentSearches")
	registry.RegisterConstructor(3028067090, "ClientGetSavedGifs")
	registry.RegisterConstructor(3403301140, "ClientGetTeamCounters")
	registry.RegisterConstructor(769069696, "ClientTeamCounters")
	registry.RegisterConstructor(2164891929, "ClientPendingMessage")
	registry.RegisterConstructor(1414992553, "ClientFilesMany")
	registry.RegisterConstructor(155127968, "ClientFile")
	registry.RegisterConstructor(3995993899, "ClientFileRequest")
	registry.RegisterConstructor(2731095358, "ClientFileStatus")
	registry.RegisterConstructor(2954334910, "ClientGetFrequentReactions")
	registry.RegisterConstructor(1422804314, "ClientFrequentReactions")
	registry.RegisterConstructor(1698398006, "ClientDismissNotification")
	registry.RegisterConstructor(4106535811, "ClientGetNotificationDismissTime")
	registry.RegisterConstructor(3077814065, "ClientNotificationDismissTime")
	registry.RegisterConstructor(2520362971, "ClientError")
}

var _ = bytes.MinRead
