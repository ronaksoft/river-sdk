// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: calendar.proto

package msg

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RecurringPeriod
type RecurringPeriod int32

const (
	RecurringNone    RecurringPeriod = 0
	RecurringDaily   RecurringPeriod = 1
	RecurringWeekly  RecurringPeriod = 2
	RecurringMonthly RecurringPeriod = 3
	RecurringYearly  RecurringPeriod = 4
)

var RecurringPeriod_name = map[int32]string{
	0: "RecurringNone",
	1: "RecurringDaily",
	2: "RecurringWeekly",
	3: "RecurringMonthly",
	4: "RecurringYearly",
}

var RecurringPeriod_value = map[string]int32{
	"RecurringNone":    0,
	"RecurringDaily":   1,
	"RecurringWeekly":  2,
	"RecurringMonthly": 3,
	"RecurringYearly":  4,
}

func (x RecurringPeriod) String() string {
	return proto.EnumName(RecurringPeriod_name, int32(x))
}

func (RecurringPeriod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{0}
}

// CalendarEditPolicy
type CalendarEditPolicy int32

const (
	CalendarEditOne       CalendarEditPolicy = 0
	CalendarEditFollowing CalendarEditPolicy = 1
	CalendarEditAll       CalendarEditPolicy = 2
)

var CalendarEditPolicy_name = map[int32]string{
	0: "CalendarEditOne",
	1: "CalendarEditFollowing",
	2: "CalendarEditAll",
}

var CalendarEditPolicy_value = map[string]int32{
	"CalendarEditOne":       0,
	"CalendarEditFollowing": 1,
	"CalendarEditAll":       2,
}

func (x CalendarEditPolicy) String() string {
	return proto.EnumName(CalendarEditPolicy_name, int32(x))
}

func (CalendarEditPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{1}
}

// CalendarGetEvents
// @Function
// @Return: CalendarEventInstances
type CalendarGetEvents struct {
	From   int64 `protobuf:"varint,1,opt,name=From,proto3" json:"From,omitempty"`
	To     int64 `protobuf:"varint,2,opt,name=To,proto3" json:"To,omitempty"`
	Filter int32 `protobuf:"varint,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (m *CalendarGetEvents) Reset()         { *m = CalendarGetEvents{} }
func (m *CalendarGetEvents) String() string { return proto.CompactTextString(m) }
func (*CalendarGetEvents) ProtoMessage()    {}
func (*CalendarGetEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{0}
}
func (m *CalendarGetEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalendarGetEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalendarGetEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalendarGetEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalendarGetEvents.Merge(m, src)
}
func (m *CalendarGetEvents) XXX_Size() int {
	return m.Size()
}
func (m *CalendarGetEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_CalendarGetEvents.DiscardUnknown(m)
}

var xxx_messageInfo_CalendarGetEvents proto.InternalMessageInfo

func (m *CalendarGetEvents) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *CalendarGetEvents) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *CalendarGetEvents) GetFilter() int32 {
	if m != nil {
		return m.Filter
	}
	return 0
}

// CalendarSetEvent
// @Function
// @Return: CalendarEventDescriptor
type CalendarSetEvent struct {
	Name       string          `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Date       int64           `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
	StartRange int64           `protobuf:"varint,3,opt,name=StartRange,proto3" json:"StartRange,omitempty"`
	Duration   int64           `protobuf:"varint,4,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Recurring  bool            `protobuf:"varint,5,opt,name=Recurring,proto3" json:"Recurring,omitempty"`
	Period     RecurringPeriod `protobuf:"varint,6,opt,name=Period,proto3,enum=msg.RecurringPeriod" json:"Period,omitempty"`
	AllDay     bool            `protobuf:"varint,7,opt,name=AllDay,proto3" json:"AllDay,omitempty"`
	Team       bool            `protobuf:"varint,8,opt,name=Team,proto3" json:"Team,omitempty"`
	Global     bool            `protobuf:"varint,9,opt,name=Global,proto3" json:"Global,omitempty"`
}

func (m *CalendarSetEvent) Reset()         { *m = CalendarSetEvent{} }
func (m *CalendarSetEvent) String() string { return proto.CompactTextString(m) }
func (*CalendarSetEvent) ProtoMessage()    {}
func (*CalendarSetEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{1}
}
func (m *CalendarSetEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalendarSetEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalendarSetEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalendarSetEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalendarSetEvent.Merge(m, src)
}
func (m *CalendarSetEvent) XXX_Size() int {
	return m.Size()
}
func (m *CalendarSetEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CalendarSetEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CalendarSetEvent proto.InternalMessageInfo

func (m *CalendarSetEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CalendarSetEvent) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *CalendarSetEvent) GetStartRange() int64 {
	if m != nil {
		return m.StartRange
	}
	return 0
}

func (m *CalendarSetEvent) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CalendarSetEvent) GetRecurring() bool {
	if m != nil {
		return m.Recurring
	}
	return false
}

func (m *CalendarSetEvent) GetPeriod() RecurringPeriod {
	if m != nil {
		return m.Period
	}
	return RecurringNone
}

func (m *CalendarSetEvent) GetAllDay() bool {
	if m != nil {
		return m.AllDay
	}
	return false
}

func (m *CalendarSetEvent) GetTeam() bool {
	if m != nil {
		return m.Team
	}
	return false
}

func (m *CalendarSetEvent) GetGlobal() bool {
	if m != nil {
		return m.Global
	}
	return false
}

// CalendarEditEvent
// @Function
// @Return: CalendarEvent
type CalendarEditEvent struct {
	EventID    int64              `protobuf:"varint,1,opt,name=EventID,proto3" json:"EventID,omitempty"`
	Name       string             `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Date       int64              `protobuf:"varint,3,opt,name=Date,proto3" json:"Date,omitempty"`
	StartRange int64              `protobuf:"varint,4,opt,name=StartRange,proto3" json:"StartRange,omitempty"`
	Duration   int64              `protobuf:"varint,5,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Recurring  bool               `protobuf:"varint,6,opt,name=Recurring,proto3" json:"Recurring,omitempty"`
	Period     RecurringPeriod    `protobuf:"varint,7,opt,name=Period,proto3,enum=msg.RecurringPeriod" json:"Period,omitempty"`
	AllDay     bool               `protobuf:"varint,8,opt,name=AllDay,proto3" json:"AllDay,omitempty"`
	Policy     CalendarEditPolicy `protobuf:"varint,9,opt,name=Policy,proto3,enum=msg.CalendarEditPolicy" json:"Policy,omitempty"`
}

func (m *CalendarEditEvent) Reset()         { *m = CalendarEditEvent{} }
func (m *CalendarEditEvent) String() string { return proto.CompactTextString(m) }
func (*CalendarEditEvent) ProtoMessage()    {}
func (*CalendarEditEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{2}
}
func (m *CalendarEditEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalendarEditEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalendarEditEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalendarEditEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalendarEditEvent.Merge(m, src)
}
func (m *CalendarEditEvent) XXX_Size() int {
	return m.Size()
}
func (m *CalendarEditEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CalendarEditEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CalendarEditEvent proto.InternalMessageInfo

func (m *CalendarEditEvent) GetEventID() int64 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *CalendarEditEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CalendarEditEvent) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *CalendarEditEvent) GetStartRange() int64 {
	if m != nil {
		return m.StartRange
	}
	return 0
}

func (m *CalendarEditEvent) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CalendarEditEvent) GetRecurring() bool {
	if m != nil {
		return m.Recurring
	}
	return false
}

func (m *CalendarEditEvent) GetPeriod() RecurringPeriod {
	if m != nil {
		return m.Period
	}
	return RecurringNone
}

func (m *CalendarEditEvent) GetAllDay() bool {
	if m != nil {
		return m.AllDay
	}
	return false
}

func (m *CalendarEditEvent) GetPolicy() CalendarEditPolicy {
	if m != nil {
		return m.Policy
	}
	return CalendarEditOne
}

// CalendarRemoveEvent
// @Function
// @Return: Bool
type CalendarRemoveEvent struct {
	EventID int64 `protobuf:"varint,1,opt,name=EventID,proto3" json:"EventID,omitempty"`
}

func (m *CalendarRemoveEvent) Reset()         { *m = CalendarRemoveEvent{} }
func (m *CalendarRemoveEvent) String() string { return proto.CompactTextString(m) }
func (*CalendarRemoveEvent) ProtoMessage()    {}
func (*CalendarRemoveEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{3}
}
func (m *CalendarRemoveEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalendarRemoveEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalendarRemoveEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalendarRemoveEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalendarRemoveEvent.Merge(m, src)
}
func (m *CalendarRemoveEvent) XXX_Size() int {
	return m.Size()
}
func (m *CalendarRemoveEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CalendarRemoveEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CalendarRemoveEvent proto.InternalMessageInfo

func (m *CalendarRemoveEvent) GetEventID() int64 {
	if m != nil {
		return m.EventID
	}
	return 0
}

// CalendarEvent
type CalendarEvent struct {
	ID        int64           `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string          `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Recurring bool            `protobuf:"varint,3,opt,name=Recurring,proto3" json:"Recurring,omitempty"`
	Period    RecurringPeriod `protobuf:"varint,4,opt,name=Period,proto3,enum=msg.RecurringPeriod" json:"Period,omitempty"`
	AllDay    bool            `protobuf:"varint,5,opt,name=AllDay,proto3" json:"AllDay,omitempty"`
}

func (m *CalendarEvent) Reset()         { *m = CalendarEvent{} }
func (m *CalendarEvent) String() string { return proto.CompactTextString(m) }
func (*CalendarEvent) ProtoMessage()    {}
func (*CalendarEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{4}
}
func (m *CalendarEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalendarEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalendarEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalendarEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalendarEvent.Merge(m, src)
}
func (m *CalendarEvent) XXX_Size() int {
	return m.Size()
}
func (m *CalendarEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CalendarEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CalendarEvent proto.InternalMessageInfo

func (m *CalendarEvent) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CalendarEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CalendarEvent) GetRecurring() bool {
	if m != nil {
		return m.Recurring
	}
	return false
}

func (m *CalendarEvent) GetPeriod() RecurringPeriod {
	if m != nil {
		return m.Period
	}
	return RecurringNone
}

func (m *CalendarEvent) GetAllDay() bool {
	if m != nil {
		return m.AllDay
	}
	return false
}

// CalendarEventInstance
type CalendarEventInstance struct {
	ID      int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	EventID int64  `protobuf:"varint,2,opt,name=EventID,proto3" json:"EventID,omitempty"`
	Start   int64  `protobuf:"varint,3,opt,name=Start,proto3" json:"Start,omitempty"`
	End     int64  `protobuf:"varint,4,opt,name=End,proto3" json:"End,omitempty"`
	Colour  string `protobuf:"bytes,5,opt,name=Colour,proto3" json:"Colour,omitempty"`
}

func (m *CalendarEventInstance) Reset()         { *m = CalendarEventInstance{} }
func (m *CalendarEventInstance) String() string { return proto.CompactTextString(m) }
func (*CalendarEventInstance) ProtoMessage()    {}
func (*CalendarEventInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{5}
}
func (m *CalendarEventInstance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalendarEventInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalendarEventInstance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalendarEventInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalendarEventInstance.Merge(m, src)
}
func (m *CalendarEventInstance) XXX_Size() int {
	return m.Size()
}
func (m *CalendarEventInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_CalendarEventInstance.DiscardUnknown(m)
}

var xxx_messageInfo_CalendarEventInstance proto.InternalMessageInfo

func (m *CalendarEventInstance) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CalendarEventInstance) GetEventID() int64 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *CalendarEventInstance) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CalendarEventInstance) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *CalendarEventInstance) GetColour() string {
	if m != nil {
		return m.Colour
	}
	return ""
}

func init() {
	proto.RegisterEnum("msg.RecurringPeriod", RecurringPeriod_name, RecurringPeriod_value)
	proto.RegisterEnum("msg.CalendarEditPolicy", CalendarEditPolicy_name, CalendarEditPolicy_value)
	proto.RegisterType((*CalendarGetEvents)(nil), "msg.CalendarGetEvents")
	proto.RegisterType((*CalendarSetEvent)(nil), "msg.CalendarSetEvent")
	proto.RegisterType((*CalendarEditEvent)(nil), "msg.CalendarEditEvent")
	proto.RegisterType((*CalendarRemoveEvent)(nil), "msg.CalendarRemoveEvent")
	proto.RegisterType((*CalendarEvent)(nil), "msg.CalendarEvent")
	proto.RegisterType((*CalendarEventInstance)(nil), "msg.CalendarEventInstance")
}

func init() { proto.RegisterFile("calendar.proto", fileDescriptor_e3d25d49f056cdb2) }

var fileDescriptor_e3d25d49f056cdb2 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0xed, 0xd8, 0x49, 0x46, 0xaa, 0x71, 0xb7, 0x01, 0x4c, 0x85, 0xac, 0xc8, 0x5c, 0xa2,
	0x0a, 0x12, 0xa9, 0x1c, 0x39, 0x95, 0x26, 0xa9, 0x7a, 0xa0, 0xad, 0xdc, 0x48, 0xa8, 0xdc, 0x36,
	0xc9, 0xe2, 0x5a, 0xac, 0xbd, 0x68, 0xb3, 0x29, 0xf8, 0xc8, 0x85, 0x33, 0x37, 0xfe, 0x80, 0x6f,
	0xe1, 0x98, 0x23, 0x47, 0x48, 0x7e, 0x04, 0x79, 0xbd, 0x71, 0x1d, 0x4a, 0x5a, 0xf5, 0x36, 0xef,
	0xcd, 0xdb, 0x97, 0x99, 0x37, 0x91, 0xc1, 0x1e, 0x63, 0x4a, 0x92, 0x09, 0xe6, 0x9d, 0x8f, 0x9c,
	0x09, 0x86, 0x8c, 0x78, 0x1a, 0xee, 0xbe, 0x08, 0x23, 0x71, 0x39, 0x1b, 0x75, 0xc6, 0x2c, 0xee,
	0x86, 0x2c, 0x64, 0x5d, 0xd9, 0x1b, 0xcd, 0xde, 0x4b, 0x24, 0x81, 0xac, 0xf2, 0x37, 0xfe, 0x29,
	0x6c, 0x1f, 0x2a, 0x97, 0x23, 0x22, 0xfa, 0x57, 0x24, 0x11, 0x53, 0x84, 0xa0, 0x3a, 0xe0, 0x2c,
	0x76, 0xb5, 0x96, 0xd6, 0x36, 0x02, 0x59, 0x23, 0x1b, 0xf4, 0x21, 0x73, 0x75, 0xc9, 0xe8, 0x43,
	0x86, 0x1e, 0x81, 0x35, 0x88, 0xa8, 0x20, 0xdc, 0x35, 0x5a, 0x5a, 0xdb, 0x0c, 0x14, 0xf2, 0xbf,
	0xea, 0xe0, 0xac, 0x1c, 0xcf, 0x95, 0x63, 0x66, 0x78, 0x82, 0x63, 0x22, 0x0d, 0x1b, 0x81, 0xac,
	0x33, 0xae, 0x87, 0x05, 0x51, 0x96, 0xb2, 0x46, 0x1e, 0xc0, 0xb9, 0xc0, 0x5c, 0x04, 0x38, 0x09,
	0x89, 0x34, 0x36, 0x82, 0x12, 0x83, 0x76, 0xa1, 0xde, 0x9b, 0x71, 0x2c, 0x22, 0x96, 0xb8, 0x55,
	0xd9, 0x2d, 0x30, 0x7a, 0x0a, 0x8d, 0x80, 0x8c, 0x67, 0x9c, 0x47, 0x49, 0xe8, 0x9a, 0x2d, 0xad,
	0x5d, 0x0f, 0xae, 0x09, 0xf4, 0x1c, 0xac, 0x33, 0xc2, 0x23, 0x36, 0x71, 0xad, 0x96, 0xd6, 0xb6,
	0xf7, 0x9b, 0x9d, 0x78, 0x1a, 0x76, 0x8a, 0x7e, 0xde, 0x0b, 0x94, 0x26, 0x5b, 0xee, 0x80, 0xd2,
	0x1e, 0x4e, 0xdd, 0x9a, 0x34, 0x52, 0x28, 0x9b, 0x79, 0x48, 0x70, 0xec, 0xd6, 0x25, 0x2b, 0xeb,
	0x4c, 0x7b, 0x44, 0xd9, 0x08, 0x53, 0xb7, 0x91, 0x6b, 0x73, 0xe4, 0xff, 0xd0, 0xaf, 0xa3, 0xed,
	0x4f, 0x22, 0x95, 0x84, 0x0b, 0x35, 0x59, 0x1c, 0xf7, 0x54, 0xba, 0x2b, 0x58, 0x64, 0xa4, 0xff,
	0x27, 0x23, 0x63, 0x63, 0x46, 0xd5, 0x5b, 0x33, 0x32, 0x6f, 0xcb, 0xc8, 0xda, 0x9c, 0x51, 0xed,
	0x5e, 0x19, 0xd5, 0xd7, 0x32, 0xea, 0x82, 0x75, 0xc6, 0x68, 0x34, 0x4e, 0x65, 0x1e, 0xf6, 0xfe,
	0x63, 0xe9, 0x52, 0x4e, 0x22, 0x6f, 0x07, 0x4a, 0xe6, 0x77, 0x61, 0x67, 0xd5, 0x0d, 0x48, 0xcc,
	0xae, 0xc8, 0x1d, 0x49, 0xf9, 0xdf, 0x35, 0xd8, 0x2a, 0xfc, 0xa4, 0xd6, 0x06, 0xbd, 0x90, 0xe9,
	0x1b, 0xb2, 0x5c, 0xdb, 0xdd, 0xd8, 0xbc, 0x7b, 0xf5, 0x5e, 0xbb, 0x9b, 0xe5, 0xdd, 0xfd, 0x2f,
	0x1a, 0x3c, 0x5c, 0x9b, 0xec, 0x38, 0x99, 0x0a, 0x9c, 0x8c, 0xc9, 0x8d, 0x09, 0x4b, 0xdb, 0xe9,
	0xeb, 0xff, 0x83, 0x26, 0x98, 0xf2, 0x9a, 0xea, 0xe8, 0x39, 0x40, 0x0e, 0x18, 0xfd, 0x64, 0xa2,
	0xce, 0x9d, 0x95, 0xd9, 0x0c, 0x87, 0x8c, 0xb2, 0x19, 0x97, 0x33, 0x34, 0x02, 0x85, 0xf6, 0x3e,
	0xc3, 0x83, 0x7f, 0xc6, 0x46, 0xdb, 0xb0, 0x55, 0x50, 0x27, 0x2c, 0x21, 0x4e, 0x05, 0x21, 0xb0,
	0x0b, 0xaa, 0x87, 0x23, 0x9a, 0x3a, 0x1a, 0xda, 0x29, 0xbd, 0x7c, 0x4b, 0xc8, 0x07, 0x9a, 0x3a,
	0x3a, 0x6a, 0x82, 0x53, 0x90, 0x6f, 0x58, 0x22, 0x2e, 0x69, 0xea, 0x18, 0x6b, 0xd2, 0x0b, 0x82,
	0x39, 0x4d, 0x9d, 0xea, 0xde, 0x05, 0xa0, 0x9b, 0x67, 0xce, 0xa4, 0x65, 0xf6, 0x54, 0xfe, 0xfc,
	0x93, 0x52, 0x4e, 0x93, 0x48, 0x0c, 0x18, 0xa5, 0xec, 0x53, 0x94, 0x84, 0xf9, 0x14, 0xe5, 0xd6,
	0x01, 0xa5, 0x8e, 0xfe, 0xfa, 0xd9, 0xfc, 0x8f, 0x57, 0xf9, 0xb9, 0xf0, 0xb4, 0xf9, 0xc2, 0xd3,
	0x7e, 0x2f, 0x3c, 0xed, 0xdb, 0xd2, 0xab, 0xcc, 0x97, 0x5e, 0xe5, 0xd7, 0xd2, 0xab, 0xbc, 0x33,
	0x3b, 0xaf, 0xe2, 0x69, 0x38, 0xb2, 0xe4, 0x27, 0xed, 0xe5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x8b, 0xde, 0x50, 0x3b, 0x18, 0x05, 0x00, 0x00,
}

func (m *CalendarGetEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalendarGetEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalendarGetEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filter != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.Filter))
		i--
		dAtA[i] = 0x18
	}
	if m.To != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x10
	}
	if m.From != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CalendarSetEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalendarSetEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalendarSetEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Global {
		i--
		if m.Global {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Team {
		i--
		if m.Team {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.AllDay {
		i--
		if m.AllDay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Period != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x30
	}
	if m.Recurring {
		i--
		if m.Recurring {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Duration != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if m.StartRange != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.StartRange))
		i--
		dAtA[i] = 0x18
	}
	if m.Date != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCalendar(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CalendarEditEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalendarEditEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalendarEditEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.Policy))
		i--
		dAtA[i] = 0x48
	}
	if m.AllDay {
		i--
		if m.AllDay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Period != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x38
	}
	if m.Recurring {
		i--
		if m.Recurring {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Duration != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if m.StartRange != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.StartRange))
		i--
		dAtA[i] = 0x20
	}
	if m.Date != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCalendar(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.EventID != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.EventID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CalendarRemoveEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalendarRemoveEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalendarRemoveEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.EventID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CalendarEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalendarEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalendarEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllDay {
		i--
		if m.AllDay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Period != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x20
	}
	if m.Recurring {
		i--
		if m.Recurring {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCalendar(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CalendarEventInstance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalendarEventInstance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalendarEventInstance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Colour) > 0 {
		i -= len(m.Colour)
		copy(dAtA[i:], m.Colour)
		i = encodeVarintCalendar(dAtA, i, uint64(len(m.Colour)))
		i--
		dAtA[i] = 0x2a
	}
	if m.End != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x20
	}
	if m.Start != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x18
	}
	if m.EventID != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.EventID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintCalendar(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCalendar(dAtA []byte, offset int, v uint64) int {
	offset -= sovCalendar(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CalendarGetEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovCalendar(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovCalendar(uint64(m.To))
	}
	if m.Filter != 0 {
		n += 1 + sovCalendar(uint64(m.Filter))
	}
	return n
}

func (m *CalendarSetEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCalendar(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovCalendar(uint64(m.Date))
	}
	if m.StartRange != 0 {
		n += 1 + sovCalendar(uint64(m.StartRange))
	}
	if m.Duration != 0 {
		n += 1 + sovCalendar(uint64(m.Duration))
	}
	if m.Recurring {
		n += 2
	}
	if m.Period != 0 {
		n += 1 + sovCalendar(uint64(m.Period))
	}
	if m.AllDay {
		n += 2
	}
	if m.Team {
		n += 2
	}
	if m.Global {
		n += 2
	}
	return n
}

func (m *CalendarEditEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovCalendar(uint64(m.EventID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCalendar(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovCalendar(uint64(m.Date))
	}
	if m.StartRange != 0 {
		n += 1 + sovCalendar(uint64(m.StartRange))
	}
	if m.Duration != 0 {
		n += 1 + sovCalendar(uint64(m.Duration))
	}
	if m.Recurring {
		n += 2
	}
	if m.Period != 0 {
		n += 1 + sovCalendar(uint64(m.Period))
	}
	if m.AllDay {
		n += 2
	}
	if m.Policy != 0 {
		n += 1 + sovCalendar(uint64(m.Policy))
	}
	return n
}

func (m *CalendarRemoveEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovCalendar(uint64(m.EventID))
	}
	return n
}

func (m *CalendarEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCalendar(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCalendar(uint64(l))
	}
	if m.Recurring {
		n += 2
	}
	if m.Period != 0 {
		n += 1 + sovCalendar(uint64(m.Period))
	}
	if m.AllDay {
		n += 2
	}
	return n
}

func (m *CalendarEventInstance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCalendar(uint64(m.ID))
	}
	if m.EventID != 0 {
		n += 1 + sovCalendar(uint64(m.EventID))
	}
	if m.Start != 0 {
		n += 1 + sovCalendar(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovCalendar(uint64(m.End))
	}
	l = len(m.Colour)
	if l > 0 {
		n += 1 + l + sovCalendar(uint64(l))
	}
	return n
}

func sovCalendar(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCalendar(x uint64) (n int) {
	return sovCalendar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CalendarGetEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalendar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalendarGetEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalendarGetEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			m.Filter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Filter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCalendar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalendar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalendar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalendarSetEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalendar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalendarSetEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalendarSetEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalendar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalendar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRange", wireType)
			}
			m.StartRange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartRange |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recurring", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Recurring = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= RecurringPeriod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllDay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllDay = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Team = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Global", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Global = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCalendar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalendar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalendar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalendarEditEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalendar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalendarEditEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalendarEditEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalendar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalendar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRange", wireType)
			}
			m.StartRange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartRange |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recurring", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Recurring = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= RecurringPeriod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllDay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllDay = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			m.Policy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Policy |= CalendarEditPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCalendar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalendar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalendar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalendarRemoveEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalendar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalendarRemoveEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalendarRemoveEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCalendar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalendar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalendar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalendarEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalendar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalendarEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalendarEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalendar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalendar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recurring", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Recurring = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= RecurringPeriod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllDay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllDay = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCalendar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalendar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalendar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalendarEventInstance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalendar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalendarEventInstance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalendarEventInstance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colour", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalendar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalendar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Colour = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalendar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalendar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalendar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCalendar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCalendar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalendar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCalendar
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCalendar
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCalendar
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCalendar        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCalendar          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCalendar = fmt.Errorf("proto: unexpected end of group")
)
