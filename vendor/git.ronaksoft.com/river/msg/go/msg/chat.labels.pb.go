// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.labels.proto

package msg

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LabelsCreate
// @Function
// @Returns Bool
type LabelsCreate struct {
	RandomID int64  `protobuf:"varint,1,opt,name=RandomID,proto3" json:"RandomID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Colour   string `protobuf:"bytes,3,opt,name=Colour,proto3" json:"Colour,omitempty"`
}

func (m *LabelsCreate) Reset()         { *m = LabelsCreate{} }
func (m *LabelsCreate) String() string { return proto.CompactTextString(m) }
func (*LabelsCreate) ProtoMessage()    {}
func (*LabelsCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_920b70729fa32071, []int{0}
}
func (m *LabelsCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsCreate.Merge(m, src)
}
func (m *LabelsCreate) XXX_Size() int {
	return m.Size()
}
func (m *LabelsCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsCreate.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsCreate proto.InternalMessageInfo

func (m *LabelsCreate) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *LabelsCreate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LabelsCreate) GetColour() string {
	if m != nil {
		return m.Colour
	}
	return ""
}

// LabelsEdit
// @Function
// @Returns: Bool
type LabelsEdit struct {
	LabelID int32  `protobuf:"varint,1,opt,name=LabelID,proto3" json:"LabelID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Colour  string `protobuf:"bytes,3,opt,name=Colour,proto3" json:"Colour,omitempty"`
}

func (m *LabelsEdit) Reset()         { *m = LabelsEdit{} }
func (m *LabelsEdit) String() string { return proto.CompactTextString(m) }
func (*LabelsEdit) ProtoMessage()    {}
func (*LabelsEdit) Descriptor() ([]byte, []int) {
	return fileDescriptor_920b70729fa32071, []int{1}
}
func (m *LabelsEdit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsEdit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsEdit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsEdit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsEdit.Merge(m, src)
}
func (m *LabelsEdit) XXX_Size() int {
	return m.Size()
}
func (m *LabelsEdit) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsEdit.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsEdit proto.InternalMessageInfo

func (m *LabelsEdit) GetLabelID() int32 {
	if m != nil {
		return m.LabelID
	}
	return 0
}

func (m *LabelsEdit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LabelsEdit) GetColour() string {
	if m != nil {
		return m.Colour
	}
	return ""
}

// LabelsDelete
// @Function
// @Returns: Bool
type LabelsDelete struct {
	LabelIDs []int32 `protobuf:"varint,1,rep,packed,name=LabelIDs,proto3" json:"LabelIDs,omitempty"`
}

func (m *LabelsDelete) Reset()         { *m = LabelsDelete{} }
func (m *LabelsDelete) String() string { return proto.CompactTextString(m) }
func (*LabelsDelete) ProtoMessage()    {}
func (*LabelsDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_920b70729fa32071, []int{2}
}
func (m *LabelsDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsDelete.Merge(m, src)
}
func (m *LabelsDelete) XXX_Size() int {
	return m.Size()
}
func (m *LabelsDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsDelete.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsDelete proto.InternalMessageInfo

func (m *LabelsDelete) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

// LabelsGet
// @Function
// @Returns: LabelsMany
type LabelsGet struct {
}

func (m *LabelsGet) Reset()         { *m = LabelsGet{} }
func (m *LabelsGet) String() string { return proto.CompactTextString(m) }
func (*LabelsGet) ProtoMessage()    {}
func (*LabelsGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_920b70729fa32071, []int{3}
}
func (m *LabelsGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsGet.Merge(m, src)
}
func (m *LabelsGet) XXX_Size() int {
	return m.Size()
}
func (m *LabelsGet) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsGet.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsGet proto.InternalMessageInfo

// LabelsAddToMessage
// @Function
// @Returns: Bool
type LabelsAddToMessage struct {
	Peer       *InputPeer `protobuf:"bytes,1,opt,name=Peer,proto3" json:"Peer,omitempty"`
	LabelIDs   []int32    `protobuf:"varint,3,rep,packed,name=LabelIDs,proto3" json:"LabelIDs,omitempty"`
	MessageIDs []int64    `protobuf:"varint,4,rep,packed,name=MessageIDs,proto3" json:"MessageIDs,omitempty"`
}

func (m *LabelsAddToMessage) Reset()         { *m = LabelsAddToMessage{} }
func (m *LabelsAddToMessage) String() string { return proto.CompactTextString(m) }
func (*LabelsAddToMessage) ProtoMessage()    {}
func (*LabelsAddToMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_920b70729fa32071, []int{4}
}
func (m *LabelsAddToMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsAddToMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsAddToMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsAddToMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsAddToMessage.Merge(m, src)
}
func (m *LabelsAddToMessage) XXX_Size() int {
	return m.Size()
}
func (m *LabelsAddToMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsAddToMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsAddToMessage proto.InternalMessageInfo

func (m *LabelsAddToMessage) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *LabelsAddToMessage) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

func (m *LabelsAddToMessage) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

// LabelsRemoveFromMessage
// @Function
// @Returns: Bool
type LabelsRemoveFromMessage struct {
	Peer       *InputPeer `protobuf:"bytes,1,opt,name=Peer,proto3" json:"Peer,omitempty"`
	LabelIDs   []int32    `protobuf:"varint,3,rep,packed,name=LabelIDs,proto3" json:"LabelIDs,omitempty"`
	MessageIDs []int64    `protobuf:"varint,4,rep,packed,name=MessageIDs,proto3" json:"MessageIDs,omitempty"`
}

func (m *LabelsRemoveFromMessage) Reset()         { *m = LabelsRemoveFromMessage{} }
func (m *LabelsRemoveFromMessage) String() string { return proto.CompactTextString(m) }
func (*LabelsRemoveFromMessage) ProtoMessage()    {}
func (*LabelsRemoveFromMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_920b70729fa32071, []int{5}
}
func (m *LabelsRemoveFromMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsRemoveFromMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsRemoveFromMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsRemoveFromMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsRemoveFromMessage.Merge(m, src)
}
func (m *LabelsRemoveFromMessage) XXX_Size() int {
	return m.Size()
}
func (m *LabelsRemoveFromMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsRemoveFromMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsRemoveFromMessage proto.InternalMessageInfo

func (m *LabelsRemoveFromMessage) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *LabelsRemoveFromMessage) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

func (m *LabelsRemoveFromMessage) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

// LabelsListItems
// @Function
// @Returns: LabelItems
type LabelsListItems struct {
	LabelID int32 `protobuf:"varint,1,opt,name=LabelID,proto3" json:"LabelID,omitempty"`
	MinID   int64 `protobuf:"varint,2,opt,name=MinID,proto3" json:"MinID,omitempty"`
	MaxID   int64 `protobuf:"varint,3,opt,name=MaxID,proto3" json:"MaxID,omitempty"`
	Limit   int32 `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *LabelsListItems) Reset()         { *m = LabelsListItems{} }
func (m *LabelsListItems) String() string { return proto.CompactTextString(m) }
func (*LabelsListItems) ProtoMessage()    {}
func (*LabelsListItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_920b70729fa32071, []int{6}
}
func (m *LabelsListItems) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsListItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsListItems.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsListItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsListItems.Merge(m, src)
}
func (m *LabelsListItems) XXX_Size() int {
	return m.Size()
}
func (m *LabelsListItems) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsListItems.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsListItems proto.InternalMessageInfo

func (m *LabelsListItems) GetLabelID() int32 {
	if m != nil {
		return m.LabelID
	}
	return 0
}

func (m *LabelsListItems) GetMinID() int64 {
	if m != nil {
		return m.MinID
	}
	return 0
}

func (m *LabelsListItems) GetMaxID() int64 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

func (m *LabelsListItems) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// LabelItems
type LabelItems struct {
	LabelID  int32          `protobuf:"varint,1,opt,name=LabelID,proto3" json:"LabelID,omitempty"`
	Messages []*UserMessage `protobuf:"bytes,2,rep,name=Messages,proto3" json:"Messages,omitempty"`
	Dialogs  []*Dialog      `protobuf:"bytes,3,rep,name=Dialogs,proto3" json:"Dialogs,omitempty"`
	Users    []*User        `protobuf:"bytes,4,rep,name=Users,proto3" json:"Users,omitempty"`
	Groups   []*Group       `protobuf:"bytes,5,rep,name=Groups,proto3" json:"Groups,omitempty"`
}

func (m *LabelItems) Reset()         { *m = LabelItems{} }
func (m *LabelItems) String() string { return proto.CompactTextString(m) }
func (*LabelItems) ProtoMessage()    {}
func (*LabelItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_920b70729fa32071, []int{7}
}
func (m *LabelItems) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelItems.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelItems.Merge(m, src)
}
func (m *LabelItems) XXX_Size() int {
	return m.Size()
}
func (m *LabelItems) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelItems.DiscardUnknown(m)
}

var xxx_messageInfo_LabelItems proto.InternalMessageInfo

func (m *LabelItems) GetLabelID() int32 {
	if m != nil {
		return m.LabelID
	}
	return 0
}

func (m *LabelItems) GetMessages() []*UserMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *LabelItems) GetDialogs() []*Dialog {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

func (m *LabelItems) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *LabelItems) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func init() {
	proto.RegisterType((*LabelsCreate)(nil), "msg.LabelsCreate")
	proto.RegisterType((*LabelsEdit)(nil), "msg.LabelsEdit")
	proto.RegisterType((*LabelsDelete)(nil), "msg.LabelsDelete")
	proto.RegisterType((*LabelsGet)(nil), "msg.LabelsGet")
	proto.RegisterType((*LabelsAddToMessage)(nil), "msg.LabelsAddToMessage")
	proto.RegisterType((*LabelsRemoveFromMessage)(nil), "msg.LabelsRemoveFromMessage")
	proto.RegisterType((*LabelsListItems)(nil), "msg.LabelsListItems")
	proto.RegisterType((*LabelItems)(nil), "msg.LabelItems")
}

func init() { proto.RegisterFile("chat.labels.proto", fileDescriptor_920b70729fa32071) }

var fileDescriptor_920b70729fa32071 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0x4f, 0x6b, 0xd4, 0x40,
	0x14, 0xdf, 0x74, 0x36, 0xdb, 0xee, 0x8b, 0x68, 0x1d, 0x44, 0x43, 0x0f, 0x69, 0x08, 0x08, 0x41,
	0x24, 0x87, 0xf5, 0xe8, 0x49, 0x1b, 0x2d, 0x81, 0xad, 0xc8, 0xa0, 0x1e, 0xbc, 0x4d, 0xbb, 0x8f,
	0x18, 0xc8, 0xec, 0x2c, 0x33, 0xb3, 0x62, 0xbf, 0x85, 0x1f, 0xc9, 0xa3, 0xc7, 0x1e, 0x3d, 0xca,
	0xee, 0x17, 0x91, 0xbc, 0x99, 0x5d, 0xec, 0x45, 0xf1, 0xe2, 0x2d, 0xbf, 0x3f, 0xf9, 0xfd, 0x5e,
	0xde, 0x23, 0x70, 0xff, 0xea, 0x93, 0x74, 0x55, 0x2f, 0x2f, 0xb1, 0xb7, 0xd5, 0xca, 0x68, 0xa7,
	0x39, 0x53, 0xb6, 0x3d, 0x39, 0xbe, 0xd2, 0x06, 0x2b, 0x77, 0xbd, 0xc2, 0x40, 0x17, 0x1f, 0xe0,
	0xce, 0x9c, 0x6c, 0x67, 0x06, 0xa5, 0x43, 0x7e, 0x02, 0x47, 0x42, 0x2e, 0x17, 0x5a, 0x35, 0x75,
	0x1a, 0xe5, 0x51, 0xc9, 0xc4, 0x1e, 0x73, 0x0e, 0xe3, 0x37, 0x52, 0x61, 0x7a, 0x90, 0x47, 0xe5,
	0x54, 0xd0, 0x33, 0x7f, 0x08, 0x93, 0x33, 0xdd, 0xeb, 0xb5, 0x49, 0x19, 0xb1, 0x01, 0x15, 0x02,
	0xc0, 0xe7, 0xbe, 0x5a, 0x74, 0x8e, 0xa7, 0x70, 0x48, 0x28, 0x84, 0xc6, 0x62, 0x07, 0xff, 0x29,
	0xf3, 0xc9, 0x6e, 0xd6, 0x1a, 0x7b, 0xf4, 0xb3, 0x86, 0x18, 0x9b, 0x46, 0x39, 0x2b, 0x63, 0xb1,
	0xc7, 0x45, 0x02, 0x53, 0xef, 0x3d, 0x47, 0x57, 0x38, 0xe0, 0x1e, 0xbc, 0x58, 0x2c, 0xde, 0xe9,
	0x0b, 0xb4, 0x56, 0xb6, 0xc8, 0x0b, 0x18, 0xbf, 0x45, 0x34, 0x34, 0x51, 0x32, 0xbb, 0x5b, 0x29,
	0xdb, 0x56, 0xcd, 0x72, 0xb5, 0x76, 0x03, 0x2b, 0x48, 0xbb, 0x55, 0xc1, 0x6e, 0x57, 0xf0, 0x0c,
	0x20, 0x44, 0x0d, 0xea, 0x38, 0x67, 0x25, 0x13, 0xbf, 0x31, 0xc5, 0x35, 0x3c, 0xf2, 0xad, 0x02,
	0x95, 0xfe, 0x8c, 0xaf, 0x8d, 0x56, 0xff, 0xab, 0x5a, 0xc1, 0x3d, 0x5f, 0x3d, 0xef, 0xac, 0x6b,
	0x1c, 0x2a, 0xfb, 0x87, 0x13, 0x3c, 0x80, 0xf8, 0xa2, 0x5b, 0x36, 0x35, 0xdd, 0x80, 0x09, 0x0f,
	0x88, 0x95, 0x5f, 0x9a, 0x9a, 0x6e, 0x30, 0xb0, 0x03, 0x18, 0xd8, 0x79, 0xa7, 0x3a, 0x97, 0x8e,
	0x29, 0xc3, 0x83, 0xe2, 0x5b, 0x14, 0xae, 0xfd, 0xb7, 0xaa, 0xa7, 0x70, 0x14, 0xa6, 0xb4, 0xe9,
	0x41, 0xce, 0xca, 0x64, 0x76, 0x4c, 0xdf, 0xfe, 0xde, 0xa2, 0x09, 0x82, 0xd8, 0x3b, 0xf8, 0x63,
	0x38, 0xac, 0x3b, 0xd9, 0xeb, 0xd6, 0x2f, 0x20, 0x99, 0x25, 0x64, 0xf6, 0x9c, 0xd8, 0x69, 0xfc,
	0x14, 0xe2, 0xe1, 0x7d, 0xbf, 0x87, 0x64, 0x36, 0xdd, 0x27, 0x0a, 0xcf, 0xf3, 0x02, 0x26, 0xe7,
	0x46, 0xaf, 0x57, 0x36, 0x8d, 0xc9, 0x01, 0xe4, 0x20, 0x4a, 0x04, 0xe5, 0xe5, 0xe9, 0xf7, 0x4d,
	0x16, 0xdd, 0x6c, 0xb2, 0xe8, 0xe7, 0x26, 0x8b, 0xbe, 0x6e, 0xb3, 0xd1, 0xcd, 0x36, 0x1b, 0xfd,
	0xd8, 0x66, 0xa3, 0x8f, 0x71, 0xf5, 0x5c, 0xd9, 0xf6, 0x72, 0x42, 0xff, 0xcb, 0xb3, 0x5f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x69, 0xd1, 0x02, 0x4e, 0x5b, 0x03, 0x00, 0x00,
}

func (m *LabelsCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Colour) > 0 {
		i -= len(m.Colour)
		copy(dAtA[i:], m.Colour)
		i = encodeVarintChatLabels(dAtA, i, uint64(len(m.Colour)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChatLabels(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.RandomID != 0 {
		i = encodeVarintChatLabels(dAtA, i, uint64(m.RandomID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LabelsEdit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsEdit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsEdit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Colour) > 0 {
		i -= len(m.Colour)
		copy(dAtA[i:], m.Colour)
		i = encodeVarintChatLabels(dAtA, i, uint64(len(m.Colour)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChatLabels(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.LabelID != 0 {
		i = encodeVarintChatLabels(dAtA, i, uint64(m.LabelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LabelsDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LabelIDs) > 0 {
		dAtA2 := make([]byte, len(m.LabelIDs)*10)
		var j1 int
		for _, num1 := range m.LabelIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintChatLabels(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LabelsGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LabelsAddToMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsAddToMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsAddToMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageIDs) > 0 {
		dAtA4 := make([]byte, len(m.MessageIDs)*10)
		var j3 int
		for _, num1 := range m.MessageIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintChatLabels(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LabelIDs) > 0 {
		dAtA6 := make([]byte, len(m.LabelIDs)*10)
		var j5 int
		for _, num1 := range m.LabelIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintChatLabels(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatLabels(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LabelsRemoveFromMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsRemoveFromMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsRemoveFromMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageIDs) > 0 {
		dAtA9 := make([]byte, len(m.MessageIDs)*10)
		var j8 int
		for _, num1 := range m.MessageIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintChatLabels(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LabelIDs) > 0 {
		dAtA11 := make([]byte, len(m.LabelIDs)*10)
		var j10 int
		for _, num1 := range m.LabelIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintChatLabels(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x1a
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatLabels(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LabelsListItems) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsListItems) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsListItems) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintChatLabels(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxID != 0 {
		i = encodeVarintChatLabels(dAtA, i, uint64(m.MaxID))
		i--
		dAtA[i] = 0x18
	}
	if m.MinID != 0 {
		i = encodeVarintChatLabels(dAtA, i, uint64(m.MinID))
		i--
		dAtA[i] = 0x10
	}
	if m.LabelID != 0 {
		i = encodeVarintChatLabels(dAtA, i, uint64(m.LabelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LabelItems) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelItems) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelItems) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatLabels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatLabels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Dialogs) > 0 {
		for iNdEx := len(m.Dialogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dialogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatLabels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatLabels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.LabelID != 0 {
		i = encodeVarintChatLabels(dAtA, i, uint64(m.LabelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintChatLabels(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatLabels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LabelsCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RandomID != 0 {
		n += 1 + sovChatLabels(uint64(m.RandomID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChatLabels(uint64(l))
	}
	l = len(m.Colour)
	if l > 0 {
		n += 1 + l + sovChatLabels(uint64(l))
	}
	return n
}

func (m *LabelsEdit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LabelID != 0 {
		n += 1 + sovChatLabels(uint64(m.LabelID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChatLabels(uint64(l))
	}
	l = len(m.Colour)
	if l > 0 {
		n += 1 + l + sovChatLabels(uint64(l))
	}
	return n
}

func (m *LabelsDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LabelIDs) > 0 {
		l = 0
		for _, e := range m.LabelIDs {
			l += sovChatLabels(uint64(e))
		}
		n += 1 + sovChatLabels(uint64(l)) + l
	}
	return n
}

func (m *LabelsGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LabelsAddToMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatLabels(uint64(l))
	}
	if len(m.LabelIDs) > 0 {
		l = 0
		for _, e := range m.LabelIDs {
			l += sovChatLabels(uint64(e))
		}
		n += 1 + sovChatLabels(uint64(l)) + l
	}
	if len(m.MessageIDs) > 0 {
		l = 0
		for _, e := range m.MessageIDs {
			l += sovChatLabels(uint64(e))
		}
		n += 1 + sovChatLabels(uint64(l)) + l
	}
	return n
}

func (m *LabelsRemoveFromMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatLabels(uint64(l))
	}
	if len(m.LabelIDs) > 0 {
		l = 0
		for _, e := range m.LabelIDs {
			l += sovChatLabels(uint64(e))
		}
		n += 1 + sovChatLabels(uint64(l)) + l
	}
	if len(m.MessageIDs) > 0 {
		l = 0
		for _, e := range m.MessageIDs {
			l += sovChatLabels(uint64(e))
		}
		n += 1 + sovChatLabels(uint64(l)) + l
	}
	return n
}

func (m *LabelsListItems) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LabelID != 0 {
		n += 1 + sovChatLabels(uint64(m.LabelID))
	}
	if m.MinID != 0 {
		n += 1 + sovChatLabels(uint64(m.MinID))
	}
	if m.MaxID != 0 {
		n += 1 + sovChatLabels(uint64(m.MaxID))
	}
	if m.Limit != 0 {
		n += 1 + sovChatLabels(uint64(m.Limit))
	}
	return n
}

func (m *LabelItems) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LabelID != 0 {
		n += 1 + sovChatLabels(uint64(m.LabelID))
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovChatLabels(uint64(l))
		}
	}
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovChatLabels(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovChatLabels(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovChatLabels(uint64(l))
		}
	}
	return n
}

func sovChatLabels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatLabels(x uint64) (n int) {
	return sovChatLabels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LabelsCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatLabels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatLabels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colour", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatLabels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatLabels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Colour = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelsEdit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsEdit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsEdit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelID", wireType)
			}
			m.LabelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatLabels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatLabels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colour", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatLabels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatLabels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Colour = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelsDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatLabels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatLabels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatLabels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelsGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChatLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelsAddToMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsAddToMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsAddToMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatLabels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatLabels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatLabels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatLabels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatLabels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatLabels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatLabels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatLabels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelsRemoveFromMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsRemoveFromMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsRemoveFromMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatLabels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatLabels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatLabels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatLabels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatLabels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatLabels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatLabels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatLabels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatLabels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelsListItems) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsListItems: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsListItems: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelID", wireType)
			}
			m.LabelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinID", wireType)
			}
			m.MinID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxID", wireType)
			}
			m.MaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelItems) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatLabels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelItems: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelItems: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelID", wireType)
			}
			m.LabelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatLabels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatLabels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &UserMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatLabels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatLabels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &Dialog{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatLabels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatLabels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatLabels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatLabels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatLabels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatLabels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatLabels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatLabels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatLabels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatLabels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatLabels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatLabels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatLabels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatLabels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatLabels = fmt.Errorf("proto: unexpected end of group")
)
