// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.9.2
// source: chat.wallpaper.proto

package msg

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// WallPaperGetAll
// @Function
// @Return: WallPapersMany
type WallPaperGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crc32Hash uint32 `protobuf:"varint,2,opt,name=Crc32Hash,proto3" json:"Crc32Hash,omitempty"`
}

func (x *WallPaperGet) Reset() {
	*x = WallPaperGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_wallpaper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WallPaperGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WallPaperGet) ProtoMessage() {}

func (x *WallPaperGet) ProtoReflect() protoreflect.Message {
	mi := &file_chat_wallpaper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WallPaperGet.ProtoReflect.Descriptor instead.
func (*WallPaperGet) Descriptor() ([]byte, []int) {
	return file_chat_wallpaper_proto_rawDescGZIP(), []int{0}
}

func (x *WallPaperGet) GetCrc32Hash() uint32 {
	if x != nil {
		return x.Crc32Hash
	}
	return 0
}

// WallPaperSave
// @Function
// @Return: Bool
type WallPaperSave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WallPaper *InputWallPaper    `protobuf:"bytes,1,opt,name=WallPaper,proto3" json:"WallPaper,omitempty"`
	Settings  *WallPaperSettings `protobuf:"bytes,2,opt,name=Settings,proto3" json:"Settings,omitempty"`
}

func (x *WallPaperSave) Reset() {
	*x = WallPaperSave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_wallpaper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WallPaperSave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WallPaperSave) ProtoMessage() {}

func (x *WallPaperSave) ProtoReflect() protoreflect.Message {
	mi := &file_chat_wallpaper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WallPaperSave.ProtoReflect.Descriptor instead.
func (*WallPaperSave) Descriptor() ([]byte, []int) {
	return file_chat_wallpaper_proto_rawDescGZIP(), []int{1}
}

func (x *WallPaperSave) GetWallPaper() *InputWallPaper {
	if x != nil {
		return x.WallPaper
	}
	return nil
}

func (x *WallPaperSave) GetSettings() *WallPaperSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// WallPaperDelete
// @Function
// @Return: Bool
type WallPaperDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WallPaper *InputWallPaper `protobuf:"bytes,1,opt,name=WallPaper,proto3" json:"WallPaper,omitempty"`
}

func (x *WallPaperDelete) Reset() {
	*x = WallPaperDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_wallpaper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WallPaperDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WallPaperDelete) ProtoMessage() {}

func (x *WallPaperDelete) ProtoReflect() protoreflect.Message {
	mi := &file_chat_wallpaper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WallPaperDelete.ProtoReflect.Descriptor instead.
func (*WallPaperDelete) Descriptor() ([]byte, []int) {
	return file_chat_wallpaper_proto_rawDescGZIP(), []int{2}
}

func (x *WallPaperDelete) GetWallPaper() *InputWallPaper {
	if x != nil {
		return x.WallPaper
	}
	return nil
}

// WallPaperUpload
// @Function
// @Return: WallPaper
type WallPaperUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadedFile *InputFile         `protobuf:"bytes,1,opt,name=UploadedFile,proto3" json:"UploadedFile,omitempty"`
	File         *InputDocument     `protobuf:"bytes,2,opt,name=File,proto3" json:"File,omitempty"`
	MimeType     string             `protobuf:"bytes,3,opt,name=MimeType,proto3" json:"MimeType,omitempty"`
	Settings     *WallPaperSettings `protobuf:"bytes,4,opt,name=Settings,proto3" json:"Settings,omitempty"`
}

func (x *WallPaperUpload) Reset() {
	*x = WallPaperUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_wallpaper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WallPaperUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WallPaperUpload) ProtoMessage() {}

func (x *WallPaperUpload) ProtoReflect() protoreflect.Message {
	mi := &file_chat_wallpaper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WallPaperUpload.ProtoReflect.Descriptor instead.
func (*WallPaperUpload) Descriptor() ([]byte, []int) {
	return file_chat_wallpaper_proto_rawDescGZIP(), []int{3}
}

func (x *WallPaperUpload) GetUploadedFile() *InputFile {
	if x != nil {
		return x.UploadedFile
	}
	return nil
}

func (x *WallPaperUpload) GetFile() *InputDocument {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *WallPaperUpload) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *WallPaperUpload) GetSettings() *WallPaperSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// WallPaperReset
// @Function
// @Return: Bool
type WallPaperReset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WallPaperReset) Reset() {
	*x = WallPaperReset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_wallpaper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WallPaperReset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WallPaperReset) ProtoMessage() {}

func (x *WallPaperReset) ProtoReflect() protoreflect.Message {
	mi := &file_chat_wallpaper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WallPaperReset.ProtoReflect.Descriptor instead.
func (*WallPaperReset) Descriptor() ([]byte, []int) {
	return file_chat_wallpaper_proto_rawDescGZIP(), []int{4}
}

// InputWallPaper
type InputWallPaper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AccessHash uint64 `protobuf:"fixed64,2,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
}

func (x *InputWallPaper) Reset() {
	*x = InputWallPaper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_wallpaper_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputWallPaper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputWallPaper) ProtoMessage() {}

func (x *InputWallPaper) ProtoReflect() protoreflect.Message {
	mi := &file_chat_wallpaper_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputWallPaper.ProtoReflect.Descriptor instead.
func (*InputWallPaper) Descriptor() ([]byte, []int) {
	return file_chat_wallpaper_proto_rawDescGZIP(), []int{5}
}

func (x *InputWallPaper) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *InputWallPaper) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// WallPaperSettings
type WallPaperSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blur                   bool  `protobuf:"varint,1,opt,name=Blur,proto3" json:"Blur,omitempty"`
	Motion                 bool  `protobuf:"varint,2,opt,name=Motion,proto3" json:"Motion,omitempty"`
	BackgroundColour       int64 `protobuf:"varint,3,opt,name=BackgroundColour,proto3" json:"BackgroundColour,omitempty"`
	BackgroundSecondColour int64 `protobuf:"varint,4,opt,name=BackgroundSecondColour,proto3" json:"BackgroundSecondColour,omitempty"`
	Opacity                int64 `protobuf:"varint,5,opt,name=Opacity,proto3" json:"Opacity,omitempty"`
	Rotation               int64 `protobuf:"varint,6,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
}

func (x *WallPaperSettings) Reset() {
	*x = WallPaperSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_wallpaper_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WallPaperSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WallPaperSettings) ProtoMessage() {}

func (x *WallPaperSettings) ProtoReflect() protoreflect.Message {
	mi := &file_chat_wallpaper_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WallPaperSettings.ProtoReflect.Descriptor instead.
func (*WallPaperSettings) Descriptor() ([]byte, []int) {
	return file_chat_wallpaper_proto_rawDescGZIP(), []int{6}
}

func (x *WallPaperSettings) GetBlur() bool {
	if x != nil {
		return x.Blur
	}
	return false
}

func (x *WallPaperSettings) GetMotion() bool {
	if x != nil {
		return x.Motion
	}
	return false
}

func (x *WallPaperSettings) GetBackgroundColour() int64 {
	if x != nil {
		return x.BackgroundColour
	}
	return 0
}

func (x *WallPaperSettings) GetBackgroundSecondColour() int64 {
	if x != nil {
		return x.BackgroundSecondColour
	}
	return 0
}

func (x *WallPaperSettings) GetOpacity() int64 {
	if x != nil {
		return x.Opacity
	}
	return 0
}

func (x *WallPaperSettings) GetRotation() int64 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

// WallPaper
type WallPaper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AccessHash uint64             `protobuf:"fixed64,2,opt,name=AccessHash,proto3" json:"AccessHash,omitempty"`
	Creator    bool               `protobuf:"varint,3,opt,name=Creator,proto3" json:"Creator,omitempty"`
	Default    bool               `protobuf:"varint,4,opt,name=Default,proto3" json:"Default,omitempty"`
	Pattern    bool               `protobuf:"varint,5,opt,name=Pattern,proto3" json:"Pattern,omitempty"`
	Dark       bool               `protobuf:"varint,6,opt,name=Dark,proto3" json:"Dark,omitempty"`
	Document   *Document          `protobuf:"bytes,7,opt,name=Document,proto3" json:"Document,omitempty"`
	Settings   *WallPaperSettings `protobuf:"bytes,8,opt,name=Settings,proto3" json:"Settings,omitempty"`
}

func (x *WallPaper) Reset() {
	*x = WallPaper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_wallpaper_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WallPaper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WallPaper) ProtoMessage() {}

func (x *WallPaper) ProtoReflect() protoreflect.Message {
	mi := &file_chat_wallpaper_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WallPaper.ProtoReflect.Descriptor instead.
func (*WallPaper) Descriptor() ([]byte, []int) {
	return file_chat_wallpaper_proto_rawDescGZIP(), []int{7}
}

func (x *WallPaper) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *WallPaper) GetAccessHash() uint64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *WallPaper) GetCreator() bool {
	if x != nil {
		return x.Creator
	}
	return false
}

func (x *WallPaper) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *WallPaper) GetPattern() bool {
	if x != nil {
		return x.Pattern
	}
	return false
}

func (x *WallPaper) GetDark() bool {
	if x != nil {
		return x.Dark
	}
	return false
}

func (x *WallPaper) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *WallPaper) GetSettings() *WallPaperSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// WallPapersMany
type WallPapersMany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WallPapers []*WallPaper `protobuf:"bytes,1,rep,name=WallPapers,proto3" json:"WallPapers,omitempty"`
	Count      int32        `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	Crc32Hash  uint32       `protobuf:"varint,3,opt,name=Crc32Hash,proto3" json:"Crc32Hash,omitempty"`
	Empty      bool         `protobuf:"varint,5,opt,name=Empty,proto3" json:"Empty,omitempty"`
}

func (x *WallPapersMany) Reset() {
	*x = WallPapersMany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_wallpaper_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WallPapersMany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WallPapersMany) ProtoMessage() {}

func (x *WallPapersMany) ProtoReflect() protoreflect.Message {
	mi := &file_chat_wallpaper_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WallPapersMany.ProtoReflect.Descriptor instead.
func (*WallPapersMany) Descriptor() ([]byte, []int) {
	return file_chat_wallpaper_proto_rawDescGZIP(), []int{8}
}

func (x *WallPapersMany) GetWallPapers() []*WallPaper {
	if x != nil {
		return x.WallPapers
	}
	return nil
}

func (x *WallPapersMany) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WallPapersMany) GetCrc32Hash() uint32 {
	if x != nil {
		return x.Crc32Hash
	}
	return 0
}

func (x *WallPapersMany) GetEmpty() bool {
	if x != nil {
		return x.Empty
	}
	return false
}

var File_chat_wallpaper_proto protoreflect.FileDescriptor

var file_chat_wallpaper_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d, 0x73, 0x67, 0x1a, 0x10, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x0c, 0x57, 0x61, 0x6c,
	0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x63,
	0x33, 0x32, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72,
	0x63, 0x33, 0x32, 0x48, 0x61, 0x73, 0x68, 0x22, 0x76, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x50,
	0x61, 0x70, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x57, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72,
	0x52, 0x09, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x44, 0x0a, 0x0f, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x52, 0x09, 0x57, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x70, 0x65, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61,
	0x70, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x0c, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a,
	0x04, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61,
	0x70, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x22, 0x40, 0x0a, 0x0e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0xd9, 0x01, 0x0a, 0x11, 0x57, 0x61,
	0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x42, 0x6c, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x42,
	0x6c, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x75,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfc, 0x01, 0x0a, 0x09, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61,
	0x70, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x29, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70,
	0x65, 0x72, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x2e, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x50,
	0x61, 0x70, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x52, 0x0a, 0x57, 0x61, 0x6c,
	0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x63, 0x33, 0x32, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x43, 0x72, 0x63, 0x33, 0x32, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x6d, 0x73, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_chat_wallpaper_proto_rawDescOnce sync.Once
	file_chat_wallpaper_proto_rawDescData = file_chat_wallpaper_proto_rawDesc
)

func file_chat_wallpaper_proto_rawDescGZIP() []byte {
	file_chat_wallpaper_proto_rawDescOnce.Do(func() {
		file_chat_wallpaper_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_wallpaper_proto_rawDescData)
	})
	return file_chat_wallpaper_proto_rawDescData
}

var file_chat_wallpaper_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_chat_wallpaper_proto_goTypes = []interface{}{
	(*WallPaperGet)(nil),      // 0: msg.WallPaperGet
	(*WallPaperSave)(nil),     // 1: msg.WallPaperSave
	(*WallPaperDelete)(nil),   // 2: msg.WallPaperDelete
	(*WallPaperUpload)(nil),   // 3: msg.WallPaperUpload
	(*WallPaperReset)(nil),    // 4: msg.WallPaperReset
	(*InputWallPaper)(nil),    // 5: msg.InputWallPaper
	(*WallPaperSettings)(nil), // 6: msg.WallPaperSettings
	(*WallPaper)(nil),         // 7: msg.WallPaper
	(*WallPapersMany)(nil),    // 8: msg.WallPapersMany
	(*InputFile)(nil),         // 9: msg.InputFile
	(*InputDocument)(nil),     // 10: msg.InputDocument
	(*Document)(nil),          // 11: msg.Document
}
var file_chat_wallpaper_proto_depIdxs = []int32{
	5,  // 0: msg.WallPaperSave.WallPaper:type_name -> msg.InputWallPaper
	6,  // 1: msg.WallPaperSave.Settings:type_name -> msg.WallPaperSettings
	5,  // 2: msg.WallPaperDelete.WallPaper:type_name -> msg.InputWallPaper
	9,  // 3: msg.WallPaperUpload.UploadedFile:type_name -> msg.InputFile
	10, // 4: msg.WallPaperUpload.File:type_name -> msg.InputDocument
	6,  // 5: msg.WallPaperUpload.Settings:type_name -> msg.WallPaperSettings
	11, // 6: msg.WallPaper.Document:type_name -> msg.Document
	6,  // 7: msg.WallPaper.Settings:type_name -> msg.WallPaperSettings
	7,  // 8: msg.WallPapersMany.WallPapers:type_name -> msg.WallPaper
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_chat_wallpaper_proto_init() }
func file_chat_wallpaper_proto_init() {
	if File_chat_wallpaper_proto != nil {
		return
	}
	file_core_types_proto_init()
	file_chat_messages_medias_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chat_wallpaper_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WallPaperGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_wallpaper_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WallPaperSave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_wallpaper_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WallPaperDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_wallpaper_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WallPaperUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_wallpaper_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WallPaperReset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_wallpaper_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputWallPaper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_wallpaper_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WallPaperSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_wallpaper_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WallPaper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_wallpaper_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WallPapersMany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_wallpaper_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chat_wallpaper_proto_goTypes,
		DependencyIndexes: file_chat_wallpaper_proto_depIdxs,
		MessageInfos:      file_chat_wallpaper_proto_msgTypes,
	}.Build()
	File_chat_wallpaper_proto = out.File
	file_chat_wallpaper_proto_rawDesc = nil
	file_chat_wallpaper_proto_goTypes = nil
	file_chat_wallpaper_proto_depIdxs = nil
}
