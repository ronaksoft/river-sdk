// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client.updates.proto

package msg

import (
	fmt "fmt"
	pbytes "github.com/gobwas/pool/pbytes"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

const C_ClientUpdatePendingMessageDelivery int64 = 3828722061

type poolClientUpdatePendingMessageDelivery struct {
	pool sync.Pool
}

func (p *poolClientUpdatePendingMessageDelivery) Get() *ClientUpdatePendingMessageDelivery {
	x, ok := p.pool.Get().(*ClientUpdatePendingMessageDelivery)
	if !ok {
		return &ClientUpdatePendingMessageDelivery{}
	}
	return x
}

func (p *poolClientUpdatePendingMessageDelivery) Put(x *ClientUpdatePendingMessageDelivery) {
	if x.Messages != nil {
		*x.Messages = UserMessage{}
	}

	if x.PendingMessage != nil {
		*x.PendingMessage = ClientPendingMessage{}
	}

	x.Success = false
	p.pool.Put(x)
}

var PoolClientUpdatePendingMessageDelivery = poolClientUpdatePendingMessageDelivery{}

func ResultClientUpdatePendingMessageDelivery(out *MessageEnvelope, res *ClientUpdatePendingMessageDelivery) {
	out.Constructor = C_ClientUpdatePendingMessageDelivery
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_ClientUpdateMessagesDeleted int64 = 3060926862

type poolClientUpdateMessagesDeleted struct {
	pool sync.Pool
}

func (p *poolClientUpdateMessagesDeleted) Get() *ClientUpdateMessagesDeleted {
	x, ok := p.pool.Get().(*ClientUpdateMessagesDeleted)
	if !ok {
		return &ClientUpdateMessagesDeleted{}
	}
	return x
}

func (p *poolClientUpdateMessagesDeleted) Put(x *ClientUpdateMessagesDeleted) {
	x.PeerID = 0
	x.PeerType = 0
	x.MessageIDs = x.MessageIDs[:0]
	p.pool.Put(x)
}

var PoolClientUpdateMessagesDeleted = poolClientUpdateMessagesDeleted{}

func ResultClientUpdateMessagesDeleted(out *MessageEnvelope, res *ClientUpdateMessagesDeleted) {
	out.Constructor = C_ClientUpdateMessagesDeleted
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_ClientUpdateSynced int64 = 4244270269

type poolClientUpdateSynced struct {
	pool sync.Pool
}

func (p *poolClientUpdateSynced) Get() *ClientUpdateSynced {
	x, ok := p.pool.Get().(*ClientUpdateSynced)
	if !ok {
		return &ClientUpdateSynced{}
	}
	return x
}

func (p *poolClientUpdateSynced) Put(x *ClientUpdateSynced) {
	x.Dialogs = false
	x.Contacts = false
	x.Gifs = false
	p.pool.Put(x)
}

var PoolClientUpdateSynced = poolClientUpdateSynced{}

func ResultClientUpdateSynced(out *MessageEnvelope, res *ClientUpdateSynced) {
	out.Constructor = C_ClientUpdateSynced
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

func init() {
	ConstructorNames[3828722061] = "ClientUpdatePendingMessageDelivery"
	ConstructorNames[3060926862] = "ClientUpdateMessagesDeleted"
	ConstructorNames[4244270269] = "ClientUpdateSynced"
}
