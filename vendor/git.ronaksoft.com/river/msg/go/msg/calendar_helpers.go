// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: calendar.proto

package msg

import (
	fmt "fmt"
	pbytes "github.com/gobwas/pool/pbytes"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

const C_CalendarGetEvents int64 = 1010730154

type poolCalendarGetEvents struct {
	pool sync.Pool
}

func (p *poolCalendarGetEvents) Get() *CalendarGetEvents {
	x, ok := p.pool.Get().(*CalendarGetEvents)
	if !ok {
		return &CalendarGetEvents{}
	}
	return x
}

func (p *poolCalendarGetEvents) Put(x *CalendarGetEvents) {
	x.From = 0
	x.To = 0
	x.Filter = 0
	p.pool.Put(x)
}

var PoolCalendarGetEvents = poolCalendarGetEvents{}

func ResultCalendarGetEvents(out *MessageEnvelope, res *CalendarGetEvents) {
	out.Constructor = C_CalendarGetEvents
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_CalendarSetEvent int64 = 3405460640

type poolCalendarSetEvent struct {
	pool sync.Pool
}

func (p *poolCalendarSetEvent) Get() *CalendarSetEvent {
	x, ok := p.pool.Get().(*CalendarSetEvent)
	if !ok {
		return &CalendarSetEvent{}
	}
	return x
}

func (p *poolCalendarSetEvent) Put(x *CalendarSetEvent) {
	x.Name = ""
	x.Date = 0
	x.StartRange = 0
	x.Duration = 0
	x.Recurring = false
	x.Period = 0
	x.AllDay = false
	x.Team = false
	x.Global = false
	p.pool.Put(x)
}

var PoolCalendarSetEvent = poolCalendarSetEvent{}

func ResultCalendarSetEvent(out *MessageEnvelope, res *CalendarSetEvent) {
	out.Constructor = C_CalendarSetEvent
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_CalendarEditEvent int64 = 2440838922

type poolCalendarEditEvent struct {
	pool sync.Pool
}

func (p *poolCalendarEditEvent) Get() *CalendarEditEvent {
	x, ok := p.pool.Get().(*CalendarEditEvent)
	if !ok {
		return &CalendarEditEvent{}
	}
	return x
}

func (p *poolCalendarEditEvent) Put(x *CalendarEditEvent) {
	x.EventID = 0
	x.Name = ""
	x.Date = 0
	x.StartRange = 0
	x.Duration = 0
	x.Recurring = false
	x.Period = 0
	x.AllDay = false
	x.Policy = 0
	p.pool.Put(x)
}

var PoolCalendarEditEvent = poolCalendarEditEvent{}

func ResultCalendarEditEvent(out *MessageEnvelope, res *CalendarEditEvent) {
	out.Constructor = C_CalendarEditEvent
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_CalendarRemoveEvent int64 = 3761579510

type poolCalendarRemoveEvent struct {
	pool sync.Pool
}

func (p *poolCalendarRemoveEvent) Get() *CalendarRemoveEvent {
	x, ok := p.pool.Get().(*CalendarRemoveEvent)
	if !ok {
		return &CalendarRemoveEvent{}
	}
	return x
}

func (p *poolCalendarRemoveEvent) Put(x *CalendarRemoveEvent) {
	x.EventID = 0
	p.pool.Put(x)
}

var PoolCalendarRemoveEvent = poolCalendarRemoveEvent{}

func ResultCalendarRemoveEvent(out *MessageEnvelope, res *CalendarRemoveEvent) {
	out.Constructor = C_CalendarRemoveEvent
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_CalendarEvent int64 = 1185062169

type poolCalendarEvent struct {
	pool sync.Pool
}

func (p *poolCalendarEvent) Get() *CalendarEvent {
	x, ok := p.pool.Get().(*CalendarEvent)
	if !ok {
		return &CalendarEvent{}
	}
	return x
}

func (p *poolCalendarEvent) Put(x *CalendarEvent) {
	x.ID = 0
	x.Name = ""
	x.Recurring = false
	x.Period = 0
	x.AllDay = false
	p.pool.Put(x)
}

var PoolCalendarEvent = poolCalendarEvent{}

func ResultCalendarEvent(out *MessageEnvelope, res *CalendarEvent) {
	out.Constructor = C_CalendarEvent
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_CalendarEventInstance int64 = 3586847608

type poolCalendarEventInstance struct {
	pool sync.Pool
}

func (p *poolCalendarEventInstance) Get() *CalendarEventInstance {
	x, ok := p.pool.Get().(*CalendarEventInstance)
	if !ok {
		return &CalendarEventInstance{}
	}
	return x
}

func (p *poolCalendarEventInstance) Put(x *CalendarEventInstance) {
	x.ID = 0
	x.EventID = 0
	x.Start = 0
	x.End = 0
	x.Colour = ""
	p.pool.Put(x)
}

var PoolCalendarEventInstance = poolCalendarEventInstance{}

func ResultCalendarEventInstance(out *MessageEnvelope, res *CalendarEventInstance) {
	out.Constructor = C_CalendarEventInstance
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

func init() {
	ConstructorNames[1010730154] = "CalendarGetEvents"
	ConstructorNames[3405460640] = "CalendarSetEvent"
	ConstructorNames[2440838922] = "CalendarEditEvent"
	ConstructorNames[3761579510] = "CalendarRemoveEvent"
	ConstructorNames[1185062169] = "CalendarEvent"
	ConstructorNames[3586847608] = "CalendarEventInstance"
}
