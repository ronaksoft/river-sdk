// Code generated by Rony's protoc plugin; DO NOT EDIT.
// ProtoC ver. v4.25.2
// Rony ver. v0.12.22
// Source: chat.messages.proto

package msg

import (
	bytes "bytes"
	edge "github.com/ronaksoft/rony/edge"
	pools "github.com/ronaksoft/rony/pools"
	registry "github.com/ronaksoft/rony/registry"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	sync "sync"
)

var _ = pools.Imported

const C_MessagesSend int64 = 3000244183

type poolMessagesSend struct {
	pool sync.Pool
}

func (p *poolMessagesSend) Get() *MessagesSend {
	x, ok := p.pool.Get().(*MessagesSend)
	if !ok {
		x = &MessagesSend{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesSend) Put(x *MessagesSend) {
	if x == nil {
		return
	}

	x.RandomID = 0
	PoolInputPeer.Put(x.Peer)
	x.Body = ""
	x.ReplyTo = 0
	x.ClearDraft = false
	for _, z := range x.Entities {
		PoolMessageEntity.Put(z)
	}
	x.Entities = x.Entities[:0]

	p.pool.Put(x)
}

var PoolMessagesSend = poolMessagesSend{}

func (x *MessagesSend) DeepCopy(z *MessagesSend) {
	z.RandomID = x.RandomID
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.Body = x.Body
	z.ReplyTo = x.ReplyTo
	z.ClearDraft = x.ClearDraft
	for idx := range x.Entities {
		if x.Entities[idx] == nil {
			continue
		}
		xx := PoolMessageEntity.Get()
		x.Entities[idx].DeepCopy(xx)
		z.Entities = append(z.Entities, xx)
	}
}

func (x *MessagesSend) Clone() *MessagesSend {
	z := &MessagesSend{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesSend) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesSend) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesSend) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesSend) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesSend) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesSend, x)
}

const C_MessagesSendMedia int64 = 25498545

type poolMessagesSendMedia struct {
	pool sync.Pool
}

func (p *poolMessagesSendMedia) Get() *MessagesSendMedia {
	x, ok := p.pool.Get().(*MessagesSendMedia)
	if !ok {
		x = &MessagesSendMedia{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesSendMedia) Put(x *MessagesSendMedia) {
	if x == nil {
		return
	}

	x.RandomID = 0
	PoolInputPeer.Put(x.Peer)
	x.MediaType = 0
	x.MediaData = x.MediaData[:0]
	x.ReplyTo = 0
	x.ClearDraft = false

	p.pool.Put(x)
}

var PoolMessagesSendMedia = poolMessagesSendMedia{}

func (x *MessagesSendMedia) DeepCopy(z *MessagesSendMedia) {
	z.RandomID = x.RandomID
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.MediaType = x.MediaType
	z.MediaData = append(z.MediaData[:0], x.MediaData...)
	z.ReplyTo = x.ReplyTo
	z.ClearDraft = x.ClearDraft
}

func (x *MessagesSendMedia) Clone() *MessagesSendMedia {
	z := &MessagesSendMedia{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesSendMedia) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesSendMedia) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesSendMedia) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesSendMedia) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesSendMedia) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesSendMedia, x)
}

const C_MessagesEdit int64 = 2492658432

type poolMessagesEdit struct {
	pool sync.Pool
}

func (p *poolMessagesEdit) Get() *MessagesEdit {
	x, ok := p.pool.Get().(*MessagesEdit)
	if !ok {
		x = &MessagesEdit{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesEdit) Put(x *MessagesEdit) {
	if x == nil {
		return
	}

	x.RandomID = 0
	PoolInputPeer.Put(x.Peer)
	x.Body = ""
	x.MessageID = 0
	for _, z := range x.Entities {
		PoolMessageEntity.Put(z)
	}
	x.Entities = x.Entities[:0]

	p.pool.Put(x)
}

var PoolMessagesEdit = poolMessagesEdit{}

func (x *MessagesEdit) DeepCopy(z *MessagesEdit) {
	z.RandomID = x.RandomID
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.Body = x.Body
	z.MessageID = x.MessageID
	for idx := range x.Entities {
		if x.Entities[idx] == nil {
			continue
		}
		xx := PoolMessageEntity.Get()
		x.Entities[idx].DeepCopy(xx)
		z.Entities = append(z.Entities, xx)
	}
}

func (x *MessagesEdit) Clone() *MessagesEdit {
	z := &MessagesEdit{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesEdit) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesEdit) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesEdit) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesEdit) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesEdit) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesEdit, x)
}

const C_MessagesEditMedia int64 = 3565425857

type poolMessagesEditMedia struct {
	pool sync.Pool
}

func (p *poolMessagesEditMedia) Get() *MessagesEditMedia {
	x, ok := p.pool.Get().(*MessagesEditMedia)
	if !ok {
		x = &MessagesEditMedia{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesEditMedia) Put(x *MessagesEditMedia) {
	if x == nil {
		return
	}

	x.RandomID = 0
	PoolInputPeer.Put(x.Peer)
	x.MessageID = 0
	x.Caption = ""
	for _, z := range x.Entities {
		PoolMessageEntity.Put(z)
	}
	x.Entities = x.Entities[:0]

	p.pool.Put(x)
}

var PoolMessagesEditMedia = poolMessagesEditMedia{}

func (x *MessagesEditMedia) DeepCopy(z *MessagesEditMedia) {
	z.RandomID = x.RandomID
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.MessageID = x.MessageID
	z.Caption = x.Caption
	for idx := range x.Entities {
		if x.Entities[idx] == nil {
			continue
		}
		xx := PoolMessageEntity.Get()
		x.Entities[idx].DeepCopy(xx)
		z.Entities = append(z.Entities, xx)
	}
}

func (x *MessagesEditMedia) Clone() *MessagesEditMedia {
	z := &MessagesEditMedia{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesEditMedia) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesEditMedia) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesEditMedia) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesEditMedia) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesEditMedia) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesEditMedia, x)
}

const C_MessagesReadHistory int64 = 1300826534

type poolMessagesReadHistory struct {
	pool sync.Pool
}

func (p *poolMessagesReadHistory) Get() *MessagesReadHistory {
	x, ok := p.pool.Get().(*MessagesReadHistory)
	if !ok {
		x = &MessagesReadHistory{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesReadHistory) Put(x *MessagesReadHistory) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.MaxID = 0

	p.pool.Put(x)
}

var PoolMessagesReadHistory = poolMessagesReadHistory{}

func (x *MessagesReadHistory) DeepCopy(z *MessagesReadHistory) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.MaxID = x.MaxID
}

func (x *MessagesReadHistory) Clone() *MessagesReadHistory {
	z := &MessagesReadHistory{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesReadHistory) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesReadHistory) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesReadHistory) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesReadHistory) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesReadHistory) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesReadHistory, x)
}

const C_MessagesGet int64 = 2151382317

type poolMessagesGet struct {
	pool sync.Pool
}

func (p *poolMessagesGet) Get() *MessagesGet {
	x, ok := p.pool.Get().(*MessagesGet)
	if !ok {
		x = &MessagesGet{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesGet) Put(x *MessagesGet) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.MessagesIDs = x.MessagesIDs[:0]

	p.pool.Put(x)
}

var PoolMessagesGet = poolMessagesGet{}

func (x *MessagesGet) DeepCopy(z *MessagesGet) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.MessagesIDs = append(z.MessagesIDs[:0], x.MessagesIDs...)
}

func (x *MessagesGet) Clone() *MessagesGet {
	z := &MessagesGet{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesGet) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesGet) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesGet) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesGet) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesGet) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesGet, x)
}

const C_MessagesGetHistory int64 = 3396939832

type poolMessagesGetHistory struct {
	pool sync.Pool
}

func (p *poolMessagesGetHistory) Get() *MessagesGetHistory {
	x, ok := p.pool.Get().(*MessagesGetHistory)
	if !ok {
		x = &MessagesGetHistory{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesGetHistory) Put(x *MessagesGetHistory) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.Limit = 0
	x.MaxID = 0
	x.MinID = 0

	p.pool.Put(x)
}

var PoolMessagesGetHistory = poolMessagesGetHistory{}

func (x *MessagesGetHistory) DeepCopy(z *MessagesGetHistory) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.Limit = x.Limit
	z.MaxID = x.MaxID
	z.MinID = x.MinID
}

func (x *MessagesGetHistory) Clone() *MessagesGetHistory {
	z := &MessagesGetHistory{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesGetHistory) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesGetHistory) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesGetHistory) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesGetHistory) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesGetHistory) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesGetHistory, x)
}

const C_MessagesGetMediaHistory int64 = 4027732752

type poolMessagesGetMediaHistory struct {
	pool sync.Pool
}

func (p *poolMessagesGetMediaHistory) Get() *MessagesGetMediaHistory {
	x, ok := p.pool.Get().(*MessagesGetMediaHistory)
	if !ok {
		x = &MessagesGetMediaHistory{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesGetMediaHistory) Put(x *MessagesGetMediaHistory) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.Limit = 0
	x.MaxID = 0
	x.Cat = 0

	p.pool.Put(x)
}

var PoolMessagesGetMediaHistory = poolMessagesGetMediaHistory{}

func (x *MessagesGetMediaHistory) DeepCopy(z *MessagesGetMediaHistory) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.Limit = x.Limit
	z.MaxID = x.MaxID
	z.Cat = x.Cat
}

func (x *MessagesGetMediaHistory) Clone() *MessagesGetMediaHistory {
	z := &MessagesGetMediaHistory{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesGetMediaHistory) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesGetMediaHistory) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesGetMediaHistory) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesGetMediaHistory) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesGetMediaHistory) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesGetMediaHistory, x)
}

const C_MessagesGetDialogs int64 = 1429532372

type poolMessagesGetDialogs struct {
	pool sync.Pool
}

func (p *poolMessagesGetDialogs) Get() *MessagesGetDialogs {
	x, ok := p.pool.Get().(*MessagesGetDialogs)
	if !ok {
		x = &MessagesGetDialogs{}
	}

	return x
}

func (p *poolMessagesGetDialogs) Put(x *MessagesGetDialogs) {
	if x == nil {
		return
	}

	x.Limit = 0
	x.Offset = 0
	x.ExcludePinned = false

	p.pool.Put(x)
}

var PoolMessagesGetDialogs = poolMessagesGetDialogs{}

func (x *MessagesGetDialogs) DeepCopy(z *MessagesGetDialogs) {
	z.Limit = x.Limit
	z.Offset = x.Offset
	z.ExcludePinned = x.ExcludePinned
}

func (x *MessagesGetDialogs) Clone() *MessagesGetDialogs {
	z := &MessagesGetDialogs{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesGetDialogs) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesGetDialogs) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesGetDialogs) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesGetDialogs) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesGetDialogs) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesGetDialogs, x)
}

const C_MessagesGetPinnedDialogs int64 = 1963188912

type poolMessagesGetPinnedDialogs struct {
	pool sync.Pool
}

func (p *poolMessagesGetPinnedDialogs) Get() *MessagesGetPinnedDialogs {
	x, ok := p.pool.Get().(*MessagesGetPinnedDialogs)
	if !ok {
		x = &MessagesGetPinnedDialogs{}
	}

	return x
}

func (p *poolMessagesGetPinnedDialogs) Put(x *MessagesGetPinnedDialogs) {
	if x == nil {
		return
	}

	p.pool.Put(x)
}

var PoolMessagesGetPinnedDialogs = poolMessagesGetPinnedDialogs{}

func (x *MessagesGetPinnedDialogs) DeepCopy(z *MessagesGetPinnedDialogs) {
}

func (x *MessagesGetPinnedDialogs) Clone() *MessagesGetPinnedDialogs {
	z := &MessagesGetPinnedDialogs{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesGetPinnedDialogs) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesGetPinnedDialogs) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesGetPinnedDialogs) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesGetPinnedDialogs) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesGetPinnedDialogs) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesGetPinnedDialogs, x)
}

const C_MessagesGetDialog int64 = 1050840034

type poolMessagesGetDialog struct {
	pool sync.Pool
}

func (p *poolMessagesGetDialog) Get() *MessagesGetDialog {
	x, ok := p.pool.Get().(*MessagesGetDialog)
	if !ok {
		x = &MessagesGetDialog{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesGetDialog) Put(x *MessagesGetDialog) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)

	p.pool.Put(x)
}

var PoolMessagesGetDialog = poolMessagesGetDialog{}

func (x *MessagesGetDialog) DeepCopy(z *MessagesGetDialog) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
}

func (x *MessagesGetDialog) Clone() *MessagesGetDialog {
	z := &MessagesGetDialog{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesGetDialog) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesGetDialog) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesGetDialog) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesGetDialog) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesGetDialog) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesGetDialog, x)
}

const C_MessagesSetTyping int64 = 1540214486

type poolMessagesSetTyping struct {
	pool sync.Pool
}

func (p *poolMessagesSetTyping) Get() *MessagesSetTyping {
	x, ok := p.pool.Get().(*MessagesSetTyping)
	if !ok {
		x = &MessagesSetTyping{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesSetTyping) Put(x *MessagesSetTyping) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.Action = 0

	p.pool.Put(x)
}

var PoolMessagesSetTyping = poolMessagesSetTyping{}

func (x *MessagesSetTyping) DeepCopy(z *MessagesSetTyping) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.Action = x.Action
}

func (x *MessagesSetTyping) Clone() *MessagesSetTyping {
	z := &MessagesSetTyping{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesSetTyping) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesSetTyping) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesSetTyping) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesSetTyping) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesSetTyping) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesSetTyping, x)
}

const C_MessagesClearHistory int64 = 1981246180

type poolMessagesClearHistory struct {
	pool sync.Pool
}

func (p *poolMessagesClearHistory) Get() *MessagesClearHistory {
	x, ok := p.pool.Get().(*MessagesClearHistory)
	if !ok {
		x = &MessagesClearHistory{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesClearHistory) Put(x *MessagesClearHistory) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.MaxID = 0
	x.Delete = false

	p.pool.Put(x)
}

var PoolMessagesClearHistory = poolMessagesClearHistory{}

func (x *MessagesClearHistory) DeepCopy(z *MessagesClearHistory) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.MaxID = x.MaxID
	z.Delete = x.Delete
}

func (x *MessagesClearHistory) Clone() *MessagesClearHistory {
	z := &MessagesClearHistory{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesClearHistory) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesClearHistory) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesClearHistory) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesClearHistory) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesClearHistory) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesClearHistory, x)
}

const C_MessagesDelete int64 = 3487616910

type poolMessagesDelete struct {
	pool sync.Pool
}

func (p *poolMessagesDelete) Get() *MessagesDelete {
	x, ok := p.pool.Get().(*MessagesDelete)
	if !ok {
		x = &MessagesDelete{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesDelete) Put(x *MessagesDelete) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.MessageIDs = x.MessageIDs[:0]
	x.Revoke = false

	p.pool.Put(x)
}

var PoolMessagesDelete = poolMessagesDelete{}

func (x *MessagesDelete) DeepCopy(z *MessagesDelete) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.MessageIDs = append(z.MessageIDs[:0], x.MessageIDs...)
	z.Revoke = x.Revoke
}

func (x *MessagesDelete) Clone() *MessagesDelete {
	z := &MessagesDelete{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesDelete) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesDelete) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesDelete) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesDelete) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesDelete) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesDelete, x)
}

const C_MessagesForward int64 = 2662884753

type poolMessagesForward struct {
	pool sync.Pool
}

func (p *poolMessagesForward) Get() *MessagesForward {
	x, ok := p.pool.Get().(*MessagesForward)
	if !ok {
		x = &MessagesForward{}
	}

	x.FromPeer = PoolInputPeer.Get()

	x.ToPeer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesForward) Put(x *MessagesForward) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.FromPeer)
	PoolInputPeer.Put(x.ToPeer)
	x.Silence = false
	x.MessageIDs = x.MessageIDs[:0]
	x.RandomID = 0

	p.pool.Put(x)
}

var PoolMessagesForward = poolMessagesForward{}

func (x *MessagesForward) DeepCopy(z *MessagesForward) {
	if x.FromPeer != nil {
		if z.FromPeer == nil {
			z.FromPeer = PoolInputPeer.Get()
		}
		x.FromPeer.DeepCopy(z.FromPeer)
	} else {
		PoolInputPeer.Put(z.FromPeer)
		z.FromPeer = nil
	}
	if x.ToPeer != nil {
		if z.ToPeer == nil {
			z.ToPeer = PoolInputPeer.Get()
		}
		x.ToPeer.DeepCopy(z.ToPeer)
	} else {
		PoolInputPeer.Put(z.ToPeer)
		z.ToPeer = nil
	}
	z.Silence = x.Silence
	z.MessageIDs = append(z.MessageIDs[:0], x.MessageIDs...)
	z.RandomID = x.RandomID
}

func (x *MessagesForward) Clone() *MessagesForward {
	z := &MessagesForward{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesForward) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesForward) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesForward) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesForward) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesForward) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesForward, x)
}

const C_MessagesReadContents int64 = 1781251275

type poolMessagesReadContents struct {
	pool sync.Pool
}

func (p *poolMessagesReadContents) Get() *MessagesReadContents {
	x, ok := p.pool.Get().(*MessagesReadContents)
	if !ok {
		x = &MessagesReadContents{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesReadContents) Put(x *MessagesReadContents) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.MessageIDs = x.MessageIDs[:0]

	p.pool.Put(x)
}

var PoolMessagesReadContents = poolMessagesReadContents{}

func (x *MessagesReadContents) DeepCopy(z *MessagesReadContents) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.MessageIDs = append(z.MessageIDs[:0], x.MessageIDs...)
}

func (x *MessagesReadContents) Clone() *MessagesReadContents {
	z := &MessagesReadContents{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesReadContents) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesReadContents) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesReadContents) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesReadContents) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesReadContents) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesReadContents, x)
}

const C_MessagesSaveDraft int64 = 921840607

type poolMessagesSaveDraft struct {
	pool sync.Pool
}

func (p *poolMessagesSaveDraft) Get() *MessagesSaveDraft {
	x, ok := p.pool.Get().(*MessagesSaveDraft)
	if !ok {
		x = &MessagesSaveDraft{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesSaveDraft) Put(x *MessagesSaveDraft) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.ReplyTo = 0
	x.Body = ""
	for _, z := range x.Entities {
		PoolMessageEntity.Put(z)
	}
	x.Entities = x.Entities[:0]
	x.EditedID = 0

	p.pool.Put(x)
}

var PoolMessagesSaveDraft = poolMessagesSaveDraft{}

func (x *MessagesSaveDraft) DeepCopy(z *MessagesSaveDraft) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.ReplyTo = x.ReplyTo
	z.Body = x.Body
	for idx := range x.Entities {
		if x.Entities[idx] == nil {
			continue
		}
		xx := PoolMessageEntity.Get()
		x.Entities[idx].DeepCopy(xx)
		z.Entities = append(z.Entities, xx)
	}
	z.EditedID = x.EditedID
}

func (x *MessagesSaveDraft) Clone() *MessagesSaveDraft {
	z := &MessagesSaveDraft{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesSaveDraft) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesSaveDraft) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesSaveDraft) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesSaveDraft) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesSaveDraft) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesSaveDraft, x)
}

const C_MessagesClearDraft int64 = 2164204563

type poolMessagesClearDraft struct {
	pool sync.Pool
}

func (p *poolMessagesClearDraft) Get() *MessagesClearDraft {
	x, ok := p.pool.Get().(*MessagesClearDraft)
	if !ok {
		x = &MessagesClearDraft{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesClearDraft) Put(x *MessagesClearDraft) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)

	p.pool.Put(x)
}

var PoolMessagesClearDraft = poolMessagesClearDraft{}

func (x *MessagesClearDraft) DeepCopy(z *MessagesClearDraft) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
}

func (x *MessagesClearDraft) Clone() *MessagesClearDraft {
	z := &MessagesClearDraft{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesClearDraft) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesClearDraft) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesClearDraft) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesClearDraft) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesClearDraft) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesClearDraft, x)
}

const C_MessagesToggleDialogPin int64 = 1352871220

type poolMessagesToggleDialogPin struct {
	pool sync.Pool
}

func (p *poolMessagesToggleDialogPin) Get() *MessagesToggleDialogPin {
	x, ok := p.pool.Get().(*MessagesToggleDialogPin)
	if !ok {
		x = &MessagesToggleDialogPin{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesToggleDialogPin) Put(x *MessagesToggleDialogPin) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.Pin = false

	p.pool.Put(x)
}

var PoolMessagesToggleDialogPin = poolMessagesToggleDialogPin{}

func (x *MessagesToggleDialogPin) DeepCopy(z *MessagesToggleDialogPin) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.Pin = x.Pin
}

func (x *MessagesToggleDialogPin) Clone() *MessagesToggleDialogPin {
	z := &MessagesToggleDialogPin{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesToggleDialogPin) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesToggleDialogPin) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesToggleDialogPin) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesToggleDialogPin) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesToggleDialogPin) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesToggleDialogPin, x)
}

const C_MessagesReorderPinnedDialogs int64 = 1409872986

type poolMessagesReorderPinnedDialogs struct {
	pool sync.Pool
}

func (p *poolMessagesReorderPinnedDialogs) Get() *MessagesReorderPinnedDialogs {
	x, ok := p.pool.Get().(*MessagesReorderPinnedDialogs)
	if !ok {
		x = &MessagesReorderPinnedDialogs{}
	}

	return x
}

func (p *poolMessagesReorderPinnedDialogs) Put(x *MessagesReorderPinnedDialogs) {
	if x == nil {
		return
	}

	for _, z := range x.Peers {
		PoolInputPeer.Put(z)
	}
	x.Peers = x.Peers[:0]

	p.pool.Put(x)
}

var PoolMessagesReorderPinnedDialogs = poolMessagesReorderPinnedDialogs{}

func (x *MessagesReorderPinnedDialogs) DeepCopy(z *MessagesReorderPinnedDialogs) {
	for idx := range x.Peers {
		if x.Peers[idx] == nil {
			continue
		}
		xx := PoolInputPeer.Get()
		x.Peers[idx].DeepCopy(xx)
		z.Peers = append(z.Peers, xx)
	}
}

func (x *MessagesReorderPinnedDialogs) Clone() *MessagesReorderPinnedDialogs {
	z := &MessagesReorderPinnedDialogs{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesReorderPinnedDialogs) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesReorderPinnedDialogs) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesReorderPinnedDialogs) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesReorderPinnedDialogs) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesReorderPinnedDialogs) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesReorderPinnedDialogs, x)
}

const C_MessagesSendScreenShotNotification int64 = 3682116055

type poolMessagesSendScreenShotNotification struct {
	pool sync.Pool
}

func (p *poolMessagesSendScreenShotNotification) Get() *MessagesSendScreenShotNotification {
	x, ok := p.pool.Get().(*MessagesSendScreenShotNotification)
	if !ok {
		x = &MessagesSendScreenShotNotification{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesSendScreenShotNotification) Put(x *MessagesSendScreenShotNotification) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.RandomID = 0
	x.ReplyTo = 0
	x.MinID = 0
	x.MaxID = 0

	p.pool.Put(x)
}

var PoolMessagesSendScreenShotNotification = poolMessagesSendScreenShotNotification{}

func (x *MessagesSendScreenShotNotification) DeepCopy(z *MessagesSendScreenShotNotification) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.RandomID = x.RandomID
	z.ReplyTo = x.ReplyTo
	z.MinID = x.MinID
	z.MaxID = x.MaxID
}

func (x *MessagesSendScreenShotNotification) Clone() *MessagesSendScreenShotNotification {
	z := &MessagesSendScreenShotNotification{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesSendScreenShotNotification) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesSendScreenShotNotification) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesSendScreenShotNotification) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesSendScreenShotNotification) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesSendScreenShotNotification) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesSendScreenShotNotification, x)
}

const C_MessagesSendReaction int64 = 279494057

type poolMessagesSendReaction struct {
	pool sync.Pool
}

func (p *poolMessagesSendReaction) Get() *MessagesSendReaction {
	x, ok := p.pool.Get().(*MessagesSendReaction)
	if !ok {
		x = &MessagesSendReaction{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesSendReaction) Put(x *MessagesSendReaction) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.MessageID = 0
	x.Reaction = ""

	p.pool.Put(x)
}

var PoolMessagesSendReaction = poolMessagesSendReaction{}

func (x *MessagesSendReaction) DeepCopy(z *MessagesSendReaction) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.MessageID = x.MessageID
	z.Reaction = x.Reaction
}

func (x *MessagesSendReaction) Clone() *MessagesSendReaction {
	z := &MessagesSendReaction{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesSendReaction) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesSendReaction) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesSendReaction) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesSendReaction) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesSendReaction) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesSendReaction, x)
}

const C_MessagesDeleteReaction int64 = 1547991459

type poolMessagesDeleteReaction struct {
	pool sync.Pool
}

func (p *poolMessagesDeleteReaction) Get() *MessagesDeleteReaction {
	x, ok := p.pool.Get().(*MessagesDeleteReaction)
	if !ok {
		x = &MessagesDeleteReaction{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesDeleteReaction) Put(x *MessagesDeleteReaction) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.MessageID = 0
	x.Reactions = x.Reactions[:0]

	p.pool.Put(x)
}

var PoolMessagesDeleteReaction = poolMessagesDeleteReaction{}

func (x *MessagesDeleteReaction) DeepCopy(z *MessagesDeleteReaction) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.MessageID = x.MessageID
	z.Reactions = append(z.Reactions[:0], x.Reactions...)
}

func (x *MessagesDeleteReaction) Clone() *MessagesDeleteReaction {
	z := &MessagesDeleteReaction{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesDeleteReaction) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesDeleteReaction) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesDeleteReaction) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesDeleteReaction) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesDeleteReaction) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesDeleteReaction, x)
}

const C_MessagesGetReactionList int64 = 3097050126

type poolMessagesGetReactionList struct {
	pool sync.Pool
}

func (p *poolMessagesGetReactionList) Get() *MessagesGetReactionList {
	x, ok := p.pool.Get().(*MessagesGetReactionList)
	if !ok {
		x = &MessagesGetReactionList{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesGetReactionList) Put(x *MessagesGetReactionList) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.MessageID = 0
	x.Hash = 0

	p.pool.Put(x)
}

var PoolMessagesGetReactionList = poolMessagesGetReactionList{}

func (x *MessagesGetReactionList) DeepCopy(z *MessagesGetReactionList) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.MessageID = x.MessageID
	z.Hash = x.Hash
}

func (x *MessagesGetReactionList) Clone() *MessagesGetReactionList {
	z := &MessagesGetReactionList{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesGetReactionList) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesGetReactionList) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesGetReactionList) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesGetReactionList) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesGetReactionList) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesGetReactionList, x)
}

const C_MessagesTogglePin int64 = 2824078244

type poolMessagesTogglePin struct {
	pool sync.Pool
}

func (p *poolMessagesTogglePin) Get() *MessagesTogglePin {
	x, ok := p.pool.Get().(*MessagesTogglePin)
	if !ok {
		x = &MessagesTogglePin{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesTogglePin) Put(x *MessagesTogglePin) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.MessageID = 0
	x.Silent = false

	p.pool.Put(x)
}

var PoolMessagesTogglePin = poolMessagesTogglePin{}

func (x *MessagesTogglePin) DeepCopy(z *MessagesTogglePin) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.MessageID = x.MessageID
	z.Silent = x.Silent
}

func (x *MessagesTogglePin) Clone() *MessagesTogglePin {
	z := &MessagesTogglePin{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesTogglePin) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesTogglePin) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesTogglePin) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesTogglePin) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesTogglePin) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesTogglePin, x)
}

const C_MessagesReadReaction int64 = 2047257163

type poolMessagesReadReaction struct {
	pool sync.Pool
}

func (p *poolMessagesReadReaction) Get() *MessagesReadReaction {
	x, ok := p.pool.Get().(*MessagesReadReaction)
	if !ok {
		x = &MessagesReadReaction{}
	}

	x.Peer = PoolInputPeer.Get()

	return x
}

func (p *poolMessagesReadReaction) Put(x *MessagesReadReaction) {
	if x == nil {
		return
	}

	PoolInputPeer.Put(x.Peer)
	x.MessageIDs = x.MessageIDs[:0]

	p.pool.Put(x)
}

var PoolMessagesReadReaction = poolMessagesReadReaction{}

func (x *MessagesReadReaction) DeepCopy(z *MessagesReadReaction) {
	if x.Peer != nil {
		if z.Peer == nil {
			z.Peer = PoolInputPeer.Get()
		}
		x.Peer.DeepCopy(z.Peer)
	} else {
		PoolInputPeer.Put(z.Peer)
		z.Peer = nil
	}
	z.MessageIDs = append(z.MessageIDs[:0], x.MessageIDs...)
}

func (x *MessagesReadReaction) Clone() *MessagesReadReaction {
	z := &MessagesReadReaction{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesReadReaction) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesReadReaction) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesReadReaction) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesReadReaction) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesReadReaction) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesReadReaction, x)
}

const C_MessagesDialogs int64 = 3252610224

type poolMessagesDialogs struct {
	pool sync.Pool
}

func (p *poolMessagesDialogs) Get() *MessagesDialogs {
	x, ok := p.pool.Get().(*MessagesDialogs)
	if !ok {
		x = &MessagesDialogs{}
	}

	return x
}

func (p *poolMessagesDialogs) Put(x *MessagesDialogs) {
	if x == nil {
		return
	}

	for _, z := range x.Dialogs {
		PoolDialog.Put(z)
	}
	x.Dialogs = x.Dialogs[:0]
	for _, z := range x.Users {
		PoolUser.Put(z)
	}
	x.Users = x.Users[:0]
	for _, z := range x.Messages {
		PoolUserMessage.Put(z)
	}
	x.Messages = x.Messages[:0]
	x.Count = 0
	x.UpdateID = 0
	for _, z := range x.Groups {
		PoolGroup.Put(z)
	}
	x.Groups = x.Groups[:0]

	p.pool.Put(x)
}

var PoolMessagesDialogs = poolMessagesDialogs{}

func (x *MessagesDialogs) DeepCopy(z *MessagesDialogs) {
	for idx := range x.Dialogs {
		if x.Dialogs[idx] == nil {
			continue
		}
		xx := PoolDialog.Get()
		x.Dialogs[idx].DeepCopy(xx)
		z.Dialogs = append(z.Dialogs, xx)
	}
	for idx := range x.Users {
		if x.Users[idx] == nil {
			continue
		}
		xx := PoolUser.Get()
		x.Users[idx].DeepCopy(xx)
		z.Users = append(z.Users, xx)
	}
	for idx := range x.Messages {
		if x.Messages[idx] == nil {
			continue
		}
		xx := PoolUserMessage.Get()
		x.Messages[idx].DeepCopy(xx)
		z.Messages = append(z.Messages, xx)
	}
	z.Count = x.Count
	z.UpdateID = x.UpdateID
	for idx := range x.Groups {
		if x.Groups[idx] == nil {
			continue
		}
		xx := PoolGroup.Get()
		x.Groups[idx].DeepCopy(xx)
		z.Groups = append(z.Groups, xx)
	}
}

func (x *MessagesDialogs) Clone() *MessagesDialogs {
	z := &MessagesDialogs{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesDialogs) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesDialogs) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesDialogs) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesDialogs) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesDialogs) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesDialogs, x)
}

const C_MessagesSent int64 = 2942502835

type poolMessagesSent struct {
	pool sync.Pool
}

func (p *poolMessagesSent) Get() *MessagesSent {
	x, ok := p.pool.Get().(*MessagesSent)
	if !ok {
		x = &MessagesSent{}
	}

	return x
}

func (p *poolMessagesSent) Put(x *MessagesSent) {
	if x == nil {
		return
	}

	x.MessageID = 0
	x.RandomID = 0
	x.CreatedOn = 0

	p.pool.Put(x)
}

var PoolMessagesSent = poolMessagesSent{}

func (x *MessagesSent) DeepCopy(z *MessagesSent) {
	z.MessageID = x.MessageID
	z.RandomID = x.RandomID
	z.CreatedOn = x.CreatedOn
}

func (x *MessagesSent) Clone() *MessagesSent {
	z := &MessagesSent{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesSent) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesSent) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesSent) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesSent) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesSent) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesSent, x)
}

const C_MessagesMany int64 = 1713238910

type poolMessagesMany struct {
	pool sync.Pool
}

func (p *poolMessagesMany) Get() *MessagesMany {
	x, ok := p.pool.Get().(*MessagesMany)
	if !ok {
		x = &MessagesMany{}
	}

	return x
}

func (p *poolMessagesMany) Put(x *MessagesMany) {
	if x == nil {
		return
	}

	for _, z := range x.Messages {
		PoolUserMessage.Put(z)
	}
	x.Messages = x.Messages[:0]
	for _, z := range x.Users {
		PoolUser.Put(z)
	}
	x.Users = x.Users[:0]
	for _, z := range x.Groups {
		PoolGroup.Put(z)
	}
	x.Groups = x.Groups[:0]
	x.Continuous = false
	x.Empty = false

	p.pool.Put(x)
}

var PoolMessagesMany = poolMessagesMany{}

func (x *MessagesMany) DeepCopy(z *MessagesMany) {
	for idx := range x.Messages {
		if x.Messages[idx] == nil {
			continue
		}
		xx := PoolUserMessage.Get()
		x.Messages[idx].DeepCopy(xx)
		z.Messages = append(z.Messages, xx)
	}
	for idx := range x.Users {
		if x.Users[idx] == nil {
			continue
		}
		xx := PoolUser.Get()
		x.Users[idx].DeepCopy(xx)
		z.Users = append(z.Users, xx)
	}
	for idx := range x.Groups {
		if x.Groups[idx] == nil {
			continue
		}
		xx := PoolGroup.Get()
		x.Groups[idx].DeepCopy(xx)
		z.Groups = append(z.Groups, xx)
	}
	z.Continuous = x.Continuous
	z.Empty = x.Empty
}

func (x *MessagesMany) Clone() *MessagesMany {
	z := &MessagesMany{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesMany) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesMany) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesMany) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesMany) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesMany) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesMany, x)
}

const C_MessagesReactionList int64 = 181278607

type poolMessagesReactionList struct {
	pool sync.Pool
}

func (p *poolMessagesReactionList) Get() *MessagesReactionList {
	x, ok := p.pool.Get().(*MessagesReactionList)
	if !ok {
		x = &MessagesReactionList{}
	}

	return x
}

func (p *poolMessagesReactionList) Put(x *MessagesReactionList) {
	if x == nil {
		return
	}

	for _, z := range x.List {
		PoolReactionList.Put(z)
	}
	x.List = x.List[:0]
	for _, z := range x.Users {
		PoolUser.Put(z)
	}
	x.Users = x.Users[:0]
	x.Hash = 0
	x.Modified = false

	p.pool.Put(x)
}

var PoolMessagesReactionList = poolMessagesReactionList{}

func (x *MessagesReactionList) DeepCopy(z *MessagesReactionList) {
	for idx := range x.List {
		if x.List[idx] == nil {
			continue
		}
		xx := PoolReactionList.Get()
		x.List[idx].DeepCopy(xx)
		z.List = append(z.List, xx)
	}
	for idx := range x.Users {
		if x.Users[idx] == nil {
			continue
		}
		xx := PoolUser.Get()
		x.Users[idx].DeepCopy(xx)
		z.Users = append(z.Users, xx)
	}
	z.Hash = x.Hash
	z.Modified = x.Modified
}

func (x *MessagesReactionList) Clone() *MessagesReactionList {
	z := &MessagesReactionList{}
	x.DeepCopy(z)
	return z
}

func (x *MessagesReactionList) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *MessagesReactionList) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *MessagesReactionList) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *MessagesReactionList) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *MessagesReactionList) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_MessagesReactionList, x)
}

const C_ReactionList int64 = 4260855916

type poolReactionList struct {
	pool sync.Pool
}

func (p *poolReactionList) Get() *ReactionList {
	x, ok := p.pool.Get().(*ReactionList)
	if !ok {
		x = &ReactionList{}
	}

	return x
}

func (p *poolReactionList) Put(x *ReactionList) {
	if x == nil {
		return
	}

	x.Reaction = ""
	x.UserIDs = x.UserIDs[:0]

	p.pool.Put(x)
}

var PoolReactionList = poolReactionList{}

func (x *ReactionList) DeepCopy(z *ReactionList) {
	z.Reaction = x.Reaction
	z.UserIDs = append(z.UserIDs[:0], x.UserIDs...)
}

func (x *ReactionList) Clone() *ReactionList {
	z := &ReactionList{}
	x.DeepCopy(z)
	return z
}

func (x *ReactionList) Unmarshal(b []byte) error {
	return proto.UnmarshalOptions{Merge: true}.Unmarshal(b, x)
}

func (x *ReactionList) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *ReactionList) UnmarshalJSON(b []byte) error {
	return protojson.Unmarshal(b, x)
}

func (x *ReactionList) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *ReactionList) PushToContext(ctx *edge.RequestCtx) {
	ctx.PushMessage(C_ReactionList, x)
}

func init() {
	registry.RegisterConstructor(3000244183, "MessagesSend")
	registry.RegisterConstructor(25498545, "MessagesSendMedia")
	registry.RegisterConstructor(2492658432, "MessagesEdit")
	registry.RegisterConstructor(3565425857, "MessagesEditMedia")
	registry.RegisterConstructor(1300826534, "MessagesReadHistory")
	registry.RegisterConstructor(2151382317, "MessagesGet")
	registry.RegisterConstructor(3396939832, "MessagesGetHistory")
	registry.RegisterConstructor(4027732752, "MessagesGetMediaHistory")
	registry.RegisterConstructor(1429532372, "MessagesGetDialogs")
	registry.RegisterConstructor(1963188912, "MessagesGetPinnedDialogs")
	registry.RegisterConstructor(1050840034, "MessagesGetDialog")
	registry.RegisterConstructor(1540214486, "MessagesSetTyping")
	registry.RegisterConstructor(1981246180, "MessagesClearHistory")
	registry.RegisterConstructor(3487616910, "MessagesDelete")
	registry.RegisterConstructor(2662884753, "MessagesForward")
	registry.RegisterConstructor(1781251275, "MessagesReadContents")
	registry.RegisterConstructor(921840607, "MessagesSaveDraft")
	registry.RegisterConstructor(2164204563, "MessagesClearDraft")
	registry.RegisterConstructor(1352871220, "MessagesToggleDialogPin")
	registry.RegisterConstructor(1409872986, "MessagesReorderPinnedDialogs")
	registry.RegisterConstructor(3682116055, "MessagesSendScreenShotNotification")
	registry.RegisterConstructor(279494057, "MessagesSendReaction")
	registry.RegisterConstructor(1547991459, "MessagesDeleteReaction")
	registry.RegisterConstructor(3097050126, "MessagesGetReactionList")
	registry.RegisterConstructor(2824078244, "MessagesTogglePin")
	registry.RegisterConstructor(2047257163, "MessagesReadReaction")
	registry.RegisterConstructor(3252610224, "MessagesDialogs")
	registry.RegisterConstructor(2942502835, "MessagesSent")
	registry.RegisterConstructor(1713238910, "MessagesMany")
	registry.RegisterConstructor(181278607, "MessagesReactionList")
	registry.RegisterConstructor(4260855916, "ReactionList")
}

var _ = bytes.MinRead
