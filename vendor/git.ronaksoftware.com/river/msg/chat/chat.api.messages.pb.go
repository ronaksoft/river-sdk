// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.api.messages.proto

package msg

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InputMediaType int32

const (
	InputMediaTypeEmpty            InputMediaType = 0
	InputMediaTypeInvoice          InputMediaType = 1
	InputMediaTypePoll             InputMediaType = 2
	InputMediaTypeContact          InputMediaType = 3
	InputMediaTypeUploadedDocument InputMediaType = 4
	InputMediaTypeDocument         InputMediaType = 5
	InputMediaTypeGeoLocation      InputMediaType = 6
	InputMediaTypeReserved1        InputMediaType = 7
	InputMediaTypeReserved2        InputMediaType = 8
	InputMediaTypeReserved3        InputMediaType = 9
	InputMediaTypeReserved4        InputMediaType = 10
	InputMediaTypeReserved5        InputMediaType = 11
	InputMediaTypeReserved6        InputMediaType = 12
	InputMediaTypeReserved7        InputMediaType = 13
	InputMediaTypeReserved8        InputMediaType = 14
)

var InputMediaType_name = map[int32]string{
	0:  "InputMediaTypeEmpty",
	1:  "InputMediaTypeInvoice",
	2:  "InputMediaTypePoll",
	3:  "InputMediaTypeContact",
	4:  "InputMediaTypeUploadedDocument",
	5:  "InputMediaTypeDocument",
	6:  "InputMediaTypeGeoLocation",
	7:  "InputMediaTypeReserved1",
	8:  "InputMediaTypeReserved2",
	9:  "InputMediaTypeReserved3",
	10: "InputMediaTypeReserved4",
	11: "InputMediaTypeReserved5",
	12: "InputMediaTypeReserved6",
	13: "InputMediaTypeReserved7",
	14: "InputMediaTypeReserved8",
}

var InputMediaType_value = map[string]int32{
	"InputMediaTypeEmpty":            0,
	"InputMediaTypeInvoice":          1,
	"InputMediaTypePoll":             2,
	"InputMediaTypeContact":          3,
	"InputMediaTypeUploadedDocument": 4,
	"InputMediaTypeDocument":         5,
	"InputMediaTypeGeoLocation":      6,
	"InputMediaTypeReserved1":        7,
	"InputMediaTypeReserved2":        8,
	"InputMediaTypeReserved3":        9,
	"InputMediaTypeReserved4":        10,
	"InputMediaTypeReserved5":        11,
	"InputMediaTypeReserved6":        12,
	"InputMediaTypeReserved7":        13,
	"InputMediaTypeReserved8":        14,
}

func (x InputMediaType) Enum() *InputMediaType {
	p := new(InputMediaType)
	*p = x
	return p
}

func (x InputMediaType) String() string {
	return proto.EnumName(InputMediaType_name, int32(x))
}

func (x *InputMediaType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InputMediaType_value, data, "InputMediaType")
	if err != nil {
		return err
	}
	*x = InputMediaType(value)
	return nil
}

func (InputMediaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{0}
}

// MessageSend
// @Function
// @Return: MessagesSent
type MessagesSend struct {
	RandomID   int64            `protobuf:"varint,1,req,name=RandomID" json:"RandomID"`
	Peer       *InputPeer       `protobuf:"bytes,2,req,name=Peer" json:"Peer,omitempty"`
	Body       string           `protobuf:"bytes,5,req,name=Body" json:"Body"`
	ReplyTo    int64            `protobuf:"varint,6,opt,name=ReplyTo" json:"ReplyTo"`
	ClearDraft bool             `protobuf:"varint,7,opt,name=ClearDraft" json:"ClearDraft"`
	Entities   []*MessageEntity `protobuf:"bytes,8,rep,name=Entities" json:"Entities,omitempty"`
}

func (m *MessagesSend) Reset()         { *m = MessagesSend{} }
func (m *MessagesSend) String() string { return proto.CompactTextString(m) }
func (*MessagesSend) ProtoMessage()    {}
func (*MessagesSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{0}
}
func (m *MessagesSend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesSend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesSend.Merge(m, src)
}
func (m *MessagesSend) XXX_Size() int {
	return m.Size()
}
func (m *MessagesSend) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesSend.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesSend proto.InternalMessageInfo

func (m *MessagesSend) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *MessagesSend) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesSend) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *MessagesSend) GetReplyTo() int64 {
	if m != nil {
		return m.ReplyTo
	}
	return 0
}

func (m *MessagesSend) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *MessagesSend) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

// MessageBroadcast
type MessagesBroadcast struct {
	Body        string           `protobuf:"bytes,1,req,name=Body" json:"Body"`
	ReceiverIDs []int64          `protobuf:"varint,2,rep,name=ReceiverIDs" json:"ReceiverIDs,omitempty"`
	Entities    []*MessageEntity `protobuf:"bytes,3,rep,name=Entities" json:"Entities,omitempty"`
}

func (m *MessagesBroadcast) Reset()         { *m = MessagesBroadcast{} }
func (m *MessagesBroadcast) String() string { return proto.CompactTextString(m) }
func (*MessagesBroadcast) ProtoMessage()    {}
func (*MessagesBroadcast) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{1}
}
func (m *MessagesBroadcast) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesBroadcast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesBroadcast.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesBroadcast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesBroadcast.Merge(m, src)
}
func (m *MessagesBroadcast) XXX_Size() int {
	return m.Size()
}
func (m *MessagesBroadcast) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesBroadcast.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesBroadcast proto.InternalMessageInfo

func (m *MessagesBroadcast) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *MessagesBroadcast) GetReceiverIDs() []int64 {
	if m != nil {
		return m.ReceiverIDs
	}
	return nil
}

func (m *MessagesBroadcast) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

// MessageSendMedia
// @Function
// @Return: Messages
type MessagesSendMedia struct {
	RandomID   int64          `protobuf:"varint,1,req,name=RandomID" json:"RandomID"`
	Peer       *InputPeer     `protobuf:"bytes,2,req,name=Peer" json:"Peer,omitempty"`
	MediaType  InputMediaType `protobuf:"varint,3,req,name=MediaType,enum=msg.InputMediaType" json:"MediaType"`
	MediaData  []byte         `protobuf:"bytes,4,req,name=MediaData" json:"MediaData"`
	ReplyTo    int64          `protobuf:"varint,5,opt,name=ReplyTo" json:"ReplyTo"`
	ClearDraft bool           `protobuf:"varint,6,opt,name=ClearDraft" json:"ClearDraft"`
}

func (m *MessagesSendMedia) Reset()         { *m = MessagesSendMedia{} }
func (m *MessagesSendMedia) String() string { return proto.CompactTextString(m) }
func (*MessagesSendMedia) ProtoMessage()    {}
func (*MessagesSendMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{2}
}
func (m *MessagesSendMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesSendMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesSendMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesSendMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesSendMedia.Merge(m, src)
}
func (m *MessagesSendMedia) XXX_Size() int {
	return m.Size()
}
func (m *MessagesSendMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesSendMedia.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesSendMedia proto.InternalMessageInfo

func (m *MessagesSendMedia) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *MessagesSendMedia) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesSendMedia) GetMediaType() InputMediaType {
	if m != nil {
		return m.MediaType
	}
	return InputMediaTypeEmpty
}

func (m *MessagesSendMedia) GetMediaData() []byte {
	if m != nil {
		return m.MediaData
	}
	return nil
}

func (m *MessagesSendMedia) GetReplyTo() int64 {
	if m != nil {
		return m.ReplyTo
	}
	return 0
}

func (m *MessagesSendMedia) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

// MessagesEdit
// @Function
// @Return: Bool
type MessagesEdit struct {
	RandomID  int64            `protobuf:"varint,1,req,name=RandomID" json:"RandomID"`
	Peer      *InputPeer       `protobuf:"bytes,2,req,name=Peer" json:"Peer,omitempty"`
	Body      string           `protobuf:"bytes,3,req,name=Body" json:"Body"`
	MessageID int64            `protobuf:"varint,4,req,name=MessageID" json:"MessageID"`
	Entities  []*MessageEntity `protobuf:"bytes,5,rep,name=Entities" json:"Entities,omitempty"`
}

func (m *MessagesEdit) Reset()         { *m = MessagesEdit{} }
func (m *MessagesEdit) String() string { return proto.CompactTextString(m) }
func (*MessagesEdit) ProtoMessage()    {}
func (*MessagesEdit) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{3}
}
func (m *MessagesEdit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesEdit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesEdit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesEdit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesEdit.Merge(m, src)
}
func (m *MessagesEdit) XXX_Size() int {
	return m.Size()
}
func (m *MessagesEdit) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesEdit.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesEdit proto.InternalMessageInfo

func (m *MessagesEdit) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *MessagesEdit) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesEdit) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *MessagesEdit) GetMessageID() int64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *MessagesEdit) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

// MessageReadHistory
// @Function
// Returns:
type MessagesReadHistory struct {
	Peer  *InputPeer `protobuf:"bytes,2,req,name=Peer" json:"Peer,omitempty"`
	MaxID int64      `protobuf:"varint,3,req,name=MaxID" json:"MaxID"`
}

func (m *MessagesReadHistory) Reset()         { *m = MessagesReadHistory{} }
func (m *MessagesReadHistory) String() string { return proto.CompactTextString(m) }
func (*MessagesReadHistory) ProtoMessage()    {}
func (*MessagesReadHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{4}
}
func (m *MessagesReadHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesReadHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesReadHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesReadHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesReadHistory.Merge(m, src)
}
func (m *MessagesReadHistory) XXX_Size() int {
	return m.Size()
}
func (m *MessagesReadHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesReadHistory.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesReadHistory proto.InternalMessageInfo

func (m *MessagesReadHistory) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesReadHistory) GetMaxID() int64 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

// MessagesGet
// @Function
// Returns:     MessagesMany
type MessagesGet struct {
	Peer        *InputPeer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	MessagesIDs []int64    `protobuf:"varint,2,rep,name=MessagesIDs" json:"MessagesIDs,omitempty"`
}

func (m *MessagesGet) Reset()         { *m = MessagesGet{} }
func (m *MessagesGet) String() string { return proto.CompactTextString(m) }
func (*MessagesGet) ProtoMessage()    {}
func (*MessagesGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{5}
}
func (m *MessagesGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesGet.Merge(m, src)
}
func (m *MessagesGet) XXX_Size() int {
	return m.Size()
}
func (m *MessagesGet) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesGet.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesGet proto.InternalMessageInfo

func (m *MessagesGet) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesGet) GetMessagesIDs() []int64 {
	if m != nil {
		return m.MessagesIDs
	}
	return nil
}

// MessagesGetHistory
// @Function
// Returns:     MessagesMany
type MessagesGetHistory struct {
	Peer  *InputPeer `protobuf:"bytes,2,req,name=Peer" json:"Peer,omitempty"`
	Limit int32      `protobuf:"varint,3,req,name=Limit" json:"Limit"`
	MaxID int64      `protobuf:"varint,4,req,name=MaxID" json:"MaxID"`
	MinID int64      `protobuf:"varint,5,req,name=MinID" json:"MinID"`
}

func (m *MessagesGetHistory) Reset()         { *m = MessagesGetHistory{} }
func (m *MessagesGetHistory) String() string { return proto.CompactTextString(m) }
func (*MessagesGetHistory) ProtoMessage()    {}
func (*MessagesGetHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{6}
}
func (m *MessagesGetHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesGetHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesGetHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesGetHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesGetHistory.Merge(m, src)
}
func (m *MessagesGetHistory) XXX_Size() int {
	return m.Size()
}
func (m *MessagesGetHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesGetHistory.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesGetHistory proto.InternalMessageInfo

func (m *MessagesGetHistory) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesGetHistory) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *MessagesGetHistory) GetMaxID() int64 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

func (m *MessagesGetHistory) GetMinID() int64 {
	if m != nil {
		return m.MinID
	}
	return 0
}

// MessagesGetDialogs
// @Function
// Returns:     MessagesDialogs
type MessagesGetDialogs struct {
	Limit         int32 `protobuf:"varint,2,req,name=Limit" json:"Limit"`
	Offset        int32 `protobuf:"varint,3,req,name=Offset" json:"Offset"`
	ExcludePinned bool  `protobuf:"varint,4,opt,name=ExcludePinned" json:"ExcludePinned"`
}

func (m *MessagesGetDialogs) Reset()         { *m = MessagesGetDialogs{} }
func (m *MessagesGetDialogs) String() string { return proto.CompactTextString(m) }
func (*MessagesGetDialogs) ProtoMessage()    {}
func (*MessagesGetDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{7}
}
func (m *MessagesGetDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesGetDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesGetDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesGetDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesGetDialogs.Merge(m, src)
}
func (m *MessagesGetDialogs) XXX_Size() int {
	return m.Size()
}
func (m *MessagesGetDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesGetDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesGetDialogs proto.InternalMessageInfo

func (m *MessagesGetDialogs) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *MessagesGetDialogs) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *MessagesGetDialogs) GetExcludePinned() bool {
	if m != nil {
		return m.ExcludePinned
	}
	return false
}

// MessagesGetPinnedDialogs
// @Function
// @Returns: MessagesDialogs
type MessagesGetPinnedDialogs struct {
}

func (m *MessagesGetPinnedDialogs) Reset()         { *m = MessagesGetPinnedDialogs{} }
func (m *MessagesGetPinnedDialogs) String() string { return proto.CompactTextString(m) }
func (*MessagesGetPinnedDialogs) ProtoMessage()    {}
func (*MessagesGetPinnedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{8}
}
func (m *MessagesGetPinnedDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesGetPinnedDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesGetPinnedDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesGetPinnedDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesGetPinnedDialogs.Merge(m, src)
}
func (m *MessagesGetPinnedDialogs) XXX_Size() int {
	return m.Size()
}
func (m *MessagesGetPinnedDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesGetPinnedDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesGetPinnedDialogs proto.InternalMessageInfo

// MessagesGetDialog
// @Function
// Returns: Dialog
type MessagesGetDialog struct {
	Peer *InputPeer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
}

func (m *MessagesGetDialog) Reset()         { *m = MessagesGetDialog{} }
func (m *MessagesGetDialog) String() string { return proto.CompactTextString(m) }
func (*MessagesGetDialog) ProtoMessage()    {}
func (*MessagesGetDialog) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{9}
}
func (m *MessagesGetDialog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesGetDialog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesGetDialog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesGetDialog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesGetDialog.Merge(m, src)
}
func (m *MessagesGetDialog) XXX_Size() int {
	return m.Size()
}
func (m *MessagesGetDialog) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesGetDialog.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesGetDialog proto.InternalMessageInfo

func (m *MessagesGetDialog) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// MessagesSetTyping
// @Function
// Returns: Bool
type MessagesSetTyping struct {
	Peer   *InputPeer   `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	Action TypingAction `protobuf:"varint,2,req,name=Action,enum=msg.TypingAction" json:"Action"`
}

func (m *MessagesSetTyping) Reset()         { *m = MessagesSetTyping{} }
func (m *MessagesSetTyping) String() string { return proto.CompactTextString(m) }
func (*MessagesSetTyping) ProtoMessage()    {}
func (*MessagesSetTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{10}
}
func (m *MessagesSetTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesSetTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesSetTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesSetTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesSetTyping.Merge(m, src)
}
func (m *MessagesSetTyping) XXX_Size() int {
	return m.Size()
}
func (m *MessagesSetTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesSetTyping.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesSetTyping proto.InternalMessageInfo

func (m *MessagesSetTyping) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesSetTyping) GetAction() TypingAction {
	if m != nil {
		return m.Action
	}
	return TypingActionTyping
}

// MessageClearHistory
// @Function
// Returns: Bool
type MessagesClearHistory struct {
	Peer   *InputPeer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	MaxID  int64      `protobuf:"varint,2,req,name=MaxID" json:"MaxID"`
	Delete bool       `protobuf:"varint,3,req,name=Delete" json:"Delete"`
}

func (m *MessagesClearHistory) Reset()         { *m = MessagesClearHistory{} }
func (m *MessagesClearHistory) String() string { return proto.CompactTextString(m) }
func (*MessagesClearHistory) ProtoMessage()    {}
func (*MessagesClearHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{11}
}
func (m *MessagesClearHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesClearHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesClearHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesClearHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesClearHistory.Merge(m, src)
}
func (m *MessagesClearHistory) XXX_Size() int {
	return m.Size()
}
func (m *MessagesClearHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesClearHistory.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesClearHistory proto.InternalMessageInfo

func (m *MessagesClearHistory) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesClearHistory) GetMaxID() int64 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

func (m *MessagesClearHistory) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

// MessagesDelete
// @Function
// Returns: Bool
type MessagesDelete struct {
	Peer       *InputPeer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	MessageIDs []int64    `protobuf:"varint,2,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
	Revoke     bool       `protobuf:"varint,3,req,name=Revoke" json:"Revoke"`
}

func (m *MessagesDelete) Reset()         { *m = MessagesDelete{} }
func (m *MessagesDelete) String() string { return proto.CompactTextString(m) }
func (*MessagesDelete) ProtoMessage()    {}
func (*MessagesDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{12}
}
func (m *MessagesDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesDelete.Merge(m, src)
}
func (m *MessagesDelete) XXX_Size() int {
	return m.Size()
}
func (m *MessagesDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesDelete.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesDelete proto.InternalMessageInfo

func (m *MessagesDelete) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesDelete) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

func (m *MessagesDelete) GetRevoke() bool {
	if m != nil {
		return m.Revoke
	}
	return false
}

// MessagesForward
// @Function
// Returns: Bool
type MessagesForward struct {
	FromPeer   *InputPeer `protobuf:"bytes,1,req,name=FromPeer" json:"FromPeer,omitempty"`
	ToPeer     *InputPeer `protobuf:"bytes,2,req,name=ToPeer" json:"ToPeer,omitempty"`
	Silence    bool       `protobuf:"varint,3,req,name=Silence" json:"Silence"`
	MessageIDs []int64    `protobuf:"varint,4,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
	RandomID   int64      `protobuf:"varint,5,req,name=RandomID" json:"RandomID"`
}

func (m *MessagesForward) Reset()         { *m = MessagesForward{} }
func (m *MessagesForward) String() string { return proto.CompactTextString(m) }
func (*MessagesForward) ProtoMessage()    {}
func (*MessagesForward) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{13}
}
func (m *MessagesForward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesForward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesForward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesForward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesForward.Merge(m, src)
}
func (m *MessagesForward) XXX_Size() int {
	return m.Size()
}
func (m *MessagesForward) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesForward.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesForward proto.InternalMessageInfo

func (m *MessagesForward) GetFromPeer() *InputPeer {
	if m != nil {
		return m.FromPeer
	}
	return nil
}

func (m *MessagesForward) GetToPeer() *InputPeer {
	if m != nil {
		return m.ToPeer
	}
	return nil
}

func (m *MessagesForward) GetSilence() bool {
	if m != nil {
		return m.Silence
	}
	return false
}

func (m *MessagesForward) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

func (m *MessagesForward) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

// MessagesReadContents
// @Function
// Returns: Bool
type MessagesReadContents struct {
	Peer       *InputPeer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	MessageIDs []int64    `protobuf:"varint,2,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
}

func (m *MessagesReadContents) Reset()         { *m = MessagesReadContents{} }
func (m *MessagesReadContents) String() string { return proto.CompactTextString(m) }
func (*MessagesReadContents) ProtoMessage()    {}
func (*MessagesReadContents) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{14}
}
func (m *MessagesReadContents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesReadContents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesReadContents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesReadContents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesReadContents.Merge(m, src)
}
func (m *MessagesReadContents) XXX_Size() int {
	return m.Size()
}
func (m *MessagesReadContents) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesReadContents.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesReadContents proto.InternalMessageInfo

func (m *MessagesReadContents) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesReadContents) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

// MessagesSaveDraft
// @Function
// Returns: Bool
type MessagesSaveDraft struct {
	Peer     *InputPeer       `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	ReplyTo  int64            `protobuf:"varint,2,req,name=ReplyTo" json:"ReplyTo"`
	Body     string           `protobuf:"bytes,3,req,name=Body" json:"Body"`
	Entities []*MessageEntity `protobuf:"bytes,4,rep,name=Entities" json:"Entities,omitempty"`
	EditedID int64            `protobuf:"varint,5,opt,name=EditedID" json:"EditedID"`
}

func (m *MessagesSaveDraft) Reset()         { *m = MessagesSaveDraft{} }
func (m *MessagesSaveDraft) String() string { return proto.CompactTextString(m) }
func (*MessagesSaveDraft) ProtoMessage()    {}
func (*MessagesSaveDraft) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{15}
}
func (m *MessagesSaveDraft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesSaveDraft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesSaveDraft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesSaveDraft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesSaveDraft.Merge(m, src)
}
func (m *MessagesSaveDraft) XXX_Size() int {
	return m.Size()
}
func (m *MessagesSaveDraft) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesSaveDraft.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesSaveDraft proto.InternalMessageInfo

func (m *MessagesSaveDraft) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesSaveDraft) GetReplyTo() int64 {
	if m != nil {
		return m.ReplyTo
	}
	return 0
}

func (m *MessagesSaveDraft) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *MessagesSaveDraft) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *MessagesSaveDraft) GetEditedID() int64 {
	if m != nil {
		return m.EditedID
	}
	return 0
}

// MessagesClearDraft
// @Function
// @Returns: Bool
type MessagesClearDraft struct {
	Peer *InputPeer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
}

func (m *MessagesClearDraft) Reset()         { *m = MessagesClearDraft{} }
func (m *MessagesClearDraft) String() string { return proto.CompactTextString(m) }
func (*MessagesClearDraft) ProtoMessage()    {}
func (*MessagesClearDraft) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{16}
}
func (m *MessagesClearDraft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesClearDraft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesClearDraft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesClearDraft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesClearDraft.Merge(m, src)
}
func (m *MessagesClearDraft) XXX_Size() int {
	return m.Size()
}
func (m *MessagesClearDraft) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesClearDraft.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesClearDraft proto.InternalMessageInfo

func (m *MessagesClearDraft) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// MessagesToggleDialogPin
// @Function
// @Returns: Bool
type MessagesToggleDialogPin struct {
	Peer *InputPeer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	Pin  bool       `protobuf:"varint,2,req,name=Pin" json:"Pin"`
}

func (m *MessagesToggleDialogPin) Reset()         { *m = MessagesToggleDialogPin{} }
func (m *MessagesToggleDialogPin) String() string { return proto.CompactTextString(m) }
func (*MessagesToggleDialogPin) ProtoMessage()    {}
func (*MessagesToggleDialogPin) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{17}
}
func (m *MessagesToggleDialogPin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesToggleDialogPin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesToggleDialogPin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesToggleDialogPin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesToggleDialogPin.Merge(m, src)
}
func (m *MessagesToggleDialogPin) XXX_Size() int {
	return m.Size()
}
func (m *MessagesToggleDialogPin) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesToggleDialogPin.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesToggleDialogPin proto.InternalMessageInfo

func (m *MessagesToggleDialogPin) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesToggleDialogPin) GetPin() bool {
	if m != nil {
		return m.Pin
	}
	return false
}

// MessagesReorderPinnedDialogs
// @Function
// @Returns: Bool
type MessagesReorderPinnedDialogs struct {
	Peers []*InputPeer `protobuf:"bytes,1,rep,name=Peers" json:"Peers,omitempty"`
}

func (m *MessagesReorderPinnedDialogs) Reset()         { *m = MessagesReorderPinnedDialogs{} }
func (m *MessagesReorderPinnedDialogs) String() string { return proto.CompactTextString(m) }
func (*MessagesReorderPinnedDialogs) ProtoMessage()    {}
func (*MessagesReorderPinnedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{18}
}
func (m *MessagesReorderPinnedDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesReorderPinnedDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesReorderPinnedDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesReorderPinnedDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesReorderPinnedDialogs.Merge(m, src)
}
func (m *MessagesReorderPinnedDialogs) XXX_Size() int {
	return m.Size()
}
func (m *MessagesReorderPinnedDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesReorderPinnedDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesReorderPinnedDialogs proto.InternalMessageInfo

func (m *MessagesReorderPinnedDialogs) GetPeers() []*InputPeer {
	if m != nil {
		return m.Peers
	}
	return nil
}

// MessagesSendScreenShotNotification
// @Function
// @Returns: Bool
type MessagesSendScreenShotNotification struct {
	Peer     *InputPeer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	RandomID int64      `protobuf:"varint,2,req,name=RandomID" json:"RandomID"`
	ReplyTo  int64      `protobuf:"varint,3,opt,name=ReplyTo" json:"ReplyTo"`
	MinID    int64      `protobuf:"varint,4,opt,name=MinID" json:"MinID"`
	MaxID    int64      `protobuf:"varint,5,opt,name=MaxID" json:"MaxID"`
}

func (m *MessagesSendScreenShotNotification) Reset()         { *m = MessagesSendScreenShotNotification{} }
func (m *MessagesSendScreenShotNotification) String() string { return proto.CompactTextString(m) }
func (*MessagesSendScreenShotNotification) ProtoMessage()    {}
func (*MessagesSendScreenShotNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{19}
}
func (m *MessagesSendScreenShotNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesSendScreenShotNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesSendScreenShotNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesSendScreenShotNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesSendScreenShotNotification.Merge(m, src)
}
func (m *MessagesSendScreenShotNotification) XXX_Size() int {
	return m.Size()
}
func (m *MessagesSendScreenShotNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesSendScreenShotNotification.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesSendScreenShotNotification proto.InternalMessageInfo

func (m *MessagesSendScreenShotNotification) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesSendScreenShotNotification) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *MessagesSendScreenShotNotification) GetReplyTo() int64 {
	if m != nil {
		return m.ReplyTo
	}
	return 0
}

func (m *MessagesSendScreenShotNotification) GetMinID() int64 {
	if m != nil {
		return m.MinID
	}
	return 0
}

func (m *MessagesSendScreenShotNotification) GetMaxID() int64 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

// MessagesSendVote
// @Function
// @Returns: Bool
type MessagesSendVote struct {
	Peer      *InputPeer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	MessageID int64      `protobuf:"varint,2,req,name=MessageID" json:"MessageID"`
	Options   [][]byte   `protobuf:"bytes,3,rep,name=Options" json:"Options,omitempty"`
}

func (m *MessagesSendVote) Reset()         { *m = MessagesSendVote{} }
func (m *MessagesSendVote) String() string { return proto.CompactTextString(m) }
func (*MessagesSendVote) ProtoMessage()    {}
func (*MessagesSendVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{20}
}
func (m *MessagesSendVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesSendVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesSendVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesSendVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesSendVote.Merge(m, src)
}
func (m *MessagesSendVote) XXX_Size() int {
	return m.Size()
}
func (m *MessagesSendVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesSendVote.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesSendVote proto.InternalMessageInfo

func (m *MessagesSendVote) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesSendVote) GetMessageID() int64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *MessagesSendVote) GetOptions() [][]byte {
	if m != nil {
		return m.Options
	}
	return nil
}

// MessagesGetPollResults
// @Function
// @Returns: Bool
type MessagesGetPollResults struct {
	Peer      *InputPeer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	MessageID int64      `protobuf:"varint,2,req,name=MessageID" json:"MessageID"`
}

func (m *MessagesGetPollResults) Reset()         { *m = MessagesGetPollResults{} }
func (m *MessagesGetPollResults) String() string { return proto.CompactTextString(m) }
func (*MessagesGetPollResults) ProtoMessage()    {}
func (*MessagesGetPollResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{21}
}
func (m *MessagesGetPollResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesGetPollResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesGetPollResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesGetPollResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesGetPollResults.Merge(m, src)
}
func (m *MessagesGetPollResults) XXX_Size() int {
	return m.Size()
}
func (m *MessagesGetPollResults) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesGetPollResults.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesGetPollResults proto.InternalMessageInfo

func (m *MessagesGetPollResults) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessagesGetPollResults) GetMessageID() int64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

// MessagesDialogs
type MessagesDialogs struct {
	Dialogs  []*Dialog      `protobuf:"bytes,1,rep,name=Dialogs" json:"Dialogs,omitempty"`
	Users    []*User        `protobuf:"bytes,2,rep,name=Users" json:"Users,omitempty"`
	Messages []*UserMessage `protobuf:"bytes,3,rep,name=Messages" json:"Messages,omitempty"`
	Count    int32          `protobuf:"varint,4,req,name=Count" json:"Count"`
	UpdateID int64          `protobuf:"varint,5,req,name=UpdateID" json:"UpdateID"`
	Groups   []*Group       `protobuf:"bytes,6,rep,name=Groups" json:"Groups,omitempty"`
}

func (m *MessagesDialogs) Reset()         { *m = MessagesDialogs{} }
func (m *MessagesDialogs) String() string { return proto.CompactTextString(m) }
func (*MessagesDialogs) ProtoMessage()    {}
func (*MessagesDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{22}
}
func (m *MessagesDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesDialogs.Merge(m, src)
}
func (m *MessagesDialogs) XXX_Size() int {
	return m.Size()
}
func (m *MessagesDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesDialogs proto.InternalMessageInfo

func (m *MessagesDialogs) GetDialogs() []*Dialog {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

func (m *MessagesDialogs) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *MessagesDialogs) GetMessages() []*UserMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *MessagesDialogs) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *MessagesDialogs) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *MessagesDialogs) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// MessagesSent
type MessagesSent struct {
	MessageID int64 `protobuf:"varint,1,req,name=MessageID" json:"MessageID"`
	RandomID  int64 `protobuf:"varint,2,req,name=RandomID" json:"RandomID"`
	CreatedOn int64 `protobuf:"varint,3,req,name=CreatedOn" json:"CreatedOn"`
}

func (m *MessagesSent) Reset()         { *m = MessagesSent{} }
func (m *MessagesSent) String() string { return proto.CompactTextString(m) }
func (*MessagesSent) ProtoMessage()    {}
func (*MessagesSent) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{23}
}
func (m *MessagesSent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesSent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesSent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesSent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesSent.Merge(m, src)
}
func (m *MessagesSent) XXX_Size() int {
	return m.Size()
}
func (m *MessagesSent) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesSent.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesSent proto.InternalMessageInfo

func (m *MessagesSent) GetMessageID() int64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *MessagesSent) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *MessagesSent) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

// MessagesMany
type MessagesMany struct {
	Messages   []*UserMessage `protobuf:"bytes,1,rep,name=Messages" json:"Messages,omitempty"`
	Users      []*User        `protobuf:"bytes,2,rep,name=Users" json:"Users,omitempty"`
	Groups     []*Group       `protobuf:"bytes,3,rep,name=Groups" json:"Groups,omitempty"`
	Continuous bool           `protobuf:"varint,4,opt,name=Continuous" json:"Continuous"`
}

func (m *MessagesMany) Reset()         { *m = MessagesMany{} }
func (m *MessagesMany) String() string { return proto.CompactTextString(m) }
func (*MessagesMany) ProtoMessage()    {}
func (*MessagesMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_882b8fe0c4a29154, []int{24}
}
func (m *MessagesMany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagesMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagesMany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagesMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagesMany.Merge(m, src)
}
func (m *MessagesMany) XXX_Size() int {
	return m.Size()
}
func (m *MessagesMany) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagesMany.DiscardUnknown(m)
}

var xxx_messageInfo_MessagesMany proto.InternalMessageInfo

func (m *MessagesMany) GetMessages() []*UserMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *MessagesMany) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *MessagesMany) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *MessagesMany) GetContinuous() bool {
	if m != nil {
		return m.Continuous
	}
	return false
}

func init() {
	proto.RegisterEnum("msg.InputMediaType", InputMediaType_name, InputMediaType_value)
	proto.RegisterType((*MessagesSend)(nil), "msg.MessagesSend")
	proto.RegisterType((*MessagesBroadcast)(nil), "msg.MessagesBroadcast")
	proto.RegisterType((*MessagesSendMedia)(nil), "msg.MessagesSendMedia")
	proto.RegisterType((*MessagesEdit)(nil), "msg.MessagesEdit")
	proto.RegisterType((*MessagesReadHistory)(nil), "msg.MessagesReadHistory")
	proto.RegisterType((*MessagesGet)(nil), "msg.MessagesGet")
	proto.RegisterType((*MessagesGetHistory)(nil), "msg.MessagesGetHistory")
	proto.RegisterType((*MessagesGetDialogs)(nil), "msg.MessagesGetDialogs")
	proto.RegisterType((*MessagesGetPinnedDialogs)(nil), "msg.MessagesGetPinnedDialogs")
	proto.RegisterType((*MessagesGetDialog)(nil), "msg.MessagesGetDialog")
	proto.RegisterType((*MessagesSetTyping)(nil), "msg.MessagesSetTyping")
	proto.RegisterType((*MessagesClearHistory)(nil), "msg.MessagesClearHistory")
	proto.RegisterType((*MessagesDelete)(nil), "msg.MessagesDelete")
	proto.RegisterType((*MessagesForward)(nil), "msg.MessagesForward")
	proto.RegisterType((*MessagesReadContents)(nil), "msg.MessagesReadContents")
	proto.RegisterType((*MessagesSaveDraft)(nil), "msg.MessagesSaveDraft")
	proto.RegisterType((*MessagesClearDraft)(nil), "msg.MessagesClearDraft")
	proto.RegisterType((*MessagesToggleDialogPin)(nil), "msg.MessagesToggleDialogPin")
	proto.RegisterType((*MessagesReorderPinnedDialogs)(nil), "msg.MessagesReorderPinnedDialogs")
	proto.RegisterType((*MessagesSendScreenShotNotification)(nil), "msg.MessagesSendScreenShotNotification")
	proto.RegisterType((*MessagesSendVote)(nil), "msg.MessagesSendVote")
	proto.RegisterType((*MessagesGetPollResults)(nil), "msg.MessagesGetPollResults")
	proto.RegisterType((*MessagesDialogs)(nil), "msg.MessagesDialogs")
	proto.RegisterType((*MessagesSent)(nil), "msg.MessagesSent")
	proto.RegisterType((*MessagesMany)(nil), "msg.MessagesMany")
}

func init() { proto.RegisterFile("chat.api.messages.proto", fileDescriptor_882b8fe0c4a29154) }

var fileDescriptor_882b8fe0c4a29154 = []byte{
	// 1224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcb, 0x72, 0xe3, 0x44,
	0x17, 0xb6, 0x24, 0xdb, 0x71, 0x8e, 0x33, 0xfe, 0x35, 0x9d, 0x7f, 0x12, 0x4d, 0x08, 0x1e, 0x55,
	0xd7, 0x40, 0xb9, 0x52, 0xe0, 0x14, 0xe1, 0x92, 0xd9, 0x92, 0x38, 0x13, 0x5c, 0x35, 0x21, 0x29,
	0x25, 0x61, 0xc1, 0x0a, 0x8d, 0xd4, 0x71, 0x54, 0xd8, 0x6a, 0x95, 0xd4, 0x0e, 0x31, 0x1b, 0x5e,
	0x80, 0x05, 0x6f, 0xc1, 0x5b, 0xb0, 0x80, 0x05, 0xb3, 0xcc, 0x92, 0x15, 0x05, 0x09, 0x1b, 0xde,
	0x81, 0x05, 0xa5, 0xd6, 0xad, 0x3b, 0xb6, 0x13, 0x51, 0x95, 0x9d, 0xf4, 0x7d, 0xa7, 0xcf, 0xb5,
	0xcf, 0x39, 0x0d, 0xab, 0xce, 0xb9, 0xcd, 0xba, 0x76, 0xe0, 0x75, 0x47, 0x24, 0x8a, 0xec, 0x01,
	0x89, 0xba, 0x41, 0x48, 0x19, 0x45, 0xda, 0x28, 0x1a, 0xac, 0x3d, 0xe1, 0xac, 0x43, 0x43, 0xd2,
	0x65, 0x93, 0x20, 0xe3, 0xd6, 0xde, 0x1f, 0x78, 0xec, 0x7c, 0xfc, 0xba, 0xeb, 0xd0, 0xd1, 0xe6,
	0x80, 0x0e, 0xe8, 0x26, 0x87, 0x5f, 0x8f, 0xcf, 0xf8, 0x1f, 0xff, 0xe1, 0x5f, 0x89, 0x38, 0xfe,
	0x4b, 0x81, 0xa5, 0x83, 0x54, 0xfb, 0x31, 0xf1, 0x5d, 0x64, 0x42, 0xc3, 0xb2, 0x7d, 0x97, 0x8e,
	0xfa, 0x3d, 0x43, 0x31, 0xd5, 0x8e, 0xb6, 0x53, 0x7d, 0xf3, 0xfb, 0xb3, 0x8a, 0x95, 0xa3, 0x08,
	0x43, 0xf5, 0x88, 0x90, 0xd0, 0x50, 0x4d, 0xb5, 0xd3, 0xdc, 0x6a, 0x75, 0x47, 0xd1, 0xa0, 0xdb,
	0xf7, 0x83, 0x31, 0x8b, 0x51, 0x8b, 0x73, 0xc8, 0x80, 0xea, 0x0e, 0x75, 0x27, 0x46, 0xcd, 0x54,
	0x3b, 0x8b, 0xa9, 0x06, 0x8e, 0xa0, 0x36, 0x2c, 0x58, 0x24, 0x18, 0x4e, 0x4e, 0xa8, 0x51, 0x37,
	0x95, 0x5c, 0x7d, 0x06, 0xa2, 0xe7, 0x00, 0xbb, 0x43, 0x62, 0x87, 0xbd, 0xd0, 0x3e, 0x63, 0xc6,
	0x82, 0xa9, 0x74, 0x1a, 0xa9, 0x88, 0x80, 0xa3, 0x2e, 0x34, 0xf6, 0x7c, 0xe6, 0x31, 0x8f, 0x44,
	0x46, 0xc3, 0xd4, 0x3a, 0xcd, 0x2d, 0xc4, 0xfd, 0x48, 0x43, 0xe1, 0xdc, 0xc4, 0xca, 0x65, 0xf0,
	0x77, 0xf0, 0x38, 0x8b, 0x72, 0x27, 0xa4, 0xb6, 0xeb, 0xd8, 0x11, 0xcb, 0x9d, 0x54, 0xa6, 0x9c,
	0x34, 0xa1, 0x69, 0x11, 0x87, 0x78, 0x17, 0x24, 0xec, 0xf7, 0x22, 0x43, 0x35, 0xb5, 0x8e, 0x66,
	0x89, 0x90, 0xe4, 0x80, 0x56, 0xc2, 0x81, 0x7f, 0x94, 0xc2, 0x83, 0x38, 0xcf, 0x07, 0xc4, 0xf5,
	0xec, 0x07, 0x4a, 0xf6, 0x36, 0x2c, 0x72, 0x75, 0x27, 0x93, 0x80, 0x18, 0x9a, 0xa9, 0x76, 0x5a,
	0x5b, 0xcb, 0x85, 0x60, 0x4e, 0xa5, 0xba, 0x0b, 0x59, 0x84, 0xd3, 0x83, 0x3d, 0x9b, 0xd9, 0x46,
	0xd5, 0x54, 0x3b, 0x4b, 0x92, 0x4c, 0x0c, 0x8b, 0xf5, 0xaa, 0xdd, 0x5f, 0xaf, 0xfa, 0xec, 0x7a,
	0xe1, 0x9f, 0x85, 0x6b, 0xb6, 0xe7, 0x7a, 0xec, 0x81, 0xaf, 0x99, 0x36, 0x55, 0x41, 0x1e, 0x1a,
	0xb7, 0xd7, 0xef, 0xf1, 0xd0, 0xb4, 0x22, 0xb4, 0x14, 0x96, 0x6a, 0x58, 0x2b, 0x51, 0xc3, 0x53,
	0x58, 0xce, 0x62, 0xb0, 0x88, 0xed, 0x7e, 0xe6, 0x45, 0x8c, 0x86, 0x93, 0x52, 0x8e, 0xae, 0x41,
	0xed, 0xc0, 0xbe, 0xec, 0xf7, 0xb8, 0xa7, 0x99, 0x2b, 0x09, 0x84, 0x8f, 0xa1, 0x99, 0xa9, 0xdd,
	0x27, 0x2c, 0x57, 0xa7, 0xdc, 0xa1, 0xce, 0x2c, 0x8e, 0x08, 0xf7, 0x53, 0x80, 0xf0, 0xf7, 0x0a,
	0x20, 0x41, 0xeb, 0x7f, 0xf4, 0xf5, 0x95, 0x37, 0xf2, 0x18, 0xf7, 0xb5, 0x96, 0xf9, 0xca, 0xa1,
	0x22, 0x8e, 0xea, 0x54, 0x1c, 0x9c, 0xf3, 0xfc, 0x7e, 0x8f, 0x37, 0x7d, 0xc1, 0xc5, 0x10, 0xfe,
	0x56, 0xf2, 0xa6, 0xe7, 0xd9, 0x43, 0x3a, 0x88, 0x0a, 0x4b, 0xea, 0xb4, 0xa5, 0x75, 0xa8, 0x1f,
	0x9e, 0x9d, 0x45, 0x44, 0x76, 0x23, 0xc5, 0xd0, 0x06, 0x3c, 0xda, 0xbb, 0x74, 0x86, 0x63, 0x97,
	0x1c, 0x79, 0xbe, 0x4f, 0x5c, 0xa3, 0x2a, 0x5c, 0x3c, 0x99, 0xc2, 0x6b, 0x60, 0x08, 0xb6, 0x13,
	0x30, 0xf5, 0x00, 0x6f, 0x17, 0x5d, 0x99, 0xfb, 0x55, 0xa6, 0x02, 0xf8, 0x5c, 0x6c, 0x67, 0x76,
	0x32, 0x09, 0x3c, 0xbf, 0xd4, 0x41, 0xb4, 0x09, 0xf5, 0x4f, 0x1d, 0xe6, 0x51, 0x9f, 0x07, 0xdd,
	0xda, 0x7a, 0xcc, 0xa5, 0x12, 0x05, 0x09, 0x91, 0x85, 0x9a, 0xfc, 0x61, 0x06, 0xff, 0xcf, 0x2c,
	0xf1, 0x86, 0xba, 0x5d, 0x4a, 0xa5, 0xcc, 0xb5, 0x53, 0xa7, 0xcb, 0xb5, 0x0e, 0xf5, 0x1e, 0x19,
	0x12, 0x96, 0x8c, 0x8c, 0x2c, 0x77, 0x29, 0x86, 0x43, 0x68, 0x65, 0x56, 0x13, 0xa4, 0x94, 0xbd,
	0x36, 0x40, 0xde, 0x5e, 0xd9, 0xb5, 0x14, 0x90, 0xd8, 0xa6, 0x45, 0x2e, 0xe8, 0xd7, 0xb7, 0x6c,
	0x26, 0x18, 0xfe, 0x55, 0x81, 0xff, 0x65, 0x46, 0x5f, 0xd2, 0xf0, 0x1b, 0x3b, 0x74, 0xd1, 0x06,
	0x34, 0x5e, 0x86, 0x74, 0x74, 0x87, 0xe5, 0x9c, 0x47, 0xef, 0x42, 0xfd, 0x84, 0xde, 0x71, 0xbd,
	0x53, 0x36, 0x1e, 0x69, 0xc7, 0xde, 0x90, 0xf8, 0x8e, 0xec, 0x46, 0x06, 0xde, 0x8a, 0xa2, 0x3a,
	0x15, 0x85, 0x38, 0xbb, 0x6a, 0xb3, 0x66, 0x17, 0xfe, 0xb2, 0xa8, 0x59, 0x3c, 0x29, 0x76, 0xa9,
	0xcf, 0x88, 0xcf, 0xa2, 0x87, 0xc8, 0x21, 0xfe, 0x45, 0xdc, 0x24, 0xf6, 0x05, 0x49, 0x16, 0x62,
	0x39, 0xcd, 0xf9, 0x28, 0x17, 0xef, 0x43, 0x3e, 0xca, 0xe7, 0x4f, 0x53, 0x71, 0x52, 0x56, 0xef,
	0x9f, 0x94, 0x71, 0x86, 0xe2, 0x29, 0x4f, 0x5c, 0x9e, 0xa1, 0x62, 0x6b, 0xe4, 0x28, 0x7e, 0x51,
	0x0c, 0x04, 0x61, 0xad, 0x97, 0xe9, 0xbc, 0x53, 0x58, 0xcd, 0x4e, 0x9e, 0xd0, 0xc1, 0x60, 0x48,
	0x92, 0xae, 0x3d, 0xf2, 0xfc, 0x52, 0x49, 0x58, 0x01, 0xed, 0xc8, 0x4b, 0x9a, 0x2f, 0x2b, 0x7c,
	0x0c, 0xe0, 0x1e, 0xac, 0x17, 0x25, 0xa3, 0xa1, 0x4b, 0x42, 0x69, 0x52, 0xa0, 0xe7, 0x50, 0x8b,
	0xcf, 0x47, 0x86, 0xc2, 0xe3, 0xbf, 0xad, 0x3c, 0x21, 0xe3, 0x3d, 0x87, 0xc5, 0x35, 0x7f, 0xec,
	0x84, 0x84, 0xf8, 0xc7, 0xe7, 0x94, 0x7d, 0x4e, 0x99, 0x77, 0xe6, 0x39, 0x76, 0xdc, 0xd3, 0x25,
	0x67, 0x7c, 0x71, 0xcb, 0xd4, 0x99, 0x1b, 0x52, 0xa8, 0xa7, 0x36, 0x6b, 0x35, 0xe7, 0x03, 0xb9,
	0x2a, 0xb0, 0x09, 0x54, 0x4c, 0x86, 0x9a, 0xc4, 0xf1, 0x85, 0xc4, 0x40, 0x17, 0x63, 0xf8, 0x82,
	0x96, 0xec, 0x7e, 0x69, 0xe7, 0xaa, 0xb3, 0x77, 0xae, 0x01, 0x0b, 0x87, 0x41, 0x9c, 0x83, 0xe4,
	0xd9, 0xb4, 0x64, 0x65, 0xbf, 0xf8, 0x2b, 0x58, 0x11, 0xc7, 0x34, 0x1d, 0x0e, 0x2d, 0x12, 0x8d,
	0x87, 0x25, 0xbb, 0xa6, 0x84, 0x6d, 0xfc, 0xb7, 0x30, 0x5f, 0xb2, 0xb2, 0xbe, 0x03, 0x0b, 0xe9,
	0x67, 0x5a, 0xd8, 0x26, 0x57, 0x9f, 0x60, 0x56, 0xc6, 0xa1, 0x67, 0x50, 0x3b, 0x8d, 0xe2, 0xea,
	0xab, 0x5c, 0x68, 0x91, 0x0b, 0xc5, 0x88, 0x95, 0xe0, 0xe8, 0x3d, 0x68, 0x64, 0xaa, 0xd3, 0xf7,
	0xa0, 0x9e, 0xcb, 0xa4, 0x84, 0x95, 0x4b, 0xc4, 0xd9, 0xdf, 0xa5, 0x63, 0x9f, 0xf1, 0x35, 0x9a,
	0x2f, 0x3e, 0x0e, 0xc5, 0x75, 0x3f, 0x0d, 0x5c, 0x9b, 0x91, 0xdb, 0xd3, 0x25, 0x43, 0x11, 0x86,
	0xfa, 0x7e, 0x48, 0xc7, 0x41, 0x64, 0xd4, 0xb9, 0x25, 0xe0, 0x96, 0x38, 0x64, 0xa5, 0x0c, 0xbe,
	0x94, 0x9e, 0xf5, 0x4c, 0xce, 0x8f, 0x32, 0xbb, 0x36, 0xf7, 0xdf, 0x38, 0x0c, 0x8b, 0xbb, 0x21,
	0xb1, 0x19, 0x71, 0x0f, 0x7d, 0xe9, 0x29, 0x53, 0xc0, 0xf8, 0x47, 0xe1, 0xa9, 0x77, 0x60, 0xfb,
	0x13, 0x29, 0x35, 0xca, 0xbd, 0xa9, 0xb9, 0x37, 0xd3, 0x45, 0xf4, 0xda, 0xbc, 0xe8, 0xf9, 0xa3,
	0x94, 0xfa, 0xcc, 0xf3, 0xc7, 0x74, 0x1c, 0x49, 0x6f, 0x03, 0x01, 0xdf, 0xf8, 0x49, 0x83, 0x96,
	0xfc, 0x44, 0x46, 0xab, 0xb0, 0x2c, 0x23, 0x7b, 0xa3, 0x80, 0x4d, 0xf4, 0x0a, 0x7a, 0x0a, 0x4f,
	0x64, 0xa2, 0xef, 0x5f, 0x50, 0xcf, 0x21, 0xba, 0x82, 0x56, 0x00, 0xc9, 0x54, 0x7c, 0x77, 0x75,
	0x75, 0xfa, 0x48, 0x6c, 0xda, 0x76, 0x98, 0xae, 0x21, 0x0c, 0x6d, 0x99, 0x3a, 0x0d, 0x86, 0xd4,
	0x76, 0x89, 0xdb, 0xa3, 0xce, 0x78, 0x44, 0x7c, 0xa6, 0x57, 0xd1, 0x1a, 0xac, 0xc8, 0x32, 0x39,
	0x57, 0x43, 0x6f, 0xc3, 0x53, 0x99, 0xdb, 0x27, 0xf4, 0x15, 0x4d, 0x86, 0x8b, 0x5e, 0x47, 0x6f,
	0xc1, 0xaa, 0x4c, 0x5b, 0x24, 0x22, 0xe1, 0x05, 0x71, 0x3f, 0xd0, 0x17, 0xe6, 0x93, 0x5b, 0x7a,
	0x63, 0x3e, 0xf9, 0xa1, 0xbe, 0x38, 0x9f, 0xfc, 0x48, 0x87, 0xf9, 0xe4, 0xc7, 0x7a, 0x73, 0x3e,
	0xf9, 0x89, 0xbe, 0x34, 0x9f, 0xdc, 0xd6, 0x1f, 0xcd, 0x27, 0x5f, 0xe8, 0xad, 0x9d, 0xf5, 0xab,
	0x3f, 0xdb, 0x95, 0x37, 0xd7, 0x6d, 0xe5, 0xea, 0xba, 0xad, 0xfc, 0x71, 0xdd, 0x56, 0x7e, 0xb8,
	0x69, 0x57, 0xae, 0x6e, 0xda, 0x95, 0xdf, 0x6e, 0xda, 0x95, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x01, 0x24, 0xf1, 0x6b, 0x3f, 0x0f, 0x00, 0x00,
}

func (m *MessagesSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	i--
	if m.ClearDraft {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.ReplyTo))
	i--
	dAtA[i] = 0x30
	i -= len(m.Body)
	copy(dAtA[i:], m.Body)
	i = encodeVarintChatApiMessages(dAtA, i, uint64(len(m.Body)))
	i--
	dAtA[i] = 0x2a
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.RandomID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MessagesBroadcast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesBroadcast) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesBroadcast) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ReceiverIDs) > 0 {
		for iNdEx := len(m.ReceiverIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatApiMessages(dAtA, i, uint64(m.ReceiverIDs[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i -= len(m.Body)
	copy(dAtA[i:], m.Body)
	i = encodeVarintChatApiMessages(dAtA, i, uint64(len(m.Body)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MessagesSendMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesSendMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesSendMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.ClearDraft {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.ReplyTo))
	i--
	dAtA[i] = 0x28
	if m.MediaData != nil {
		i -= len(m.MediaData)
		copy(dAtA[i:], m.MediaData)
		i = encodeVarintChatApiMessages(dAtA, i, uint64(len(m.MediaData)))
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MediaType))
	i--
	dAtA[i] = 0x18
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.RandomID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MessagesEdit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesEdit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesEdit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MessageID))
	i--
	dAtA[i] = 0x20
	i -= len(m.Body)
	copy(dAtA[i:], m.Body)
	i = encodeVarintChatApiMessages(dAtA, i, uint64(len(m.Body)))
	i--
	dAtA[i] = 0x1a
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.RandomID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MessagesReadHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesReadHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesReadHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MaxID))
	i--
	dAtA[i] = 0x18
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MessagesGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessagesIDs) > 0 {
		for iNdEx := len(m.MessagesIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MessagesIDs[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagesGetHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesGetHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesGetHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MinID))
	i--
	dAtA[i] = 0x28
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MaxID))
	i--
	dAtA[i] = 0x20
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.Limit))
	i--
	dAtA[i] = 0x18
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MessagesGetDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesGetDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesGetDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.ExcludePinned {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.Offset))
	i--
	dAtA[i] = 0x18
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.Limit))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *MessagesGetPinnedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesGetPinnedDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesGetPinnedDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MessagesGetDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesGetDialog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesGetDialog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagesSetTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesSetTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesSetTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.Action))
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagesClearHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesClearHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesClearHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Delete {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MaxID))
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagesDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Revoke {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if len(m.MessageIDs) > 0 {
		for iNdEx := len(m.MessageIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MessageIDs[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagesForward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesForward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesForward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.RandomID))
	i--
	dAtA[i] = 0x28
	if len(m.MessageIDs) > 0 {
		for iNdEx := len(m.MessageIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MessageIDs[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	i--
	if m.Silence {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if m.ToPeer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("ToPeer")
	} else {
		{
			size, err := m.ToPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FromPeer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("FromPeer")
	} else {
		{
			size, err := m.FromPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagesReadContents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesReadContents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesReadContents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageIDs) > 0 {
		for iNdEx := len(m.MessageIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MessageIDs[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagesSaveDraft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesSaveDraft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesSaveDraft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.EditedID))
	i--
	dAtA[i] = 0x28
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.Body)
	copy(dAtA[i:], m.Body)
	i = encodeVarintChatApiMessages(dAtA, i, uint64(len(m.Body)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.ReplyTo))
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagesClearDraft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesClearDraft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesClearDraft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagesToggleDialogPin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesToggleDialogPin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesToggleDialogPin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Pin {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagesReorderPinnedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesReorderPinnedDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesReorderPinnedDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessagesSendScreenShotNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesSendScreenShotNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesSendScreenShotNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MaxID))
	i--
	dAtA[i] = 0x28
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MinID))
	i--
	dAtA[i] = 0x20
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.ReplyTo))
	i--
	dAtA[i] = 0x18
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.RandomID))
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagesSendVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesSendVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesSendVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Options[iNdEx])
			copy(dAtA[i:], m.Options[iNdEx])
			i = encodeVarintChatApiMessages(dAtA, i, uint64(len(m.Options[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MessageID))
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagesGetPollResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesGetPollResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesGetPollResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MessageID))
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagesDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x28
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x20
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Dialogs) > 0 {
		for iNdEx := len(m.Dialogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dialogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessagesSent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesSent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesSent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.CreatedOn))
	i--
	dAtA[i] = 0x18
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.RandomID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatApiMessages(dAtA, i, uint64(m.MessageID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MessagesMany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagesMany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagesMany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Continuous {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintChatApiMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatApiMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessagesSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiMessages(uint64(m.RandomID))
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	l = len(m.Body)
	n += 1 + l + sovChatApiMessages(uint64(l))
	n += 1 + sovChatApiMessages(uint64(m.ReplyTo))
	n += 2
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovChatApiMessages(uint64(l))
		}
	}
	return n
}

func (m *MessagesBroadcast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Body)
	n += 1 + l + sovChatApiMessages(uint64(l))
	if len(m.ReceiverIDs) > 0 {
		for _, e := range m.ReceiverIDs {
			n += 1 + sovChatApiMessages(uint64(e))
		}
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovChatApiMessages(uint64(l))
		}
	}
	return n
}

func (m *MessagesSendMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiMessages(uint64(m.RandomID))
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	n += 1 + sovChatApiMessages(uint64(m.MediaType))
	if m.MediaData != nil {
		l = len(m.MediaData)
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	n += 1 + sovChatApiMessages(uint64(m.ReplyTo))
	n += 2
	return n
}

func (m *MessagesEdit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiMessages(uint64(m.RandomID))
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	l = len(m.Body)
	n += 1 + l + sovChatApiMessages(uint64(l))
	n += 1 + sovChatApiMessages(uint64(m.MessageID))
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovChatApiMessages(uint64(l))
		}
	}
	return n
}

func (m *MessagesReadHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	n += 1 + sovChatApiMessages(uint64(m.MaxID))
	return n
}

func (m *MessagesGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	if len(m.MessagesIDs) > 0 {
		for _, e := range m.MessagesIDs {
			n += 1 + sovChatApiMessages(uint64(e))
		}
	}
	return n
}

func (m *MessagesGetHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	n += 1 + sovChatApiMessages(uint64(m.Limit))
	n += 1 + sovChatApiMessages(uint64(m.MaxID))
	n += 1 + sovChatApiMessages(uint64(m.MinID))
	return n
}

func (m *MessagesGetDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiMessages(uint64(m.Limit))
	n += 1 + sovChatApiMessages(uint64(m.Offset))
	n += 2
	return n
}

func (m *MessagesGetPinnedDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MessagesGetDialog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	return n
}

func (m *MessagesSetTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	n += 1 + sovChatApiMessages(uint64(m.Action))
	return n
}

func (m *MessagesClearHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	n += 1 + sovChatApiMessages(uint64(m.MaxID))
	n += 2
	return n
}

func (m *MessagesDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	if len(m.MessageIDs) > 0 {
		for _, e := range m.MessageIDs {
			n += 1 + sovChatApiMessages(uint64(e))
		}
	}
	n += 2
	return n
}

func (m *MessagesForward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromPeer != nil {
		l = m.FromPeer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	if m.ToPeer != nil {
		l = m.ToPeer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	n += 2
	if len(m.MessageIDs) > 0 {
		for _, e := range m.MessageIDs {
			n += 1 + sovChatApiMessages(uint64(e))
		}
	}
	n += 1 + sovChatApiMessages(uint64(m.RandomID))
	return n
}

func (m *MessagesReadContents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	if len(m.MessageIDs) > 0 {
		for _, e := range m.MessageIDs {
			n += 1 + sovChatApiMessages(uint64(e))
		}
	}
	return n
}

func (m *MessagesSaveDraft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	n += 1 + sovChatApiMessages(uint64(m.ReplyTo))
	l = len(m.Body)
	n += 1 + l + sovChatApiMessages(uint64(l))
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovChatApiMessages(uint64(l))
		}
	}
	n += 1 + sovChatApiMessages(uint64(m.EditedID))
	return n
}

func (m *MessagesClearDraft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	return n
}

func (m *MessagesToggleDialogPin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	n += 2
	return n
}

func (m *MessagesReorderPinnedDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovChatApiMessages(uint64(l))
		}
	}
	return n
}

func (m *MessagesSendScreenShotNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	n += 1 + sovChatApiMessages(uint64(m.RandomID))
	n += 1 + sovChatApiMessages(uint64(m.ReplyTo))
	n += 1 + sovChatApiMessages(uint64(m.MinID))
	n += 1 + sovChatApiMessages(uint64(m.MaxID))
	return n
}

func (m *MessagesSendVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	n += 1 + sovChatApiMessages(uint64(m.MessageID))
	if len(m.Options) > 0 {
		for _, b := range m.Options {
			l = len(b)
			n += 1 + l + sovChatApiMessages(uint64(l))
		}
	}
	return n
}

func (m *MessagesGetPollResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatApiMessages(uint64(l))
	}
	n += 1 + sovChatApiMessages(uint64(m.MessageID))
	return n
}

func (m *MessagesDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovChatApiMessages(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovChatApiMessages(uint64(l))
		}
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovChatApiMessages(uint64(l))
		}
	}
	n += 1 + sovChatApiMessages(uint64(m.Count))
	n += 1 + sovChatApiMessages(uint64(m.UpdateID))
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovChatApiMessages(uint64(l))
		}
	}
	return n
}

func (m *MessagesSent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiMessages(uint64(m.MessageID))
	n += 1 + sovChatApiMessages(uint64(m.RandomID))
	n += 1 + sovChatApiMessages(uint64(m.CreatedOn))
	return n
}

func (m *MessagesMany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovChatApiMessages(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovChatApiMessages(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovChatApiMessages(uint64(l))
		}
	}
	n += 2
	return n
}

func sovChatApiMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatApiMessages(x uint64) (n int) {
	return sovChatApiMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessagesSend) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			m.ReplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RandomID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Body")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesBroadcast) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesBroadcast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesBroadcast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReceiverIDs = append(m.ReceiverIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiMessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiMessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReceiverIDs) == 0 {
					m.ReceiverIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReceiverIDs = append(m.ReceiverIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverIDs", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Body")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesSendMedia) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesSendMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesSendMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= InputMediaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaData = append(m.MediaData[:0], dAtA[iNdEx:postIndex]...)
			if m.MediaData == nil {
				m.MediaData = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			m.ReplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RandomID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MediaType")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MediaData")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesEdit) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesEdit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesEdit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RandomID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Body")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MessageID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesReadHistory) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesReadHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesReadHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxID", wireType)
			}
			m.MaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MaxID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesGet) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessagesIDs = append(m.MessagesIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiMessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiMessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessagesIDs) == 0 {
					m.MessagesIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessagesIDs = append(m.MessagesIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagesIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesGetHistory) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesGetHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesGetHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxID", wireType)
			}
			m.MaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinID", wireType)
			}
			m.MinID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Limit")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MaxID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MinID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesGetDialogs) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesGetDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesGetDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludePinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludePinned = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Limit")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Offset")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesGetPinnedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesGetPinnedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesGetPinnedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesGetDialog) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesGetDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesGetDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesSetTyping) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesSetTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesSetTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= TypingAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Action")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesClearHistory) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesClearHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesClearHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxID", wireType)
			}
			m.MaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delete = bool(v != 0)
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MaxID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Delete")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesDelete) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiMessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiMessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoke", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoke = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Revoke")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesForward) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesForward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesForward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromPeer == nil {
				m.FromPeer = &InputPeer{}
			}
			if err := m.FromPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToPeer == nil {
				m.ToPeer = &InputPeer{}
			}
			if err := m.ToPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silence", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silence = bool(v != 0)
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiMessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiMessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FromPeer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ToPeer")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Silence")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RandomID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesReadContents) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesReadContents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesReadContents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiMessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiMessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesSaveDraft) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesSaveDraft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesSaveDraft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			m.ReplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditedID", wireType)
			}
			m.EditedID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditedID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ReplyTo")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Body")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesClearDraft) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesClearDraft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesClearDraft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesToggleDialogPin) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesToggleDialogPin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesToggleDialogPin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pin = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Pin")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesReorderPinnedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesReorderPinnedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesReorderPinnedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &InputPeer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesSendScreenShotNotification) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesSendScreenShotNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesSendScreenShotNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			m.ReplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinID", wireType)
			}
			m.MinID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxID", wireType)
			}
			m.MaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RandomID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesSendVote) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesSendVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesSendVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, make([]byte, postIndex-iNdEx))
			copy(m.Options[len(m.Options)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MessageID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesGetPollResults) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesGetPollResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesGetPollResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MessageID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesDialogs) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &Dialog{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &UserMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Count")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesSent) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesSent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesSent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MessageID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RandomID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CreatedOn")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagesMany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagesMany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagesMany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &UserMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Continuous", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Continuous = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatApiMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatApiMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatApiMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatApiMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatApiMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatApiMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatApiMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatApiMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatApiMessages = fmt.Errorf("proto: unexpected end of group")
)
