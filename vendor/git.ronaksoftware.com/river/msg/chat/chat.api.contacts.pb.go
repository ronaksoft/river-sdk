// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.api.contacts.proto

package msg

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ContactsImport
// @Function
// @Return: ContactsImported
type ContactsImport struct {
	Contacts []*PhoneContact `protobuf:"bytes,1,rep,name=Contacts" json:"Contacts,omitempty"`
	Replace  bool            `protobuf:"varint,2,req,name=Replace" json:"Replace"`
}

func (m *ContactsImport) Reset()         { *m = ContactsImport{} }
func (m *ContactsImport) String() string { return proto.CompactTextString(m) }
func (*ContactsImport) ProtoMessage()    {}
func (*ContactsImport) Descriptor() ([]byte, []int) {
	return fileDescriptor_133508c6c9c8f6f5, []int{0}
}
func (m *ContactsImport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsImport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsImport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsImport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsImport.Merge(m, src)
}
func (m *ContactsImport) XXX_Size() int {
	return m.Size()
}
func (m *ContactsImport) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsImport.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsImport proto.InternalMessageInfo

func (m *ContactsImport) GetContacts() []*PhoneContact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *ContactsImport) GetReplace() bool {
	if m != nil {
		return m.Replace
	}
	return false
}

// ContactsAdd
// @Function
// @Return: Bool
type ContactsAdd struct {
	User      *InputUser `protobuf:"bytes,1,req,name=User" json:"User,omitempty"`
	FirstName string     `protobuf:"bytes,2,req,name=FirstName" json:"FirstName"`
	LastName  string     `protobuf:"bytes,3,opt,name=LastName" json:"LastName"`
	Phone     string     `protobuf:"bytes,4,opt,name=Phone" json:"Phone"`
}

func (m *ContactsAdd) Reset()         { *m = ContactsAdd{} }
func (m *ContactsAdd) String() string { return proto.CompactTextString(m) }
func (*ContactsAdd) ProtoMessage()    {}
func (*ContactsAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_133508c6c9c8f6f5, []int{1}
}
func (m *ContactsAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsAdd.Merge(m, src)
}
func (m *ContactsAdd) XXX_Size() int {
	return m.Size()
}
func (m *ContactsAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsAdd.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsAdd proto.InternalMessageInfo

func (m *ContactsAdd) GetUser() *InputUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ContactsAdd) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *ContactsAdd) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *ContactsAdd) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// ContactsGet
// @Function
// @Return: ContactsMany
type ContactsGet struct {
	//    required string MD5Hash = 1;
	Crc32Hash uint32 `protobuf:"varint,2,req,name=Crc32Hash" json:"Crc32Hash"`
}

func (m *ContactsGet) Reset()         { *m = ContactsGet{} }
func (m *ContactsGet) String() string { return proto.CompactTextString(m) }
func (*ContactsGet) ProtoMessage()    {}
func (*ContactsGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_133508c6c9c8f6f5, []int{2}
}
func (m *ContactsGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsGet.Merge(m, src)
}
func (m *ContactsGet) XXX_Size() int {
	return m.Size()
}
func (m *ContactsGet) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsGet.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsGet proto.InternalMessageInfo

func (m *ContactsGet) GetCrc32Hash() uint32 {
	if m != nil {
		return m.Crc32Hash
	}
	return 0
}

// ContactsDelete
// @Function
// @Return: Bool
type ContactsDelete struct {
	UserIDs []int64 `protobuf:"varint,1,rep,name=UserIDs" json:"UserIDs,omitempty"`
}

func (m *ContactsDelete) Reset()         { *m = ContactsDelete{} }
func (m *ContactsDelete) String() string { return proto.CompactTextString(m) }
func (*ContactsDelete) ProtoMessage()    {}
func (*ContactsDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_133508c6c9c8f6f5, []int{3}
}
func (m *ContactsDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsDelete.Merge(m, src)
}
func (m *ContactsDelete) XXX_Size() int {
	return m.Size()
}
func (m *ContactsDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsDelete.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsDelete proto.InternalMessageInfo

func (m *ContactsDelete) GetUserIDs() []int64 {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

// ContactsDeleteAll
// @Function: ContactsDeleteAll
// @Return: Bool
type ContactsDeleteAll struct {
}

func (m *ContactsDeleteAll) Reset()         { *m = ContactsDeleteAll{} }
func (m *ContactsDeleteAll) String() string { return proto.CompactTextString(m) }
func (*ContactsDeleteAll) ProtoMessage()    {}
func (*ContactsDeleteAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_133508c6c9c8f6f5, []int{4}
}
func (m *ContactsDeleteAll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsDeleteAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsDeleteAll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsDeleteAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsDeleteAll.Merge(m, src)
}
func (m *ContactsDeleteAll) XXX_Size() int {
	return m.Size()
}
func (m *ContactsDeleteAll) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsDeleteAll.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsDeleteAll proto.InternalMessageInfo

// ContactsBlock
// @Function
// @Return: Bool
type ContactsBlock struct {
	User *InputUser `protobuf:"bytes,1,req,name=User" json:"User,omitempty"`
}

func (m *ContactsBlock) Reset()         { *m = ContactsBlock{} }
func (m *ContactsBlock) String() string { return proto.CompactTextString(m) }
func (*ContactsBlock) ProtoMessage()    {}
func (*ContactsBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_133508c6c9c8f6f5, []int{5}
}
func (m *ContactsBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsBlock.Merge(m, src)
}
func (m *ContactsBlock) XXX_Size() int {
	return m.Size()
}
func (m *ContactsBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsBlock proto.InternalMessageInfo

func (m *ContactsBlock) GetUser() *InputUser {
	if m != nil {
		return m.User
	}
	return nil
}

// ContactsUnblock
// @Function
// @Return: Bool
type ContactsUnblock struct {
	User *InputUser `protobuf:"bytes,2,req,name=User" json:"User,omitempty"`
}

func (m *ContactsUnblock) Reset()         { *m = ContactsUnblock{} }
func (m *ContactsUnblock) String() string { return proto.CompactTextString(m) }
func (*ContactsUnblock) ProtoMessage()    {}
func (*ContactsUnblock) Descriptor() ([]byte, []int) {
	return fileDescriptor_133508c6c9c8f6f5, []int{6}
}
func (m *ContactsUnblock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsUnblock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsUnblock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsUnblock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsUnblock.Merge(m, src)
}
func (m *ContactsUnblock) XXX_Size() int {
	return m.Size()
}
func (m *ContactsUnblock) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsUnblock.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsUnblock proto.InternalMessageInfo

func (m *ContactsUnblock) GetUser() *InputUser {
	if m != nil {
		return m.User
	}
	return nil
}

// ContactsGetBlocked
// @Function
// @Returns: BlockedContacts
type ContactsGetBlocked struct {
	Offset int32 `protobuf:"varint,1,req,name=Offset" json:"Offset"`
	Limit  int32 `protobuf:"varint,2,req,name=Limit" json:"Limit"`
}

func (m *ContactsGetBlocked) Reset()         { *m = ContactsGetBlocked{} }
func (m *ContactsGetBlocked) String() string { return proto.CompactTextString(m) }
func (*ContactsGetBlocked) ProtoMessage()    {}
func (*ContactsGetBlocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_133508c6c9c8f6f5, []int{7}
}
func (m *ContactsGetBlocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsGetBlocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsGetBlocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsGetBlocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsGetBlocked.Merge(m, src)
}
func (m *ContactsGetBlocked) XXX_Size() int {
	return m.Size()
}
func (m *ContactsGetBlocked) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsGetBlocked.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsGetBlocked proto.InternalMessageInfo

func (m *ContactsGetBlocked) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ContactsGetBlocked) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// ContactsSearch
// @Function
// @Returns: UsersMany
type ContactsSearch struct {
	Q string `protobuf:"bytes,1,req,name=Q" json:"Q"`
}

func (m *ContactsSearch) Reset()         { *m = ContactsSearch{} }
func (m *ContactsSearch) String() string { return proto.CompactTextString(m) }
func (*ContactsSearch) ProtoMessage()    {}
func (*ContactsSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_133508c6c9c8f6f5, []int{8}
}
func (m *ContactsSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsSearch.Merge(m, src)
}
func (m *ContactsSearch) XXX_Size() int {
	return m.Size()
}
func (m *ContactsSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsSearch.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsSearch proto.InternalMessageInfo

func (m *ContactsSearch) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

// BlockedContactsMany
type BlockedContactsMany struct {
	Contacts []*BlockedContact `protobuf:"bytes,1,rep,name=Contacts" json:"Contacts,omitempty"`
	Users    []*User           `protobuf:"bytes,2,rep,name=Users" json:"Users,omitempty"`
	Total    int32             `protobuf:"varint,3,opt,name=Total" json:"Total"`
}

func (m *BlockedContactsMany) Reset()         { *m = BlockedContactsMany{} }
func (m *BlockedContactsMany) String() string { return proto.CompactTextString(m) }
func (*BlockedContactsMany) ProtoMessage()    {}
func (*BlockedContactsMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_133508c6c9c8f6f5, []int{9}
}
func (m *BlockedContactsMany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockedContactsMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockedContactsMany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockedContactsMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockedContactsMany.Merge(m, src)
}
func (m *BlockedContactsMany) XXX_Size() int {
	return m.Size()
}
func (m *BlockedContactsMany) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockedContactsMany.DiscardUnknown(m)
}

var xxx_messageInfo_BlockedContactsMany proto.InternalMessageInfo

func (m *BlockedContactsMany) GetContacts() []*BlockedContact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *BlockedContactsMany) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *BlockedContactsMany) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// BlockedContact
type BlockedContact struct {
	UserID int64 `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	Date   int64 `protobuf:"varint,2,req,name=Date" json:"Date"`
}

func (m *BlockedContact) Reset()         { *m = BlockedContact{} }
func (m *BlockedContact) String() string { return proto.CompactTextString(m) }
func (*BlockedContact) ProtoMessage()    {}
func (*BlockedContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_133508c6c9c8f6f5, []int{10}
}
func (m *BlockedContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockedContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockedContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockedContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockedContact.Merge(m, src)
}
func (m *BlockedContact) XXX_Size() int {
	return m.Size()
}
func (m *BlockedContact) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockedContact.DiscardUnknown(m)
}

var xxx_messageInfo_BlockedContact proto.InternalMessageInfo

func (m *BlockedContact) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *BlockedContact) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// ContactsImported
type ContactsImported struct {
	ContactUsers []*ContactUser `protobuf:"bytes,1,rep,name=ContactUsers" json:"ContactUsers,omitempty"`
	Users        []*User        `protobuf:"bytes,2,rep,name=Users" json:"Users,omitempty"`
}

func (m *ContactsImported) Reset()         { *m = ContactsImported{} }
func (m *ContactsImported) String() string { return proto.CompactTextString(m) }
func (*ContactsImported) ProtoMessage()    {}
func (*ContactsImported) Descriptor() ([]byte, []int) {
	return fileDescriptor_133508c6c9c8f6f5, []int{11}
}
func (m *ContactsImported) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsImported) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsImported.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsImported) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsImported.Merge(m, src)
}
func (m *ContactsImported) XXX_Size() int {
	return m.Size()
}
func (m *ContactsImported) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsImported.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsImported proto.InternalMessageInfo

func (m *ContactsImported) GetContactUsers() []*ContactUser {
	if m != nil {
		return m.ContactUsers
	}
	return nil
}

func (m *ContactsImported) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

// ContactsMany
type ContactsMany struct {
	Contacts     []*PhoneContact `protobuf:"bytes,1,rep,name=Contacts" json:"Contacts,omitempty"`
	ContactUsers []*ContactUser  `protobuf:"bytes,2,rep,name=ContactUsers" json:"ContactUsers,omitempty"`
	Modified     bool            `protobuf:"varint,3,req,name=Modified" json:"Modified"`
	Users        []*User         `protobuf:"bytes,4,rep,name=Users" json:"Users,omitempty"`
}

func (m *ContactsMany) Reset()         { *m = ContactsMany{} }
func (m *ContactsMany) String() string { return proto.CompactTextString(m) }
func (*ContactsMany) ProtoMessage()    {}
func (*ContactsMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_133508c6c9c8f6f5, []int{12}
}
func (m *ContactsMany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsMany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsMany.Merge(m, src)
}
func (m *ContactsMany) XXX_Size() int {
	return m.Size()
}
func (m *ContactsMany) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsMany.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsMany proto.InternalMessageInfo

func (m *ContactsMany) GetContacts() []*PhoneContact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *ContactsMany) GetContactUsers() []*ContactUser {
	if m != nil {
		return m.ContactUsers
	}
	return nil
}

func (m *ContactsMany) GetModified() bool {
	if m != nil {
		return m.Modified
	}
	return false
}

func (m *ContactsMany) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*ContactsImport)(nil), "msg.ContactsImport")
	proto.RegisterType((*ContactsAdd)(nil), "msg.ContactsAdd")
	proto.RegisterType((*ContactsGet)(nil), "msg.ContactsGet")
	proto.RegisterType((*ContactsDelete)(nil), "msg.ContactsDelete")
	proto.RegisterType((*ContactsDeleteAll)(nil), "msg.ContactsDeleteAll")
	proto.RegisterType((*ContactsBlock)(nil), "msg.ContactsBlock")
	proto.RegisterType((*ContactsUnblock)(nil), "msg.ContactsUnblock")
	proto.RegisterType((*ContactsGetBlocked)(nil), "msg.ContactsGetBlocked")
	proto.RegisterType((*ContactsSearch)(nil), "msg.ContactsSearch")
	proto.RegisterType((*BlockedContactsMany)(nil), "msg.BlockedContactsMany")
	proto.RegisterType((*BlockedContact)(nil), "msg.BlockedContact")
	proto.RegisterType((*ContactsImported)(nil), "msg.ContactsImported")
	proto.RegisterType((*ContactsMany)(nil), "msg.ContactsMany")
}

func init() { proto.RegisterFile("chat.api.contacts.proto", fileDescriptor_133508c6c9c8f6f5) }

var fileDescriptor_133508c6c9c8f6f5 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x33, 0xb6, 0x43, 0x93, 0x1b, 0x1a, 0xda, 0x89, 0x10, 0x56, 0x55, 0xb9, 0xd6, 0x88,
	0x45, 0x36, 0x18, 0x48, 0xe1, 0x01, 0x9a, 0x46, 0xd0, 0x48, 0x6d, 0xa1, 0x86, 0xae, 0xd1, 0x60,
	0x4f, 0x1a, 0x0b, 0xff, 0xc9, 0x1e, 0x16, 0x5d, 0xf3, 0x02, 0x48, 0xbc, 0x0b, 0xcf, 0xd0, 0x65,
	0x97, 0xac, 0x10, 0x4a, 0x5e, 0x04, 0x79, 0xc6, 0xe3, 0x1f, 0x40, 0x10, 0xb6, 0xdf, 0x3d, 0x73,
	0xef, 0x39, 0x77, 0x66, 0xe0, 0x81, 0xb7, 0xa4, 0xdc, 0xa1, 0x69, 0xe0, 0x78, 0x49, 0xcc, 0xa9,
	0xc7, 0x73, 0x27, 0xcd, 0x12, 0x9e, 0x60, 0x3d, 0xca, 0xaf, 0xf6, 0xee, 0x8b, 0xaa, 0x97, 0x64,
	0xcc, 0xe1, 0xd7, 0x29, 0x2b, 0x6b, 0xe4, 0x1d, 0x0c, 0x8f, 0x4b, 0xf5, 0x3c, 0x4a, 0x93, 0x8c,
	0xe3, 0x47, 0xd0, 0x53, 0xc4, 0x44, 0xb6, 0x3e, 0x1e, 0x4c, 0x76, 0x9d, 0x28, 0xbf, 0x72, 0x5e,
	0x2f, 0x93, 0x98, 0x95, 0x15, 0xb7, 0x92, 0x60, 0x0b, 0xb6, 0x5c, 0x96, 0x86, 0xd4, 0x63, 0xa6,
	0x66, 0x6b, 0xe3, 0xde, 0xd4, 0xb8, 0xf9, 0x7e, 0xd0, 0x71, 0x15, 0x24, 0x5f, 0x10, 0x0c, 0x94,
	0xf8, 0xc8, 0xf7, 0x31, 0x01, 0xe3, 0x32, 0x67, 0x99, 0x89, 0x6c, 0x6d, 0x3c, 0x98, 0x0c, 0x45,
	0xeb, 0x79, 0x9c, 0x7e, 0xe4, 0x05, 0x75, 0x45, 0x0d, 0x13, 0xe8, 0xbf, 0x08, 0xb2, 0x9c, 0x9f,
	0xd3, 0x48, 0x76, 0xed, 0x97, 0x5d, 0x6b, 0x8c, 0x6d, 0xe8, 0x9d, 0xd2, 0x52, 0xa2, 0xdb, 0xa8,
	0x92, 0x54, 0x14, 0xef, 0x41, 0x57, 0x78, 0x36, 0x8d, 0x46, 0x59, 0x22, 0xf2, 0xb4, 0x36, 0xf5,
	0x92, 0xf1, 0x62, 0xe0, 0x71, 0xe6, 0x1d, 0x4e, 0x4e, 0x68, 0xbe, 0x14, 0x03, 0xb7, 0xd5, 0xc0,
	0x0a, 0x13, 0xa7, 0xde, 0xd4, 0x8c, 0x85, 0x8c, 0x33, 0xbc, 0x0f, 0x5b, 0x85, 0xdd, 0xf9, 0x4c,
	0x2e, 0x4a, 0x9f, 0x6a, 0x4f, 0x90, 0xab, 0x10, 0x19, 0xc1, 0x6e, 0x5b, 0x7f, 0x14, 0x86, 0xe4,
	0x10, 0xb6, 0x15, 0x9c, 0x86, 0x89, 0xf7, 0x61, 0x93, 0x75, 0x90, 0xe7, 0x70, 0x4f, 0x1d, 0xba,
	0x8c, 0xdf, 0xb7, 0x8e, 0x69, 0x7f, 0x39, 0x76, 0x0e, 0xb8, 0x91, 0x51, 0x8c, 0x63, 0x3e, 0xde,
	0x87, 0x3b, 0xaf, 0x16, 0x8b, 0x9c, 0x71, 0x31, 0xb2, 0x5b, 0xe6, 0x2c, 0x59, 0xb1, 0xb3, 0xd3,
	0x20, 0x0a, 0xb8, 0x68, 0xac, 0x8a, 0x12, 0x91, 0x87, 0xf5, 0x02, 0xde, 0x30, 0x9a, 0x79, 0x4b,
	0x8c, 0x01, 0x5d, 0x88, 0x36, 0x6a, 0xbb, 0xe8, 0x82, 0x7c, 0x42, 0x30, 0x2a, 0x67, 0x29, 0xf5,
	0x19, 0x8d, 0xaf, 0xf1, 0xe3, 0xdf, 0x9e, 0xd5, 0x48, 0xb8, 0x6e, 0x6b, 0x1b, 0x0f, 0xeb, 0x00,
	0xba, 0x45, 0x8c, 0xdc, 0xd4, 0x84, 0xba, 0x2f, 0xd4, 0x22, 0x9e, 0xe4, 0x85, 0xd7, 0xb7, 0x09,
	0xa7, 0xa1, 0xb8, 0xfe, 0xca, 0xab, 0x40, 0xe4, 0x04, 0x86, 0xed, 0xc6, 0x45, 0x6e, 0x79, 0x33,
	0xc2, 0xb0, 0xae, 0x72, 0x4b, 0x86, 0x4d, 0x30, 0x66, 0x94, 0xcb, 0xc7, 0xa6, 0x6a, 0x82, 0x90,
	0x00, 0x76, 0xda, 0x1f, 0x84, 0xf9, 0xf8, 0x19, 0xdc, 0x2d, 0x99, 0x74, 0x28, 0xf3, 0xec, 0x08,
	0x87, 0x8d, 0x82, 0xdb, 0x52, 0xfd, 0x33, 0x10, 0xf9, 0x8a, 0xaa, 0xbe, 0x72, 0x67, 0xff, 0xf9,
	0x15, 0x7f, 0xb5, 0xa5, 0x6d, 0x64, 0xcb, 0x86, 0xde, 0x59, 0xe2, 0x07, 0x8b, 0x80, 0xf9, 0xa6,
	0xde, 0xf8, 0xc1, 0x15, 0xad, 0x8d, 0x1b, 0x7f, 0x36, 0x3e, 0x35, 0x6f, 0x56, 0x16, 0xba, 0x5d,
	0x59, 0xe8, 0xc7, 0xca, 0x42, 0x9f, 0xd7, 0x56, 0xe7, 0x76, 0x6d, 0x75, 0xbe, 0xad, 0xad, 0xce,
	0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x4e, 0x93, 0x31, 0x94, 0x04, 0x00, 0x00,
}

func (m *ContactsImport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsImport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsImport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Replace {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContactsAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Phone)
	copy(dAtA[i:], m.Phone)
	i = encodeVarintChatApiContacts(dAtA, i, uint64(len(m.Phone)))
	i--
	dAtA[i] = 0x22
	i -= len(m.LastName)
	copy(dAtA[i:], m.LastName)
	i = encodeVarintChatApiContacts(dAtA, i, uint64(len(m.LastName)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.FirstName)
	copy(dAtA[i:], m.FirstName)
	i = encodeVarintChatApiContacts(dAtA, i, uint64(len(m.FirstName)))
	i--
	dAtA[i] = 0x12
	if m.User == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("User")
	} else {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiContacts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactsGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiContacts(dAtA, i, uint64(m.Crc32Hash))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *ContactsDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		for iNdEx := len(m.UserIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatApiContacts(dAtA, i, uint64(m.UserIDs[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContactsDeleteAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsDeleteAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsDeleteAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ContactsBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.User == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("User")
	} else {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiContacts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactsUnblock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsUnblock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsUnblock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.User == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("User")
	} else {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiContacts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ContactsGetBlocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGetBlocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsGetBlocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiContacts(dAtA, i, uint64(m.Limit))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatApiContacts(dAtA, i, uint64(m.Offset))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ContactsSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Q)
	copy(dAtA[i:], m.Q)
	i = encodeVarintChatApiContacts(dAtA, i, uint64(len(m.Q)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BlockedContactsMany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockedContactsMany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockedContactsMany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiContacts(dAtA, i, uint64(m.Total))
	i--
	dAtA[i] = 0x18
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockedContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockedContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockedContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiContacts(dAtA, i, uint64(m.Date))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatApiContacts(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ContactsImported) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsImported) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsImported) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ContactUsers) > 0 {
		for iNdEx := len(m.ContactUsers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContactUsers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContactsMany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsMany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactsMany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i--
	if m.Modified {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if len(m.ContactUsers) > 0 {
		for iNdEx := len(m.ContactUsers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContactUsers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintChatApiContacts(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatApiContacts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContactsImport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovChatApiContacts(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *ContactsAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovChatApiContacts(uint64(l))
	}
	l = len(m.FirstName)
	n += 1 + l + sovChatApiContacts(uint64(l))
	l = len(m.LastName)
	n += 1 + l + sovChatApiContacts(uint64(l))
	l = len(m.Phone)
	n += 1 + l + sovChatApiContacts(uint64(l))
	return n
}

func (m *ContactsGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiContacts(uint64(m.Crc32Hash))
	return n
}

func (m *ContactsDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		for _, e := range m.UserIDs {
			n += 1 + sovChatApiContacts(uint64(e))
		}
	}
	return n
}

func (m *ContactsDeleteAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ContactsBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovChatApiContacts(uint64(l))
	}
	return n
}

func (m *ContactsUnblock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovChatApiContacts(uint64(l))
	}
	return n
}

func (m *ContactsGetBlocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiContacts(uint64(m.Offset))
	n += 1 + sovChatApiContacts(uint64(m.Limit))
	return n
}

func (m *ContactsSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Q)
	n += 1 + l + sovChatApiContacts(uint64(l))
	return n
}

func (m *BlockedContactsMany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovChatApiContacts(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovChatApiContacts(uint64(l))
		}
	}
	n += 1 + sovChatApiContacts(uint64(m.Total))
	return n
}

func (m *BlockedContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiContacts(uint64(m.UserID))
	n += 1 + sovChatApiContacts(uint64(m.Date))
	return n
}

func (m *ContactsImported) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContactUsers) > 0 {
		for _, e := range m.ContactUsers {
			l = e.Size()
			n += 1 + l + sovChatApiContacts(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovChatApiContacts(uint64(l))
		}
	}
	return n
}

func (m *ContactsMany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovChatApiContacts(uint64(l))
		}
	}
	if len(m.ContactUsers) > 0 {
		for _, e := range m.ContactUsers {
			l = e.Size()
			n += 1 + l + sovChatApiContacts(uint64(l))
		}
	}
	n += 2
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovChatApiContacts(uint64(l))
		}
	}
	return n
}

func sovChatApiContacts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatApiContacts(x uint64) (n int) {
	return sovChatApiContacts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContactsImport) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsImport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsImport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &PhoneContact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Replace = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Replace")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsAdd) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &InputUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("User")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FirstName")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGet) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc32Hash", wireType)
			}
			m.Crc32Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc32Hash |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Crc32Hash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIDs = append(m.UserIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatApiContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatApiContacts
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatApiContacts
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIDs) == 0 {
					m.UserIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatApiContacts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIDs = append(m.UserIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsDeleteAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsDeleteAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsDeleteAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsBlock) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &InputUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("User")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsUnblock) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsUnblock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsUnblock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &InputUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("User")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGetBlocked) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGetBlocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGetBlocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Offset")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Limit")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsSearch) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Q")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockedContactsMany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockedContactsMany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockedContactsMany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &BlockedContact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockedContact) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockedContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockedContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Date")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsImported) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsImported: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsImported: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactUsers = append(m.ContactUsers, &ContactUser{})
			if err := m.ContactUsers[len(m.ContactUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsMany) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsMany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsMany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &PhoneContact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactUsers = append(m.ContactUsers, &ContactUser{})
			if err := m.ContactUsers[len(m.ContactUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Modified = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Modified")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatApiContacts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatApiContacts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatApiContacts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatApiContacts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatApiContacts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatApiContacts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatApiContacts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatApiContacts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatApiContacts = fmt.Errorf("proto: unexpected end of group")
)
