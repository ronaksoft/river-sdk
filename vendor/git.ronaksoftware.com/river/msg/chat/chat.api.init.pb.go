// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.api.init.proto

package msg

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InitAuthCompleted_Statuses int32

const (
	InitAuthCompleted_OK    InitAuthCompleted_Statuses = 0
	InitAuthCompleted_FAIL  InitAuthCompleted_Statuses = 1
	InitAuthCompleted_RETRY InitAuthCompleted_Statuses = 2
)

var InitAuthCompleted_Statuses_name = map[int32]string{
	0: "OK",
	1: "FAIL",
	2: "RETRY",
}

var InitAuthCompleted_Statuses_value = map[string]int32{
	"OK":    0,
	"FAIL":  1,
	"RETRY": 2,
}

func (x InitAuthCompleted_Statuses) Enum() *InitAuthCompleted_Statuses {
	p := new(InitAuthCompleted_Statuses)
	*p = x
	return p
}

func (x InitAuthCompleted_Statuses) String() string {
	return proto.EnumName(InitAuthCompleted_Statuses_name, int32(x))
}

func (x *InitAuthCompleted_Statuses) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InitAuthCompleted_Statuses_value, data, "InitAuthCompleted_Statuses")
	if err != nil {
		return err
	}
	*x = InitAuthCompleted_Statuses(value)
	return nil
}

func (InitAuthCompleted_Statuses) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c1e8502c710d31a0, []int{6, 0}
}

// InitConnect
// @Function
// @Return: InitResponse
type InitConnect struct {
	ClientNonce uint64 `protobuf:"fixed64,1,req,name=ClientNonce" json:"ClientNonce"`
}

func (m *InitConnect) Reset()         { *m = InitConnect{} }
func (m *InitConnect) String() string { return proto.CompactTextString(m) }
func (*InitConnect) ProtoMessage()    {}
func (*InitConnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e8502c710d31a0, []int{0}
}
func (m *InitConnect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitConnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitConnect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitConnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitConnect.Merge(m, src)
}
func (m *InitConnect) XXX_Size() int {
	return m.Size()
}
func (m *InitConnect) XXX_DiscardUnknown() {
	xxx_messageInfo_InitConnect.DiscardUnknown(m)
}

var xxx_messageInfo_InitConnect proto.InternalMessageInfo

func (m *InitConnect) GetClientNonce() uint64 {
	if m != nil {
		return m.ClientNonce
	}
	return 0
}

// InitCompleteAuth
// @Function
// @Return: InitAuthCompleted
type InitCompleteAuth struct {
	ClientNonce      uint64 `protobuf:"fixed64,1,req,name=ClientNonce" json:"ClientNonce"`
	ServerNonce      uint64 `protobuf:"fixed64,2,req,name=ServerNonce" json:"ServerNonce"`
	ClientDHPubKey   []byte `protobuf:"bytes,5,req,name=ClientDHPubKey" json:"ClientDHPubKey"`
	P                uint64 `protobuf:"fixed64,6,req,name=P" json:"P"`
	Q                uint64 `protobuf:"fixed64,7,req,name=Q" json:"Q"`
	EncryptedPayload []byte `protobuf:"bytes,8,req,name=EncryptedPayload" json:"EncryptedPayload"`
}

func (m *InitCompleteAuth) Reset()         { *m = InitCompleteAuth{} }
func (m *InitCompleteAuth) String() string { return proto.CompactTextString(m) }
func (*InitCompleteAuth) ProtoMessage()    {}
func (*InitCompleteAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e8502c710d31a0, []int{1}
}
func (m *InitCompleteAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitCompleteAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitCompleteAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitCompleteAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitCompleteAuth.Merge(m, src)
}
func (m *InitCompleteAuth) XXX_Size() int {
	return m.Size()
}
func (m *InitCompleteAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_InitCompleteAuth.DiscardUnknown(m)
}

var xxx_messageInfo_InitCompleteAuth proto.InternalMessageInfo

func (m *InitCompleteAuth) GetClientNonce() uint64 {
	if m != nil {
		return m.ClientNonce
	}
	return 0
}

func (m *InitCompleteAuth) GetServerNonce() uint64 {
	if m != nil {
		return m.ServerNonce
	}
	return 0
}

func (m *InitCompleteAuth) GetClientDHPubKey() []byte {
	if m != nil {
		return m.ClientDHPubKey
	}
	return nil
}

func (m *InitCompleteAuth) GetP() uint64 {
	if m != nil {
		return m.P
	}
	return 0
}

func (m *InitCompleteAuth) GetQ() uint64 {
	if m != nil {
		return m.Q
	}
	return 0
}

func (m *InitCompleteAuth) GetEncryptedPayload() []byte {
	if m != nil {
		return m.EncryptedPayload
	}
	return nil
}

// InitConnectTest
// @Function
// @Return: InitTestAuth
type InitConnectTest struct {
}

func (m *InitConnectTest) Reset()         { *m = InitConnectTest{} }
func (m *InitConnectTest) String() string { return proto.CompactTextString(m) }
func (*InitConnectTest) ProtoMessage()    {}
func (*InitConnectTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e8502c710d31a0, []int{2}
}
func (m *InitConnectTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitConnectTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitConnectTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitConnectTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitConnectTest.Merge(m, src)
}
func (m *InitConnectTest) XXX_Size() int {
	return m.Size()
}
func (m *InitConnectTest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitConnectTest.DiscardUnknown(m)
}

var xxx_messageInfo_InitConnectTest proto.InternalMessageInfo

// InitTestAuth
type InitTestAuth struct {
	AuthID  int64  `protobuf:"varint,1,req,name=AuthID" json:"AuthID"`
	AuthKey []byte `protobuf:"bytes,2,req,name=AuthKey" json:"AuthKey"`
}

func (m *InitTestAuth) Reset()         { *m = InitTestAuth{} }
func (m *InitTestAuth) String() string { return proto.CompactTextString(m) }
func (*InitTestAuth) ProtoMessage()    {}
func (*InitTestAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e8502c710d31a0, []int{3}
}
func (m *InitTestAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitTestAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitTestAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitTestAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitTestAuth.Merge(m, src)
}
func (m *InitTestAuth) XXX_Size() int {
	return m.Size()
}
func (m *InitTestAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_InitTestAuth.DiscardUnknown(m)
}

var xxx_messageInfo_InitTestAuth proto.InternalMessageInfo

func (m *InitTestAuth) GetAuthID() int64 {
	if m != nil {
		return m.AuthID
	}
	return 0
}

func (m *InitTestAuth) GetAuthKey() []byte {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

// InitResponse
type InitResponse struct {
	ClientNonce          uint64 `protobuf:"fixed64,1,req,name=ClientNonce" json:"ClientNonce"`
	ServerNonce          uint64 `protobuf:"fixed64,2,req,name=ServerNonce" json:"ServerNonce"`
	RSAPubKeyFingerPrint uint64 `protobuf:"fixed64,3,req,name=RSAPubKeyFingerPrint" json:"RSAPubKeyFingerPrint"`
	DHGroupFingerPrint   uint64 `protobuf:"fixed64,4,req,name=DHGroupFingerPrint" json:"DHGroupFingerPrint"`
	PQ                   uint64 `protobuf:"fixed64,5,req,name=PQ" json:"PQ"`
	ServerTimestamp      int64  `protobuf:"varint,6,req,name=ServerTimestamp" json:"ServerTimestamp"`
}

func (m *InitResponse) Reset()         { *m = InitResponse{} }
func (m *InitResponse) String() string { return proto.CompactTextString(m) }
func (*InitResponse) ProtoMessage()    {}
func (*InitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e8502c710d31a0, []int{4}
}
func (m *InitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitResponse.Merge(m, src)
}
func (m *InitResponse) XXX_Size() int {
	return m.Size()
}
func (m *InitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitResponse proto.InternalMessageInfo

func (m *InitResponse) GetClientNonce() uint64 {
	if m != nil {
		return m.ClientNonce
	}
	return 0
}

func (m *InitResponse) GetServerNonce() uint64 {
	if m != nil {
		return m.ServerNonce
	}
	return 0
}

func (m *InitResponse) GetRSAPubKeyFingerPrint() uint64 {
	if m != nil {
		return m.RSAPubKeyFingerPrint
	}
	return 0
}

func (m *InitResponse) GetDHGroupFingerPrint() uint64 {
	if m != nil {
		return m.DHGroupFingerPrint
	}
	return 0
}

func (m *InitResponse) GetPQ() uint64 {
	if m != nil {
		return m.PQ
	}
	return 0
}

func (m *InitResponse) GetServerTimestamp() int64 {
	if m != nil {
		return m.ServerTimestamp
	}
	return 0
}

// InitCompleteAuthInternal
type InitCompleteAuthInternal struct {
	SecretNonce []byte `protobuf:"bytes,1,req,name=SecretNonce" json:"SecretNonce"`
}

func (m *InitCompleteAuthInternal) Reset()         { *m = InitCompleteAuthInternal{} }
func (m *InitCompleteAuthInternal) String() string { return proto.CompactTextString(m) }
func (*InitCompleteAuthInternal) ProtoMessage()    {}
func (*InitCompleteAuthInternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e8502c710d31a0, []int{5}
}
func (m *InitCompleteAuthInternal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitCompleteAuthInternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitCompleteAuthInternal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitCompleteAuthInternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitCompleteAuthInternal.Merge(m, src)
}
func (m *InitCompleteAuthInternal) XXX_Size() int {
	return m.Size()
}
func (m *InitCompleteAuthInternal) XXX_DiscardUnknown() {
	xxx_messageInfo_InitCompleteAuthInternal.DiscardUnknown(m)
}

var xxx_messageInfo_InitCompleteAuthInternal proto.InternalMessageInfo

func (m *InitCompleteAuthInternal) GetSecretNonce() []byte {
	if m != nil {
		return m.SecretNonce
	}
	return nil
}

// InitAuthCompleted
type InitAuthCompleted struct {
	ClientNonce    uint64                     `protobuf:"fixed64,1,req,name=ClientNonce" json:"ClientNonce"`
	ServerNonce    uint64                     `protobuf:"fixed64,2,req,name=ServerNonce" json:"ServerNonce"`
	Status         InitAuthCompleted_Statuses `protobuf:"varint,3,req,name=Status,enum=msg.InitAuthCompleted_Statuses" json:"Status"`
	SecretHash     uint64                     `protobuf:"fixed64,4,req,name=SecretHash" json:"SecretHash"`
	ServerDHPubKey []byte                     `protobuf:"bytes,5,req,name=ServerDHPubKey" json:"ServerDHPubKey"`
}

func (m *InitAuthCompleted) Reset()         { *m = InitAuthCompleted{} }
func (m *InitAuthCompleted) String() string { return proto.CompactTextString(m) }
func (*InitAuthCompleted) ProtoMessage()    {}
func (*InitAuthCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e8502c710d31a0, []int{6}
}
func (m *InitAuthCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitAuthCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitAuthCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitAuthCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitAuthCompleted.Merge(m, src)
}
func (m *InitAuthCompleted) XXX_Size() int {
	return m.Size()
}
func (m *InitAuthCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_InitAuthCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_InitAuthCompleted proto.InternalMessageInfo

func (m *InitAuthCompleted) GetClientNonce() uint64 {
	if m != nil {
		return m.ClientNonce
	}
	return 0
}

func (m *InitAuthCompleted) GetServerNonce() uint64 {
	if m != nil {
		return m.ServerNonce
	}
	return 0
}

func (m *InitAuthCompleted) GetStatus() InitAuthCompleted_Statuses {
	if m != nil {
		return m.Status
	}
	return InitAuthCompleted_OK
}

func (m *InitAuthCompleted) GetSecretHash() uint64 {
	if m != nil {
		return m.SecretHash
	}
	return 0
}

func (m *InitAuthCompleted) GetServerDHPubKey() []byte {
	if m != nil {
		return m.ServerDHPubKey
	}
	return nil
}

// InitBindUser
// @Function
// @Return: InitUserBound
type InitBindUser struct {
	AuthKey   string `protobuf:"bytes,1,req,name=AuthKey" json:"AuthKey"`
	Username  string `protobuf:"bytes,2,req,name=Username" json:"Username"`
	Phone     string `protobuf:"bytes,3,req,name=Phone" json:"Phone"`
	FirstName string `protobuf:"bytes,4,req,name=FirstName" json:"FirstName"`
	LastName  string `protobuf:"bytes,5,req,name=LastName" json:"LastName"`
}

func (m *InitBindUser) Reset()         { *m = InitBindUser{} }
func (m *InitBindUser) String() string { return proto.CompactTextString(m) }
func (*InitBindUser) ProtoMessage()    {}
func (*InitBindUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e8502c710d31a0, []int{7}
}
func (m *InitBindUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitBindUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitBindUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitBindUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitBindUser.Merge(m, src)
}
func (m *InitBindUser) XXX_Size() int {
	return m.Size()
}
func (m *InitBindUser) XXX_DiscardUnknown() {
	xxx_messageInfo_InitBindUser.DiscardUnknown(m)
}

var xxx_messageInfo_InitBindUser proto.InternalMessageInfo

func (m *InitBindUser) GetAuthKey() string {
	if m != nil {
		return m.AuthKey
	}
	return ""
}

func (m *InitBindUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *InitBindUser) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *InitBindUser) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *InitBindUser) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

// InitUserBound
type InitUserBound struct {
	AuthID int64 `protobuf:"varint,1,req,name=AuthID" json:"AuthID"`
}

func (m *InitUserBound) Reset()         { *m = InitUserBound{} }
func (m *InitUserBound) String() string { return proto.CompactTextString(m) }
func (*InitUserBound) ProtoMessage()    {}
func (*InitUserBound) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e8502c710d31a0, []int{8}
}
func (m *InitUserBound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitUserBound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitUserBound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitUserBound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitUserBound.Merge(m, src)
}
func (m *InitUserBound) XXX_Size() int {
	return m.Size()
}
func (m *InitUserBound) XXX_DiscardUnknown() {
	xxx_messageInfo_InitUserBound.DiscardUnknown(m)
}

var xxx_messageInfo_InitUserBound proto.InternalMessageInfo

func (m *InitUserBound) GetAuthID() int64 {
	if m != nil {
		return m.AuthID
	}
	return 0
}

func init() {
	proto.RegisterEnum("msg.InitAuthCompleted_Statuses", InitAuthCompleted_Statuses_name, InitAuthCompleted_Statuses_value)
	proto.RegisterType((*InitConnect)(nil), "msg.InitConnect")
	proto.RegisterType((*InitCompleteAuth)(nil), "msg.InitCompleteAuth")
	proto.RegisterType((*InitConnectTest)(nil), "msg.InitConnectTest")
	proto.RegisterType((*InitTestAuth)(nil), "msg.InitTestAuth")
	proto.RegisterType((*InitResponse)(nil), "msg.InitResponse")
	proto.RegisterType((*InitCompleteAuthInternal)(nil), "msg.InitCompleteAuthInternal")
	proto.RegisterType((*InitAuthCompleted)(nil), "msg.InitAuthCompleted")
	proto.RegisterType((*InitBindUser)(nil), "msg.InitBindUser")
	proto.RegisterType((*InitUserBound)(nil), "msg.InitUserBound")
}

func init() { proto.RegisterFile("chat.api.init.proto", fileDescriptor_c1e8502c710d31a0) }

var fileDescriptor_c1e8502c710d31a0 = []byte{
	// 563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4f, 0x6f, 0x12, 0x41,
	0x14, 0x67, 0xb7, 0x40, 0xe1, 0x15, 0x5b, 0x3a, 0xf6, 0xb0, 0x31, 0x66, 0x4b, 0x26, 0x46, 0x7b,
	0xd0, 0x8d, 0x31, 0x9a, 0x78, 0xf1, 0x00, 0xa5, 0x08, 0x29, 0xa9, 0xcb, 0x1f, 0x0f, 0x1e, 0x47,
	0x98, 0xc0, 0x24, 0xec, 0xec, 0x66, 0x66, 0x30, 0xe1, 0x5b, 0x78, 0xf0, 0xee, 0x77, 0xf0, 0x53,
	0xf4, 0xd8, 0xa3, 0x27, 0x63, 0xe0, 0xe6, 0xa7, 0x30, 0xb3, 0xc3, 0xb6, 0x53, 0x4a, 0x8c, 0x87,
	0x9e, 0x58, 0x7e, 0x7f, 0xde, 0x9b, 0xf7, 0x9b, 0x37, 0xf0, 0x70, 0x34, 0x25, 0x2a, 0x20, 0x09,
	0x0b, 0x18, 0x67, 0x2a, 0x48, 0x44, 0xac, 0x62, 0xb4, 0x13, 0xc9, 0x09, 0x7e, 0x03, 0x7b, 0x1d,
	0xce, 0xd4, 0x69, 0xcc, 0x39, 0x1d, 0x29, 0xf4, 0x14, 0xf6, 0x4e, 0x67, 0x8c, 0x72, 0x75, 0x11,
	0xf3, 0x11, 0xf5, 0x9c, 0x9a, 0x7b, 0x52, 0x6c, 0xe4, 0x2f, 0x7f, 0x1d, 0xe7, 0xfa, 0x36, 0x81,
	0xff, 0x38, 0x50, 0x35, 0xbe, 0x28, 0x99, 0x51, 0x45, 0xeb, 0x73, 0x35, 0xfd, 0x5f, 0xb3, 0xd6,
	0x0d, 0xa8, 0xf8, 0x42, 0x85, 0xd1, 0xb9, 0xb6, 0xce, 0x22, 0xd0, 0x73, 0xd8, 0x37, 0xb6, 0x66,
	0x3b, 0x9c, 0x7f, 0x3e, 0xa7, 0x0b, 0xaf, 0x50, 0x73, 0x4f, 0x2a, 0x6b, 0xe9, 0x06, 0x87, 0x10,
	0x38, 0xa1, 0x57, 0xb4, 0x6a, 0x39, 0xa1, 0xc6, 0x7a, 0xde, 0xae, 0x8d, 0xf5, 0xd0, 0x4b, 0xa8,
	0x9e, 0xf1, 0x91, 0x58, 0x24, 0x8a, 0x8e, 0x43, 0xb2, 0x98, 0xc5, 0x64, 0xec, 0x95, 0xac, 0xba,
	0x77, 0x58, 0x7c, 0x08, 0x07, 0x56, 0x46, 0x43, 0x2a, 0x15, 0xee, 0x42, 0x45, 0x43, 0xfa, 0x3b,
	0x1d, 0xfd, 0x31, 0x14, 0xf5, 0x6f, 0xa7, 0x99, 0x4e, 0xbd, 0xb3, 0x2e, 0xb5, 0xc6, 0x90, 0x0f,
	0xbb, 0xfa, 0x4b, 0x4f, 0xe0, 0x5a, 0x9d, 0x32, 0x10, 0x7f, 0x73, 0x4d, 0xb9, 0x3e, 0x95, 0x49,
	0xcc, 0x25, 0xbd, 0xf7, 0x24, 0xdf, 0xc2, 0x51, 0x7f, 0x50, 0x37, 0x41, 0xb5, 0x18, 0x9f, 0x50,
	0x11, 0x0a, 0xc6, 0x95, 0xb7, 0x63, 0x19, 0xb6, 0x2a, 0xd0, 0x6b, 0x40, 0xcd, 0xf6, 0x7b, 0x11,
	0xcf, 0x13, 0xdb, 0x97, 0xb7, 0x7c, 0x5b, 0x78, 0x74, 0x04, 0x6e, 0xd8, 0x4b, 0x6f, 0x2b, 0x53,
	0xb9, 0x61, 0x0f, 0x05, 0x70, 0x60, 0x0e, 0x35, 0x64, 0x11, 0x95, 0x8a, 0x44, 0x49, 0x7a, 0x5f,
	0x59, 0x5a, 0x9b, 0x24, 0x6e, 0x80, 0xb7, 0xb9, 0x63, 0x1d, 0xae, 0xa8, 0xe0, 0x64, 0x66, 0x26,
	0x1f, 0x09, 0x6a, 0x25, 0x54, 0xb9, 0x99, 0xfc, 0x9a, 0xc0, 0xdf, 0x5d, 0x38, 0xd4, 0x45, 0xb4,
	0x39, 0x2b, 0x34, 0xbe, 0xf7, 0x7c, 0xdf, 0x41, 0x71, 0xa0, 0x88, 0x9a, 0xcb, 0x34, 0xd1, 0xfd,
	0x57, 0xc7, 0x41, 0x24, 0x27, 0xc1, 0x9d, 0xbe, 0x81, 0x11, 0x51, 0x99, 0xed, 0x87, 0xf9, 0x8f,
	0x9e, 0x00, 0x98, 0x33, 0xb7, 0x89, 0x9c, 0xde, 0x0a, 0xd7, 0xc2, 0xf5, 0x73, 0x30, 0x3d, 0xb7,
	0x3f, 0x87, 0xdb, 0x1c, 0x7e, 0x06, 0xa5, 0xac, 0x1b, 0x2a, 0x82, 0xfb, 0xe1, 0xbc, 0x9a, 0x43,
	0x25, 0xc8, 0xb7, 0xea, 0x9d, 0x6e, 0xd5, 0x41, 0x65, 0x28, 0xf4, 0xcf, 0x86, 0xfd, 0x4f, 0x55,
	0x17, 0xff, 0x70, 0xcc, 0xf2, 0x35, 0x18, 0x1f, 0x7f, 0x94, 0x54, 0xd8, 0xdb, 0xaa, 0x83, 0x29,
	0x6f, 0x6c, 0x2b, 0xaa, 0x41, 0x49, 0xeb, 0x38, 0x89, 0x4c, 0x22, 0x99, 0xe0, 0x1a, 0x45, 0x8f,
	0xa0, 0x10, 0x4e, 0x63, 0x4e, 0xd3, 0x34, 0x32, 0xda, 0x40, 0x08, 0x43, 0xb9, 0xc5, 0x84, 0x54,
	0x17, 0xda, 0x9e, 0xb7, 0xf8, 0x1b, 0x58, 0x77, 0xe8, 0x92, 0xb5, 0xa4, 0x60, 0x77, 0xc8, 0x50,
	0xfc, 0x02, 0x1e, 0xe8, 0x33, 0xeb, 0x8e, 0x8d, 0x78, 0xce, 0xc7, 0xff, 0x7e, 0x80, 0x0d, 0xef,
	0x72, 0xe9, 0x3b, 0x57, 0x4b, 0xdf, 0xf9, 0xbd, 0xf4, 0x9d, 0xaf, 0x2b, 0x3f, 0x77, 0xb5, 0xf2,
	0x73, 0x3f, 0x57, 0x7e, 0xee, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x0c, 0x78, 0x7a, 0x1a,
	0x05, 0x00, 0x00,
}

func (m *InitConnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitConnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitConnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ClientNonce))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *InitCompleteAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitCompleteAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitCompleteAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EncryptedPayload != nil {
		i -= len(m.EncryptedPayload)
		copy(dAtA[i:], m.EncryptedPayload)
		i = encodeVarintChatApiInit(dAtA, i, uint64(len(m.EncryptedPayload)))
		i--
		dAtA[i] = 0x42
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Q))
	i--
	dAtA[i] = 0x39
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.P))
	i--
	dAtA[i] = 0x31
	if m.ClientDHPubKey != nil {
		i -= len(m.ClientDHPubKey)
		copy(dAtA[i:], m.ClientDHPubKey)
		i = encodeVarintChatApiInit(dAtA, i, uint64(len(m.ClientDHPubKey)))
		i--
		dAtA[i] = 0x2a
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ServerNonce))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ClientNonce))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *InitConnectTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitConnectTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitConnectTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *InitTestAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitTestAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitTestAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthKey != nil {
		i -= len(m.AuthKey)
		copy(dAtA[i:], m.AuthKey)
		i = encodeVarintChatApiInit(dAtA, i, uint64(len(m.AuthKey)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintChatApiInit(dAtA, i, uint64(m.AuthID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *InitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiInit(dAtA, i, uint64(m.ServerTimestamp))
	i--
	dAtA[i] = 0x30
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.PQ))
	i--
	dAtA[i] = 0x29
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DHGroupFingerPrint))
	i--
	dAtA[i] = 0x21
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.RSAPubKeyFingerPrint))
	i--
	dAtA[i] = 0x19
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ServerNonce))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ClientNonce))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *InitCompleteAuthInternal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitCompleteAuthInternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitCompleteAuthInternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecretNonce != nil {
		i -= len(m.SecretNonce)
		copy(dAtA[i:], m.SecretNonce)
		i = encodeVarintChatApiInit(dAtA, i, uint64(len(m.SecretNonce)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitAuthCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitAuthCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitAuthCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerDHPubKey != nil {
		i -= len(m.ServerDHPubKey)
		copy(dAtA[i:], m.ServerDHPubKey)
		i = encodeVarintChatApiInit(dAtA, i, uint64(len(m.ServerDHPubKey)))
		i--
		dAtA[i] = 0x2a
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SecretHash))
	i--
	dAtA[i] = 0x21
	i = encodeVarintChatApiInit(dAtA, i, uint64(m.Status))
	i--
	dAtA[i] = 0x18
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ServerNonce))
	i--
	dAtA[i] = 0x11
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ClientNonce))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *InitBindUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitBindUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitBindUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.LastName)
	copy(dAtA[i:], m.LastName)
	i = encodeVarintChatApiInit(dAtA, i, uint64(len(m.LastName)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.FirstName)
	copy(dAtA[i:], m.FirstName)
	i = encodeVarintChatApiInit(dAtA, i, uint64(len(m.FirstName)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Phone)
	copy(dAtA[i:], m.Phone)
	i = encodeVarintChatApiInit(dAtA, i, uint64(len(m.Phone)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Username)
	copy(dAtA[i:], m.Username)
	i = encodeVarintChatApiInit(dAtA, i, uint64(len(m.Username)))
	i--
	dAtA[i] = 0x12
	i -= len(m.AuthKey)
	copy(dAtA[i:], m.AuthKey)
	i = encodeVarintChatApiInit(dAtA, i, uint64(len(m.AuthKey)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *InitUserBound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitUserBound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitUserBound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiInit(dAtA, i, uint64(m.AuthID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintChatApiInit(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatApiInit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InitConnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}

func (m *InitCompleteAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	if m.ClientDHPubKey != nil {
		l = len(m.ClientDHPubKey)
		n += 1 + l + sovChatApiInit(uint64(l))
	}
	n += 9
	n += 9
	if m.EncryptedPayload != nil {
		l = len(m.EncryptedPayload)
		n += 1 + l + sovChatApiInit(uint64(l))
	}
	return n
}

func (m *InitConnectTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InitTestAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiInit(uint64(m.AuthID))
	if m.AuthKey != nil {
		l = len(m.AuthKey)
		n += 1 + l + sovChatApiInit(uint64(l))
	}
	return n
}

func (m *InitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 9
	n += 9
	n += 9
	n += 1 + sovChatApiInit(uint64(m.ServerTimestamp))
	return n
}

func (m *InitCompleteAuthInternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SecretNonce != nil {
		l = len(m.SecretNonce)
		n += 1 + l + sovChatApiInit(uint64(l))
	}
	return n
}

func (m *InitAuthCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 9
	n += 1 + sovChatApiInit(uint64(m.Status))
	n += 9
	if m.ServerDHPubKey != nil {
		l = len(m.ServerDHPubKey)
		n += 1 + l + sovChatApiInit(uint64(l))
	}
	return n
}

func (m *InitBindUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthKey)
	n += 1 + l + sovChatApiInit(uint64(l))
	l = len(m.Username)
	n += 1 + l + sovChatApiInit(uint64(l))
	l = len(m.Phone)
	n += 1 + l + sovChatApiInit(uint64(l))
	l = len(m.FirstName)
	n += 1 + l + sovChatApiInit(uint64(l))
	l = len(m.LastName)
	n += 1 + l + sovChatApiInit(uint64(l))
	return n
}

func (m *InitUserBound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiInit(uint64(m.AuthID))
	return n
}

func sovChatApiInit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatApiInit(x uint64) (n int) {
	return sovChatApiInit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InitConnect) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitConnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitConnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientNonce", wireType)
			}
			m.ClientNonce = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientNonce = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ClientNonce")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitCompleteAuth) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitCompleteAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitCompleteAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientNonce", wireType)
			}
			m.ClientNonce = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientNonce = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNonce", wireType)
			}
			m.ServerNonce = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNonce = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000002)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientDHPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatApiInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientDHPubKey = append(m.ClientDHPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientDHPubKey == nil {
				m.ClientDHPubKey = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			m.P = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.P = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000008)
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			m.Q = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000010)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatApiInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedPayload = append(m.EncryptedPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedPayload == nil {
				m.EncryptedPayload = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ClientNonce")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerNonce")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ClientDHPubKey")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("P")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Q")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("EncryptedPayload")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitConnectTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitConnectTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitConnectTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitTestAuth) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitTestAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitTestAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthID", wireType)
			}
			m.AuthID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatApiInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthKey = append(m.AuthKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthKey == nil {
				m.AuthKey = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AuthID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AuthKey")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientNonce", wireType)
			}
			m.ClientNonce = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientNonce = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNonce", wireType)
			}
			m.ServerNonce = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNonce = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RSAPubKeyFingerPrint", wireType)
			}
			m.RSAPubKeyFingerPrint = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.RSAPubKeyFingerPrint = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DHGroupFingerPrint", wireType)
			}
			m.DHGroupFingerPrint = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DHGroupFingerPrint = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PQ", wireType)
			}
			m.PQ = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.PQ = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTimestamp", wireType)
			}
			m.ServerTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ClientNonce")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerNonce")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RSAPubKeyFingerPrint")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("DHGroupFingerPrint")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PQ")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerTimestamp")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitCompleteAuthInternal) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitCompleteAuthInternal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitCompleteAuthInternal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatApiInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretNonce = append(m.SecretNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.SecretNonce == nil {
				m.SecretNonce = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SecretNonce")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitAuthCompleted) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitAuthCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitAuthCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientNonce", wireType)
			}
			m.ClientNonce = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientNonce = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNonce", wireType)
			}
			m.ServerNonce = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNonce = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InitAuthCompleted_Statuses(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretHash", wireType)
			}
			m.SecretHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerDHPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatApiInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerDHPubKey = append(m.ServerDHPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerDHPubKey == nil {
				m.ServerDHPubKey = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ClientNonce")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerNonce")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Status")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SecretHash")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerDHPubKey")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitBindUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitBindUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitBindUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiInit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiInit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiInit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiInit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiInit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AuthKey")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Username")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Phone")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FirstName")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LastName")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitUserBound) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitUserBound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitUserBound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthID", wireType)
			}
			m.AuthID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AuthID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatApiInit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatApiInit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatApiInit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatApiInit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatApiInit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatApiInit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatApiInit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatApiInit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatApiInit = fmt.Errorf("proto: unexpected end of group")
)
