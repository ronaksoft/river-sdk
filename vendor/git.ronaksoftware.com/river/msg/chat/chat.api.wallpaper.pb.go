// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.api.wallpaper.proto

package msg

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WallPaperGetAll
// @Function
// @Return: WallPapersMany
type WallPaperGet struct {
	Crc32Hash uint32 `protobuf:"varint,2,req,name=Crc32Hash" json:"Crc32Hash"`
}

func (m *WallPaperGet) Reset()         { *m = WallPaperGet{} }
func (m *WallPaperGet) String() string { return proto.CompactTextString(m) }
func (*WallPaperGet) ProtoMessage()    {}
func (*WallPaperGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa03b0953423c1b2, []int{0}
}
func (m *WallPaperGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WallPaperGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WallPaperGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WallPaperGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WallPaperGet.Merge(m, src)
}
func (m *WallPaperGet) XXX_Size() int {
	return m.Size()
}
func (m *WallPaperGet) XXX_DiscardUnknown() {
	xxx_messageInfo_WallPaperGet.DiscardUnknown(m)
}

var xxx_messageInfo_WallPaperGet proto.InternalMessageInfo

func (m *WallPaperGet) GetCrc32Hash() uint32 {
	if m != nil {
		return m.Crc32Hash
	}
	return 0
}

// WallPaperSave
// @Function
// @Return: Bool
type WallPaperSave struct {
	WallPaper *InputWallPaper    `protobuf:"bytes,1,req,name=WallPaper" json:"WallPaper,omitempty"`
	Settings  *WallPaperSettings `protobuf:"bytes,2,req,name=Settings" json:"Settings,omitempty"`
}

func (m *WallPaperSave) Reset()         { *m = WallPaperSave{} }
func (m *WallPaperSave) String() string { return proto.CompactTextString(m) }
func (*WallPaperSave) ProtoMessage()    {}
func (*WallPaperSave) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa03b0953423c1b2, []int{1}
}
func (m *WallPaperSave) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WallPaperSave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WallPaperSave.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WallPaperSave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WallPaperSave.Merge(m, src)
}
func (m *WallPaperSave) XXX_Size() int {
	return m.Size()
}
func (m *WallPaperSave) XXX_DiscardUnknown() {
	xxx_messageInfo_WallPaperSave.DiscardUnknown(m)
}

var xxx_messageInfo_WallPaperSave proto.InternalMessageInfo

func (m *WallPaperSave) GetWallPaper() *InputWallPaper {
	if m != nil {
		return m.WallPaper
	}
	return nil
}

func (m *WallPaperSave) GetSettings() *WallPaperSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type WallPaperDelete struct {
	WallPaper *InputWallPaper `protobuf:"bytes,1,req,name=WallPaper" json:"WallPaper,omitempty"`
}

func (m *WallPaperDelete) Reset()         { *m = WallPaperDelete{} }
func (m *WallPaperDelete) String() string { return proto.CompactTextString(m) }
func (*WallPaperDelete) ProtoMessage()    {}
func (*WallPaperDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa03b0953423c1b2, []int{2}
}
func (m *WallPaperDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WallPaperDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WallPaperDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WallPaperDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WallPaperDelete.Merge(m, src)
}
func (m *WallPaperDelete) XXX_Size() int {
	return m.Size()
}
func (m *WallPaperDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_WallPaperDelete.DiscardUnknown(m)
}

var xxx_messageInfo_WallPaperDelete proto.InternalMessageInfo

func (m *WallPaperDelete) GetWallPaper() *InputWallPaper {
	if m != nil {
		return m.WallPaper
	}
	return nil
}

// WallPaperUpload
// @Function
// @Return: WallPaper
type WallPaperUpload struct {
	UploadedFile *InputFile         `protobuf:"bytes,1,opt,name=UploadedFile" json:"UploadedFile,omitempty"`
	File         *InputDocument     `protobuf:"bytes,2,opt,name=File" json:"File,omitempty"`
	MimeType     string             `protobuf:"bytes,3,req,name=MimeType" json:"MimeType"`
	Settings     *WallPaperSettings `protobuf:"bytes,4,req,name=Settings" json:"Settings,omitempty"`
}

func (m *WallPaperUpload) Reset()         { *m = WallPaperUpload{} }
func (m *WallPaperUpload) String() string { return proto.CompactTextString(m) }
func (*WallPaperUpload) ProtoMessage()    {}
func (*WallPaperUpload) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa03b0953423c1b2, []int{3}
}
func (m *WallPaperUpload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WallPaperUpload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WallPaperUpload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WallPaperUpload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WallPaperUpload.Merge(m, src)
}
func (m *WallPaperUpload) XXX_Size() int {
	return m.Size()
}
func (m *WallPaperUpload) XXX_DiscardUnknown() {
	xxx_messageInfo_WallPaperUpload.DiscardUnknown(m)
}

var xxx_messageInfo_WallPaperUpload proto.InternalMessageInfo

func (m *WallPaperUpload) GetUploadedFile() *InputFile {
	if m != nil {
		return m.UploadedFile
	}
	return nil
}

func (m *WallPaperUpload) GetFile() *InputDocument {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *WallPaperUpload) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *WallPaperUpload) GetSettings() *WallPaperSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

// WallPaperReset
// @Function
// @Return: Bool
type WallPaperReset struct {
}

func (m *WallPaperReset) Reset()         { *m = WallPaperReset{} }
func (m *WallPaperReset) String() string { return proto.CompactTextString(m) }
func (*WallPaperReset) ProtoMessage()    {}
func (*WallPaperReset) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa03b0953423c1b2, []int{4}
}
func (m *WallPaperReset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WallPaperReset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WallPaperReset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WallPaperReset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WallPaperReset.Merge(m, src)
}
func (m *WallPaperReset) XXX_Size() int {
	return m.Size()
}
func (m *WallPaperReset) XXX_DiscardUnknown() {
	xxx_messageInfo_WallPaperReset.DiscardUnknown(m)
}

var xxx_messageInfo_WallPaperReset proto.InternalMessageInfo

// InputWallPaper
type InputWallPaper struct {
	ID         int64  `protobuf:"varint,1,req,name=ID" json:"ID"`
	AccessHash uint64 `protobuf:"fixed64,2,req,name=AccessHash" json:"AccessHash"`
}

func (m *InputWallPaper) Reset()         { *m = InputWallPaper{} }
func (m *InputWallPaper) String() string { return proto.CompactTextString(m) }
func (*InputWallPaper) ProtoMessage()    {}
func (*InputWallPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa03b0953423c1b2, []int{5}
}
func (m *InputWallPaper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputWallPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InputWallPaper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InputWallPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputWallPaper.Merge(m, src)
}
func (m *InputWallPaper) XXX_Size() int {
	return m.Size()
}
func (m *InputWallPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_InputWallPaper.DiscardUnknown(m)
}

var xxx_messageInfo_InputWallPaper proto.InternalMessageInfo

func (m *InputWallPaper) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *InputWallPaper) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// WallPaperSettings
type WallPaperSettings struct {
	Blur                   bool  `protobuf:"varint,1,opt,name=Blur" json:"Blur"`
	Motion                 bool  `protobuf:"varint,2,opt,name=Motion" json:"Motion"`
	BackgroundColour       int64 `protobuf:"varint,3,opt,name=BackgroundColour" json:"BackgroundColour"`
	BackgroundSecondColour int64 `protobuf:"varint,4,opt,name=BackgroundSecondColour" json:"BackgroundSecondColour"`
	Opacity                int64 `protobuf:"varint,5,opt,name=Opacity" json:"Opacity"`
	Rotation               int64 `protobuf:"varint,6,opt,name=Rotation" json:"Rotation"`
}

func (m *WallPaperSettings) Reset()         { *m = WallPaperSettings{} }
func (m *WallPaperSettings) String() string { return proto.CompactTextString(m) }
func (*WallPaperSettings) ProtoMessage()    {}
func (*WallPaperSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa03b0953423c1b2, []int{6}
}
func (m *WallPaperSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WallPaperSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WallPaperSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WallPaperSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WallPaperSettings.Merge(m, src)
}
func (m *WallPaperSettings) XXX_Size() int {
	return m.Size()
}
func (m *WallPaperSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_WallPaperSettings.DiscardUnknown(m)
}

var xxx_messageInfo_WallPaperSettings proto.InternalMessageInfo

func (m *WallPaperSettings) GetBlur() bool {
	if m != nil {
		return m.Blur
	}
	return false
}

func (m *WallPaperSettings) GetMotion() bool {
	if m != nil {
		return m.Motion
	}
	return false
}

func (m *WallPaperSettings) GetBackgroundColour() int64 {
	if m != nil {
		return m.BackgroundColour
	}
	return 0
}

func (m *WallPaperSettings) GetBackgroundSecondColour() int64 {
	if m != nil {
		return m.BackgroundSecondColour
	}
	return 0
}

func (m *WallPaperSettings) GetOpacity() int64 {
	if m != nil {
		return m.Opacity
	}
	return 0
}

func (m *WallPaperSettings) GetRotation() int64 {
	if m != nil {
		return m.Rotation
	}
	return 0
}

// WallPaper
type WallPaper struct {
	ID         int64              `protobuf:"varint,1,req,name=ID" json:"ID"`
	AccessHash uint64             `protobuf:"fixed64,2,req,name=AccessHash" json:"AccessHash"`
	Creator    bool               `protobuf:"varint,3,opt,name=Creator" json:"Creator"`
	Default    bool               `protobuf:"varint,4,opt,name=Default" json:"Default"`
	Pattern    bool               `protobuf:"varint,5,opt,name=Pattern" json:"Pattern"`
	Dark       bool               `protobuf:"varint,6,opt,name=Dark" json:"Dark"`
	Document   *Document          `protobuf:"bytes,7,opt,name=Document" json:"Document,omitempty"`
	Settings   *WallPaperSettings `protobuf:"bytes,8,opt,name=Settings" json:"Settings,omitempty"`
}

func (m *WallPaper) Reset()         { *m = WallPaper{} }
func (m *WallPaper) String() string { return proto.CompactTextString(m) }
func (*WallPaper) ProtoMessage()    {}
func (*WallPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa03b0953423c1b2, []int{7}
}
func (m *WallPaper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WallPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WallPaper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WallPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WallPaper.Merge(m, src)
}
func (m *WallPaper) XXX_Size() int {
	return m.Size()
}
func (m *WallPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_WallPaper.DiscardUnknown(m)
}

var xxx_messageInfo_WallPaper proto.InternalMessageInfo

func (m *WallPaper) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *WallPaper) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *WallPaper) GetCreator() bool {
	if m != nil {
		return m.Creator
	}
	return false
}

func (m *WallPaper) GetDefault() bool {
	if m != nil {
		return m.Default
	}
	return false
}

func (m *WallPaper) GetPattern() bool {
	if m != nil {
		return m.Pattern
	}
	return false
}

func (m *WallPaper) GetDark() bool {
	if m != nil {
		return m.Dark
	}
	return false
}

func (m *WallPaper) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *WallPaper) GetSettings() *WallPaperSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

// WallPapersMany
type WallPapersMany struct {
	WallPapers []*WallPaper `protobuf:"bytes,1,rep,name=WallPapers" json:"WallPapers,omitempty"`
	Count      int32        `protobuf:"varint,2,req,name=Count" json:"Count"`
	Crc32Hash  uint32       `protobuf:"varint,3,req,name=Crc32Hash" json:"Crc32Hash"`
	Empty      bool         `protobuf:"varint,5,opt,name=Empty" json:"Empty"`
}

func (m *WallPapersMany) Reset()         { *m = WallPapersMany{} }
func (m *WallPapersMany) String() string { return proto.CompactTextString(m) }
func (*WallPapersMany) ProtoMessage()    {}
func (*WallPapersMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa03b0953423c1b2, []int{8}
}
func (m *WallPapersMany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WallPapersMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WallPapersMany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WallPapersMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WallPapersMany.Merge(m, src)
}
func (m *WallPapersMany) XXX_Size() int {
	return m.Size()
}
func (m *WallPapersMany) XXX_DiscardUnknown() {
	xxx_messageInfo_WallPapersMany.DiscardUnknown(m)
}

var xxx_messageInfo_WallPapersMany proto.InternalMessageInfo

func (m *WallPapersMany) GetWallPapers() []*WallPaper {
	if m != nil {
		return m.WallPapers
	}
	return nil
}

func (m *WallPapersMany) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *WallPapersMany) GetCrc32Hash() uint32 {
	if m != nil {
		return m.Crc32Hash
	}
	return 0
}

func (m *WallPapersMany) GetEmpty() bool {
	if m != nil {
		return m.Empty
	}
	return false
}

func init() {
	proto.RegisterType((*WallPaperGet)(nil), "msg.WallPaperGet")
	proto.RegisterType((*WallPaperSave)(nil), "msg.WallPaperSave")
	proto.RegisterType((*WallPaperDelete)(nil), "msg.WallPaperDelete")
	proto.RegisterType((*WallPaperUpload)(nil), "msg.WallPaperUpload")
	proto.RegisterType((*WallPaperReset)(nil), "msg.WallPaperReset")
	proto.RegisterType((*InputWallPaper)(nil), "msg.InputWallPaper")
	proto.RegisterType((*WallPaperSettings)(nil), "msg.WallPaperSettings")
	proto.RegisterType((*WallPaper)(nil), "msg.WallPaper")
	proto.RegisterType((*WallPapersMany)(nil), "msg.WallPapersMany")
}

func init() { proto.RegisterFile("chat.api.wallpaper.proto", fileDescriptor_fa03b0953423c1b2) }

var fileDescriptor_fa03b0953423c1b2 = []byte{
	// 594 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0x63, 0x3b, 0x4d, 0x93, 0x9b, 0x26, 0x5f, 0xbf, 0x01, 0x2a, 0x2b, 0x42, 0xc6, 0xb2,
	0x10, 0x0a, 0x1b, 0x0b, 0xcc, 0x96, 0x0d, 0x89, 0xf9, 0x13, 0x89, 0x88, 0xca, 0x01, 0xb1, 0x1e,
	0x39, 0x43, 0x6a, 0xd5, 0xf6, 0x58, 0x9e, 0x71, 0x51, 0xde, 0x82, 0x07, 0x60, 0xc1, 0xbb, 0xb0,
	0xe9, 0xb2, 0x4b, 0x56, 0x08, 0x25, 0xcf, 0x81, 0x84, 0x3c, 0x19, 0x8f, 0x1d, 0x15, 0x04, 0x82,
	0x55, 0xab, 0xdf, 0x39, 0x77, 0x66, 0xee, 0xbd, 0x27, 0x06, 0x33, 0x3c, 0xc3, 0xdc, 0xc5, 0x59,
	0xe4, 0xbe, 0xc7, 0x71, 0x9c, 0xe1, 0x8c, 0xe4, 0x6e, 0x96, 0x53, 0x4e, 0x91, 0x91, 0xb0, 0xd5,
	0xe8, 0x96, 0x90, 0x43, 0x9a, 0x13, 0x97, 0xaf, 0x33, 0xc2, 0x76, 0xda, 0xc8, 0xaa, 0x71, 0x42,
	0x18, 0xc3, 0xab, 0xf2, 0xef, 0x32, 0xc2, 0x52, 0x77, 0x3c, 0x38, 0x7a, 0x8b, 0xe3, 0xf8, 0xb4,
	0x3c, 0xee, 0x39, 0xe1, 0xc8, 0x81, 0xde, 0x34, 0x0f, 0x1f, 0x79, 0x2f, 0x30, 0x3b, 0x33, 0x75,
	0x5b, 0x1f, 0x0f, 0x26, 0xed, 0xcb, 0xaf, 0x77, 0x5a, 0x41, 0x8d, 0x9d, 0x0b, 0x18, 0xa8, 0x9a,
	0x05, 0xbe, 0x20, 0xe8, 0x21, 0xf4, 0x14, 0x30, 0x35, 0x5b, 0x1f, 0xf7, 0xbd, 0x1b, 0x6e, 0xc2,
	0x56, 0xee, 0x2c, 0xcd, 0x0a, 0xae, 0xa4, 0xa0, 0x76, 0x21, 0x0f, 0xba, 0x0b, 0xc2, 0x79, 0x94,
	0xae, 0x98, 0xb8, 0xa6, 0xef, 0x9d, 0x88, 0x8a, 0xfa, 0x60, 0xa9, 0x06, 0xca, 0xe7, 0xf8, 0xf0,
	0x9f, 0x92, 0x7d, 0x12, 0x13, 0xfe, 0x37, 0x37, 0x3b, 0x9f, 0xb5, 0xc6, 0x31, 0x6f, 0xb2, 0x98,
	0xe2, 0x25, 0xf2, 0xe0, 0x68, 0xf7, 0x1f, 0x59, 0x3e, 0x8b, 0x62, 0x62, 0x6a, 0xb6, 0x36, 0xee,
	0x7b, 0xc3, 0xfa, 0xa4, 0x92, 0x06, 0x7b, 0x1e, 0x74, 0x0f, 0xda, 0xc2, 0xab, 0x0b, 0x2f, 0xaa,
	0xbd, 0x3e, 0x0d, 0x8b, 0x84, 0xa4, 0x3c, 0x10, 0x3a, 0xb2, 0xa1, 0x3b, 0x8f, 0x12, 0xf2, 0x7a,
	0x9d, 0x11, 0xd3, 0xb0, 0xf5, 0x71, 0x4f, 0x0e, 0x54, 0xd1, 0xbd, 0x59, 0xb4, 0xff, 0x70, 0x16,
	0xc7, 0x30, 0xac, 0xbb, 0x23, 0x8c, 0x70, 0xe7, 0x25, 0x0c, 0xf7, 0x9b, 0x46, 0x37, 0x41, 0x9f,
	0xf9, 0x62, 0x2a, 0x86, 0xbc, 0x53, 0x9f, 0xf9, 0xe8, 0x2e, 0xc0, 0x93, 0x30, 0x24, 0x8c, 0xa9,
	0x15, 0x77, 0xa4, 0xda, 0xe0, 0xce, 0x77, 0x0d, 0xfe, 0xbf, 0x76, 0x3f, 0x32, 0xa1, 0x3d, 0x89,
	0x8b, 0x5c, 0xcc, 0xa7, 0x2b, 0xab, 0x04, 0x41, 0xb7, 0xa1, 0x33, 0xa7, 0x3c, 0xa2, 0xa9, 0x98,
	0x47, 0xa5, 0x49, 0x86, 0x1e, 0xc0, 0xf1, 0x04, 0x87, 0xe7, 0xab, 0x9c, 0x16, 0xe9, 0x72, 0x4a,
	0x63, 0x5a, 0xe4, 0xa6, 0x61, 0x6b, 0xea, 0x5d, 0xd7, 0x54, 0xf4, 0x18, 0x4e, 0x6a, 0xb6, 0x20,
	0x21, 0x55, 0x75, 0xed, 0x46, 0xdd, 0x2f, 0x3c, 0xc8, 0x82, 0xc3, 0x57, 0x19, 0x0e, 0x23, 0xbe,
	0x36, 0x0f, 0x1a, 0xf6, 0x0a, 0x96, 0x3b, 0x09, 0x28, 0xc7, 0xe2, 0xbd, 0x9d, 0x86, 0x41, 0x51,
	0xe7, 0x93, 0xde, 0x48, 0xd6, 0xbf, 0x4c, 0xb2, 0x7c, 0xcb, 0x34, 0x27, 0x98, 0xd3, 0x5d, 0xcb,
	0xd5, 0x68, 0x2a, 0x58, 0xea, 0x3e, 0x79, 0x87, 0x8b, 0x98, 0x8b, 0xd6, 0x94, 0x2e, 0x61, 0xa9,
	0x9f, 0x62, 0xce, 0x49, 0x9e, 0x8a, 0x5e, 0x94, 0x2e, 0x61, 0xb9, 0x13, 0x1f, 0xe7, 0xe7, 0xa2,
	0x0f, 0xb5, 0x93, 0x92, 0xa0, 0xfb, 0xd0, 0xad, 0xb2, 0x68, 0x1e, 0x8a, 0x94, 0x0e, 0x44, 0xae,
	0x54, 0x40, 0x95, 0xbc, 0x17, 0xc1, 0xae, 0xb0, 0xfe, 0x3e, 0x82, 0x1f, 0xb5, 0x46, 0x06, 0xd9,
	0x1c, 0xa7, 0x6b, 0xe4, 0x02, 0xd4, 0xc4, 0xd4, 0x6c, 0x43, 0xfd, 0x8a, 0xea, 0xb0, 0x36, 0x1c,
	0x68, 0x04, 0x07, 0x53, 0x5a, 0xa4, 0x5c, 0x0c, 0xef, 0x40, 0x3e, 0x7e, 0x87, 0xf6, 0xbf, 0x44,
	0xc6, 0x4f, 0xbf, 0x44, 0x65, 0xfd, 0xd3, 0x24, 0x93, 0x5b, 0xae, 0x9a, 0xdf, 0xa1, 0x89, 0x79,
	0xb9, 0xb1, 0xb4, 0xab, 0x8d, 0xa5, 0x7d, 0xdb, 0x58, 0xda, 0x87, 0xad, 0xd5, 0xba, 0xda, 0x5a,
	0xad, 0x2f, 0x5b, 0xab, 0xf5, 0x23, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x07, 0x6b, 0x10, 0x4a, 0x05,
	0x00, 0x00,
}

func (m *WallPaperGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WallPaperGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WallPaperGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiWallpaper(dAtA, i, uint64(m.Crc32Hash))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *WallPaperSave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WallPaperSave) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WallPaperSave) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Settings")
	} else {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiWallpaper(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WallPaper == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("WallPaper")
	} else {
		{
			size, err := m.WallPaper.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiWallpaper(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WallPaperDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WallPaperDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WallPaperDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WallPaper == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("WallPaper")
	} else {
		{
			size, err := m.WallPaper.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiWallpaper(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WallPaperUpload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WallPaperUpload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WallPaperUpload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Settings")
	} else {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiWallpaper(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i -= len(m.MimeType)
	copy(dAtA[i:], m.MimeType)
	i = encodeVarintChatApiWallpaper(dAtA, i, uint64(len(m.MimeType)))
	i--
	dAtA[i] = 0x1a
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiWallpaper(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.UploadedFile != nil {
		{
			size, err := m.UploadedFile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiWallpaper(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WallPaperReset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WallPaperReset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WallPaperReset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *InputWallPaper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputWallPaper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputWallPaper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i--
	dAtA[i] = 0x11
	i = encodeVarintChatApiWallpaper(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *WallPaperSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WallPaperSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WallPaperSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatApiWallpaper(dAtA, i, uint64(m.Rotation))
	i--
	dAtA[i] = 0x30
	i = encodeVarintChatApiWallpaper(dAtA, i, uint64(m.Opacity))
	i--
	dAtA[i] = 0x28
	i = encodeVarintChatApiWallpaper(dAtA, i, uint64(m.BackgroundSecondColour))
	i--
	dAtA[i] = 0x20
	i = encodeVarintChatApiWallpaper(dAtA, i, uint64(m.BackgroundColour))
	i--
	dAtA[i] = 0x18
	i--
	if m.Motion {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i--
	if m.Blur {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *WallPaper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WallPaper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WallPaper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiWallpaper(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Document != nil {
		{
			size, err := m.Document.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatApiWallpaper(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	i--
	if m.Dark {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i--
	if m.Pattern {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i--
	if m.Default {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i--
	if m.Creator {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i--
	dAtA[i] = 0x11
	i = encodeVarintChatApiWallpaper(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *WallPapersMany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WallPapersMany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WallPapersMany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Empty {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i = encodeVarintChatApiWallpaper(dAtA, i, uint64(m.Crc32Hash))
	i--
	dAtA[i] = 0x18
	i = encodeVarintChatApiWallpaper(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x10
	if len(m.WallPapers) > 0 {
		for iNdEx := len(m.WallPapers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WallPapers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatApiWallpaper(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintChatApiWallpaper(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatApiWallpaper(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WallPaperGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiWallpaper(uint64(m.Crc32Hash))
	return n
}

func (m *WallPaperSave) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WallPaper != nil {
		l = m.WallPaper.Size()
		n += 1 + l + sovChatApiWallpaper(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovChatApiWallpaper(uint64(l))
	}
	return n
}

func (m *WallPaperDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WallPaper != nil {
		l = m.WallPaper.Size()
		n += 1 + l + sovChatApiWallpaper(uint64(l))
	}
	return n
}

func (m *WallPaperUpload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UploadedFile != nil {
		l = m.UploadedFile.Size()
		n += 1 + l + sovChatApiWallpaper(uint64(l))
	}
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovChatApiWallpaper(uint64(l))
	}
	l = len(m.MimeType)
	n += 1 + l + sovChatApiWallpaper(uint64(l))
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovChatApiWallpaper(uint64(l))
	}
	return n
}

func (m *WallPaperReset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InputWallPaper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiWallpaper(uint64(m.ID))
	n += 9
	return n
}

func (m *WallPaperSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 2
	n += 1 + sovChatApiWallpaper(uint64(m.BackgroundColour))
	n += 1 + sovChatApiWallpaper(uint64(m.BackgroundSecondColour))
	n += 1 + sovChatApiWallpaper(uint64(m.Opacity))
	n += 1 + sovChatApiWallpaper(uint64(m.Rotation))
	return n
}

func (m *WallPaper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatApiWallpaper(uint64(m.ID))
	n += 9
	n += 2
	n += 2
	n += 2
	n += 2
	if m.Document != nil {
		l = m.Document.Size()
		n += 1 + l + sovChatApiWallpaper(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovChatApiWallpaper(uint64(l))
	}
	return n
}

func (m *WallPapersMany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WallPapers) > 0 {
		for _, e := range m.WallPapers {
			l = e.Size()
			n += 1 + l + sovChatApiWallpaper(uint64(l))
		}
	}
	n += 1 + sovChatApiWallpaper(uint64(m.Count))
	n += 1 + sovChatApiWallpaper(uint64(m.Crc32Hash))
	n += 2
	return n
}

func sovChatApiWallpaper(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatApiWallpaper(x uint64) (n int) {
	return sovChatApiWallpaper(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WallPaperGet) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiWallpaper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WallPaperGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WallPaperGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc32Hash", wireType)
			}
			m.Crc32Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc32Hash |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiWallpaper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Crc32Hash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WallPaperSave) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiWallpaper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WallPaperSave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WallPaperSave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WallPaper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WallPaper == nil {
				m.WallPaper = &InputWallPaper{}
			}
			if err := m.WallPaper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &WallPaperSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiWallpaper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("WallPaper")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Settings")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WallPaperDelete) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiWallpaper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WallPaperDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WallPaperDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WallPaper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WallPaper == nil {
				m.WallPaper = &InputWallPaper{}
			}
			if err := m.WallPaper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiWallpaper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("WallPaper")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WallPaperUpload) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiWallpaper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WallPaperUpload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WallPaperUpload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadedFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UploadedFile == nil {
				m.UploadedFile = &InputFile{}
			}
			if err := m.UploadedFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &InputDocument{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &WallPaperSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiWallpaper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MimeType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Settings")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WallPaperReset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiWallpaper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WallPaperReset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WallPaperReset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiWallpaper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputWallPaper) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiWallpaper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputWallPaper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputWallPaper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiWallpaper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WallPaperSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiWallpaper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WallPaperSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WallPaperSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blur", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Blur = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Motion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Motion = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundColour", wireType)
			}
			m.BackgroundColour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackgroundColour |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundSecondColour", wireType)
			}
			m.BackgroundSecondColour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackgroundSecondColour |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opacity", wireType)
			}
			m.Opacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Opacity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			m.Rotation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rotation |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiWallpaper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WallPaper) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiWallpaper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WallPaper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WallPaper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Creator = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Default = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pattern = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dark = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Document == nil {
				m.Document = &Document{}
			}
			if err := m.Document.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &WallPaperSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiWallpaper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WallPapersMany) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatApiWallpaper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WallPapersMany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WallPapersMany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WallPapers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WallPapers = append(m.WallPapers, &WallPaper{})
			if err := m.WallPapers[len(m.WallPapers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc32Hash", wireType)
			}
			m.Crc32Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc32Hash |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Empty = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChatApiWallpaper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatApiWallpaper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Count")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Crc32Hash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatApiWallpaper(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatApiWallpaper
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatApiWallpaper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatApiWallpaper
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatApiWallpaper
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatApiWallpaper
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatApiWallpaper        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatApiWallpaper          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatApiWallpaper = fmt.Errorf("proto: unexpected end of group")
)
