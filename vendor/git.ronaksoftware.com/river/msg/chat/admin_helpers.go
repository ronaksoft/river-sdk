// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: admin.proto

package msg

import (
	fmt "fmt"
	pbytes "github.com/gobwas/pool/pbytes"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

const C_WelcomeMessage int64 = 2506678571

type poolWelcomeMessage struct {
	pool sync.Pool
}

func (p *poolWelcomeMessage) Get() *WelcomeMessage {
	x, ok := p.pool.Get().(*WelcomeMessage)
	if !ok {
		return &WelcomeMessage{}
	}
	return x
}

func (p *poolWelcomeMessage) Put(x *WelcomeMessage) {
	p.pool.Put(x)
}

var PoolWelcomeMessage = poolWelcomeMessage{}

func ResultWelcomeMessage(out *MessageEnvelope, res *WelcomeMessage) {
	out.Constructor = C_WelcomeMessage
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_PushProvider int64 = 1015984470

type poolPushProvider struct {
	pool sync.Pool
}

func (p *poolPushProvider) Get() *PushProvider {
	x, ok := p.pool.Get().(*PushProvider)
	if !ok {
		return &PushProvider{}
	}
	x.Credentials = nil
	x.KeyID = ""
	x.TeamID = ""
	x.Topic = ""
	return x
}

func (p *poolPushProvider) Put(x *PushProvider) {
	p.pool.Put(x)
}

var PoolPushProvider = poolPushProvider{}

func ResultPushProvider(out *MessageEnvelope, res *PushProvider) {
	out.Constructor = C_PushProvider
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_Version int64 = 1889659487

type poolVersion struct {
	pool sync.Pool
}

func (p *poolVersion) Get() *Version {
	x, ok := p.pool.Get().(*Version)
	if !ok {
		return &Version{}
	}
	x.ForcedVersions = x.ForcedVersions[:0]
	return x
}

func (p *poolVersion) Put(x *Version) {
	p.pool.Put(x)
}

var PoolVersion = poolVersion{}

func ResultVersion(out *MessageEnvelope, res *Version) {
	out.Constructor = C_Version
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_ReservedUsernames int64 = 1388055751

type poolReservedUsernames struct {
	pool sync.Pool
}

func (p *poolReservedUsernames) Get() *ReservedUsernames {
	x, ok := p.pool.Get().(*ReservedUsernames)
	if !ok {
		return &ReservedUsernames{}
	}
	x.Usernames = x.Usernames[:0]
	return x
}

func (p *poolReservedUsernames) Put(x *ReservedUsernames) {
	p.pool.Put(x)
}

var PoolReservedUsernames = poolReservedUsernames{}

func ResultReservedUsernames(out *MessageEnvelope, res *ReservedUsernames) {
	out.Constructor = C_ReservedUsernames
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

func init() {
	ConstructorNames[2506678571] = "WelcomeMessage"
	ConstructorNames[1015984470] = "PushProvider"
	ConstructorNames[1889659487] = "Version"
	ConstructorNames[1388055751] = "ReservedUsernames"
}
