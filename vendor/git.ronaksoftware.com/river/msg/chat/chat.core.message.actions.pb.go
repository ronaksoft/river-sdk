// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.core.message.actions.proto

package msg

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MessageActionGroupAddUser
type MessageActionGroupAddUser struct {
	UserIDs []int64 `protobuf:"varint,1,rep,name=UserIDs" json:"UserIDs,omitempty"`
}

func (m *MessageActionGroupAddUser) Reset()         { *m = MessageActionGroupAddUser{} }
func (m *MessageActionGroupAddUser) String() string { return proto.CompactTextString(m) }
func (*MessageActionGroupAddUser) ProtoMessage()    {}
func (*MessageActionGroupAddUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_e134edebab6f8250, []int{0}
}
func (m *MessageActionGroupAddUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageActionGroupAddUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageActionGroupAddUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageActionGroupAddUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageActionGroupAddUser.Merge(m, src)
}
func (m *MessageActionGroupAddUser) XXX_Size() int {
	return m.Size()
}
func (m *MessageActionGroupAddUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageActionGroupAddUser.DiscardUnknown(m)
}

var xxx_messageInfo_MessageActionGroupAddUser proto.InternalMessageInfo

func (m *MessageActionGroupAddUser) GetUserIDs() []int64 {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

// MessageActionGroupDeleteUser
type MessageActionGroupDeleteUser struct {
	UserIDs []int64 `protobuf:"varint,1,rep,name=UserIDs" json:"UserIDs,omitempty"`
}

func (m *MessageActionGroupDeleteUser) Reset()         { *m = MessageActionGroupDeleteUser{} }
func (m *MessageActionGroupDeleteUser) String() string { return proto.CompactTextString(m) }
func (*MessageActionGroupDeleteUser) ProtoMessage()    {}
func (*MessageActionGroupDeleteUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_e134edebab6f8250, []int{1}
}
func (m *MessageActionGroupDeleteUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageActionGroupDeleteUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageActionGroupDeleteUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageActionGroupDeleteUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageActionGroupDeleteUser.Merge(m, src)
}
func (m *MessageActionGroupDeleteUser) XXX_Size() int {
	return m.Size()
}
func (m *MessageActionGroupDeleteUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageActionGroupDeleteUser.DiscardUnknown(m)
}

var xxx_messageInfo_MessageActionGroupDeleteUser proto.InternalMessageInfo

func (m *MessageActionGroupDeleteUser) GetUserIDs() []int64 {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

// MessageActionGroupCreated
type MessageActionGroupCreated struct {
	GroupTitle string  `protobuf:"bytes,1,req,name=GroupTitle" json:"GroupTitle"`
	UserIDs    []int64 `protobuf:"varint,2,rep,name=UserIDs" json:"UserIDs,omitempty"`
}

func (m *MessageActionGroupCreated) Reset()         { *m = MessageActionGroupCreated{} }
func (m *MessageActionGroupCreated) String() string { return proto.CompactTextString(m) }
func (*MessageActionGroupCreated) ProtoMessage()    {}
func (*MessageActionGroupCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_e134edebab6f8250, []int{2}
}
func (m *MessageActionGroupCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageActionGroupCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageActionGroupCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageActionGroupCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageActionGroupCreated.Merge(m, src)
}
func (m *MessageActionGroupCreated) XXX_Size() int {
	return m.Size()
}
func (m *MessageActionGroupCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageActionGroupCreated.DiscardUnknown(m)
}

var xxx_messageInfo_MessageActionGroupCreated proto.InternalMessageInfo

func (m *MessageActionGroupCreated) GetGroupTitle() string {
	if m != nil {
		return m.GroupTitle
	}
	return ""
}

func (m *MessageActionGroupCreated) GetUserIDs() []int64 {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

// MessageActionGroupTitleChanged
type MessageActionGroupTitleChanged struct {
	GroupTitle string `protobuf:"bytes,1,req,name=GroupTitle" json:"GroupTitle"`
}

func (m *MessageActionGroupTitleChanged) Reset()         { *m = MessageActionGroupTitleChanged{} }
func (m *MessageActionGroupTitleChanged) String() string { return proto.CompactTextString(m) }
func (*MessageActionGroupTitleChanged) ProtoMessage()    {}
func (*MessageActionGroupTitleChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_e134edebab6f8250, []int{3}
}
func (m *MessageActionGroupTitleChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageActionGroupTitleChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageActionGroupTitleChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageActionGroupTitleChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageActionGroupTitleChanged.Merge(m, src)
}
func (m *MessageActionGroupTitleChanged) XXX_Size() int {
	return m.Size()
}
func (m *MessageActionGroupTitleChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageActionGroupTitleChanged.DiscardUnknown(m)
}

var xxx_messageInfo_MessageActionGroupTitleChanged proto.InternalMessageInfo

func (m *MessageActionGroupTitleChanged) GetGroupTitle() string {
	if m != nil {
		return m.GroupTitle
	}
	return ""
}

type MessageActionGroupPhotoChanged struct {
	Photo *GroupPhoto `protobuf:"bytes,1,opt,name=Photo" json:"Photo,omitempty"`
}

func (m *MessageActionGroupPhotoChanged) Reset()         { *m = MessageActionGroupPhotoChanged{} }
func (m *MessageActionGroupPhotoChanged) String() string { return proto.CompactTextString(m) }
func (*MessageActionGroupPhotoChanged) ProtoMessage()    {}
func (*MessageActionGroupPhotoChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_e134edebab6f8250, []int{4}
}
func (m *MessageActionGroupPhotoChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageActionGroupPhotoChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageActionGroupPhotoChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageActionGroupPhotoChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageActionGroupPhotoChanged.Merge(m, src)
}
func (m *MessageActionGroupPhotoChanged) XXX_Size() int {
	return m.Size()
}
func (m *MessageActionGroupPhotoChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageActionGroupPhotoChanged.DiscardUnknown(m)
}

var xxx_messageInfo_MessageActionGroupPhotoChanged proto.InternalMessageInfo

func (m *MessageActionGroupPhotoChanged) GetPhoto() *GroupPhoto {
	if m != nil {
		return m.Photo
	}
	return nil
}

// MessageActionClearHistory
type MessageActionClearHistory struct {
	MaxID  int64 `protobuf:"varint,1,req,name=MaxID" json:"MaxID"`
	Delete bool  `protobuf:"varint,2,req,name=Delete" json:"Delete"`
}

func (m *MessageActionClearHistory) Reset()         { *m = MessageActionClearHistory{} }
func (m *MessageActionClearHistory) String() string { return proto.CompactTextString(m) }
func (*MessageActionClearHistory) ProtoMessage()    {}
func (*MessageActionClearHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_e134edebab6f8250, []int{5}
}
func (m *MessageActionClearHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageActionClearHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageActionClearHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageActionClearHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageActionClearHistory.Merge(m, src)
}
func (m *MessageActionClearHistory) XXX_Size() int {
	return m.Size()
}
func (m *MessageActionClearHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageActionClearHistory.DiscardUnknown(m)
}

var xxx_messageInfo_MessageActionClearHistory proto.InternalMessageInfo

func (m *MessageActionClearHistory) GetMaxID() int64 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

func (m *MessageActionClearHistory) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

// MessageActionContactRegistered
type MessageActionContactRegistered struct {
}

func (m *MessageActionContactRegistered) Reset()         { *m = MessageActionContactRegistered{} }
func (m *MessageActionContactRegistered) String() string { return proto.CompactTextString(m) }
func (*MessageActionContactRegistered) ProtoMessage()    {}
func (*MessageActionContactRegistered) Descriptor() ([]byte, []int) {
	return fileDescriptor_e134edebab6f8250, []int{6}
}
func (m *MessageActionContactRegistered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageActionContactRegistered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageActionContactRegistered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageActionContactRegistered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageActionContactRegistered.Merge(m, src)
}
func (m *MessageActionContactRegistered) XXX_Size() int {
	return m.Size()
}
func (m *MessageActionContactRegistered) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageActionContactRegistered.DiscardUnknown(m)
}

var xxx_messageInfo_MessageActionContactRegistered proto.InternalMessageInfo

// MessageActionScreenShotTaken
type MessageActionScreenShotTaken struct {
	MinID int64 `protobuf:"varint,1,opt,name=MinID" json:"MinID"`
	MaxID int64 `protobuf:"varint,2,opt,name=MaxID" json:"MaxID"`
}

func (m *MessageActionScreenShotTaken) Reset()         { *m = MessageActionScreenShotTaken{} }
func (m *MessageActionScreenShotTaken) String() string { return proto.CompactTextString(m) }
func (*MessageActionScreenShotTaken) ProtoMessage()    {}
func (*MessageActionScreenShotTaken) Descriptor() ([]byte, []int) {
	return fileDescriptor_e134edebab6f8250, []int{7}
}
func (m *MessageActionScreenShotTaken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageActionScreenShotTaken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageActionScreenShotTaken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageActionScreenShotTaken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageActionScreenShotTaken.Merge(m, src)
}
func (m *MessageActionScreenShotTaken) XXX_Size() int {
	return m.Size()
}
func (m *MessageActionScreenShotTaken) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageActionScreenShotTaken.DiscardUnknown(m)
}

var xxx_messageInfo_MessageActionScreenShotTaken proto.InternalMessageInfo

func (m *MessageActionScreenShotTaken) GetMinID() int64 {
	if m != nil {
		return m.MinID
	}
	return 0
}

func (m *MessageActionScreenShotTaken) GetMaxID() int64 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

func init() {
	proto.RegisterType((*MessageActionGroupAddUser)(nil), "msg.MessageActionGroupAddUser")
	proto.RegisterType((*MessageActionGroupDeleteUser)(nil), "msg.MessageActionGroupDeleteUser")
	proto.RegisterType((*MessageActionGroupCreated)(nil), "msg.MessageActionGroupCreated")
	proto.RegisterType((*MessageActionGroupTitleChanged)(nil), "msg.MessageActionGroupTitleChanged")
	proto.RegisterType((*MessageActionGroupPhotoChanged)(nil), "msg.MessageActionGroupPhotoChanged")
	proto.RegisterType((*MessageActionClearHistory)(nil), "msg.MessageActionClearHistory")
	proto.RegisterType((*MessageActionContactRegistered)(nil), "msg.MessageActionContactRegistered")
	proto.RegisterType((*MessageActionScreenShotTaken)(nil), "msg.MessageActionScreenShotTaken")
}

func init() { proto.RegisterFile("chat.core.message.actions.proto", fileDescriptor_e134edebab6f8250) }

var fileDescriptor_e134edebab6f8250 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x6a, 0xf2, 0x40,
	0x14, 0xc5, 0x33, 0xc9, 0xe7, 0xf7, 0x67, 0xbe, 0x45, 0x21, 0x50, 0x48, 0x45, 0xc6, 0x10, 0x5a,
	0xc8, 0x2a, 0x94, 0xee, 0x0a, 0xdd, 0x68, 0xa4, 0xd6, 0x85, 0x50, 0xa2, 0x76, 0x5b, 0x86, 0xe4,
	0x92, 0x84, 0x6a, 0x46, 0x66, 0x6e, 0xa1, 0xbe, 0x45, 0x1f, 0xcb, 0xa5, 0xcb, 0xae, 0x4a, 0xd1,
	0x17, 0x29, 0x4e, 0x22, 0x5a, 0x75, 0xe1, 0x2a, 0xdc, 0x73, 0xee, 0xb9, 0xbf, 0x93, 0x84, 0x36,
	0xe3, 0x8c, 0x63, 0x10, 0x0b, 0x09, 0xc1, 0x04, 0x94, 0xe2, 0x29, 0x04, 0x3c, 0xc6, 0x5c, 0x14,
	0x2a, 0x98, 0x4a, 0x81, 0xc2, 0xb6, 0x26, 0x2a, 0xad, 0x9f, 0x6f, 0xb7, 0x70, 0x36, 0x85, 0xca,
	0xf3, 0x6e, 0xe9, 0x45, 0xbf, 0x0c, 0xb5, 0x74, 0xa6, 0x2b, 0xc5, 0xeb, 0xb4, 0x95, 0x24, 0x23,
	0x05, 0xd2, 0x6e, 0xd0, 0x3f, 0xeb, 0x67, 0xaf, 0xa3, 0x1c, 0xe2, 0x5a, 0xbe, 0xd5, 0x36, 0xaf,
	0x49, 0xb4, 0x91, 0xbc, 0x3b, 0xda, 0x38, 0x8c, 0x76, 0x60, 0x0c, 0x08, 0x27, 0xa4, 0x9f, 0x8f,
	0x81, 0x43, 0x09, 0x1c, 0x21, 0xb1, 0x2f, 0x29, 0xd5, 0xf3, 0x30, 0xc7, 0x31, 0x38, 0xc4, 0x35,
	0xfd, 0x7f, 0xed, 0x5f, 0xf3, 0xcf, 0xa6, 0x11, 0xed, 0xe8, 0xbb, 0x00, 0xf3, 0x10, 0x70, 0x4f,
	0xd9, 0x21, 0x40, 0x07, 0xc3, 0x8c, 0x17, 0xe9, 0xa9, 0x14, 0xaf, 0x7b, 0xec, 0xce, 0x63, 0x26,
	0x50, 0x6c, 0xee, 0x5c, 0xd1, 0x9a, 0x9e, 0x1d, 0xe2, 0x12, 0xff, 0xff, 0xcd, 0x59, 0x30, 0x51,
	0x69, 0xb0, 0x5d, 0x8b, 0x4a, 0xd7, 0x1b, 0xed, 0xbd, 0x71, 0x38, 0x06, 0x2e, 0x1f, 0x72, 0x85,
	0x42, 0xce, 0xec, 0x3a, 0xad, 0xf5, 0xf9, 0x5b, 0xaf, 0xa3, 0x6b, 0x58, 0x55, 0x8d, 0x52, 0xb2,
	0x1b, 0xf4, 0x77, 0xf9, 0x59, 0x1d, 0xd3, 0x35, 0xfd, 0xbf, 0x95, 0x59, 0x69, 0x9e, 0xbb, 0xd7,
	0x2f, 0x14, 0x05, 0xf2, 0x18, 0x23, 0x48, 0x73, 0x85, 0x20, 0x21, 0xf1, 0x9e, 0xf6, 0x7e, 0xd4,
	0x20, 0x96, 0x00, 0xc5, 0x20, 0x13, 0x38, 0xe4, 0x2f, 0x50, 0x68, 0x76, 0x5e, 0x68, 0x36, 0xd9,
	0x61, 0xaf, 0xa5, 0x6d, 0x2f, 0xf3, 0x87, 0xb7, 0x96, 0xda, 0xce, 0x7c, 0xc9, 0xc8, 0x62, 0xc9,
	0xc8, 0xd7, 0x92, 0x91, 0xf7, 0x15, 0x33, 0x16, 0x2b, 0x66, 0x7c, 0xac, 0x98, 0xf1, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0x7c, 0x57, 0x0d, 0xf9, 0x93, 0x02, 0x00, 0x00,
}

func (m *MessageActionGroupAddUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionGroupAddUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageActionGroupAddUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		for iNdEx := len(m.UserIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatCoreMessageActions(dAtA, i, uint64(m.UserIDs[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessageActionGroupDeleteUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionGroupDeleteUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageActionGroupDeleteUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		for iNdEx := len(m.UserIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatCoreMessageActions(dAtA, i, uint64(m.UserIDs[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessageActionGroupCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionGroupCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageActionGroupCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		for iNdEx := len(m.UserIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintChatCoreMessageActions(dAtA, i, uint64(m.UserIDs[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i -= len(m.GroupTitle)
	copy(dAtA[i:], m.GroupTitle)
	i = encodeVarintChatCoreMessageActions(dAtA, i, uint64(len(m.GroupTitle)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MessageActionGroupTitleChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionGroupTitleChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageActionGroupTitleChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.GroupTitle)
	copy(dAtA[i:], m.GroupTitle)
	i = encodeVarintChatCoreMessageActions(dAtA, i, uint64(len(m.GroupTitle)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MessageActionGroupPhotoChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionGroupPhotoChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageActionGroupPhotoChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Photo != nil {
		{
			size, err := m.Photo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatCoreMessageActions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageActionClearHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionClearHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageActionClearHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Delete {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatCoreMessageActions(dAtA, i, uint64(m.MaxID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MessageActionContactRegistered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionContactRegistered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageActionContactRegistered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MessageActionScreenShotTaken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageActionScreenShotTaken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageActionScreenShotTaken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatCoreMessageActions(dAtA, i, uint64(m.MaxID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatCoreMessageActions(dAtA, i, uint64(m.MinID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintChatCoreMessageActions(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatCoreMessageActions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageActionGroupAddUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		for _, e := range m.UserIDs {
			n += 1 + sovChatCoreMessageActions(uint64(e))
		}
	}
	return n
}

func (m *MessageActionGroupDeleteUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		for _, e := range m.UserIDs {
			n += 1 + sovChatCoreMessageActions(uint64(e))
		}
	}
	return n
}

func (m *MessageActionGroupCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupTitle)
	n += 1 + l + sovChatCoreMessageActions(uint64(l))
	if len(m.UserIDs) > 0 {
		for _, e := range m.UserIDs {
			n += 1 + sovChatCoreMessageActions(uint64(e))
		}
	}
	return n
}

func (m *MessageActionGroupTitleChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupTitle)
	n += 1 + l + sovChatCoreMessageActions(uint64(l))
	return n
}

func (m *MessageActionGroupPhotoChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovChatCoreMessageActions(uint64(l))
	}
	return n
}

func (m *MessageActionClearHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatCoreMessageActions(uint64(m.MaxID))
	n += 2
	return n
}

func (m *MessageActionContactRegistered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MessageActionScreenShotTaken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatCoreMessageActions(uint64(m.MinID))
	n += 1 + sovChatCoreMessageActions(uint64(m.MaxID))
	return n
}

func sovChatCoreMessageActions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatCoreMessageActions(x uint64) (n int) {
	return sovChatCoreMessageActions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageActionGroupAddUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCoreMessageActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionGroupAddUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionGroupAddUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatCoreMessageActions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIDs = append(m.UserIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatCoreMessageActions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatCoreMessageActions
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatCoreMessageActions
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIDs) == 0 {
					m.UserIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatCoreMessageActions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIDs = append(m.UserIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatCoreMessageActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionGroupDeleteUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCoreMessageActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionGroupDeleteUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionGroupDeleteUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatCoreMessageActions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIDs = append(m.UserIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatCoreMessageActions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatCoreMessageActions
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatCoreMessageActions
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIDs) == 0 {
					m.UserIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatCoreMessageActions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIDs = append(m.UserIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatCoreMessageActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionGroupCreated) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCoreMessageActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionGroupCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionGroupCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCoreMessageActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatCoreMessageActions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIDs = append(m.UserIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatCoreMessageActions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatCoreMessageActions
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatCoreMessageActions
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIDs) == 0 {
					m.UserIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatCoreMessageActions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIDs = append(m.UserIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatCoreMessageActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupTitle")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionGroupTitleChanged) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCoreMessageActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionGroupTitleChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionGroupTitleChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCoreMessageActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipChatCoreMessageActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupTitle")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionGroupPhotoChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCoreMessageActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionGroupPhotoChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionGroupPhotoChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCoreMessageActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &GroupPhoto{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatCoreMessageActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionClearHistory) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCoreMessageActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionClearHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionClearHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxID", wireType)
			}
			m.MaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCoreMessageActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCoreMessageActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delete = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatCoreMessageActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MaxID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Delete")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionContactRegistered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCoreMessageActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionContactRegistered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionContactRegistered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChatCoreMessageActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageActionScreenShotTaken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCoreMessageActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageActionScreenShotTaken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageActionScreenShotTaken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinID", wireType)
			}
			m.MinID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCoreMessageActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxID", wireType)
			}
			m.MaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCoreMessageActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatCoreMessageActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCoreMessageActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatCoreMessageActions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatCoreMessageActions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatCoreMessageActions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatCoreMessageActions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatCoreMessageActions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatCoreMessageActions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatCoreMessageActions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatCoreMessageActions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatCoreMessageActions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatCoreMessageActions = fmt.Errorf("proto: unexpected end of group")
)
