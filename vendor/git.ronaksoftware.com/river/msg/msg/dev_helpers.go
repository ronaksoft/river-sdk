// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dev.proto

package msg

import (
	fmt "fmt"
	pbytes "github.com/gobwas/pool/pbytes"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

const C_EchoWithDelay int64 = 2861516000

type poolEchoWithDelay struct {
	pool sync.Pool
}

func (p *poolEchoWithDelay) Get() *EchoWithDelay {
	x, ok := p.pool.Get().(*EchoWithDelay)
	if !ok {
		return &EchoWithDelay{}
	}
	return x
}

func (p *poolEchoWithDelay) Put(x *EchoWithDelay) {
	p.pool.Put(x)
}

var PoolEchoWithDelay = poolEchoWithDelay{}

func ResultEchoWithDelay(out *MessageEnvelope, res *EchoWithDelay) {
	out.Constructor = C_EchoWithDelay
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_TestRequest int64 = 475847033

type poolTestRequest struct {
	pool sync.Pool
}

func (p *poolTestRequest) Get() *TestRequest {
	x, ok := p.pool.Get().(*TestRequest)
	if !ok {
		return &TestRequest{}
	}
	return x
}

func (p *poolTestRequest) Put(x *TestRequest) {
	p.pool.Put(x)
}

var PoolTestRequest = poolTestRequest{}

func ResultTestRequest(out *MessageEnvelope, res *TestRequest) {
	out.Constructor = C_TestRequest
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_TestResponse int64 = 1999996896

type poolTestResponse struct {
	pool sync.Pool
}

func (p *poolTestResponse) Get() *TestResponse {
	x, ok := p.pool.Get().(*TestResponse)
	if !ok {
		return &TestResponse{}
	}
	return x
}

func (p *poolTestResponse) Put(x *TestResponse) {
	p.pool.Put(x)
}

var PoolTestResponse = poolTestResponse{}

func ResultTestResponse(out *MessageEnvelope, res *TestResponse) {
	out.Constructor = C_TestResponse
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_TestRequestWithString int64 = 3760062575

type poolTestRequestWithString struct {
	pool sync.Pool
}

func (p *poolTestRequestWithString) Get() *TestRequestWithString {
	x, ok := p.pool.Get().(*TestRequestWithString)
	if !ok {
		return &TestRequestWithString{}
	}
	return x
}

func (p *poolTestRequestWithString) Put(x *TestRequestWithString) {
	p.pool.Put(x)
}

var PoolTestRequestWithString = poolTestRequestWithString{}

func ResultTestRequestWithString(out *MessageEnvelope, res *TestRequestWithString) {
	out.Constructor = C_TestRequestWithString
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_TestResponseWithString int64 = 556112423

type poolTestResponseWithString struct {
	pool sync.Pool
}

func (p *poolTestResponseWithString) Get() *TestResponseWithString {
	x, ok := p.pool.Get().(*TestResponseWithString)
	if !ok {
		return &TestResponseWithString{}
	}
	return x
}

func (p *poolTestResponseWithString) Put(x *TestResponseWithString) {
	p.pool.Put(x)
}

var PoolTestResponseWithString = poolTestResponseWithString{}

func ResultTestResponseWithString(out *MessageEnvelope, res *TestResponseWithString) {
	out.Constructor = C_TestResponseWithString
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

func init() {
	ConstructorNames[2861516000] = "EchoWithDelay"
	ConstructorNames[475847033] = "TestRequest"
	ConstructorNames[1999996896] = "TestResponse"
	ConstructorNames[3760062575] = "TestRequestWithString"
	ConstructorNames[556112423] = "TestResponseWithString"
}
