// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core.types.proto

package msg

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TypingAction
type TypingAction int32

const (
	TypingActionTyping         TypingAction = 0
	TypingActionRecordingVoice TypingAction = 1
	TypingActionRecordingVideo TypingAction = 2
	TypingActionUploading      TypingAction = 3
	TypingActionCancel         TypingAction = 4
)

var TypingAction_name = map[int32]string{
	0: "TypingActionTyping",
	1: "TypingActionRecordingVoice",
	2: "TypingActionRecordingVideo",
	3: "TypingActionUploading",
	4: "TypingActionCancel",
}

var TypingAction_value = map[string]int32{
	"TypingActionTyping":         0,
	"TypingActionRecordingVoice": 1,
	"TypingActionRecordingVideo": 2,
	"TypingActionUploading":      3,
	"TypingActionCancel":         4,
}

func (x TypingAction) Enum() *TypingAction {
	p := new(TypingAction)
	*p = x
	return p
}

func (x TypingAction) String() string {
	return proto.EnumName(TypingAction_name, int32(x))
}

func (x *TypingAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TypingAction_value, data, "TypingAction")
	if err != nil {
		return err
	}
	*x = TypingAction(value)
	return nil
}

func (TypingAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{0}
}

// PeerType
type PeerType int32

const (
	PeerSelf       PeerType = 0
	PeerUser       PeerType = 1
	PeerGroup      PeerType = 2
	PeerSuperGroup PeerType = 3
	PeerChannel    PeerType = 4
)

var PeerType_name = map[int32]string{
	0: "PeerSelf",
	1: "PeerUser",
	2: "PeerGroup",
	3: "PeerSuperGroup",
	4: "PeerChannel",
}

var PeerType_value = map[string]int32{
	"PeerSelf":       0,
	"PeerUser":       1,
	"PeerGroup":      2,
	"PeerSuperGroup": 3,
	"PeerChannel":    4,
}

func (x PeerType) Enum() *PeerType {
	p := new(PeerType)
	*p = x
	return p
}

func (x PeerType) String() string {
	return proto.EnumName(PeerType_name, int32(x))
}

func (x *PeerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerType_value, data, "PeerType")
	if err != nil {
		return err
	}
	*x = PeerType(value)
	return nil
}

func (PeerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{1}
}

// UserStatus
type UserStatus int32

const (
	UserStatusOffline   UserStatus = 0
	UserStatusOnline    UserStatus = 1
	UserStatusRecently  UserStatus = 2
	UserStatusLastWeek  UserStatus = 3
	UserStatusLastMonth UserStatus = 4
)

var UserStatus_name = map[int32]string{
	0: "UserStatusOffline",
	1: "UserStatusOnline",
	2: "UserStatusRecently",
	3: "UserStatusLastWeek",
	4: "UserStatusLastMonth",
}

var UserStatus_value = map[string]int32{
	"UserStatusOffline":   0,
	"UserStatusOnline":    1,
	"UserStatusRecently":  2,
	"UserStatusLastWeek":  3,
	"UserStatusLastMonth": 4,
}

func (x UserStatus) Enum() *UserStatus {
	p := new(UserStatus)
	*p = x
	return p
}

func (x UserStatus) String() string {
	return proto.EnumName(UserStatus_name, int32(x))
}

func (x *UserStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserStatus_value, data, "UserStatus")
	if err != nil {
		return err
	}
	*x = UserStatus(value)
	return nil
}

func (UserStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{2}
}

// GroupFlags
type GroupFlags int32

const (
	GroupFlagsEmpty          GroupFlags = 0
	GroupFlagsCreator        GroupFlags = 1
	GroupFlagsNonParticipant GroupFlags = 2
	GroupFlagsAdmin          GroupFlags = 3
	GroupFlagsAdminsEnabled  GroupFlags = 4
	GroupFlagsDeactivated    GroupFlags = 5
)

var GroupFlags_name = map[int32]string{
	0: "GroupFlagsEmpty",
	1: "GroupFlagsCreator",
	2: "GroupFlagsNonParticipant",
	3: "GroupFlagsAdmin",
	4: "GroupFlagsAdminsEnabled",
	5: "GroupFlagsDeactivated",
}

var GroupFlags_value = map[string]int32{
	"GroupFlagsEmpty":          0,
	"GroupFlagsCreator":        1,
	"GroupFlagsNonParticipant": 2,
	"GroupFlagsAdmin":          3,
	"GroupFlagsAdminsEnabled":  4,
	"GroupFlagsDeactivated":    5,
}

func (x GroupFlags) Enum() *GroupFlags {
	p := new(GroupFlags)
	*p = x
	return p
}

func (x GroupFlags) String() string {
	return proto.EnumName(GroupFlags_name, int32(x))
}

func (x *GroupFlags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GroupFlags_value, data, "GroupFlags")
	if err != nil {
		return err
	}
	*x = GroupFlags(value)
	return nil
}

func (GroupFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{3}
}

// ParticipantType
type ParticipantType int32

const (
	ParticipantTypeMember  ParticipantType = 0
	ParticipantTypeAdmin   ParticipantType = 1
	ParticipantTypeCreator ParticipantType = 2
)

var ParticipantType_name = map[int32]string{
	0: "ParticipantTypeMember",
	1: "ParticipantTypeAdmin",
	2: "ParticipantTypeCreator",
}

var ParticipantType_value = map[string]int32{
	"ParticipantTypeMember":  0,
	"ParticipantTypeAdmin":   1,
	"ParticipantTypeCreator": 2,
}

func (x ParticipantType) Enum() *ParticipantType {
	p := new(ParticipantType)
	*p = x
	return p
}

func (x ParticipantType) String() string {
	return proto.EnumName(ParticipantType_name, int32(x))
}

func (x *ParticipantType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ParticipantType_value, data, "ParticipantType")
	if err != nil {
		return err
	}
	*x = ParticipantType(value)
	return nil
}

func (ParticipantType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{4}
}

// InputMediaType
type InputMediaType int32

const (
	InputMediaTypeEmpty            InputMediaType = 0
	InputMediaTypeInvoice          InputMediaType = 1
	InputMediaTypePoll             InputMediaType = 2
	InputMediaTypeContact          InputMediaType = 3
	InputMediaTypeUploadedDocument InputMediaType = 4
	InputMediaTypeDocument         InputMediaType = 5
	InputMediaTypeGeoLocation      InputMediaType = 6
	InputMediaTypeWebDocument      InputMediaType = 7
	InputMediaTypeSealed           InputMediaType = 8
	InputMediaTypeMessageDocument  InputMediaType = 9
	InputMediaTypeReserved4        InputMediaType = 10
	InputMediaTypeReserved5        InputMediaType = 11
	InputMediaTypeReserved6        InputMediaType = 12
	InputMediaTypeReserved7        InputMediaType = 13
	InputMediaTypeReserved8        InputMediaType = 14
)

var InputMediaType_name = map[int32]string{
	0:  "InputMediaTypeEmpty",
	1:  "InputMediaTypeInvoice",
	2:  "InputMediaTypePoll",
	3:  "InputMediaTypeContact",
	4:  "InputMediaTypeUploadedDocument",
	5:  "InputMediaTypeDocument",
	6:  "InputMediaTypeGeoLocation",
	7:  "InputMediaTypeWebDocument",
	8:  "InputMediaTypeSealed",
	9:  "InputMediaTypeMessageDocument",
	10: "InputMediaTypeReserved4",
	11: "InputMediaTypeReserved5",
	12: "InputMediaTypeReserved6",
	13: "InputMediaTypeReserved7",
	14: "InputMediaTypeReserved8",
}

var InputMediaType_value = map[string]int32{
	"InputMediaTypeEmpty":            0,
	"InputMediaTypeInvoice":          1,
	"InputMediaTypePoll":             2,
	"InputMediaTypeContact":          3,
	"InputMediaTypeUploadedDocument": 4,
	"InputMediaTypeDocument":         5,
	"InputMediaTypeGeoLocation":      6,
	"InputMediaTypeWebDocument":      7,
	"InputMediaTypeSealed":           8,
	"InputMediaTypeMessageDocument":  9,
	"InputMediaTypeReserved4":        10,
	"InputMediaTypeReserved5":        11,
	"InputMediaTypeReserved6":        12,
	"InputMediaTypeReserved7":        13,
	"InputMediaTypeReserved8":        14,
}

func (x InputMediaType) Enum() *InputMediaType {
	p := new(InputMediaType)
	*p = x
	return p
}

func (x InputMediaType) String() string {
	return proto.EnumName(InputMediaType_name, int32(x))
}

func (x *InputMediaType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InputMediaType_value, data, "InputMediaType")
	if err != nil {
		return err
	}
	*x = InputMediaType(value)
	return nil
}

func (InputMediaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{5}
}

// MediaType
type MediaType int32

const (
	MediaTypeEmpty       MediaType = 0
	MediaTypePoll        MediaType = 1
	MediaTypeDocument    MediaType = 2
	MediaTypeContact     MediaType = 3
	MediaTypeGeoLocation MediaType = 4
	MediaTypeInvoice     MediaType = 5
	MediaTypeWebDocument MediaType = 6
	MediaTypeSealed      MediaType = 7
	MediaTypeReserved1   MediaType = 8
	MediaTypeReserved2   MediaType = 9
	MediaTypeReserved3   MediaType = 10
	MediaTypeReserved4   MediaType = 11
	MediaTypeReserved5   MediaType = 12
	MediaTypeReserved6   MediaType = 13
)

var MediaType_name = map[int32]string{
	0:  "MediaTypeEmpty",
	1:  "MediaTypePoll",
	2:  "MediaTypeDocument",
	3:  "MediaTypeContact",
	4:  "MediaTypeGeoLocation",
	5:  "MediaTypeInvoice",
	6:  "MediaTypeWebDocument",
	7:  "MediaTypeSealed",
	8:  "MediaTypeReserved1",
	9:  "MediaTypeReserved2",
	10: "MediaTypeReserved3",
	11: "MediaTypeReserved4",
	12: "MediaTypeReserved5",
	13: "MediaTypeReserved6",
}

var MediaType_value = map[string]int32{
	"MediaTypeEmpty":       0,
	"MediaTypePoll":        1,
	"MediaTypeDocument":    2,
	"MediaTypeContact":     3,
	"MediaTypeGeoLocation": 4,
	"MediaTypeInvoice":     5,
	"MediaTypeWebDocument": 6,
	"MediaTypeSealed":      7,
	"MediaTypeReserved1":   8,
	"MediaTypeReserved2":   9,
	"MediaTypeReserved3":   10,
	"MediaTypeReserved4":   11,
	"MediaTypeReserved5":   12,
	"MediaTypeReserved6":   13,
}

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return proto.EnumName(MediaType_name, int32(x))
}

func (x *MediaType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MediaType_value, data, "MediaType")
	if err != nil {
		return err
	}
	*x = MediaType(value)
	return nil
}

func (MediaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{6}
}

// MessageEntityType
type MessageEntityType int32

const (
	MessageEntityTypeBold       MessageEntityType = 0
	MessageEntityTypeItalic     MessageEntityType = 1
	MessageEntityTypeMention    MessageEntityType = 2
	MessageEntityTypeUrl        MessageEntityType = 3
	MessageEntityTypeEmail      MessageEntityType = 4
	MessageEntityTypeHashTag    MessageEntityType = 5
	MessageEntityTypeCode       MessageEntityType = 6
	MessageEntityTypeBotCommand MessageEntityType = 7
	MessageEntityTypeReserved3  MessageEntityType = 8
	MessageEntityTypeReserved4  MessageEntityType = 9
	MessageEntityTypeReserved5  MessageEntityType = 10
	MessageEntityTypeReserved6  MessageEntityType = 11
	MessageEntityTypeReserved7  MessageEntityType = 12
	MessageEntityTypeReserved8  MessageEntityType = 13
)

var MessageEntityType_name = map[int32]string{
	0:  "MessageEntityTypeBold",
	1:  "MessageEntityTypeItalic",
	2:  "MessageEntityTypeMention",
	3:  "MessageEntityTypeUrl",
	4:  "MessageEntityTypeEmail",
	5:  "MessageEntityTypeHashTag",
	6:  "MessageEntityTypeCode",
	7:  "MessageEntityTypeBotCommand",
	8:  "MessageEntityTypeReserved3",
	9:  "MessageEntityTypeReserved4",
	10: "MessageEntityTypeReserved5",
	11: "MessageEntityTypeReserved6",
	12: "MessageEntityTypeReserved7",
	13: "MessageEntityTypeReserved8",
}

var MessageEntityType_value = map[string]int32{
	"MessageEntityTypeBold":       0,
	"MessageEntityTypeItalic":     1,
	"MessageEntityTypeMention":    2,
	"MessageEntityTypeUrl":        3,
	"MessageEntityTypeEmail":      4,
	"MessageEntityTypeHashTag":    5,
	"MessageEntityTypeCode":       6,
	"MessageEntityTypeBotCommand": 7,
	"MessageEntityTypeReserved3":  8,
	"MessageEntityTypeReserved4":  9,
	"MessageEntityTypeReserved5":  10,
	"MessageEntityTypeReserved6":  11,
	"MessageEntityTypeReserved7":  12,
	"MessageEntityTypeReserved8":  13,
}

func (x MessageEntityType) Enum() *MessageEntityType {
	p := new(MessageEntityType)
	*p = x
	return p
}

func (x MessageEntityType) String() string {
	return proto.EnumName(MessageEntityType_name, int32(x))
}

func (x *MessageEntityType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageEntityType_value, data, "MessageEntityType")
	if err != nil {
		return err
	}
	*x = MessageEntityType(value)
	return nil
}

func (MessageEntityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{7}
}

// NotificationType
type PushTokenProvider int32

const (
	PushTokenFirebase PushTokenProvider = 0
	PushTokenApn      PushTokenProvider = 1
	PushTokenPushKit  PushTokenProvider = 2
)

var PushTokenProvider_name = map[int32]string{
	0: "PushTokenFirebase",
	1: "PushTokenApn",
	2: "PushTokenPushKit",
}

var PushTokenProvider_value = map[string]int32{
	"PushTokenFirebase": 0,
	"PushTokenApn":      1,
	"PushTokenPushKit":  2,
}

func (x PushTokenProvider) Enum() *PushTokenProvider {
	p := new(PushTokenProvider)
	*p = x
	return p
}

func (x PushTokenProvider) String() string {
	return proto.EnumName(PushTokenProvider_name, int32(x))
}

func (x *PushTokenProvider) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PushTokenProvider_value, data, "PushTokenProvider")
	if err != nil {
		return err
	}
	*x = PushTokenProvider(value)
	return nil
}

func (PushTokenProvider) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{8}
}

// AccountPrivacyKey
type PrivacyKey int32

const (
	PrivacyKeyNone             PrivacyKey = 0
	PrivacyKeyChatInvite       PrivacyKey = 1
	PrivacyKeyLastSeen         PrivacyKey = 2
	PrivacyKeyPhoneNumber      PrivacyKey = 3
	PrivacyKeyProfilePhoto     PrivacyKey = 4
	PrivacyKeyForwardedMessage PrivacyKey = 5
	PrivacyKeyCall             PrivacyKey = 6
	PrivacyKeyReserved1        PrivacyKey = 7
	PrivacyKeyReserved2        PrivacyKey = 8
	PrivacyKeyReserved3        PrivacyKey = 9
	PrivacyKeyReserved4        PrivacyKey = 10
	PrivacyKeyReserved5        PrivacyKey = 11
	PrivacyKeyReserved6        PrivacyKey = 12
)

var PrivacyKey_name = map[int32]string{
	0:  "PrivacyKeyNone",
	1:  "PrivacyKeyChatInvite",
	2:  "PrivacyKeyLastSeen",
	3:  "PrivacyKeyPhoneNumber",
	4:  "PrivacyKeyProfilePhoto",
	5:  "PrivacyKeyForwardedMessage",
	6:  "PrivacyKeyCall",
	7:  "PrivacyKeyReserved1",
	8:  "PrivacyKeyReserved2",
	9:  "PrivacyKeyReserved3",
	10: "PrivacyKeyReserved4",
	11: "PrivacyKeyReserved5",
	12: "PrivacyKeyReserved6",
}

var PrivacyKey_value = map[string]int32{
	"PrivacyKeyNone":             0,
	"PrivacyKeyChatInvite":       1,
	"PrivacyKeyLastSeen":         2,
	"PrivacyKeyPhoneNumber":      3,
	"PrivacyKeyProfilePhoto":     4,
	"PrivacyKeyForwardedMessage": 5,
	"PrivacyKeyCall":             6,
	"PrivacyKeyReserved1":        7,
	"PrivacyKeyReserved2":        8,
	"PrivacyKeyReserved3":        9,
	"PrivacyKeyReserved4":        10,
	"PrivacyKeyReserved5":        11,
	"PrivacyKeyReserved6":        12,
}

func (x PrivacyKey) Enum() *PrivacyKey {
	p := new(PrivacyKey)
	*p = x
	return p
}

func (x PrivacyKey) String() string {
	return proto.EnumName(PrivacyKey_name, int32(x))
}

func (x *PrivacyKey) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PrivacyKey_value, data, "PrivacyKey")
	if err != nil {
		return err
	}
	*x = PrivacyKey(value)
	return nil
}

func (PrivacyKey) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{9}
}

// AccountPrivacyValue
type PrivacyType int32

const (
	PrivacyTypeAllowAll      PrivacyType = 0
	PrivacyTypeAllowContacts PrivacyType = 1
	PrivacyTypeDisallowAll   PrivacyType = 2
	//    Order is very important, exceptions are started from 101
	PrivacyTypeAllowUsers    PrivacyType = 101
	PrivacyTypeDisallowUsers PrivacyType = 102
)

var PrivacyType_name = map[int32]string{
	0:   "PrivacyTypeAllowAll",
	1:   "PrivacyTypeAllowContacts",
	2:   "PrivacyTypeDisallowAll",
	101: "PrivacyTypeAllowUsers",
	102: "PrivacyTypeDisallowUsers",
}

var PrivacyType_value = map[string]int32{
	"PrivacyTypeAllowAll":      0,
	"PrivacyTypeAllowContacts": 1,
	"PrivacyTypeDisallowAll":   2,
	"PrivacyTypeAllowUsers":    101,
	"PrivacyTypeDisallowUsers": 102,
}

func (x PrivacyType) Enum() *PrivacyType {
	p := new(PrivacyType)
	*p = x
	return p
}

func (x PrivacyType) String() string {
	return proto.EnumName(PrivacyType_name, int32(x))
}

func (x *PrivacyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PrivacyType_value, data, "PrivacyType")
	if err != nil {
		return err
	}
	*x = PrivacyType(value)
	return nil
}

func (PrivacyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{10}
}

// Ping
type Ping struct {
	ID int64 `protobuf:"varint,1,req,name=ID" json:"ID"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{0}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return m.Size()
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

// Pong
type Pong struct {
	ID int64 `protobuf:"varint,2,req,name=ID" json:"ID"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{1}
}
func (m *Pong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return m.Size()
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

// MessageEnvelope
// This type of message will be used to contain another ProtoBuffer Message inside
type MessageEnvelope struct {
	Constructor int64      `protobuf:"varint,1,req,name=Constructor" json:"Constructor"`
	RequestID   uint64     `protobuf:"fixed64,2,req,name=RequestID" json:"RequestID"`
	Message     []byte     `protobuf:"bytes,4,req,name=Message" json:"Message"`
	Team        *InputTeam `protobuf:"bytes,5,opt,name=Team" json:"Team,omitempty"`
}

func (m *MessageEnvelope) Reset()         { *m = MessageEnvelope{} }
func (m *MessageEnvelope) String() string { return proto.CompactTextString(m) }
func (*MessageEnvelope) ProtoMessage()    {}
func (*MessageEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{2}
}
func (m *MessageEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageEnvelope.Merge(m, src)
}
func (m *MessageEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *MessageEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_MessageEnvelope proto.InternalMessageInfo

func (m *MessageEnvelope) GetConstructor() int64 {
	if m != nil {
		return m.Constructor
	}
	return 0
}

func (m *MessageEnvelope) GetRequestID() uint64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *MessageEnvelope) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *MessageEnvelope) GetTeam() *InputTeam {
	if m != nil {
		return m.Team
	}
	return nil
}

// MessageContainer
// This type of message will be used to send multi messages inside a single container message
type MessageContainer struct {
	Length    int32              `protobuf:"varint,1,req,name=Length" json:"Length"`
	Envelopes []*MessageEnvelope `protobuf:"bytes,2,rep,name=Envelopes" json:"Envelopes,omitempty"`
}

func (m *MessageContainer) Reset()         { *m = MessageContainer{} }
func (m *MessageContainer) String() string { return proto.CompactTextString(m) }
func (*MessageContainer) ProtoMessage()    {}
func (*MessageContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{3}
}
func (m *MessageContainer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageContainer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageContainer.Merge(m, src)
}
func (m *MessageContainer) XXX_Size() int {
	return m.Size()
}
func (m *MessageContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageContainer.DiscardUnknown(m)
}

var xxx_messageInfo_MessageContainer proto.InternalMessageInfo

func (m *MessageContainer) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *MessageContainer) GetEnvelopes() []*MessageEnvelope {
	if m != nil {
		return m.Envelopes
	}
	return nil
}

// UpdateEnvelope
type UpdateEnvelope struct {
	Constructor int64  `protobuf:"varint,1,req,name=Constructor" json:"Constructor"`
	Update      []byte `protobuf:"bytes,2,req,name=Update" json:"Update"`
	UCount      int32  `protobuf:"varint,3,req,name=UCount" json:"UCount"`
	UpdateID    int64  `protobuf:"varint,4,req,name=UpdateID" json:"UpdateID"`
	Timestamp   int64  `protobuf:"varint,5,req,name=Timestamp" json:"Timestamp"`
}

func (m *UpdateEnvelope) Reset()         { *m = UpdateEnvelope{} }
func (m *UpdateEnvelope) String() string { return proto.CompactTextString(m) }
func (*UpdateEnvelope) ProtoMessage()    {}
func (*UpdateEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{4}
}
func (m *UpdateEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEnvelope.Merge(m, src)
}
func (m *UpdateEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEnvelope proto.InternalMessageInfo

func (m *UpdateEnvelope) GetConstructor() int64 {
	if m != nil {
		return m.Constructor
	}
	return 0
}

func (m *UpdateEnvelope) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateEnvelope) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateEnvelope) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateEnvelope) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// UpdateContainer
// It is very similar to MessageContainer but holding a list of Updates
type UpdateContainer struct {
	Length      int32             `protobuf:"varint,1,req,name=Length" json:"Length"`
	Updates     []*UpdateEnvelope `protobuf:"bytes,2,rep,name=Updates" json:"Updates,omitempty"`
	MinUpdateID int64             `protobuf:"varint,3,req,name=MinUpdateID" json:"MinUpdateID"`
	MaxUpdateID int64             `protobuf:"varint,4,req,name=MaxUpdateID" json:"MaxUpdateID"`
	Users       []*User           `protobuf:"bytes,5,rep,name=Users" json:"Users,omitempty"`
	Groups      []*Group          `protobuf:"bytes,6,rep,name=Groups" json:"Groups,omitempty"`
}

func (m *UpdateContainer) Reset()         { *m = UpdateContainer{} }
func (m *UpdateContainer) String() string { return proto.CompactTextString(m) }
func (*UpdateContainer) ProtoMessage()    {}
func (*UpdateContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{5}
}
func (m *UpdateContainer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateContainer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContainer.Merge(m, src)
}
func (m *UpdateContainer) XXX_Size() int {
	return m.Size()
}
func (m *UpdateContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContainer.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContainer proto.InternalMessageInfo

func (m *UpdateContainer) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *UpdateContainer) GetUpdates() []*UpdateEnvelope {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *UpdateContainer) GetMinUpdateID() int64 {
	if m != nil {
		return m.MinUpdateID
	}
	return 0
}

func (m *UpdateContainer) GetMaxUpdateID() int64 {
	if m != nil {
		return m.MaxUpdateID
	}
	return 0
}

func (m *UpdateContainer) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UpdateContainer) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// ProtoMessage
// If AuthID == 0 then Payload is a MessageEnvelop otherwise Payload is a ProtoEncryptedPayload
type ProtoMessage struct {
	AuthID     int64  `protobuf:"varint,1,opt,name=AuthID" json:"AuthID"`
	MessageKey []byte `protobuf:"bytes,2,opt,name=MessageKey" json:"MessageKey"`
	Payload    []byte `protobuf:"bytes,3,req,name=Payload" json:"Payload"`
}

func (m *ProtoMessage) Reset()         { *m = ProtoMessage{} }
func (m *ProtoMessage) String() string { return proto.CompactTextString(m) }
func (*ProtoMessage) ProtoMessage()    {}
func (*ProtoMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{6}
}
func (m *ProtoMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtoMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtoMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoMessage.Merge(m, src)
}
func (m *ProtoMessage) XXX_Size() int {
	return m.Size()
}
func (m *ProtoMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoMessage proto.InternalMessageInfo

func (m *ProtoMessage) GetAuthID() int64 {
	if m != nil {
		return m.AuthID
	}
	return 0
}

func (m *ProtoMessage) GetMessageKey() []byte {
	if m != nil {
		return m.MessageKey
	}
	return nil
}

func (m *ProtoMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// ProtoMessageEncryptedPayload
type ProtoEncryptedPayload struct {
	ServerSalt int64            `protobuf:"varint,1,req,name=ServerSalt" json:"ServerSalt"`
	MessageID  uint64           `protobuf:"varint,2,req,name=MessageID" json:"MessageID"`
	SessionID  int64            `protobuf:"varint,3,req,name=SessionID" json:"SessionID"`
	Envelope   *MessageEnvelope `protobuf:"bytes,4,req,name=Envelope" json:"Envelope,omitempty"`
}

func (m *ProtoEncryptedPayload) Reset()         { *m = ProtoEncryptedPayload{} }
func (m *ProtoEncryptedPayload) String() string { return proto.CompactTextString(m) }
func (*ProtoEncryptedPayload) ProtoMessage()    {}
func (*ProtoEncryptedPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{7}
}
func (m *ProtoEncryptedPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoEncryptedPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtoEncryptedPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtoEncryptedPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoEncryptedPayload.Merge(m, src)
}
func (m *ProtoEncryptedPayload) XXX_Size() int {
	return m.Size()
}
func (m *ProtoEncryptedPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoEncryptedPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoEncryptedPayload proto.InternalMessageInfo

func (m *ProtoEncryptedPayload) GetServerSalt() int64 {
	if m != nil {
		return m.ServerSalt
	}
	return 0
}

func (m *ProtoEncryptedPayload) GetMessageID() uint64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *ProtoEncryptedPayload) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *ProtoEncryptedPayload) GetEnvelope() *MessageEnvelope {
	if m != nil {
		return m.Envelope
	}
	return nil
}

// Error
type Error struct {
	Code  string `protobuf:"bytes,1,req,name=Code" json:"Code"`
	Items string `protobuf:"bytes,2,req,name=Items" json:"Items"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{8}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Error) GetItems() string {
	if m != nil {
		return m.Items
	}
	return ""
}

// Ack
type Ack struct {
	MessageIDs []uint64 `protobuf:"varint,1,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{9}
}
func (m *Ack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return m.Size()
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetMessageIDs() []uint64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

// Bool
type Bool struct {
	Result bool `protobuf:"varint,1,req,name=Result" json:"Result"`
}

func (m *Bool) Reset()         { *m = Bool{} }
func (m *Bool) String() string { return proto.CompactTextString(m) }
func (*Bool) ProtoMessage()    {}
func (*Bool) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{10}
}
func (m *Bool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bool.Merge(m, src)
}
func (m *Bool) XXX_Size() int {
	return m.Size()
}
func (m *Bool) XXX_DiscardUnknown() {
	xxx_messageInfo_Bool.DiscardUnknown(m)
}

var xxx_messageInfo_Bool proto.InternalMessageInfo

func (m *Bool) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// Dialog
type Dialog struct {
	PeerID          int64               `protobuf:"varint,1,req,name=PeerID" json:"PeerID"`
	PeerType        int32               `protobuf:"varint,2,req,name=PeerType" json:"PeerType"`
	TopMessageID    int64               `protobuf:"varint,3,req,name=TopMessageID" json:"TopMessageID"`
	ReadInboxMaxID  int64               `protobuf:"varint,4,req,name=ReadInboxMaxID" json:"ReadInboxMaxID"`
	ReadOutboxMaxID int64               `protobuf:"varint,5,req,name=ReadOutboxMaxID" json:"ReadOutboxMaxID"`
	UnreadCount     int32               `protobuf:"varint,6,req,name=UnreadCount" json:"UnreadCount"`
	AccessHash      uint64              `protobuf:"fixed64,7,req,name=AccessHash" json:"AccessHash"`
	NotifySettings  *PeerNotifySettings `protobuf:"bytes,8,opt,name=NotifySettings" json:"NotifySettings,omitempty"`
	MentionedCount  int32               `protobuf:"varint,9,opt,name=MentionedCount" json:"MentionedCount"`
	Pinned          bool                `protobuf:"varint,10,req,name=Pinned" json:"Pinned"`
	Draft           *DraftMessage       `protobuf:"bytes,11,opt,name=Draft" json:"Draft,omitempty"`
}

func (m *Dialog) Reset()         { *m = Dialog{} }
func (m *Dialog) String() string { return proto.CompactTextString(m) }
func (*Dialog) ProtoMessage()    {}
func (*Dialog) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{11}
}
func (m *Dialog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dialog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dialog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dialog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dialog.Merge(m, src)
}
func (m *Dialog) XXX_Size() int {
	return m.Size()
}
func (m *Dialog) XXX_DiscardUnknown() {
	xxx_messageInfo_Dialog.DiscardUnknown(m)
}

var xxx_messageInfo_Dialog proto.InternalMessageInfo

func (m *Dialog) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *Dialog) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *Dialog) GetTopMessageID() int64 {
	if m != nil {
		return m.TopMessageID
	}
	return 0
}

func (m *Dialog) GetReadInboxMaxID() int64 {
	if m != nil {
		return m.ReadInboxMaxID
	}
	return 0
}

func (m *Dialog) GetReadOutboxMaxID() int64 {
	if m != nil {
		return m.ReadOutboxMaxID
	}
	return 0
}

func (m *Dialog) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *Dialog) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *Dialog) GetNotifySettings() *PeerNotifySettings {
	if m != nil {
		return m.NotifySettings
	}
	return nil
}

func (m *Dialog) GetMentionedCount() int32 {
	if m != nil {
		return m.MentionedCount
	}
	return 0
}

func (m *Dialog) GetPinned() bool {
	if m != nil {
		return m.Pinned
	}
	return false
}

func (m *Dialog) GetDraft() *DraftMessage {
	if m != nil {
		return m.Draft
	}
	return nil
}

// InputPeer
type InputPeer struct {
	ID         int64    `protobuf:"varint,1,req,name=ID" json:"ID"`
	Type       PeerType `protobuf:"varint,2,req,name=Type,enum=msg.PeerType" json:"Type"`
	AccessHash uint64   `protobuf:"fixed64,3,req,name=AccessHash" json:"AccessHash"`
}

func (m *InputPeer) Reset()         { *m = InputPeer{} }
func (m *InputPeer) String() string { return proto.CompactTextString(m) }
func (*InputPeer) ProtoMessage()    {}
func (*InputPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{12}
}
func (m *InputPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InputPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InputPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputPeer.Merge(m, src)
}
func (m *InputPeer) XXX_Size() int {
	return m.Size()
}
func (m *InputPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_InputPeer.DiscardUnknown(m)
}

var xxx_messageInfo_InputPeer proto.InternalMessageInfo

func (m *InputPeer) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *InputPeer) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return PeerSelf
}

func (m *InputPeer) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// Peer
type Peer struct {
	ID         int64  `protobuf:"varint,1,req,name=ID" json:"ID"`
	Type       int32  `protobuf:"varint,2,req,name=Type" json:"Type"`
	AccessHash uint64 `protobuf:"fixed64,3,req,name=AccessHash" json:"AccessHash"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{13}
}
func (m *Peer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(m, src)
}
func (m *Peer) XXX_Size() int {
	return m.Size()
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Peer) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Peer) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// InputPassword
type InputPassword struct {
	SrpID int64  `protobuf:"varint,1,req,name=SrpID" json:"SrpID"`
	A     []byte `protobuf:"bytes,2,req,name=A" json:"A"`
	M1    []byte `protobuf:"bytes,3,req,name=M1" json:"M1"`
}

func (m *InputPassword) Reset()         { *m = InputPassword{} }
func (m *InputPassword) String() string { return proto.CompactTextString(m) }
func (*InputPassword) ProtoMessage()    {}
func (*InputPassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{14}
}
func (m *InputPassword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputPassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InputPassword.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InputPassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputPassword.Merge(m, src)
}
func (m *InputPassword) XXX_Size() int {
	return m.Size()
}
func (m *InputPassword) XXX_DiscardUnknown() {
	xxx_messageInfo_InputPassword.DiscardUnknown(m)
}

var xxx_messageInfo_InputPassword proto.InternalMessageInfo

func (m *InputPassword) GetSrpID() int64 {
	if m != nil {
		return m.SrpID
	}
	return 0
}

func (m *InputPassword) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *InputPassword) GetM1() []byte {
	if m != nil {
		return m.M1
	}
	return nil
}

// InputFileLocation
type InputFileLocation struct {
	ClusterID  int32  `protobuf:"varint,1,req,name=ClusterID" json:"ClusterID"`
	FileID     int64  `protobuf:"varint,2,req,name=FileID" json:"FileID"`
	AccessHash uint64 `protobuf:"fixed64,3,req,name=AccessHash" json:"AccessHash"`
	Version    int32  `protobuf:"varint,4,opt,name=Version" json:"Version"`
}

func (m *InputFileLocation) Reset()         { *m = InputFileLocation{} }
func (m *InputFileLocation) String() string { return proto.CompactTextString(m) }
func (*InputFileLocation) ProtoMessage()    {}
func (*InputFileLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{15}
}
func (m *InputFileLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputFileLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InputFileLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InputFileLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputFileLocation.Merge(m, src)
}
func (m *InputFileLocation) XXX_Size() int {
	return m.Size()
}
func (m *InputFileLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_InputFileLocation.DiscardUnknown(m)
}

var xxx_messageInfo_InputFileLocation proto.InternalMessageInfo

func (m *InputFileLocation) GetClusterID() int32 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *InputFileLocation) GetFileID() int64 {
	if m != nil {
		return m.FileID
	}
	return 0
}

func (m *InputFileLocation) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *InputFileLocation) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// FileLocation
type FileLocation struct {
	ClusterID  int32  `protobuf:"varint,1,req,name=ClusterID" json:"ClusterID"`
	FileID     int64  `protobuf:"varint,2,req,name=FileID" json:"FileID"`
	AccessHash uint64 `protobuf:"fixed64,3,req,name=AccessHash" json:"AccessHash"`
}

func (m *FileLocation) Reset()         { *m = FileLocation{} }
func (m *FileLocation) String() string { return proto.CompactTextString(m) }
func (*FileLocation) ProtoMessage()    {}
func (*FileLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{16}
}
func (m *FileLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileLocation.Merge(m, src)
}
func (m *FileLocation) XXX_Size() int {
	return m.Size()
}
func (m *FileLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_FileLocation.DiscardUnknown(m)
}

var xxx_messageInfo_FileLocation proto.InternalMessageInfo

func (m *FileLocation) GetClusterID() int32 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *FileLocation) GetFileID() int64 {
	if m != nil {
		return m.FileID
	}
	return 0
}

func (m *FileLocation) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// UserPhoto
type UserPhoto struct {
	PhotoBig   *FileLocation `protobuf:"bytes,1,req,name=PhotoBig" json:"PhotoBig,omitempty"`
	PhotoSmall *FileLocation `protobuf:"bytes,2,req,name=PhotoSmall" json:"PhotoSmall,omitempty"`
	PhotoID    int64         `protobuf:"varint,3,req,name=PhotoID" json:"PhotoID"`
}

func (m *UserPhoto) Reset()         { *m = UserPhoto{} }
func (m *UserPhoto) String() string { return proto.CompactTextString(m) }
func (*UserPhoto) ProtoMessage()    {}
func (*UserPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{17}
}
func (m *UserPhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPhoto.Merge(m, src)
}
func (m *UserPhoto) XXX_Size() int {
	return m.Size()
}
func (m *UserPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_UserPhoto proto.InternalMessageInfo

func (m *UserPhoto) GetPhotoBig() *FileLocation {
	if m != nil {
		return m.PhotoBig
	}
	return nil
}

func (m *UserPhoto) GetPhotoSmall() *FileLocation {
	if m != nil {
		return m.PhotoSmall
	}
	return nil
}

func (m *UserPhoto) GetPhotoID() int64 {
	if m != nil {
		return m.PhotoID
	}
	return 0
}

// InputUser
type InputUser struct {
	UserID     int64  `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	AccessHash uint64 `protobuf:"fixed64,2,req,name=AccessHash" json:"AccessHash"`
}

func (m *InputUser) Reset()         { *m = InputUser{} }
func (m *InputUser) String() string { return proto.CompactTextString(m) }
func (*InputUser) ProtoMessage()    {}
func (*InputUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{18}
}
func (m *InputUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InputUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InputUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputUser.Merge(m, src)
}
func (m *InputUser) XXX_Size() int {
	return m.Size()
}
func (m *InputUser) XXX_DiscardUnknown() {
	xxx_messageInfo_InputUser.DiscardUnknown(m)
}

var xxx_messageInfo_InputUser proto.InternalMessageInfo

func (m *InputUser) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *InputUser) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// User
type User struct {
	ID           int64        `protobuf:"varint,1,req,name=ID" json:"ID"`
	FirstName    string       `protobuf:"bytes,2,req,name=FirstName" json:"FirstName"`
	LastName     string       `protobuf:"bytes,3,req,name=LastName" json:"LastName"`
	Username     string       `protobuf:"bytes,4,opt,name=Username" json:"Username"`
	Status       UserStatus   `protobuf:"varint,5,req,name=Status,enum=msg.UserStatus" json:"Status"`
	Restricted   bool         `protobuf:"varint,6,req,name=Restricted" json:"Restricted"`
	AccessHash   uint64       `protobuf:"fixed64,7,req,name=AccessHash" json:"AccessHash"`
	Photo        *UserPhoto   `protobuf:"bytes,8,opt,name=Photo" json:"Photo,omitempty"`
	Bio          string       `protobuf:"bytes,9,opt,name=Bio" json:"Bio"`
	Phone        string       `protobuf:"bytes,10,opt,name=Phone" json:"Phone"`
	LastSeen     int64        `protobuf:"varint,11,opt,name=LastSeen" json:"LastSeen"`
	PhotoGallery []*UserPhoto `protobuf:"bytes,12,rep,name=PhotoGallery" json:"PhotoGallery,omitempty"`
	IsBot        bool         `protobuf:"varint,13,opt,name=IsBot" json:"IsBot"`
	Deleted      bool         `protobuf:"varint,14,opt,name=Deleted" json:"Deleted"`
	Blocked      bool         `protobuf:"varint,15,opt,name=Blocked" json:"Blocked"`
	BotInfo      *BotInfo     `protobuf:"bytes,16,opt,name=BotInfo" json:"BotInfo,omitempty"`
	Official     bool         `protobuf:"varint,17,opt,name=Official" json:"Official"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{19}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetStatus() UserStatus {
	if m != nil {
		return m.Status
	}
	return UserStatusOffline
}

func (m *User) GetRestricted() bool {
	if m != nil {
		return m.Restricted
	}
	return false
}

func (m *User) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *User) GetPhoto() *UserPhoto {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *User) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *User) GetLastSeen() int64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func (m *User) GetPhotoGallery() []*UserPhoto {
	if m != nil {
		return m.PhotoGallery
	}
	return nil
}

func (m *User) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *User) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *User) GetBlocked() bool {
	if m != nil {
		return m.Blocked
	}
	return false
}

func (m *User) GetBotInfo() *BotInfo {
	if m != nil {
		return m.BotInfo
	}
	return nil
}

func (m *User) GetOfficial() bool {
	if m != nil {
		return m.Official
	}
	return false
}

// ContactUser
type ContactUser struct {
	ID         int64      `protobuf:"varint,1,req,name=ID" json:"ID"`
	FirstName  string     `protobuf:"bytes,2,req,name=FirstName" json:"FirstName"`
	LastName   string     `protobuf:"bytes,3,req,name=LastName" json:"LastName"`
	AccessHash uint64     `protobuf:"fixed64,4,req,name=AccessHash" json:"AccessHash"`
	Phone      string     `protobuf:"bytes,5,req,name=Phone" json:"Phone"`
	Username   string     `protobuf:"bytes,6,req,name=Username" json:"Username"`
	ClientID   int64      `protobuf:"varint,7,req,name=ClientID" json:"ClientID"`
	Photo      *UserPhoto `protobuf:"bytes,8,opt,name=Photo" json:"Photo,omitempty"`
}

func (m *ContactUser) Reset()         { *m = ContactUser{} }
func (m *ContactUser) String() string { return proto.CompactTextString(m) }
func (*ContactUser) ProtoMessage()    {}
func (*ContactUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{20}
}
func (m *ContactUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactUser.Merge(m, src)
}
func (m *ContactUser) XXX_Size() int {
	return m.Size()
}
func (m *ContactUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactUser.DiscardUnknown(m)
}

var xxx_messageInfo_ContactUser proto.InternalMessageInfo

func (m *ContactUser) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ContactUser) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *ContactUser) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *ContactUser) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ContactUser) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ContactUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ContactUser) GetClientID() int64 {
	if m != nil {
		return m.ClientID
	}
	return 0
}

func (m *ContactUser) GetPhoto() *UserPhoto {
	if m != nil {
		return m.Photo
	}
	return nil
}

// Bot
type Bot struct {
	ID       int64  `protobuf:"varint,1,req,name=ID" json:"ID"`
	Name     string `protobuf:"bytes,2,req,name=Name" json:"Name"`
	Username string `protobuf:"bytes,3,req,name=Username" json:"Username"`
	Bio      string `protobuf:"bytes,4,opt,name=Bio" json:"Bio"`
}

func (m *Bot) Reset()         { *m = Bot{} }
func (m *Bot) String() string { return proto.CompactTextString(m) }
func (*Bot) ProtoMessage()    {}
func (*Bot) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{21}
}
func (m *Bot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bot.Merge(m, src)
}
func (m *Bot) XXX_Size() int {
	return m.Size()
}
func (m *Bot) XXX_DiscardUnknown() {
	xxx_messageInfo_Bot.DiscardUnknown(m)
}

var xxx_messageInfo_Bot proto.InternalMessageInfo

func (m *Bot) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Bot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Bot) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Bot) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

// BotCommands
type BotCommands struct {
	Command     string `protobuf:"bytes,1,req,name=Command" json:"Command"`
	Description string `protobuf:"bytes,2,opt,name=Description" json:"Description"`
}

func (m *BotCommands) Reset()         { *m = BotCommands{} }
func (m *BotCommands) String() string { return proto.CompactTextString(m) }
func (*BotCommands) ProtoMessage()    {}
func (*BotCommands) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{22}
}
func (m *BotCommands) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotCommands) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BotCommands.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BotCommands) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotCommands.Merge(m, src)
}
func (m *BotCommands) XXX_Size() int {
	return m.Size()
}
func (m *BotCommands) XXX_DiscardUnknown() {
	xxx_messageInfo_BotCommands.DiscardUnknown(m)
}

var xxx_messageInfo_BotCommands proto.InternalMessageInfo

func (m *BotCommands) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *BotCommands) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// BotInfo
type BotInfo struct {
	Bot               *Bot           `protobuf:"bytes,1,req,name=Bot" json:"Bot,omitempty"`
	UserID            int64          `protobuf:"varint,2,req,name=UserID" json:"UserID"`
	Description       string         `protobuf:"bytes,3,opt,name=Description" json:"Description"`
	BotCommands       []*BotCommands `protobuf:"bytes,4,rep,name=BotCommands" json:"BotCommands,omitempty"`
	InlineGeo         bool           `protobuf:"varint,5,opt,name=InlineGeo" json:"InlineGeo"`
	InlinePlaceHolder string         `protobuf:"bytes,6,opt,name=InlinePlaceHolder" json:"InlinePlaceHolder"`
	InlineQuery       bool           `protobuf:"varint,7,opt,name=InlineQuery" json:"InlineQuery"`
}

func (m *BotInfo) Reset()         { *m = BotInfo{} }
func (m *BotInfo) String() string { return proto.CompactTextString(m) }
func (*BotInfo) ProtoMessage()    {}
func (*BotInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{23}
}
func (m *BotInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BotInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BotInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotInfo.Merge(m, src)
}
func (m *BotInfo) XXX_Size() int {
	return m.Size()
}
func (m *BotInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BotInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BotInfo proto.InternalMessageInfo

func (m *BotInfo) GetBot() *Bot {
	if m != nil {
		return m.Bot
	}
	return nil
}

func (m *BotInfo) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *BotInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BotInfo) GetBotCommands() []*BotCommands {
	if m != nil {
		return m.BotCommands
	}
	return nil
}

func (m *BotInfo) GetInlineGeo() bool {
	if m != nil {
		return m.InlineGeo
	}
	return false
}

func (m *BotInfo) GetInlinePlaceHolder() string {
	if m != nil {
		return m.InlinePlaceHolder
	}
	return ""
}

func (m *BotInfo) GetInlineQuery() bool {
	if m != nil {
		return m.InlineQuery
	}
	return false
}

// GroupPhoto
type GroupPhoto struct {
	PhotoBig   *FileLocation `protobuf:"bytes,1,req,name=PhotoBig" json:"PhotoBig,omitempty"`
	PhotoSmall *FileLocation `protobuf:"bytes,2,req,name=PhotoSmall" json:"PhotoSmall,omitempty"`
	PhotoID    int64         `protobuf:"varint,3,opt,name=PhotoID" json:"PhotoID"`
}

func (m *GroupPhoto) Reset()         { *m = GroupPhoto{} }
func (m *GroupPhoto) String() string { return proto.CompactTextString(m) }
func (*GroupPhoto) ProtoMessage()    {}
func (*GroupPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{24}
}
func (m *GroupPhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupPhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupPhoto.Merge(m, src)
}
func (m *GroupPhoto) XXX_Size() int {
	return m.Size()
}
func (m *GroupPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_GroupPhoto proto.InternalMessageInfo

func (m *GroupPhoto) GetPhotoBig() *FileLocation {
	if m != nil {
		return m.PhotoBig
	}
	return nil
}

func (m *GroupPhoto) GetPhotoSmall() *FileLocation {
	if m != nil {
		return m.PhotoSmall
	}
	return nil
}

func (m *GroupPhoto) GetPhotoID() int64 {
	if m != nil {
		return m.PhotoID
	}
	return 0
}

// Group
type Group struct {
	ID           int64        `protobuf:"varint,1,req,name=ID" json:"ID"`
	Title        string       `protobuf:"bytes,2,req,name=Title" json:"Title"`
	CreatedOn    int64        `protobuf:"varint,3,req,name=CreatedOn" json:"CreatedOn"`
	Participants int32        `protobuf:"varint,4,req,name=Participants" json:"Participants"`
	EditedOn     int64        `protobuf:"varint,5,opt,name=EditedOn" json:"EditedOn"`
	Flags        []GroupFlags `protobuf:"varint,6,rep,name=Flags,enum=msg.GroupFlags" json:"Flags,omitempty"`
	Photo        *GroupPhoto  `protobuf:"bytes,7,opt,name=Photo" json:"Photo,omitempty"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{25}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Group) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Group) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *Group) GetParticipants() int32 {
	if m != nil {
		return m.Participants
	}
	return 0
}

func (m *Group) GetEditedOn() int64 {
	if m != nil {
		return m.EditedOn
	}
	return 0
}

func (m *Group) GetFlags() []GroupFlags {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *Group) GetPhoto() *GroupPhoto {
	if m != nil {
		return m.Photo
	}
	return nil
}

// GroupFull
type GroupFull struct {
	Group          *Group              `protobuf:"bytes,1,req,name=Group" json:"Group,omitempty"`
	Users          []*User             `protobuf:"bytes,2,rep,name=Users" json:"Users,omitempty"`
	Participants   []*GroupParticipant `protobuf:"bytes,3,rep,name=Participants" json:"Participants,omitempty"`
	NotifySettings *PeerNotifySettings `protobuf:"bytes,4,req,name=NotifySettings" json:"NotifySettings,omitempty"`
	PhotoGallery   []*GroupPhoto       `protobuf:"bytes,5,rep,name=PhotoGallery" json:"PhotoGallery,omitempty"`
}

func (m *GroupFull) Reset()         { *m = GroupFull{} }
func (m *GroupFull) String() string { return proto.CompactTextString(m) }
func (*GroupFull) ProtoMessage()    {}
func (*GroupFull) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{26}
}
func (m *GroupFull) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupFull) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupFull.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupFull) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupFull.Merge(m, src)
}
func (m *GroupFull) XXX_Size() int {
	return m.Size()
}
func (m *GroupFull) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupFull.DiscardUnknown(m)
}

var xxx_messageInfo_GroupFull proto.InternalMessageInfo

func (m *GroupFull) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *GroupFull) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GroupFull) GetParticipants() []*GroupParticipant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *GroupFull) GetNotifySettings() *PeerNotifySettings {
	if m != nil {
		return m.NotifySettings
	}
	return nil
}

func (m *GroupFull) GetPhotoGallery() []*GroupPhoto {
	if m != nil {
		return m.PhotoGallery
	}
	return nil
}

// GroupParticipant
type GroupParticipant struct {
	UserID     int64           `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	FirstName  string          `protobuf:"bytes,2,req,name=FirstName" json:"FirstName"`
	LastName   string          `protobuf:"bytes,3,req,name=LastName" json:"LastName"`
	Type       ParticipantType `protobuf:"varint,4,req,name=Type,enum=msg.ParticipantType" json:"Type"`
	AccessHash uint64          `protobuf:"varint,5,req,name=AccessHash" json:"AccessHash"`
	Username   string          `protobuf:"bytes,6,req,name=Username" json:"Username"`
	Photo      *UserPhoto      `protobuf:"bytes,8,opt,name=Photo" json:"Photo,omitempty"`
}

func (m *GroupParticipant) Reset()         { *m = GroupParticipant{} }
func (m *GroupParticipant) String() string { return proto.CompactTextString(m) }
func (*GroupParticipant) ProtoMessage()    {}
func (*GroupParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{27}
}
func (m *GroupParticipant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupParticipant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupParticipant.Merge(m, src)
}
func (m *GroupParticipant) XXX_Size() int {
	return m.Size()
}
func (m *GroupParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_GroupParticipant proto.InternalMessageInfo

func (m *GroupParticipant) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *GroupParticipant) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *GroupParticipant) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *GroupParticipant) GetType() ParticipantType {
	if m != nil {
		return m.Type
	}
	return ParticipantTypeMember
}

func (m *GroupParticipant) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GroupParticipant) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GroupParticipant) GetPhoto() *UserPhoto {
	if m != nil {
		return m.Photo
	}
	return nil
}

// UserMessage
type UserMessage struct {
	ID                  int64            `protobuf:"varint,1,req,name=ID" json:"ID"`
	PeerID              int64            `protobuf:"varint,2,req,name=PeerID" json:"PeerID"`
	PeerType            int32            `protobuf:"varint,3,req,name=PeerType" json:"PeerType"`
	CreatedOn           int64            `protobuf:"varint,4,req,name=CreatedOn" json:"CreatedOn"`
	EditedOn            int64            `protobuf:"varint,5,req,name=EditedOn" json:"EditedOn"`
	FwdSenderID         int64            `protobuf:"varint,6,req,name=FwdSenderID" json:"FwdSenderID"`
	FwdChannelID        int64            `protobuf:"varint,7,req,name=FwdChannelID" json:"FwdChannelID"`
	FwdChannelMessageID int64            `protobuf:"varint,8,req,name=FwdChannelMessageID" json:"FwdChannelMessageID"`
	Flags               int32            `protobuf:"varint,9,req,name=Flags" json:"Flags"`
	MessageType         int64            `protobuf:"varint,10,req,name=MessageType" json:"MessageType"`
	Body                string           `protobuf:"bytes,11,req,name=Body" json:"Body"`
	SenderID            int64            `protobuf:"varint,12,req,name=SenderID" json:"SenderID"`
	ContentRead         bool             `protobuf:"varint,13,req,name=ContentRead" json:"ContentRead"`
	Inbox               bool             `protobuf:"varint,14,req,name=Inbox" json:"Inbox"`
	ReplyTo             int64            `protobuf:"varint,15,req,name=ReplyTo" json:"ReplyTo"`
	MessageAction       int32            `protobuf:"varint,16,opt,name=MessageAction" json:"MessageAction"`
	MessageActionData   []byte           `protobuf:"bytes,17,opt,name=MessageActionData" json:"MessageActionData"`
	Entities            []*MessageEntity `protobuf:"bytes,18,rep,name=Entities" json:"Entities,omitempty"`
	MediaType           MediaType        `protobuf:"varint,19,opt,name=MediaType,enum=msg.MediaType" json:"MediaType"`
	Media               []byte           `protobuf:"bytes,20,opt,name=Media" json:"Media"`
	ReplyMarkup         int64            `protobuf:"varint,21,opt,name=ReplyMarkup" json:"ReplyMarkup"`
	ReplyMarkupData     []byte           `protobuf:"bytes,22,opt,name=ReplyMarkupData" json:"ReplyMarkupData"`
	LabelIDs            []int32          `protobuf:"varint,23,rep,name=LabelIDs" json:"LabelIDs,omitempty"`
	ViaBotID            int64            `protobuf:"varint,24,opt,name=ViaBotID" json:"ViaBotID"`
}

func (m *UserMessage) Reset()         { *m = UserMessage{} }
func (m *UserMessage) String() string { return proto.CompactTextString(m) }
func (*UserMessage) ProtoMessage()    {}
func (*UserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{28}
}
func (m *UserMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMessage.Merge(m, src)
}
func (m *UserMessage) XXX_Size() int {
	return m.Size()
}
func (m *UserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UserMessage proto.InternalMessageInfo

func (m *UserMessage) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserMessage) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *UserMessage) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *UserMessage) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *UserMessage) GetEditedOn() int64 {
	if m != nil {
		return m.EditedOn
	}
	return 0
}

func (m *UserMessage) GetFwdSenderID() int64 {
	if m != nil {
		return m.FwdSenderID
	}
	return 0
}

func (m *UserMessage) GetFwdChannelID() int64 {
	if m != nil {
		return m.FwdChannelID
	}
	return 0
}

func (m *UserMessage) GetFwdChannelMessageID() int64 {
	if m != nil {
		return m.FwdChannelMessageID
	}
	return 0
}

func (m *UserMessage) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *UserMessage) GetMessageType() int64 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *UserMessage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *UserMessage) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *UserMessage) GetContentRead() bool {
	if m != nil {
		return m.ContentRead
	}
	return false
}

func (m *UserMessage) GetInbox() bool {
	if m != nil {
		return m.Inbox
	}
	return false
}

func (m *UserMessage) GetReplyTo() int64 {
	if m != nil {
		return m.ReplyTo
	}
	return 0
}

func (m *UserMessage) GetMessageAction() int32 {
	if m != nil {
		return m.MessageAction
	}
	return 0
}

func (m *UserMessage) GetMessageActionData() []byte {
	if m != nil {
		return m.MessageActionData
	}
	return nil
}

func (m *UserMessage) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *UserMessage) GetMediaType() MediaType {
	if m != nil {
		return m.MediaType
	}
	return MediaTypeEmpty
}

func (m *UserMessage) GetMedia() []byte {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *UserMessage) GetReplyMarkup() int64 {
	if m != nil {
		return m.ReplyMarkup
	}
	return 0
}

func (m *UserMessage) GetReplyMarkupData() []byte {
	if m != nil {
		return m.ReplyMarkupData
	}
	return nil
}

func (m *UserMessage) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

func (m *UserMessage) GetViaBotID() int64 {
	if m != nil {
		return m.ViaBotID
	}
	return 0
}

// DraftMessage
type DraftMessage struct {
	PeerID   int64            `protobuf:"varint,2,req,name=PeerID" json:"PeerID"`
	PeerType int32            `protobuf:"varint,3,req,name=PeerType" json:"PeerType"`
	Date     int64            `protobuf:"varint,4,req,name=Date" json:"Date"`
	Body     string           `protobuf:"bytes,5,req,name=Body" json:"Body"`
	Entities []*MessageEntity `protobuf:"bytes,6,rep,name=Entities" json:"Entities,omitempty"`
	ReplyTo  int64            `protobuf:"varint,7,req,name=ReplyTo" json:"ReplyTo"`
	EditedID int64            `protobuf:"varint,8,opt,name=EditedID" json:"EditedID"`
}

func (m *DraftMessage) Reset()         { *m = DraftMessage{} }
func (m *DraftMessage) String() string { return proto.CompactTextString(m) }
func (*DraftMessage) ProtoMessage()    {}
func (*DraftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{29}
}
func (m *DraftMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DraftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DraftMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DraftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DraftMessage.Merge(m, src)
}
func (m *DraftMessage) XXX_Size() int {
	return m.Size()
}
func (m *DraftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DraftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DraftMessage proto.InternalMessageInfo

func (m *DraftMessage) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *DraftMessage) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *DraftMessage) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *DraftMessage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *DraftMessage) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *DraftMessage) GetReplyTo() int64 {
	if m != nil {
		return m.ReplyTo
	}
	return 0
}

func (m *DraftMessage) GetEditedID() int64 {
	if m != nil {
		return m.EditedID
	}
	return 0
}

// MessageEntity
type MessageEntity struct {
	Type   MessageEntityType `protobuf:"varint,1,req,name=Type,enum=msg.MessageEntityType" json:"Type"`
	Offset int32             `protobuf:"varint,2,req,name=Offset" json:"Offset"`
	Length int32             `protobuf:"varint,3,req,name=Length" json:"Length"`
	UserID int64             `protobuf:"varint,4,opt,name=UserID" json:"UserID"`
}

func (m *MessageEntity) Reset()         { *m = MessageEntity{} }
func (m *MessageEntity) String() string { return proto.CompactTextString(m) }
func (*MessageEntity) ProtoMessage()    {}
func (*MessageEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{30}
}
func (m *MessageEntity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageEntity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageEntity.Merge(m, src)
}
func (m *MessageEntity) XXX_Size() int {
	return m.Size()
}
func (m *MessageEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageEntity.DiscardUnknown(m)
}

var xxx_messageInfo_MessageEntity proto.InternalMessageInfo

func (m *MessageEntity) GetType() MessageEntityType {
	if m != nil {
		return m.Type
	}
	return MessageEntityTypeBold
}

func (m *MessageEntity) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *MessageEntity) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *MessageEntity) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

// RSAPublicKey
type RSAPublicKey struct {
	FingerPrint int64  `protobuf:"varint,1,req,name=FingerPrint" json:"FingerPrint"`
	N           string `protobuf:"bytes,2,req,name=N" json:"N"`
	E           uint32 `protobuf:"varint,3,req,name=E" json:"E"`
}

func (m *RSAPublicKey) Reset()         { *m = RSAPublicKey{} }
func (m *RSAPublicKey) String() string { return proto.CompactTextString(m) }
func (*RSAPublicKey) ProtoMessage()    {}
func (*RSAPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{31}
}
func (m *RSAPublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RSAPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RSAPublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RSAPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RSAPublicKey.Merge(m, src)
}
func (m *RSAPublicKey) XXX_Size() int {
	return m.Size()
}
func (m *RSAPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RSAPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_RSAPublicKey proto.InternalMessageInfo

func (m *RSAPublicKey) GetFingerPrint() int64 {
	if m != nil {
		return m.FingerPrint
	}
	return 0
}

func (m *RSAPublicKey) GetN() string {
	if m != nil {
		return m.N
	}
	return ""
}

func (m *RSAPublicKey) GetE() uint32 {
	if m != nil {
		return m.E
	}
	return 0
}

// DHGroup
type DHGroup struct {
	FingerPrint int64  `protobuf:"varint,1,req,name=FingerPrint" json:"FingerPrint"`
	Prime       string `protobuf:"bytes,2,req,name=Prime" json:"Prime"`
	Gen         int32  `protobuf:"varint,3,req,name=Gen" json:"Gen"`
}

func (m *DHGroup) Reset()         { *m = DHGroup{} }
func (m *DHGroup) String() string { return proto.CompactTextString(m) }
func (*DHGroup) ProtoMessage()    {}
func (*DHGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{32}
}
func (m *DHGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHGroup.Merge(m, src)
}
func (m *DHGroup) XXX_Size() int {
	return m.Size()
}
func (m *DHGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_DHGroup.DiscardUnknown(m)
}

var xxx_messageInfo_DHGroup proto.InternalMessageInfo

func (m *DHGroup) GetFingerPrint() int64 {
	if m != nil {
		return m.FingerPrint
	}
	return 0
}

func (m *DHGroup) GetPrime() string {
	if m != nil {
		return m.Prime
	}
	return ""
}

func (m *DHGroup) GetGen() int32 {
	if m != nil {
		return m.Gen
	}
	return 0
}

// PhoneContact
type PhoneContact struct {
	ClientID  int64  `protobuf:"varint,1,req,name=ClientID" json:"ClientID"`
	FirstName string `protobuf:"bytes,2,req,name=FirstName" json:"FirstName"`
	LastName  string `protobuf:"bytes,3,req,name=LastName" json:"LastName"`
	Phone     string `protobuf:"bytes,4,req,name=Phone" json:"Phone"`
}

func (m *PhoneContact) Reset()         { *m = PhoneContact{} }
func (m *PhoneContact) String() string { return proto.CompactTextString(m) }
func (*PhoneContact) ProtoMessage()    {}
func (*PhoneContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{33}
}
func (m *PhoneContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneContact.Merge(m, src)
}
func (m *PhoneContact) XXX_Size() int {
	return m.Size()
}
func (m *PhoneContact) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneContact.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneContact proto.InternalMessageInfo

func (m *PhoneContact) GetClientID() int64 {
	if m != nil {
		return m.ClientID
	}
	return 0
}

func (m *PhoneContact) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *PhoneContact) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *PhoneContact) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// PeerNotifySettings
type PeerNotifySettings struct {
	Flags     int32  `protobuf:"varint,1,req,name=Flags" json:"Flags"`
	MuteUntil int64  `protobuf:"varint,2,opt,name=MuteUntil" json:"MuteUntil"`
	Sound     string `protobuf:"bytes,3,opt,name=Sound" json:"Sound"`
}

func (m *PeerNotifySettings) Reset()         { *m = PeerNotifySettings{} }
func (m *PeerNotifySettings) String() string { return proto.CompactTextString(m) }
func (*PeerNotifySettings) ProtoMessage()    {}
func (*PeerNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{34}
}
func (m *PeerNotifySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerNotifySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerNotifySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerNotifySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerNotifySettings.Merge(m, src)
}
func (m *PeerNotifySettings) XXX_Size() int {
	return m.Size()
}
func (m *PeerNotifySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerNotifySettings.DiscardUnknown(m)
}

var xxx_messageInfo_PeerNotifySettings proto.InternalMessageInfo

func (m *PeerNotifySettings) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *PeerNotifySettings) GetMuteUntil() int64 {
	if m != nil {
		return m.MuteUntil
	}
	return 0
}

func (m *PeerNotifySettings) GetSound() string {
	if m != nil {
		return m.Sound
	}
	return ""
}

// InputFile
type InputFile struct {
	FileID      int64  `protobuf:"varint,1,req,name=FileID" json:"FileID"`
	TotalParts  int32  `protobuf:"varint,2,req,name=TotalParts" json:"TotalParts"`
	FileName    string `protobuf:"bytes,3,req,name=FileName" json:"FileName"`
	MD5Checksum string `protobuf:"bytes,4,req,name=MD5Checksum" json:"MD5Checksum"`
}

func (m *InputFile) Reset()         { *m = InputFile{} }
func (m *InputFile) String() string { return proto.CompactTextString(m) }
func (*InputFile) ProtoMessage()    {}
func (*InputFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{35}
}
func (m *InputFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InputFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InputFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputFile.Merge(m, src)
}
func (m *InputFile) XXX_Size() int {
	return m.Size()
}
func (m *InputFile) XXX_DiscardUnknown() {
	xxx_messageInfo_InputFile.DiscardUnknown(m)
}

var xxx_messageInfo_InputFile proto.InternalMessageInfo

func (m *InputFile) GetFileID() int64 {
	if m != nil {
		return m.FileID
	}
	return 0
}

func (m *InputFile) GetTotalParts() int32 {
	if m != nil {
		return m.TotalParts
	}
	return 0
}

func (m *InputFile) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *InputFile) GetMD5Checksum() string {
	if m != nil {
		return m.MD5Checksum
	}
	return ""
}

// InputDocument
type InputDocument struct {
	ID         int64  `protobuf:"varint,1,req,name=ID" json:"ID"`
	AccessHash uint64 `protobuf:"fixed64,2,req,name=AccessHash" json:"AccessHash"`
	ClusterID  int32  `protobuf:"varint,3,req,name=ClusterID" json:"ClusterID"`
}

func (m *InputDocument) Reset()         { *m = InputDocument{} }
func (m *InputDocument) String() string { return proto.CompactTextString(m) }
func (*InputDocument) ProtoMessage()    {}
func (*InputDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{36}
}
func (m *InputDocument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InputDocument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InputDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputDocument.Merge(m, src)
}
func (m *InputDocument) XXX_Size() int {
	return m.Size()
}
func (m *InputDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_InputDocument.DiscardUnknown(m)
}

var xxx_messageInfo_InputDocument proto.InternalMessageInfo

func (m *InputDocument) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *InputDocument) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *InputDocument) GetClusterID() int32 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

// PrivacyRule
type PrivacyRule struct {
	PrivacyType PrivacyType `protobuf:"varint,1,req,name=PrivacyType,enum=msg.PrivacyType" json:"PrivacyType"`
	UserIDs     []int64     `protobuf:"varint,2,rep,name=UserIDs" json:"UserIDs,omitempty"`
}

func (m *PrivacyRule) Reset()         { *m = PrivacyRule{} }
func (m *PrivacyRule) String() string { return proto.CompactTextString(m) }
func (*PrivacyRule) ProtoMessage()    {}
func (*PrivacyRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{37}
}
func (m *PrivacyRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivacyRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivacyRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivacyRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivacyRule.Merge(m, src)
}
func (m *PrivacyRule) XXX_Size() int {
	return m.Size()
}
func (m *PrivacyRule) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivacyRule.DiscardUnknown(m)
}

var xxx_messageInfo_PrivacyRule proto.InternalMessageInfo

func (m *PrivacyRule) GetPrivacyType() PrivacyType {
	if m != nil {
		return m.PrivacyType
	}
	return PrivacyTypeAllowAll
}

func (m *PrivacyRule) GetUserIDs() []int64 {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

// Label
type Label struct {
	ID     int32  `protobuf:"varint,1,req,name=ID" json:"ID"`
	Name   string `protobuf:"bytes,2,req,name=Name" json:"Name"`
	Colour string `protobuf:"bytes,3,req,name=Colour" json:"Colour"`
	Count  int32  `protobuf:"varint,4,opt,name=Count" json:"Count"`
}

func (m *Label) Reset()         { *m = Label{} }
func (m *Label) String() string { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()    {}
func (*Label) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{38}
}
func (m *Label) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Label) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Label.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Label) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Label.Merge(m, src)
}
func (m *Label) XXX_Size() int {
	return m.Size()
}
func (m *Label) XXX_DiscardUnknown() {
	xxx_messageInfo_Label.DiscardUnknown(m)
}

var xxx_messageInfo_Label proto.InternalMessageInfo

func (m *Label) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Label) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Label) GetColour() string {
	if m != nil {
		return m.Colour
	}
	return ""
}

func (m *Label) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// LabelsMany
type LabelsMany struct {
	Labels []*Label `protobuf:"bytes,1,rep,name=Labels" json:"Labels,omitempty"`
	Empty  bool     `protobuf:"varint,5,opt,name=Empty" json:"Empty"`
}

func (m *LabelsMany) Reset()         { *m = LabelsMany{} }
func (m *LabelsMany) String() string { return proto.CompactTextString(m) }
func (*LabelsMany) ProtoMessage()    {}
func (*LabelsMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{39}
}
func (m *LabelsMany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelsMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelsMany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelsMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelsMany.Merge(m, src)
}
func (m *LabelsMany) XXX_Size() int {
	return m.Size()
}
func (m *LabelsMany) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelsMany.DiscardUnknown(m)
}

var xxx_messageInfo_LabelsMany proto.InternalMessageInfo

func (m *LabelsMany) GetLabels() []*Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *LabelsMany) GetEmpty() bool {
	if m != nil {
		return m.Empty
	}
	return false
}

// InputGeoLocation
type InputGeoLocation struct {
	Lat  float32 `protobuf:"fixed32,1,req,name=Lat" json:"Lat"`
	Long float32 `protobuf:"fixed32,2,req,name=Long" json:"Long"`
}

func (m *InputGeoLocation) Reset()         { *m = InputGeoLocation{} }
func (m *InputGeoLocation) String() string { return proto.CompactTextString(m) }
func (*InputGeoLocation) ProtoMessage()    {}
func (*InputGeoLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{40}
}
func (m *InputGeoLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputGeoLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InputGeoLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InputGeoLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputGeoLocation.Merge(m, src)
}
func (m *InputGeoLocation) XXX_Size() int {
	return m.Size()
}
func (m *InputGeoLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_InputGeoLocation.DiscardUnknown(m)
}

var xxx_messageInfo_InputGeoLocation proto.InternalMessageInfo

func (m *InputGeoLocation) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *InputGeoLocation) GetLong() float32 {
	if m != nil {
		return m.Long
	}
	return 0
}

// GeoLocation
type GeoLocation struct {
	Lat  float32 `protobuf:"fixed32,1,req,name=Lat" json:"Lat"`
	Long float32 `protobuf:"fixed32,2,req,name=Long" json:"Long"`
}

func (m *GeoLocation) Reset()         { *m = GeoLocation{} }
func (m *GeoLocation) String() string { return proto.CompactTextString(m) }
func (*GeoLocation) ProtoMessage()    {}
func (*GeoLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{41}
}
func (m *GeoLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoLocation.Merge(m, src)
}
func (m *GeoLocation) XXX_Size() int {
	return m.Size()
}
func (m *GeoLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoLocation.DiscardUnknown(m)
}

var xxx_messageInfo_GeoLocation proto.InternalMessageInfo

func (m *GeoLocation) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *GeoLocation) GetLong() float32 {
	if m != nil {
		return m.Long
	}
	return 0
}

// InputTeam
type InputTeam struct {
	ID         int64  `protobuf:"varint,1,req,name=ID" json:"ID"`
	AccessHash uint64 `protobuf:"fixed64,2,req,name=AccessHash" json:"AccessHash"`
}

func (m *InputTeam) Reset()         { *m = InputTeam{} }
func (m *InputTeam) String() string { return proto.CompactTextString(m) }
func (*InputTeam) ProtoMessage()    {}
func (*InputTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{42}
}
func (m *InputTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InputTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InputTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputTeam.Merge(m, src)
}
func (m *InputTeam) XXX_Size() int {
	return m.Size()
}
func (m *InputTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_InputTeam.DiscardUnknown(m)
}

var xxx_messageInfo_InputTeam proto.InternalMessageInfo

func (m *InputTeam) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *InputTeam) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// Team
type Team struct {
	ID        int64   `protobuf:"varint,1,req,name=ID" json:"ID"`
	Name      string  `protobuf:"bytes,2,req,name=Name" json:"Name"`
	CreatorID int64   `protobuf:"varint,3,req,name=CreatorID" json:"CreatorID"`
	Managers  []int64 `protobuf:"varint,4,rep,name=Managers" json:"Managers,omitempty"`
	Members   []int64 `protobuf:"varint,5,rep,name=Members" json:"Members,omitempty"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c5f48f9d950d159, []int{43}
}
func (m *Team) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return m.Size()
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Team) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Team) GetCreatorID() int64 {
	if m != nil {
		return m.CreatorID
	}
	return 0
}

func (m *Team) GetManagers() []int64 {
	if m != nil {
		return m.Managers
	}
	return nil
}

func (m *Team) GetMembers() []int64 {
	if m != nil {
		return m.Members
	}
	return nil
}

func init() {
	proto.RegisterEnum("msg.TypingAction", TypingAction_name, TypingAction_value)
	proto.RegisterEnum("msg.PeerType", PeerType_name, PeerType_value)
	proto.RegisterEnum("msg.UserStatus", UserStatus_name, UserStatus_value)
	proto.RegisterEnum("msg.GroupFlags", GroupFlags_name, GroupFlags_value)
	proto.RegisterEnum("msg.ParticipantType", ParticipantType_name, ParticipantType_value)
	proto.RegisterEnum("msg.InputMediaType", InputMediaType_name, InputMediaType_value)
	proto.RegisterEnum("msg.MediaType", MediaType_name, MediaType_value)
	proto.RegisterEnum("msg.MessageEntityType", MessageEntityType_name, MessageEntityType_value)
	proto.RegisterEnum("msg.PushTokenProvider", PushTokenProvider_name, PushTokenProvider_value)
	proto.RegisterEnum("msg.PrivacyKey", PrivacyKey_name, PrivacyKey_value)
	proto.RegisterEnum("msg.PrivacyType", PrivacyType_name, PrivacyType_value)
	proto.RegisterType((*Ping)(nil), "msg.Ping")
	proto.RegisterType((*Pong)(nil), "msg.Pong")
	proto.RegisterType((*MessageEnvelope)(nil), "msg.MessageEnvelope")
	proto.RegisterType((*MessageContainer)(nil), "msg.MessageContainer")
	proto.RegisterType((*UpdateEnvelope)(nil), "msg.UpdateEnvelope")
	proto.RegisterType((*UpdateContainer)(nil), "msg.UpdateContainer")
	proto.RegisterType((*ProtoMessage)(nil), "msg.ProtoMessage")
	proto.RegisterType((*ProtoEncryptedPayload)(nil), "msg.ProtoEncryptedPayload")
	proto.RegisterType((*Error)(nil), "msg.Error")
	proto.RegisterType((*Ack)(nil), "msg.Ack")
	proto.RegisterType((*Bool)(nil), "msg.Bool")
	proto.RegisterType((*Dialog)(nil), "msg.Dialog")
	proto.RegisterType((*InputPeer)(nil), "msg.InputPeer")
	proto.RegisterType((*Peer)(nil), "msg.Peer")
	proto.RegisterType((*InputPassword)(nil), "msg.InputPassword")
	proto.RegisterType((*InputFileLocation)(nil), "msg.InputFileLocation")
	proto.RegisterType((*FileLocation)(nil), "msg.FileLocation")
	proto.RegisterType((*UserPhoto)(nil), "msg.UserPhoto")
	proto.RegisterType((*InputUser)(nil), "msg.InputUser")
	proto.RegisterType((*User)(nil), "msg.User")
	proto.RegisterType((*ContactUser)(nil), "msg.ContactUser")
	proto.RegisterType((*Bot)(nil), "msg.Bot")
	proto.RegisterType((*BotCommands)(nil), "msg.BotCommands")
	proto.RegisterType((*BotInfo)(nil), "msg.BotInfo")
	proto.RegisterType((*GroupPhoto)(nil), "msg.GroupPhoto")
	proto.RegisterType((*Group)(nil), "msg.Group")
	proto.RegisterType((*GroupFull)(nil), "msg.GroupFull")
	proto.RegisterType((*GroupParticipant)(nil), "msg.GroupParticipant")
	proto.RegisterType((*UserMessage)(nil), "msg.UserMessage")
	proto.RegisterType((*DraftMessage)(nil), "msg.DraftMessage")
	proto.RegisterType((*MessageEntity)(nil), "msg.MessageEntity")
	proto.RegisterType((*RSAPublicKey)(nil), "msg.RSAPublicKey")
	proto.RegisterType((*DHGroup)(nil), "msg.DHGroup")
	proto.RegisterType((*PhoneContact)(nil), "msg.PhoneContact")
	proto.RegisterType((*PeerNotifySettings)(nil), "msg.PeerNotifySettings")
	proto.RegisterType((*InputFile)(nil), "msg.InputFile")
	proto.RegisterType((*InputDocument)(nil), "msg.InputDocument")
	proto.RegisterType((*PrivacyRule)(nil), "msg.PrivacyRule")
	proto.RegisterType((*Label)(nil), "msg.Label")
	proto.RegisterType((*LabelsMany)(nil), "msg.LabelsMany")
	proto.RegisterType((*InputGeoLocation)(nil), "msg.InputGeoLocation")
	proto.RegisterType((*GeoLocation)(nil), "msg.GeoLocation")
	proto.RegisterType((*InputTeam)(nil), "msg.InputTeam")
	proto.RegisterType((*Team)(nil), "msg.Team")
}

func init() { proto.RegisterFile("core.types.proto", fileDescriptor_1c5f48f9d950d159) }

var fileDescriptor_1c5f48f9d950d159 = []byte{
	// 3230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcd, 0x6f, 0xdc, 0xc6,
	0x15, 0x17, 0x97, 0xfb, 0xa1, 0x7d, 0x5a, 0x49, 0xe3, 0xb1, 0x2d, 0x33, 0x8e, 0xa2, 0xa8, 0x84,
	0xe3, 0x08, 0x42, 0xad, 0xc4, 0x4a, 0xec, 0xb8, 0x87, 0x22, 0x90, 0xb4, 0x92, 0x23, 0xd8, 0xb2,
	0x55, 0x4a, 0x4e, 0x80, 0x1e, 0x8a, 0x52, 0xcb, 0xd1, 0x8a, 0x30, 0x97, 0xb3, 0x21, 0xb9, 0x72,
	0xb6, 0xc7, 0xfe, 0x03, 0xcd, 0xa1, 0x40, 0x5b, 0x04, 0x45, 0x50, 0xf4, 0x8f, 0x28, 0xda, 0x6b,
	0x2f, 0x39, 0x15, 0x01, 0x7a, 0x49, 0x2f, 0x45, 0x9b, 0xfc, 0x09, 0x05, 0x0a, 0xf4, 0xd4, 0xe2,
	0xcd, 0x90, 0xc3, 0x99, 0xfd, 0xb0, 0xd5, 0x26, 0x68, 0x4e, 0xda, 0xf9, 0xfd, 0x1e, 0xe7, 0xe3,
	0xcd, 0xfb, 0x1c, 0x01, 0xe9, 0xf0, 0x84, 0x6d, 0x64, 0xc3, 0x3e, 0x4b, 0x37, 0xfa, 0x09, 0xcf,
	0x38, 0xb5, 0x7b, 0x69, 0xf7, 0xfa, 0xad, 0x6e, 0x98, 0x9d, 0x0d, 0x4e, 0x36, 0x3a, 0xbc, 0xf7,
	0x46, 0x97, 0x77, 0xf9, 0x1b, 0x82, 0x3b, 0x19, 0x9c, 0x8a, 0x91, 0x18, 0x88, 0x5f, 0xf2, 0x1b,
	0x77, 0x19, 0xaa, 0x87, 0x61, 0xdc, 0xa5, 0x57, 0xa0, 0xb2, 0xdf, 0x76, 0xac, 0xd5, 0xca, 0x9a,
	0xbd, 0x5d, 0xfd, 0xec, 0xaf, 0xaf, 0xce, 0x78, 0x95, 0xfd, 0xb6, 0x60, 0xb9, 0x62, 0x2b, 0x23,
	0xec, 0x6f, 0x2c, 0x58, 0x3c, 0x60, 0x69, 0xea, 0x77, 0xd9, 0x6e, 0x7c, 0xce, 0x22, 0xde, 0x67,
	0xf4, 0x26, 0xcc, 0xed, 0xf0, 0x38, 0xcd, 0x92, 0x41, 0x27, 0xe3, 0x89, 0x31, 0xa1, 0x4e, 0x50,
	0x17, 0x9a, 0x1e, 0xfb, 0x70, 0xc0, 0xd2, 0x2c, 0x9f, 0xb8, 0x9e, 0x4b, 0x95, 0x30, 0x5d, 0x81,
	0x46, 0x3e, 0xbd, 0x53, 0x5d, 0xad, 0xac, 0xb5, 0x72, 0x89, 0x02, 0xa4, 0x2e, 0x54, 0x8f, 0x99,
	0xdf, 0x73, 0x6a, 0xab, 0xd6, 0xda, 0xdc, 0xe6, 0xc2, 0x46, 0x2f, 0xed, 0x6e, 0xec, 0xc7, 0xfd,
	0x41, 0x86, 0xa8, 0x27, 0x38, 0x37, 0x00, 0x92, 0x8b, 0xef, 0xf0, 0x38, 0xf3, 0xc3, 0x98, 0x25,
	0x74, 0x19, 0xea, 0x0f, 0x59, 0xdc, 0xcd, 0xce, 0xc4, 0xf6, 0x6a, 0xf9, 0xb4, 0x39, 0x46, 0x37,
	0xa1, 0x59, 0x9c, 0x26, 0x75, 0x2a, 0xab, 0xf6, 0xda, 0xdc, 0xe6, 0x15, 0x31, 0xf5, 0xc8, 0x51,
	0xbd, 0x52, 0xcc, 0xfd, 0x83, 0x05, 0x0b, 0x4f, 0xfa, 0x81, 0x9f, 0xfd, 0xf7, 0x8a, 0x58, 0x86,
	0xba, 0xfc, 0x52, 0x68, 0xa1, 0x38, 0x63, 0x8e, 0x09, 0x76, 0x87, 0x0f, 0xe2, 0xcc, 0xb1, 0xf5,
	0xad, 0x4a, 0x8c, 0xae, 0xc2, 0xac, 0x94, 0xdb, 0x6f, 0x0b, 0x0d, 0x15, 0x0b, 0x28, 0x14, 0xd5,
	0x7c, 0x1c, 0xf6, 0x58, 0x9a, 0xf9, 0xbd, 0xbe, 0x53, 0xd3, 0x44, 0x4a, 0xd8, 0xfd, 0x87, 0x05,
	0x8b, 0xf2, 0x83, 0x8b, 0xaa, 0xe8, 0x16, 0x34, 0xe4, 0x07, 0x85, 0x82, 0x2e, 0x0b, 0x05, 0x99,
	0x1a, 0xf0, 0x0a, 0x19, 0x54, 0xc5, 0x41, 0x18, 0xab, 0x9d, 0xda, 0xba, 0x2a, 0x34, 0x42, 0xc8,
	0xf9, 0x1f, 0x4d, 0x3c, 0x91, 0x4e, 0xd0, 0x57, 0xa1, 0xf6, 0x24, 0x65, 0x49, 0xea, 0xd4, 0xc4,
	0xe2, 0x4d, 0xb9, 0x78, 0xca, 0x12, 0x4f, 0xe2, 0xd4, 0x85, 0xfa, 0xfd, 0x84, 0x0f, 0xfa, 0xa9,
	0x53, 0x17, 0x12, 0x20, 0x24, 0x04, 0xe4, 0xe5, 0x8c, 0x9b, 0x40, 0xeb, 0x10, 0x3d, 0xa0, 0x30,
	0xa6, 0x65, 0xa8, 0x6f, 0x0d, 0xb2, 0x33, 0xe1, 0x04, 0x96, 0x5a, 0x37, 0xc7, 0xe8, 0x0d, 0x80,
	0x5c, 0xf0, 0x01, 0x1b, 0x3a, 0x95, 0x55, 0x4b, 0xdd, 0x94, 0x86, 0xa3, 0xc1, 0x1e, 0xfa, 0xc3,
	0x88, 0xfb, 0x81, 0x38, 0xa4, 0x32, 0xd8, 0x1c, 0x74, 0x7f, 0x67, 0xc1, 0x55, 0xb1, 0xe8, 0x6e,
	0xdc, 0x49, 0x86, 0xfd, 0x8c, 0x05, 0x39, 0x83, 0xf3, 0x1f, 0xb1, 0xe4, 0x9c, 0x25, 0x47, 0x7e,
	0x94, 0x19, 0xc6, 0xa2, 0xe1, 0x78, 0x9b, 0xf9, 0x6a, 0xb9, 0xd3, 0x54, 0x8b, 0xdb, 0x54, 0x30,
	0xca, 0x1c, 0xb1, 0x34, 0x0d, 0x79, 0x3c, 0xa2, 0xea, 0x12, 0xa6, 0x6f, 0xc2, 0x6c, 0x71, 0x4b,
	0x42, 0xcb, 0xd3, 0x2c, 0x5c, 0x49, 0xb9, 0xdf, 0x87, 0xda, 0x6e, 0x92, 0xf0, 0x84, 0x3a, 0x50,
	0xdd, 0xe1, 0x01, 0x13, 0x5b, 0x6c, 0xe6, 0x33, 0x0b, 0x84, 0x5e, 0x87, 0xda, 0x7e, 0xc6, 0x7a,
	0xa9, 0xd8, 0x58, 0x41, 0x49, 0xc8, 0x7d, 0x0d, 0xec, 0xad, 0xce, 0x53, 0xba, 0xa2, 0xb4, 0xb8,
	0xdf, 0x4e, 0x1d, 0x6b, 0xd5, 0x5e, 0xab, 0x7a, 0x1a, 0xe2, 0xde, 0x80, 0xea, 0x36, 0xe7, 0x11,
	0xde, 0x85, 0xc7, 0xd2, 0x41, 0xae, 0x89, 0xd9, 0xe2, 0x2e, 0x24, 0xe6, 0x7e, 0x61, 0x43, 0xbd,
	0x1d, 0xfa, 0x11, 0xef, 0xd2, 0x15, 0xa8, 0x1f, 0x32, 0x96, 0xa8, 0xc8, 0x55, 0x47, 0xc1, 0x37,
	0x2d, 0x2f, 0x47, 0xd1, 0x41, 0xf0, 0xd7, 0xf1, 0xb0, 0x2f, 0xdd, 0xab, 0x30, 0x64, 0x85, 0xd2,
	0x35, 0x68, 0x1d, 0xf3, 0x7e, 0xa9, 0x55, 0x5d, 0x63, 0x06, 0x43, 0xbf, 0x0b, 0x0b, 0x1e, 0xf3,
	0x83, 0xfd, 0xf8, 0x84, 0x7f, 0x74, 0xe0, 0x7f, 0x34, 0x62, 0xa0, 0x23, 0x1c, 0xdd, 0x80, 0x45,
	0x44, 0x1e, 0x0f, 0x32, 0x25, 0xae, 0xbb, 0xdf, 0x28, 0x89, 0xb6, 0xff, 0x24, 0x4e, 0x98, 0x1f,
	0x48, 0x6f, 0xaf, 0x6b, 0x9b, 0xd5, 0x09, 0x7a, 0x13, 0x60, 0xab, 0xd3, 0x61, 0x69, 0xfa, 0x9e,
	0x9f, 0x9e, 0x39, 0x0d, 0x11, 0x38, 0x8b, 0x53, 0x6b, 0x0c, 0x7d, 0x17, 0x16, 0x1e, 0xf1, 0x2c,
	0x3c, 0x1d, 0x1e, 0xb1, 0x2c, 0x0b, 0xe3, 0x6e, 0xea, 0xcc, 0x8a, 0x28, 0x79, 0x4d, 0x5c, 0x34,
	0x1e, 0xdf, 0xa4, 0xbd, 0x11, 0x71, 0x3c, 0xee, 0x01, 0x8b, 0xb3, 0x90, 0xc7, 0x2c, 0xdf, 0x53,
	0x73, 0xd5, 0x52, 0x7b, 0x1a, 0xe1, 0xf0, 0xc6, 0x0e, 0xc3, 0x38, 0x66, 0x81, 0x03, 0xfa, 0x8d,
	0x49, 0x8c, 0xbe, 0x0e, 0xb5, 0x76, 0xe2, 0x9f, 0x66, 0xce, 0x9c, 0xd8, 0xc3, 0x25, 0xb1, 0x07,
	0x81, 0xe4, 0xea, 0xf5, 0x24, 0xef, 0x66, 0xd0, 0x14, 0x01, 0x1c, 0xf7, 0x47, 0x97, 0xb4, 0x94,
	0x54, 0x1c, 0xb1, 0xb2, 0xdf, 0xa6, 0xaf, 0x43, 0x55, 0x5d, 0xe8, 0xc2, 0xe6, 0xbc, 0x3a, 0x10,
	0x82, 0x85, 0x45, 0x8a, 0xbb, 0x35, 0x75, 0x65, 0x4f, 0xd3, 0x95, 0xfb, 0x63, 0xa8, 0x3e, 0x77,
	0x41, 0x47, 0x5b, 0xb0, 0xf6, 0x3f, 0xad, 0xf0, 0x01, 0xcc, 0xcb, 0x73, 0xf9, 0x69, 0xfa, 0x8c,
	0x27, 0x01, 0x5d, 0x86, 0xda, 0x51, 0xd2, 0x1f, 0x5b, 0x4d, 0x82, 0x94, 0x82, 0xb5, 0x65, 0xa4,
	0x03, 0x6b, 0x0b, 0x53, 0xf0, 0xc1, 0x6d, 0x23, 0xac, 0x54, 0x0e, 0x6e, 0xbb, 0x9f, 0x5a, 0x70,
	0x49, 0xcc, 0xbc, 0x17, 0x46, 0xec, 0x21, 0xef, 0xf8, 0x78, 0x29, 0x18, 0x03, 0x76, 0xa2, 0x41,
	0x9a, 0x29, 0xcf, 0x28, 0x76, 0x5d, 0xc2, 0xe8, 0x3a, 0xf8, 0x8d, 0x4a, 0xeb, 0xca, 0x75, 0x24,
	0x7a, 0xd1, 0xa3, 0x61, 0xcc, 0x7b, 0x9f, 0x25, 0x18, 0x58, 0x9c, 0xaa, 0x66, 0x20, 0x05, 0xe8,
	0xfe, 0x04, 0x5a, 0xdf, 0xd6, 0xde, 0xdc, 0x9f, 0x59, 0xd0, 0xc4, 0x8c, 0x70, 0x78, 0x86, 0xe5,
	0xd1, 0x2d, 0x98, 0x15, 0x3f, 0xb6, 0xc3, 0xae, 0x58, 0xb8, 0x30, 0x44, 0x7d, 0x7b, 0x9e, 0x12,
	0xa1, 0xb7, 0x01, 0xc4, 0xef, 0xa3, 0x9e, 0x1f, 0x45, 0x62, 0x23, 0x13, 0x3f, 0xd0, 0x84, 0xe8,
	0x2a, 0x34, 0xc4, 0x48, 0xc5, 0x91, 0x62, 0x53, 0x05, 0xec, 0x1e, 0xe5, 0x06, 0x8e, 0xbb, 0xc2,
	0x63, 0xe2, 0xdf, 0xf1, 0xe8, 0x25, 0xd1, 0x91, 0x63, 0x56, 0xa6, 0x1e, 0xf3, 0x2f, 0x55, 0xa8,
	0x8a, 0x09, 0xa7, 0x19, 0xb0, 0x0b, 0xcd, 0xbd, 0x30, 0x49, 0xb3, 0x47, 0x7e, 0x8f, 0x19, 0xe1,
	0xb9, 0x84, 0x31, 0x54, 0x3e, 0xf4, 0x73, 0x11, 0x5b, 0x13, 0x51, 0xa8, 0xa8, 0x36, 0x52, 0x96,
	0xc4, 0x28, 0x81, 0x57, 0xad, 0x24, 0x0a, 0x94, 0xde, 0x82, 0xfa, 0x51, 0xe6, 0x67, 0x83, 0x54,
	0xc4, 0xba, 0x85, 0xcd, 0x45, 0x95, 0x99, 0x25, 0x5c, 0x84, 0x05, 0x39, 0xc2, 0xa4, 0xe7, 0xb1,
	0x34, 0x4b, 0xc2, 0x4e, 0xc6, 0x02, 0x11, 0xf2, 0x8a, 0xc0, 0xa1, 0xe1, 0x17, 0x8e, 0x78, 0x37,
	0xa0, 0x26, 0xb4, 0x9c, 0x07, 0xba, 0x05, 0xb5, 0xb6, 0x40, 0x3d, 0x49, 0xd2, 0x25, 0xb0, 0xb7,
	0x43, 0x2e, 0x62, 0x59, 0xb1, 0x7f, 0x04, 0x30, 0x7b, 0x1d, 0x9e, 0xf1, 0x98, 0x39, 0xa0, 0x31,
	0x12, 0x2a, 0x54, 0x73, 0xc4, 0x58, 0x2c, 0x22, 0x98, 0xad, 0xab, 0x06, 0x51, 0xba, 0x09, 0x2d,
	0x31, 0xfd, 0x7d, 0x3f, 0x8a, 0x58, 0x32, 0x74, 0x5a, 0xa2, 0xec, 0x18, 0xdd, 0x82, 0x21, 0x23,
	0xf2, 0x65, 0xba, 0xcd, 0x33, 0x67, 0x7e, 0xd5, 0x52, 0x07, 0x97, 0x10, 0x3a, 0x55, 0x9b, 0x45,
	0x0c, 0xd5, 0xb2, 0xa0, 0xb1, 0x05, 0x88, 0xfc, 0x76, 0xc4, 0x3b, 0x4f, 0x59, 0xe0, 0x2c, 0xea,
	0x7c, 0x0e, 0xd2, 0x9b, 0xd0, 0xd8, 0xe6, 0xd9, 0x7e, 0x7c, 0xca, 0x1d, 0x22, 0xb4, 0xd1, 0x12,
	0x5b, 0xc9, 0x31, 0xaf, 0x20, 0xf1, 0x64, 0x8f, 0x4f, 0x4f, 0xc3, 0x4e, 0xe8, 0x47, 0xce, 0x25,
	0x6d, 0x22, 0x85, 0xba, 0x9f, 0x54, 0x44, 0x1d, 0x9b, 0xf9, 0x9d, 0xec, 0xff, 0x60, 0x62, 0xe6,
	0x5d, 0x57, 0xa7, 0xde, 0xb5, 0xba, 0xad, 0x9a, 0x5e, 0x6b, 0xa8, 0xdb, 0x52, 0x66, 0x5a, 0xd7,
	0x57, 0x51, 0x66, 0xea, 0xc2, 0xec, 0x4e, 0x14, 0xb2, 0x18, 0x5b, 0x8f, 0x86, 0x71, 0x12, 0x85,
	0x5f, 0xcc, 0x9a, 0xdc, 0x0f, 0xc1, 0xc6, 0xeb, 0x7a, 0x4e, 0xe2, 0x18, 0xd3, 0x47, 0x75, 0xcc,
	0x97, 0xec, 0x89, 0x9b, 0xcc, 0x0d, 0xb5, 0x3a, 0x62, 0xa8, 0xee, 0x13, 0x98, 0xdb, 0xe6, 0xd9,
	0x0e, 0xef, 0xf5, 0xfc, 0x38, 0x48, 0xd1, 0x12, 0xf2, 0xdf, 0x46, 0x49, 0x56, 0x80, 0x58, 0x57,
	0xb4, 0x59, 0xda, 0x49, 0xc2, 0x3e, 0x46, 0x2b, 0x51, 0xb9, 0x16, 0x32, 0x3a, 0xe1, 0x7e, 0x5a,
	0x51, 0x26, 0x43, 0xaf, 0x8b, 0x53, 0xe5, 0x31, 0x72, 0xb6, 0xb0, 0x1c, 0x4f, 0x1c, 0x75, 0x59,
	0xc5, 0x2c, 0xbd, 0x1b, 0x2c, 0x23, 0x96, 0xb1, 0x9a, 0x3d, 0x65, 0x35, 0xba, 0x69, 0x1c, 0xc2,
	0xa9, 0x0a, 0x77, 0x21, 0xc5, 0x4a, 0x05, 0xee, 0x19, 0x27, 0x75, 0x31, 0x74, 0x46, 0x61, 0xcc,
	0xee, 0x33, 0x2e, 0x5a, 0xbe, 0xc2, 0x58, 0x4b, 0x98, 0x6e, 0x62, 0x36, 0xc4, 0xc1, 0x61, 0xe4,
	0x77, 0xd8, 0x7b, 0x3c, 0x0a, 0x58, 0xe2, 0xd4, 0xb5, 0x5d, 0x8c, 0xd3, 0xb8, 0x67, 0x09, 0xfe,
	0x60, 0x80, 0xae, 0xdb, 0xd0, 0x66, 0xd6, 0x09, 0xf7, 0x63, 0x0b, 0x40, 0xf4, 0x0e, 0xdf, 0x4a,
	0x36, 0xb1, 0x26, 0x65, 0x93, 0x7f, 0x59, 0x50, 0x13, 0x5b, 0x9a, 0x6a, 0x81, 0xd7, 0xa1, 0x76,
	0x1c, 0x66, 0x91, 0x69, 0x82, 0x12, 0x12, 0x99, 0x38, 0x61, 0x7e, 0xc6, 0x82, 0xc7, 0xb1, 0xd9,
	0x29, 0x28, 0x18, 0xcb, 0xe3, 0x43, 0x3f, 0xc9, 0xc2, 0x4e, 0xd8, 0xf7, 0xe3, 0x2c, 0x15, 0x2e,
	0x59, 0x24, 0x6c, 0x83, 0x41, 0x8b, 0xde, 0x0d, 0x42, 0x39, 0x59, 0x4d, 0x0f, 0x92, 0x05, 0x4a,
	0x5f, 0x83, 0xda, 0x5e, 0xe4, 0x77, 0x65, 0x53, 0x56, 0x24, 0x07, 0xb1, 0x7d, 0x01, 0x7b, 0x92,
	0x45, 0x31, 0xe9, 0x79, 0x0d, 0xe1, 0x79, 0x9a, 0x98, 0xe1, 0x7a, 0xff, 0xb6, 0xa0, 0x29, 0x3f,
	0x1e, 0x08, 0x5d, 0x49, 0x45, 0xe4, 0x57, 0xa1, 0x37, 0x7c, 0xb9, 0x86, 0x54, 0xd3, 0x58, 0x99,
	0xd2, 0x34, 0x7e, 0x6f, 0xe4, 0xa8, 0xb6, 0x90, 0xbb, 0xaa, 0x2d, 0x5f, 0xb2, 0x23, 0x67, 0x1f,
	0x2f, 0xb6, 0x65, 0x57, 0x75, 0xe1, 0x62, 0xfb, 0xad, 0x91, 0xfc, 0x21, 0x1b, 0xdb, 0xb1, 0xa3,
	0x1b, 0x42, 0xee, 0x2f, 0x2b, 0x40, 0x46, 0x37, 0xf6, 0xc2, 0x9a, 0xe2, 0x9b, 0x89, 0xd3, 0x1b,
	0x79, 0x45, 0x5c, 0x15, 0x69, 0x5e, 0x36, 0x8f, 0xda, 0x2e, 0x5e, 0x50, 0x89, 0xd7, 0x44, 0xe7,
	0x3a, 0x29, 0xae, 0xbf, 0x38, 0x76, 0x5f, 0x2c, 0x2e, 0xff, 0xa2, 0x01, 0x73, 0x08, 0x16, 0xcd,
	0xfd, 0xc4, 0xd7, 0x2d, 0xad, 0x7b, 0xac, 0xbc, 0xb0, 0x7b, 0xb4, 0x27, 0x76, 0x8f, 0x86, 0x0b,
	0x55, 0x27, 0xbb, 0x90, 0xe9, 0x18, 0x95, 0x09, 0x8e, 0xb1, 0x06, 0x73, 0x7b, 0xcf, 0x82, 0x23,
	0x16, 0x07, 0x62, 0x33, 0x75, 0x63, 0x33, 0x3a, 0x45, 0xd7, 0xa1, 0xb5, 0xf7, 0x2c, 0xd8, 0x39,
	0xf3, 0xe3, 0x98, 0x45, 0x63, 0xd9, 0xcb, 0xe0, 0xe8, 0x3d, 0xb8, 0x5c, 0x8e, 0xcb, 0x06, 0x77,
	0xd6, 0xf8, 0x64, 0x92, 0x08, 0x06, 0x0d, 0xe9, 0xa8, 0x4d, 0xed, 0xd0, 0xb9, 0x77, 0xde, 0x84,
	0xb9, 0x5c, 0x50, 0xa8, 0x05, 0x8c, 0x37, 0x9a, 0x92, 0xc0, 0xd4, 0xb7, 0xcd, 0x83, 0xa1, 0x33,
	0xa7, 0xa7, 0x3e, 0x44, 0x30, 0xfb, 0xaa, 0xa3, 0xb6, 0xcc, 0xec, 0xab, 0xce, 0x29, 0x1f, 0xcf,
	0x32, 0x16, 0x67, 0xd8, 0x27, 0x3b, 0xf3, 0x5a, 0x69, 0xa8, 0x13, 0xa2, 0x86, 0xc2, 0x9e, 0xdb,
	0x59, 0xd0, 0x24, 0x24, 0x84, 0x99, 0xd1, 0x63, 0xfd, 0x68, 0x78, 0xcc, 0x9d, 0x45, 0x6d, 0x97,
	0x05, 0x48, 0xd7, 0x61, 0x3e, 0xdf, 0xf0, 0x56, 0x47, 0x64, 0x2b, 0xa2, 0xb5, 0x2f, 0x26, 0x85,
	0x79, 0xc5, 0x00, 0xda, 0x7e, 0xe6, 0x8b, 0x82, 0xa9, 0xe8, 0xc5, 0xc6, 0x69, 0xba, 0x01, 0xb3,
	0xbb, 0x71, 0x16, 0x66, 0x21, 0x4b, 0x1d, 0x2a, 0xfc, 0x99, 0x9a, 0x8f, 0x2c, 0x59, 0x98, 0x0d,
	0x3d, 0x25, 0x43, 0x37, 0xa1, 0x79, 0xc0, 0x82, 0xd0, 0x17, 0x7a, 0xbd, 0xbc, 0x6a, 0xad, 0x2d,
	0xe4, 0xd6, 0xad, 0xd0, 0xf2, 0xb1, 0x27, 0x07, 0xf0, 0xfc, 0x62, 0xe0, 0x5c, 0xd1, 0xf6, 0x22,
	0x21, 0xd4, 0xa1, 0x38, 0xea, 0x81, 0x9f, 0x3c, 0x1d, 0xf4, 0x9d, 0xab, 0x5a, 0x4c, 0xd6, 0x09,
	0xf9, 0x52, 0xa1, 0x86, 0xe2, 0x64, 0x4b, 0xda, 0x6c, 0xa3, 0x24, 0xbd, 0x8e, 0xd1, 0xe1, 0x04,
	0x4d, 0x2c, 0x75, 0xae, 0xad, 0xda, 0x6b, 0x35, 0x4f, 0x8d, 0xd1, 0xd6, 0xdf, 0x0f, 0x7d, 0xac,
	0x23, 0xda, 0x8e, 0xa3, 0x27, 0x81, 0x02, 0x75, 0xff, 0x69, 0x41, 0x4b, 0xef, 0xfc, 0xbf, 0x01,
	0x27, 0x74, 0xa0, 0xda, 0xf6, 0x33, 0x66, 0xf8, 0x9f, 0x40, 0x94, 0x11, 0xd6, 0xc6, 0x8c, 0x50,
	0xbf, 0x9c, 0xfa, 0x05, 0x2e, 0x47, 0x33, 0xa6, 0xc6, 0x24, 0x63, 0x52, 0x4e, 0x2e, 0x3c, 0x6c,
	0x2c, 0xfb, 0xed, 0xb7, 0xdd, 0x5f, 0x5b, 0xca, 0xde, 0xe4, 0xec, 0xf4, 0xcd, 0x3c, 0x88, 0x5a,
	0x22, 0x88, 0x2e, 0x8d, 0xaf, 0x3f, 0x16, 0x46, 0x97, 0xa1, 0xfe, 0xf8, 0xf4, 0x34, 0x65, 0x99,
	0xf1, 0x14, 0x91, 0x63, 0xda, 0x9b, 0xad, 0x3d, 0xe1, 0xcd, 0xb6, 0x4c, 0x0c, 0x55, 0xa3, 0x98,
	0xc8, 0x51, 0xf7, 0x47, 0xd0, 0xf2, 0x8e, 0xb6, 0x0e, 0x07, 0x27, 0x51, 0xd8, 0x79, 0xc0, 0x86,
	0x68, 0x3e, 0x7b, 0x61, 0xdc, 0x65, 0xc9, 0x61, 0x12, 0xc6, 0xe6, 0x93, 0xa4, 0x4e, 0x50, 0x0a,
	0xd6, 0x23, 0x23, 0x91, 0x58, 0x8f, 0x10, 0xdb, 0x15, 0x9b, 0x98, 0x2f, 0xb0, 0x5d, 0x97, 0x41,
	0xa3, 0xfd, 0x9e, 0x4c, 0xc5, 0x17, 0x9d, 0x1a, 0xab, 0xfc, 0x24, 0x1c, 0xc9, 0x53, 0x12, 0xc2,
	0xf2, 0xf8, 0x3e, 0x8b, 0x8d, 0x93, 0x22, 0xe0, 0xfe, 0xdc, 0x12, 0xa9, 0x34, 0x66, 0x79, 0xd3,
	0x62, 0x14, 0xfb, 0xd6, 0x94, 0x62, 0xff, 0x9b, 0x49, 0x8a, 0xaa, 0x29, 0xa9, 0x8e, 0x35, 0x25,
	0x6e, 0x1f, 0xe8, 0x78, 0x19, 0x50, 0x06, 0x5a, 0x6b, 0x3c, 0xd0, 0xba, 0xd0, 0x3c, 0x18, 0x64,
	0xec, 0x49, 0x9c, 0x85, 0x91, 0x28, 0xdb, 0x55, 0x6a, 0x51, 0x30, 0x7e, 0x7f, 0xc4, 0x07, 0x71,
	0x60, 0x14, 0xda, 0x12, 0x72, 0x3f, 0xb1, 0xf2, 0xa7, 0x06, 0xac, 0x2f, 0xb5, 0x17, 0x15, 0x6b,
	0xe2, 0x8b, 0xca, 0x0d, 0x80, 0x63, 0x9e, 0xf9, 0x11, 0x26, 0xf1, 0xd4, 0xb0, 0x2e, 0x0d, 0x47,
	0x1d, 0xa0, 0xfc, 0xb8, 0x0e, 0x0a, 0x54, 0xa4, 0x87, 0xf6, 0x9d, 0x9d, 0x33, 0xd6, 0x79, 0x9a,
	0x0e, 0x7a, 0x86, 0x26, 0x74, 0xc2, 0x4d, 0xf3, 0x07, 0xb1, 0x36, 0xef, 0x0c, 0x7a, 0x2c, 0x9e,
	0xde, 0x42, 0x5d, 0xf0, 0x0d, 0xc4, 0x7c, 0x56, 0xb2, 0x27, 0x3e, 0x2b, 0xb9, 0x0c, 0xe6, 0x0e,
	0x93, 0xf0, 0xdc, 0xef, 0x0c, 0xbd, 0x41, 0xc4, 0xe8, 0x3d, 0x35, 0xd4, 0xdc, 0x50, 0x36, 0x21,
	0x1a, 0x5e, 0xec, 0x5e, 0x83, 0xe8, 0x32, 0x34, 0xa4, 0xd7, 0xc8, 0x6a, 0xd2, 0xde, 0xae, 0x60,
	0x55, 0x9e, 0x43, 0xee, 0x87, 0x50, 0x13, 0x01, 0x51, 0xab, 0x3a, 0x6a, 0x5a, 0xd5, 0x31, 0xbd,
	0x29, 0x5c, 0x86, 0xfa, 0x0e, 0x8f, 0xf8, 0x20, 0x31, 0x94, 0x9b, 0x63, 0x78, 0xd9, 0xf2, 0x1d,
	0x56, 0x7f, 0x66, 0x93, 0x90, 0xfb, 0x10, 0x40, 0x2c, 0x99, 0x1e, 0xf8, 0x31, 0x66, 0xd8, 0xba,
	0x1c, 0x89, 0x27, 0xf6, 0xa2, 0x1a, 0x16, 0x90, 0x97, 0x33, 0x38, 0xdb, 0x6e, 0xaf, 0x9f, 0x0d,
	0x8d, 0x4e, 0x4a, 0x42, 0x6e, 0x1b, 0x88, 0xb8, 0x9c, 0xfb, 0x8c, 0xab, 0x67, 0xbb, 0x25, 0xb0,
	0x1f, 0xfa, 0xd2, 0x57, 0x2b, 0x85, 0xbf, 0x3d, 0xf4, 0x33, 0x3c, 0xcd, 0x43, 0x1e, 0x77, 0xc5,
	0x69, 0x0a, 0x42, 0x20, 0xee, 0xbb, 0x30, 0xf7, 0xf5, 0x26, 0x78, 0x90, 0x1b, 0xf0, 0x31, 0xf3,
	0x7b, 0x5f, 0xd7, 0x3e, 0xb0, 0x7b, 0x13, 0xff, 0x10, 0x9c, 0x52, 0x0a, 0x4e, 0xbf, 0x94, 0xa2,
	0xc4, 0xe3, 0xc9, 0xe8, 0xff, 0x53, 0x14, 0x8c, 0x29, 0xf1, 0xc0, 0x8f, 0xfd, 0x2e, 0xb6, 0x17,
	0xd8, 0xcb, 0xda, 0x9e, 0x1a, 0x53, 0x07, 0x1a, 0x07, 0xac, 0x77, 0x52, 0xfc, 0xbb, 0xca, 0xf6,
	0x8a, 0xe1, 0xfa, 0xaf, 0x2c, 0x68, 0x1d, 0x0f, 0xfb, 0x61, 0xdc, 0xcd, 0xab, 0x8c, 0x25, 0xa0,
	0xfa, 0x58, 0xfe, 0x26, 0x33, 0x74, 0x05, 0xae, 0xeb, 0xb8, 0xc7, 0x3a, 0x3c, 0x09, 0xc2, 0xb8,
	0xfb, 0x3e, 0x0f, 0x3b, 0x8c, 0x58, 0xd3, 0xf9, 0x30, 0x60, 0x9c, 0x54, 0xe8, 0x4b, 0x70, 0x55,
	0xe7, 0x9f, 0xf4, 0x23, 0xee, 0x23, 0x4f, 0xec, 0xd1, 0x25, 0x77, 0xfc, 0xb8, 0xc3, 0x22, 0x52,
	0x5d, 0xff, 0x61, 0x99, 0x75, 0x69, 0x4b, 0xfe, 0x3e, 0x62, 0xd1, 0x29, 0x99, 0x29, 0x46, 0x68,
	0xec, 0xc4, 0xa2, 0xf3, 0xd0, 0xc4, 0x91, 0x88, 0xeb, 0xa4, 0x42, 0x29, 0x2c, 0x08, 0xd1, 0x41,
	0xbf, 0xc0, 0x6c, 0xba, 0x08, 0x73, 0x88, 0xe5, 0x55, 0x26, 0xa9, 0xae, 0xff, 0xd4, 0x02, 0x28,
	0xdf, 0x04, 0xe9, 0x55, 0xb8, 0x54, 0x8e, 0x1e, 0x9f, 0x9e, 0x62, 0xc7, 0x4d, 0x66, 0xe8, 0x15,
	0x20, 0x1a, 0x2c, 0xfa, 0x70, 0x62, 0xe1, 0x7e, 0x4b, 0xd4, 0x63, 0x1d, 0x16, 0x67, 0xd1, 0x90,
	0x54, 0x4c, 0x1c, 0x23, 0xf2, 0x07, 0x8c, 0x3d, 0x25, 0x36, 0xbd, 0x06, 0x97, 0x4d, 0xfc, 0x80,
	0xc7, 0xd9, 0x19, 0xa9, 0xae, 0xff, 0xb6, 0xe8, 0xe6, 0x65, 0xb4, 0xbd, 0x0c, 0x8b, 0xe5, 0x48,
	0x78, 0x01, 0x99, 0xc1, 0x9d, 0x95, 0x60, 0x7e, 0xdb, 0xc4, 0xa2, 0xcb, 0xe0, 0x94, 0xf0, 0x23,
	0x1e, 0x6b, 0x8d, 0x0f, 0xa9, 0x98, 0x33, 0x6d, 0x05, 0xbd, 0x30, 0x26, 0x36, 0x7d, 0x19, 0xae,
	0x8d, 0x80, 0xe9, 0x6e, 0xec, 0x9f, 0x44, 0x2c, 0x20, 0x55, 0xbc, 0x9e, 0x92, 0x6c, 0x33, 0xbf,
	0x93, 0x85, 0xe7, 0xd8, 0x3b, 0x90, 0xda, 0xfa, 0x09, 0x2c, 0x8e, 0xb4, 0x55, 0x28, 0x3d, 0x02,
	0x49, 0x7b, 0x22, 0x33, 0xd4, 0x81, 0x2b, 0x23, 0x94, 0x5c, 0xdf, 0xa2, 0xd7, 0x61, 0x69, 0x84,
	0x29, 0x8e, 0x53, 0x59, 0xff, 0xa3, 0x0d, 0x0b, 0xc2, 0xcf, 0xca, 0xb2, 0xf2, 0x1a, 0x5c, 0x36,
	0x91, 0x42, 0x23, 0x2f, 0xc1, 0x55, 0x93, 0xd8, 0x8f, 0xcf, 0x73, 0x23, 0x5c, 0x02, 0x6a, 0x52,
	0x87, 0x3c, 0x8a, 0xa4, 0xf1, 0x99, 0x78, 0x9e, 0x98, 0x89, 0x4d, 0x5d, 0x58, 0x31, 0x29, 0x69,
	0x99, 0x2c, 0x28, 0xb2, 0x02, 0xa9, 0xe2, 0xce, 0x4d, 0x19, 0xc5, 0xd5, 0xe8, 0x2b, 0xf0, 0x92,
	0xc9, 0x69, 0xf1, 0x86, 0xd4, 0xc7, 0xe9, 0x0f, 0xd8, 0x89, 0xfa, 0xba, 0x81, 0xda, 0x32, 0xe9,
	0x23, 0xe6, 0xe3, 0x85, 0xcc, 0xd2, 0xef, 0xc0, 0x2b, 0x26, 0x93, 0x57, 0x65, 0xea, 0xe3, 0x26,
	0x5e, 0xa8, 0x29, 0xe2, 0xb1, 0x94, 0x25, 0xe7, 0x2c, 0x78, 0x9b, 0xc0, 0x74, 0xf2, 0x0e, 0x99,
	0x9b, 0x4e, 0xde, 0x25, 0xad, 0xe9, 0xe4, 0x3b, 0x64, 0x7e, 0x3a, 0x79, 0x8f, 0x2c, 0xac, 0xff,
	0xa9, 0xa2, 0xb5, 0x0f, 0xe8, 0x87, 0x63, 0x77, 0x77, 0x09, 0xeb, 0x4f, 0xfd, 0x6e, 0x2c, 0x34,
	0xf0, 0x71, 0xbd, 0x56, 0xd0, 0xf5, 0x26, 0xdc, 0x96, 0x03, 0x57, 0x26, 0x2a, 0xba, 0x6a, 0xc8,
	0x17, 0x06, 0x51, 0x33, 0xe4, 0x75, 0xcd, 0xd7, 0xd1, 0x45, 0x46, 0x95, 0xde, 0x40, 0xfb, 0x19,
	0x3b, 0xd8, 0x6d, 0x32, 0x3b, 0x11, 0xdf, 0x24, 0xcd, 0x89, 0xf8, 0x5b, 0x04, 0x26, 0xe2, 0x6f,
	0x93, 0xb9, 0x89, 0xf8, 0x1d, 0xd2, 0x9a, 0x88, 0xdf, 0x25, 0xf3, 0xeb, 0xbf, 0xb7, 0x55, 0xcf,
	0x57, 0x56, 0xe3, 0x68, 0xcd, 0xe3, 0x25, 0x3a, 0x8f, 0x02, 0x32, 0x83, 0xd7, 0x33, 0x46, 0xed,
	0x67, 0x7e, 0x14, 0x76, 0x64, 0xcc, 0x18, 0x23, 0xf3, 0x7f, 0xa1, 0x92, 0x8a, 0x54, 0xd5, 0x08,
	0xfb, 0x24, 0x89, 0x88, 0x8d, 0xe6, 0x3f, 0xc6, 0xec, 0xf6, 0xfc, 0x30, 0x22, 0xd5, 0x89, 0x73,
	0x62, 0xae, 0x3b, 0xf6, 0xbb, 0xa4, 0x36, 0x71, 0xa7, 0x3b, 0x3c, 0x60, 0xa4, 0x4e, 0x5f, 0x85,
	0x97, 0x27, 0x1c, 0xa2, 0x78, 0x69, 0x25, 0x0d, 0x4c, 0x28, 0x63, 0x02, 0xa5, 0x8e, 0x67, 0x9f,
	0xcb, 0xbf, 0x4d, 0x9a, 0xcf, 0xe5, 0xef, 0x10, 0x78, 0x2e, 0x7f, 0x97, 0xcc, 0x3d, 0x97, 0x7f,
	0x87, 0xb4, 0x9e, 0xcb, 0xdf, 0x23, 0xf3, 0xeb, 0x1e, 0x5c, 0x3a, 0x1c, 0xa4, 0x67, 0xc7, 0xfc,
	0x29, 0x8b, 0x0f, 0x13, 0x7e, 0x1e, 0x06, 0x2c, 0x41, 0x63, 0x57, 0xe0, 0x5e, 0x98, 0xb0, 0x13,
	0x3f, 0xc5, 0x3c, 0x43, 0xa0, 0xa5, 0xe0, 0xad, 0x3e, 0x06, 0xcb, 0x2b, 0x40, 0xca, 0xaf, 0x07,
	0xe9, 0xd9, 0x83, 0x30, 0x23, 0x95, 0xf5, 0x3f, 0x57, 0x00, 0xf2, 0x1a, 0x10, 0xdb, 0x23, 0xcc,
	0x74, 0x6a, 0xf4, 0x88, 0x8b, 0x94, 0x85, 0xf1, 0x57, 0x61, 0x3b, 0x67, 0x7e, 0xb6, 0x1f, 0x9f,
	0x87, 0x59, 0x1e, 0x1c, 0x4b, 0xa6, 0xf8, 0xaf, 0x91, 0x0c, 0x8e, 0x25, 0x2e, 0x3a, 0x85, 0x47,
	0x03, 0x11, 0xcc, 0xc5, 0xcd, 0x6b, 0x54, 0xc2, 0x4f, 0xc3, 0x88, 0x89, 0xc7, 0x2d, 0x52, 0xc5,
	0xf3, 0x97, 0xdc, 0x1e, 0x4f, 0x9e, 0xf9, 0x49, 0xc0, 0x82, 0x5c, 0x25, 0xa4, 0x66, 0x6e, 0x6e,
	0xc7, 0x8f, 0x22, 0x52, 0xc7, 0x98, 0x5e, 0x62, 0xa5, 0x83, 0x35, 0x26, 0x13, 0x9b, 0x64, 0x76,
	0x32, 0xf1, 0x16, 0x69, 0x4e, 0x26, 0x30, 0xf0, 0x4d, 0x24, 0x30, 0xe8, 0x4d, 0x24, 0xee, 0x92,
	0x16, 0xd6, 0x40, 0x46, 0x65, 0x5d, 0x0a, 0x8a, 0xf4, 0x15, 0x45, 0xfc, 0xd9, 0x56, 0x14, 0x91,
	0x19, 0x34, 0xf6, 0x51, 0x22, 0x0f, 0x4d, 0x69, 0x9e, 0xdf, 0x4a, 0xb6, 0x1d, 0xa6, 0x7e, 0xf1,
	0xa5, 0xae, 0x63, 0xf5, 0xa5, 0x78, 0xf0, 0x25, 0x6c, 0x64, 0xd2, 0xe2, 0x33, 0xc9, 0x9e, 0x6e,
	0x2f, 0x7f, 0xfe, 0xf7, 0x95, 0x99, 0xcf, 0xbe, 0x5c, 0xb1, 0x3e, 0xff, 0x72, 0xc5, 0xfa, 0xdb,
	0x97, 0x2b, 0xd6, 0xc7, 0x5f, 0xad, 0xcc, 0x7c, 0xfe, 0xd5, 0xca, 0xcc, 0x17, 0x5f, 0xad, 0xcc,
	0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0x03, 0x91, 0x73, 0xd9, 0x7f, 0x27, 0x00, 0x00,
}

func (m *Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *MessageEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Message != nil {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.RequestID))
	i--
	dAtA[i] = 0x11
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Constructor))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MessageContainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageContainer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageContainer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Envelopes) > 0 {
		for iNdEx := len(m.Envelopes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Envelopes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCoreTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Length))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Timestamp))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x18
	if m.Update != nil {
		i -= len(m.Update)
		copy(dAtA[i:], m.Update)
		i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Update)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Constructor))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateContainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContainer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateContainer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCoreTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCoreTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.MaxUpdateID))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.MinUpdateID))
	i--
	dAtA[i] = 0x18
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCoreTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Length))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ProtoMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MessageKey != nil {
		i -= len(m.MessageKey)
		copy(dAtA[i:], m.MessageKey)
		i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.MessageKey)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.AuthID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ProtoEncryptedPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoEncryptedPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoEncryptedPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Envelope == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Envelope")
	} else {
		{
			size, err := m.Envelope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.SessionID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.MessageID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ServerSalt))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Items)
	copy(dAtA[i:], m.Items)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Items)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Code)
	copy(dAtA[i:], m.Code)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Code)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Ack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageIDs) > 0 {
		for iNdEx := len(m.MessageIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCoreTypes(dAtA, i, uint64(m.MessageIDs[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Result {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Dialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dialog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dialog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Draft != nil {
		{
			size, err := m.Draft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	i--
	if m.Pinned {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x50
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.MentionedCount))
	i--
	dAtA[i] = 0x48
	if m.NotifySettings != nil {
		{
			size, err := m.NotifySettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i--
	dAtA[i] = 0x39
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.UnreadCount))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ReadOutboxMaxID))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ReadInboxMaxID))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.TopMessageID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.PeerType))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.PeerID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *InputPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i--
	dAtA[i] = 0x19
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Peer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Peer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i--
	dAtA[i] = 0x19
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *InputPassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.M1 != nil {
		i -= len(m.M1)
		copy(dAtA[i:], m.M1)
		i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.M1)))
		i--
		dAtA[i] = 0x1a
	}
	if m.A != nil {
		i -= len(m.A)
		copy(dAtA[i:], m.A)
		i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.A)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.SrpID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *InputFileLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputFileLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputFileLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x20
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i--
	dAtA[i] = 0x19
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.FileID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ClusterID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FileLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i--
	dAtA[i] = 0x19
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.FileID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ClusterID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UserPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.PhotoID))
	i--
	dAtA[i] = 0x18
	if m.PhotoSmall == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("PhotoSmall")
	} else {
		{
			size, err := m.PhotoSmall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PhotoBig == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("PhotoBig")
	} else {
		{
			size, err := m.PhotoBig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InputUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i--
	dAtA[i] = 0x11
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Official {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	if m.BotInfo != nil {
		{
			size, err := m.BotInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	i--
	if m.Blocked {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x78
	i--
	if m.Deleted {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x70
	i--
	if m.IsBot {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x68
	if len(m.PhotoGallery) > 0 {
		for iNdEx := len(m.PhotoGallery) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PhotoGallery[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCoreTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.LastSeen))
	i--
	dAtA[i] = 0x58
	i -= len(m.Phone)
	copy(dAtA[i:], m.Phone)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Phone)))
	i--
	dAtA[i] = 0x52
	i -= len(m.Bio)
	copy(dAtA[i:], m.Bio)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Bio)))
	i--
	dAtA[i] = 0x4a
	if m.Photo != nil {
		{
			size, err := m.Photo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i--
	dAtA[i] = 0x39
	i--
	if m.Restricted {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Status))
	i--
	dAtA[i] = 0x28
	i -= len(m.Username)
	copy(dAtA[i:], m.Username)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Username)))
	i--
	dAtA[i] = 0x22
	i -= len(m.LastName)
	copy(dAtA[i:], m.LastName)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.LastName)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.FirstName)
	copy(dAtA[i:], m.FirstName)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.FirstName)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ContactUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Photo != nil {
		{
			size, err := m.Photo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ClientID))
	i--
	dAtA[i] = 0x38
	i -= len(m.Username)
	copy(dAtA[i:], m.Username)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Username)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Phone)
	copy(dAtA[i:], m.Phone)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Phone)))
	i--
	dAtA[i] = 0x2a
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i--
	dAtA[i] = 0x21
	i -= len(m.LastName)
	copy(dAtA[i:], m.LastName)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.LastName)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.FirstName)
	copy(dAtA[i:], m.FirstName)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.FirstName)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Bot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Bio)
	copy(dAtA[i:], m.Bio)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Bio)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Username)
	copy(dAtA[i:], m.Username)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Username)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *BotCommands) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotCommands) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotCommands) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Description)
	copy(dAtA[i:], m.Description)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Description)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Command)
	copy(dAtA[i:], m.Command)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Command)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BotInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.InlineQuery {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i -= len(m.InlinePlaceHolder)
	copy(dAtA[i:], m.InlinePlaceHolder)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.InlinePlaceHolder)))
	i--
	dAtA[i] = 0x32
	i--
	if m.InlineGeo {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	if len(m.BotCommands) > 0 {
		for iNdEx := len(m.BotCommands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BotCommands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCoreTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.Description)
	copy(dAtA[i:], m.Description)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Description)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x10
	if m.Bot == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Bot")
	} else {
		{
			size, err := m.Bot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupPhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupPhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.PhotoID))
	i--
	dAtA[i] = 0x18
	if m.PhotoSmall == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("PhotoSmall")
	} else {
		{
			size, err := m.PhotoSmall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PhotoBig == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("PhotoBig")
	} else {
		{
			size, err := m.PhotoBig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Photo != nil {
		{
			size, err := m.Photo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Flags) > 0 {
		for iNdEx := len(m.Flags) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCoreTypes(dAtA, i, uint64(m.Flags[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.EditedOn))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Participants))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.CreatedOn))
	i--
	dAtA[i] = 0x18
	i -= len(m.Title)
	copy(dAtA[i:], m.Title)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Title)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GroupFull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupFull) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupFull) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhotoGallery) > 0 {
		for iNdEx := len(m.PhotoGallery) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PhotoGallery[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCoreTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NotifySettings == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("NotifySettings")
	} else {
		{
			size, err := m.NotifySettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCoreTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCoreTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Group == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Group")
	} else {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupParticipant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupParticipant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Photo != nil {
		{
			size, err := m.Photo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCoreTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	i -= len(m.Username)
	copy(dAtA[i:], m.Username)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Username)))
	i--
	dAtA[i] = 0x32
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.AccessHash))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x20
	i -= len(m.LastName)
	copy(dAtA[i:], m.LastName)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.LastName)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.FirstName)
	copy(dAtA[i:], m.FirstName)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.FirstName)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UserMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ViaBotID))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc0
	if len(m.LabelIDs) > 0 {
		for iNdEx := len(m.LabelIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCoreTypes(dAtA, i, uint64(m.LabelIDs[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb8
		}
	}
	if m.ReplyMarkupData != nil {
		i -= len(m.ReplyMarkupData)
		copy(dAtA[i:], m.ReplyMarkupData)
		i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.ReplyMarkupData)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ReplyMarkup))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	if m.Media != nil {
		i -= len(m.Media)
		copy(dAtA[i:], m.Media)
		i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Media)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.MediaType))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCoreTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.MessageActionData != nil {
		i -= len(m.MessageActionData)
		copy(dAtA[i:], m.MessageActionData)
		i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.MessageActionData)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.MessageAction))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ReplyTo))
	i--
	dAtA[i] = 0x78
	i--
	if m.Inbox {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x70
	i--
	if m.ContentRead {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x68
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.SenderID))
	i--
	dAtA[i] = 0x60
	i -= len(m.Body)
	copy(dAtA[i:], m.Body)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Body)))
	i--
	dAtA[i] = 0x5a
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.MessageType))
	i--
	dAtA[i] = 0x50
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Flags))
	i--
	dAtA[i] = 0x48
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.FwdChannelMessageID))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.FwdChannelID))
	i--
	dAtA[i] = 0x38
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.FwdSenderID))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.EditedOn))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.CreatedOn))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.PeerType))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.PeerID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DraftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DraftMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DraftMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.EditedID))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ReplyTo))
	i--
	dAtA[i] = 0x38
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCoreTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	i -= len(m.Body)
	copy(dAtA[i:], m.Body)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Body)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Date))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.PeerType))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.PeerID))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *MessageEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageEntity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageEntity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Length))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Offset))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RSAPublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RSAPublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RSAPublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.E))
	i--
	dAtA[i] = 0x18
	i -= len(m.N)
	copy(dAtA[i:], m.N)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.N)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.FingerPrint))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *DHGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Gen))
	i--
	dAtA[i] = 0x18
	i -= len(m.Prime)
	copy(dAtA[i:], m.Prime)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Prime)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.FingerPrint))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PhoneContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Phone)
	copy(dAtA[i:], m.Phone)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Phone)))
	i--
	dAtA[i] = 0x22
	i -= len(m.LastName)
	copy(dAtA[i:], m.LastName)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.LastName)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.FirstName)
	copy(dAtA[i:], m.FirstName)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.FirstName)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ClientID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PeerNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerNotifySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Sound)
	copy(dAtA[i:], m.Sound)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Sound)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.MuteUntil))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Flags))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *InputFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.MD5Checksum)
	copy(dAtA[i:], m.MD5Checksum)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.MD5Checksum)))
	i--
	dAtA[i] = 0x22
	i -= len(m.FileName)
	copy(dAtA[i:], m.FileName)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.FileName)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.TotalParts))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.FileID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *InputDocument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputDocument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputDocument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ClusterID))
	i--
	dAtA[i] = 0x18
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i--
	dAtA[i] = 0x11
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PrivacyRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivacyRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivacyRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		for iNdEx := len(m.UserIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCoreTypes(dAtA, i, uint64(m.UserIDs[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.PrivacyType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Label) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Label) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Label) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x20
	i -= len(m.Colour)
	copy(dAtA[i:], m.Colour)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Colour)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *LabelsMany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelsMany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelsMany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Empty {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Labels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCoreTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InputGeoLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputGeoLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputGeoLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Long))))
	i--
	dAtA[i] = 0x15
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Lat))))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func (m *GeoLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Long))))
	i--
	dAtA[i] = 0x15
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Lat))))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func (m *InputTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InputTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i--
	dAtA[i] = 0x11
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCoreTypes(dAtA, i, uint64(m.Members[iNdEx]))
			i--
			dAtA[i] = 0x28
		}
	}
	if len(m.Managers) > 0 {
		for iNdEx := len(m.Managers) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCoreTypes(dAtA, i, uint64(m.Managers[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.CreatorID))
	i--
	dAtA[i] = 0x18
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintCoreTypes(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCoreTypes(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintCoreTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovCoreTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ID))
	return n
}

func (m *Pong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ID))
	return n
}

func (m *MessageEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.Constructor))
	n += 9
	if m.Message != nil {
		l = len(m.Message)
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	return n
}

func (m *MessageContainer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.Length))
	if len(m.Envelopes) > 0 {
		for _, e := range m.Envelopes {
			l = e.Size()
			n += 1 + l + sovCoreTypes(uint64(l))
		}
	}
	return n
}

func (m *UpdateEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.Constructor))
	if m.Update != nil {
		l = len(m.Update)
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	n += 1 + sovCoreTypes(uint64(m.UCount))
	n += 1 + sovCoreTypes(uint64(m.UpdateID))
	n += 1 + sovCoreTypes(uint64(m.Timestamp))
	return n
}

func (m *UpdateContainer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.Length))
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovCoreTypes(uint64(l))
		}
	}
	n += 1 + sovCoreTypes(uint64(m.MinUpdateID))
	n += 1 + sovCoreTypes(uint64(m.MaxUpdateID))
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovCoreTypes(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovCoreTypes(uint64(l))
		}
	}
	return n
}

func (m *ProtoMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.AuthID))
	if m.MessageKey != nil {
		l = len(m.MessageKey)
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	if m.Payload != nil {
		l = len(m.Payload)
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	return n
}

func (m *ProtoEncryptedPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ServerSalt))
	n += 1 + sovCoreTypes(uint64(m.MessageID))
	n += 1 + sovCoreTypes(uint64(m.SessionID))
	if m.Envelope != nil {
		l = m.Envelope.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	n += 1 + l + sovCoreTypes(uint64(l))
	l = len(m.Items)
	n += 1 + l + sovCoreTypes(uint64(l))
	return n
}

func (m *Ack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MessageIDs) > 0 {
		for _, e := range m.MessageIDs {
			n += 1 + sovCoreTypes(uint64(e))
		}
	}
	return n
}

func (m *Bool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *Dialog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.PeerID))
	n += 1 + sovCoreTypes(uint64(m.PeerType))
	n += 1 + sovCoreTypes(uint64(m.TopMessageID))
	n += 1 + sovCoreTypes(uint64(m.ReadInboxMaxID))
	n += 1 + sovCoreTypes(uint64(m.ReadOutboxMaxID))
	n += 1 + sovCoreTypes(uint64(m.UnreadCount))
	n += 9
	if m.NotifySettings != nil {
		l = m.NotifySettings.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	n += 1 + sovCoreTypes(uint64(m.MentionedCount))
	n += 2
	if m.Draft != nil {
		l = m.Draft.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	return n
}

func (m *InputPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ID))
	n += 1 + sovCoreTypes(uint64(m.Type))
	n += 9
	return n
}

func (m *Peer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ID))
	n += 1 + sovCoreTypes(uint64(m.Type))
	n += 9
	return n
}

func (m *InputPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.SrpID))
	if m.A != nil {
		l = len(m.A)
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	if m.M1 != nil {
		l = len(m.M1)
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	return n
}

func (m *InputFileLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ClusterID))
	n += 1 + sovCoreTypes(uint64(m.FileID))
	n += 9
	n += 1 + sovCoreTypes(uint64(m.Version))
	return n
}

func (m *FileLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ClusterID))
	n += 1 + sovCoreTypes(uint64(m.FileID))
	n += 9
	return n
}

func (m *UserPhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhotoBig != nil {
		l = m.PhotoBig.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	if m.PhotoSmall != nil {
		l = m.PhotoSmall.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	n += 1 + sovCoreTypes(uint64(m.PhotoID))
	return n
}

func (m *InputUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.UserID))
	n += 9
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ID))
	l = len(m.FirstName)
	n += 1 + l + sovCoreTypes(uint64(l))
	l = len(m.LastName)
	n += 1 + l + sovCoreTypes(uint64(l))
	l = len(m.Username)
	n += 1 + l + sovCoreTypes(uint64(l))
	n += 1 + sovCoreTypes(uint64(m.Status))
	n += 2
	n += 9
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	l = len(m.Bio)
	n += 1 + l + sovCoreTypes(uint64(l))
	l = len(m.Phone)
	n += 1 + l + sovCoreTypes(uint64(l))
	n += 1 + sovCoreTypes(uint64(m.LastSeen))
	if len(m.PhotoGallery) > 0 {
		for _, e := range m.PhotoGallery {
			l = e.Size()
			n += 1 + l + sovCoreTypes(uint64(l))
		}
	}
	n += 2
	n += 2
	n += 2
	if m.BotInfo != nil {
		l = m.BotInfo.Size()
		n += 2 + l + sovCoreTypes(uint64(l))
	}
	n += 3
	return n
}

func (m *ContactUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ID))
	l = len(m.FirstName)
	n += 1 + l + sovCoreTypes(uint64(l))
	l = len(m.LastName)
	n += 1 + l + sovCoreTypes(uint64(l))
	n += 9
	l = len(m.Phone)
	n += 1 + l + sovCoreTypes(uint64(l))
	l = len(m.Username)
	n += 1 + l + sovCoreTypes(uint64(l))
	n += 1 + sovCoreTypes(uint64(m.ClientID))
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	return n
}

func (m *Bot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ID))
	l = len(m.Name)
	n += 1 + l + sovCoreTypes(uint64(l))
	l = len(m.Username)
	n += 1 + l + sovCoreTypes(uint64(l))
	l = len(m.Bio)
	n += 1 + l + sovCoreTypes(uint64(l))
	return n
}

func (m *BotCommands) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Command)
	n += 1 + l + sovCoreTypes(uint64(l))
	l = len(m.Description)
	n += 1 + l + sovCoreTypes(uint64(l))
	return n
}

func (m *BotInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bot != nil {
		l = m.Bot.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	n += 1 + sovCoreTypes(uint64(m.UserID))
	l = len(m.Description)
	n += 1 + l + sovCoreTypes(uint64(l))
	if len(m.BotCommands) > 0 {
		for _, e := range m.BotCommands {
			l = e.Size()
			n += 1 + l + sovCoreTypes(uint64(l))
		}
	}
	n += 2
	l = len(m.InlinePlaceHolder)
	n += 1 + l + sovCoreTypes(uint64(l))
	n += 2
	return n
}

func (m *GroupPhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhotoBig != nil {
		l = m.PhotoBig.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	if m.PhotoSmall != nil {
		l = m.PhotoSmall.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	n += 1 + sovCoreTypes(uint64(m.PhotoID))
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ID))
	l = len(m.Title)
	n += 1 + l + sovCoreTypes(uint64(l))
	n += 1 + sovCoreTypes(uint64(m.CreatedOn))
	n += 1 + sovCoreTypes(uint64(m.Participants))
	n += 1 + sovCoreTypes(uint64(m.EditedOn))
	if len(m.Flags) > 0 {
		for _, e := range m.Flags {
			n += 1 + sovCoreTypes(uint64(e))
		}
	}
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	return n
}

func (m *GroupFull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovCoreTypes(uint64(l))
		}
	}
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovCoreTypes(uint64(l))
		}
	}
	if m.NotifySettings != nil {
		l = m.NotifySettings.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	if len(m.PhotoGallery) > 0 {
		for _, e := range m.PhotoGallery {
			l = e.Size()
			n += 1 + l + sovCoreTypes(uint64(l))
		}
	}
	return n
}

func (m *GroupParticipant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.UserID))
	l = len(m.FirstName)
	n += 1 + l + sovCoreTypes(uint64(l))
	l = len(m.LastName)
	n += 1 + l + sovCoreTypes(uint64(l))
	n += 1 + sovCoreTypes(uint64(m.Type))
	n += 1 + sovCoreTypes(uint64(m.AccessHash))
	l = len(m.Username)
	n += 1 + l + sovCoreTypes(uint64(l))
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovCoreTypes(uint64(l))
	}
	return n
}

func (m *UserMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ID))
	n += 1 + sovCoreTypes(uint64(m.PeerID))
	n += 1 + sovCoreTypes(uint64(m.PeerType))
	n += 1 + sovCoreTypes(uint64(m.CreatedOn))
	n += 1 + sovCoreTypes(uint64(m.EditedOn))
	n += 1 + sovCoreTypes(uint64(m.FwdSenderID))
	n += 1 + sovCoreTypes(uint64(m.FwdChannelID))
	n += 1 + sovCoreTypes(uint64(m.FwdChannelMessageID))
	n += 1 + sovCoreTypes(uint64(m.Flags))
	n += 1 + sovCoreTypes(uint64(m.MessageType))
	l = len(m.Body)
	n += 1 + l + sovCoreTypes(uint64(l))
	n += 1 + sovCoreTypes(uint64(m.SenderID))
	n += 2
	n += 2
	n += 1 + sovCoreTypes(uint64(m.ReplyTo))
	n += 2 + sovCoreTypes(uint64(m.MessageAction))
	if m.MessageActionData != nil {
		l = len(m.MessageActionData)
		n += 2 + l + sovCoreTypes(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 2 + l + sovCoreTypes(uint64(l))
		}
	}
	n += 2 + sovCoreTypes(uint64(m.MediaType))
	if m.Media != nil {
		l = len(m.Media)
		n += 2 + l + sovCoreTypes(uint64(l))
	}
	n += 2 + sovCoreTypes(uint64(m.ReplyMarkup))
	if m.ReplyMarkupData != nil {
		l = len(m.ReplyMarkupData)
		n += 2 + l + sovCoreTypes(uint64(l))
	}
	if len(m.LabelIDs) > 0 {
		for _, e := range m.LabelIDs {
			n += 2 + sovCoreTypes(uint64(e))
		}
	}
	n += 2 + sovCoreTypes(uint64(m.ViaBotID))
	return n
}

func (m *DraftMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.PeerID))
	n += 1 + sovCoreTypes(uint64(m.PeerType))
	n += 1 + sovCoreTypes(uint64(m.Date))
	l = len(m.Body)
	n += 1 + l + sovCoreTypes(uint64(l))
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovCoreTypes(uint64(l))
		}
	}
	n += 1 + sovCoreTypes(uint64(m.ReplyTo))
	n += 1 + sovCoreTypes(uint64(m.EditedID))
	return n
}

func (m *MessageEntity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.Type))
	n += 1 + sovCoreTypes(uint64(m.Offset))
	n += 1 + sovCoreTypes(uint64(m.Length))
	n += 1 + sovCoreTypes(uint64(m.UserID))
	return n
}

func (m *RSAPublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.FingerPrint))
	l = len(m.N)
	n += 1 + l + sovCoreTypes(uint64(l))
	n += 1 + sovCoreTypes(uint64(m.E))
	return n
}

func (m *DHGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.FingerPrint))
	l = len(m.Prime)
	n += 1 + l + sovCoreTypes(uint64(l))
	n += 1 + sovCoreTypes(uint64(m.Gen))
	return n
}

func (m *PhoneContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ClientID))
	l = len(m.FirstName)
	n += 1 + l + sovCoreTypes(uint64(l))
	l = len(m.LastName)
	n += 1 + l + sovCoreTypes(uint64(l))
	l = len(m.Phone)
	n += 1 + l + sovCoreTypes(uint64(l))
	return n
}

func (m *PeerNotifySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.Flags))
	n += 1 + sovCoreTypes(uint64(m.MuteUntil))
	l = len(m.Sound)
	n += 1 + l + sovCoreTypes(uint64(l))
	return n
}

func (m *InputFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.FileID))
	n += 1 + sovCoreTypes(uint64(m.TotalParts))
	l = len(m.FileName)
	n += 1 + l + sovCoreTypes(uint64(l))
	l = len(m.MD5Checksum)
	n += 1 + l + sovCoreTypes(uint64(l))
	return n
}

func (m *InputDocument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ID))
	n += 9
	n += 1 + sovCoreTypes(uint64(m.ClusterID))
	return n
}

func (m *PrivacyRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.PrivacyType))
	if len(m.UserIDs) > 0 {
		for _, e := range m.UserIDs {
			n += 1 + sovCoreTypes(uint64(e))
		}
	}
	return n
}

func (m *Label) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ID))
	l = len(m.Name)
	n += 1 + l + sovCoreTypes(uint64(l))
	l = len(m.Colour)
	n += 1 + l + sovCoreTypes(uint64(l))
	n += 1 + sovCoreTypes(uint64(m.Count))
	return n
}

func (m *LabelsMany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovCoreTypes(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *InputGeoLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	n += 5
	return n
}

func (m *GeoLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	n += 5
	return n
}

func (m *InputTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ID))
	n += 9
	return n
}

func (m *Team) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCoreTypes(uint64(m.ID))
	l = len(m.Name)
	n += 1 + l + sovCoreTypes(uint64(l))
	n += 1 + sovCoreTypes(uint64(m.CreatorID))
	if len(m.Managers) > 0 {
		for _, e := range m.Managers {
			n += 1 + sovCoreTypes(uint64(e))
		}
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			n += 1 + sovCoreTypes(uint64(e))
		}
	}
	return n
}

func sovCoreTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCoreTypes(x uint64) (n int) {
	return sovCoreTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ping) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pong) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageEnvelope) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &InputTeam{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Constructor")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RequestID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Message")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageContainer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageContainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageContainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envelopes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Envelopes = append(m.Envelopes, &MessageEnvelope{})
			if err := m.Envelopes[len(m.Envelopes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Length")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEnvelope) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = append(m.Update[:0], dAtA[iNdEx:postIndex]...)
			if m.Update == nil {
				m.Update = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Constructor")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Update")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Timestamp")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContainer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &UpdateEnvelope{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinUpdateID", wireType)
			}
			m.MinUpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinUpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUpdateID", wireType)
			}
			m.MaxUpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Length")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MinUpdateID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MaxUpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthID", wireType)
			}
			m.AuthID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageKey = append(m.MessageKey[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageKey == nil {
				m.MessageKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Payload")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoEncryptedPayload) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoEncryptedPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoEncryptedPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerSalt", wireType)
			}
			m.ServerSalt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerSalt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			m.SessionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envelope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Envelope == nil {
				m.Envelope = &MessageEnvelope{}
			}
			if err := m.Envelope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ServerSalt")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MessageID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SessionID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Envelope")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Code")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Items")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoreTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoreTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCoreTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCoreTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCoreTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bool) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Result")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dialog) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMessageID", wireType)
			}
			m.TopMessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMessageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadInboxMaxID", wireType)
			}
			m.ReadInboxMaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadInboxMaxID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOutboxMaxID", wireType)
			}
			m.ReadOutboxMaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadOutboxMaxID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifySettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotifySettings == nil {
				m.NotifySettings = &PeerNotifySettings{}
			}
			if err := m.NotifySettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MentionedCount", wireType)
			}
			m.MentionedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MentionedCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pinned = bool(v != 0)
			hasFields[0] |= uint64(0x00000080)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Draft == nil {
				m.Draft = &DraftMessage{}
			}
			if err := m.Draft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerType")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TopMessageID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ReadInboxMaxID")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ReadOutboxMaxID")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UnreadCount")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Pinned")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputPeer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PeerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Peer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputPassword) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputPassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputPassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrpID", wireType)
			}
			m.SrpID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrpID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A = append(m.A[:0], dAtA[iNdEx:postIndex]...)
			if m.A == nil {
				m.A = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.M1 = append(m.M1[:0], dAtA[iNdEx:postIndex]...)
			if m.M1 == nil {
				m.M1 = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SrpID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("A")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("M1")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputFileLocation) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputFileLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputFileLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			m.FileID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ClusterID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FileID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileLocation) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			m.FileID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ClusterID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FileID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPhoto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoBig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PhotoBig == nil {
				m.PhotoBig = &FileLocation{}
			}
			if err := m.PhotoBig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoSmall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PhotoSmall == nil {
				m.PhotoSmall = &FileLocation{}
			}
			if err := m.PhotoSmall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoID", wireType)
			}
			m.PhotoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhotoID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PhotoBig")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PhotoSmall")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PhotoID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= UserStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Restricted = bool(v != 0)
			hasFields[0] |= uint64(0x00000010)
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000020)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &UserPhoto{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			m.LastSeen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeen |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoGallery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhotoGallery = append(m.PhotoGallery, &UserPhoto{})
			if err := m.PhotoGallery[len(m.PhotoGallery)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Blocked = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BotInfo == nil {
				m.BotInfo = &BotInfo{}
			}
			if err := m.BotInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Official = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FirstName")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LastName")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Status")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Restricted")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactUser) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			m.ClientID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &UserPhoto{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FirstName")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LastName")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Phone")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Username")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ClientID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bot) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Username")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotCommands) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotCommands: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotCommands: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Command")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bot == nil {
				m.Bot = &Bot{}
			}
			if err := m.Bot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotCommands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotCommands = append(m.BotCommands, &BotCommands{})
			if err := m.BotCommands[len(m.BotCommands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineGeo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InlineGeo = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlinePlaceHolder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InlinePlaceHolder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineQuery", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InlineQuery = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Bot")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupPhoto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoBig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PhotoBig == nil {
				m.PhotoBig = &FileLocation{}
			}
			if err := m.PhotoBig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoSmall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PhotoSmall == nil {
				m.PhotoSmall = &FileLocation{}
			}
			if err := m.PhotoSmall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoID", wireType)
			}
			m.PhotoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhotoID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PhotoBig")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PhotoSmall")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			m.Participants = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Participants |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditedOn", wireType)
			}
			m.EditedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v GroupFlags
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoreTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= GroupFlags(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Flags = append(m.Flags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoreTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCoreTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCoreTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Flags) == 0 {
					m.Flags = make([]GroupFlags, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v GroupFlags
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCoreTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= GroupFlags(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Flags = append(m.Flags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &GroupPhoto{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Title")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CreatedOn")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Participants")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupFull) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupFull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupFull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &GroupParticipant{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifySettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotifySettings == nil {
				m.NotifySettings = &PeerNotifySettings{}
			}
			if err := m.NotifySettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoGallery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhotoGallery = append(m.PhotoGallery, &GroupPhoto{})
			if err := m.PhotoGallery[len(m.PhotoGallery)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Group")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NotifySettings")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupParticipant) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ParticipantType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &UserPhoto{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FirstName")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LastName")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Username")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditedOn", wireType)
			}
			m.EditedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdSenderID", wireType)
			}
			m.FwdSenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FwdSenderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdChannelID", wireType)
			}
			m.FwdChannelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FwdChannelID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdChannelMessageID", wireType)
			}
			m.FwdChannelMessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FwdChannelMessageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000400)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000800)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContentRead = bool(v != 0)
			hasFields[0] |= uint64(0x00001000)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inbox", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inbox = bool(v != 0)
			hasFields[0] |= uint64(0x00002000)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			m.ReplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00004000)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageAction", wireType)
			}
			m.MessageAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageAction |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageActionData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageActionData = append(m.MessageActionData[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageActionData == nil {
				m.MessageActionData = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= MediaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media[:0], dAtA[iNdEx:postIndex]...)
			if m.Media == nil {
				m.Media = []byte{}
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			m.ReplyMarkup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyMarkup |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkupData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkupData = append(m.ReplyMarkupData[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkupData == nil {
				m.ReplyMarkupData = []byte{}
			}
			iNdEx = postIndex
		case 23:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoreTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoreTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCoreTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCoreTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCoreTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViaBotID", wireType)
			}
			m.ViaBotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViaBotID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerType")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CreatedOn")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("EditedOn")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FwdSenderID")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FwdChannelID")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FwdChannelMessageID")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Flags")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MessageType")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Body")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SenderID")
	}
	if hasFields[0]&uint64(0x00001000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ContentRead")
	}
	if hasFields[0]&uint64(0x00002000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Inbox")
	}
	if hasFields[0]&uint64(0x00004000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ReplyTo")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DraftMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DraftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DraftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			m.ReplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditedID", wireType)
			}
			m.EditedID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditedID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerType")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Date")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Body")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ReplyTo")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageEntity) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MessageEntityType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Offset")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Length")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RSAPublicKey) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RSAPublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RSAPublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FingerPrint", wireType)
			}
			m.FingerPrint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FingerPrint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.N = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			m.E = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.E |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FingerPrint")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("N")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("E")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHGroup) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FingerPrint", wireType)
			}
			m.FingerPrint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FingerPrint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gen", wireType)
			}
			m.Gen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gen |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FingerPrint")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Prime")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Gen")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneContact) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			m.ClientID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ClientID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FirstName")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LastName")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Phone")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerNotifySettings) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuteUntil", wireType)
			}
			m.MuteUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MuteUntil |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Flags")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputFile) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileID", wireType)
			}
			m.FileID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalParts", wireType)
			}
			m.TotalParts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalParts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MD5Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MD5Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FileID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TotalParts")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FileName")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MD5Checksum")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputDocument) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputDocument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputDocument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ClusterID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivacyRule) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivacyRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivacyRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacyType", wireType)
			}
			m.PrivacyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivacyType |= PrivacyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoreTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIDs = append(m.UserIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoreTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCoreTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCoreTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIDs) == 0 {
					m.UserIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCoreTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIDs = append(m.UserIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PrivacyType")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Label) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Label: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Label: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colour", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Colour = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Colour")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelsMany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelsMany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelsMany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, &Label{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Empty = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputGeoLocation) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputGeoLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputGeoLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Lat = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Long", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Long = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Lat")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Long")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoLocation) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Lat = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Long", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Long = float32(math.Float32frombits(v))
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Lat")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Long")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputTeam) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoreTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorID", wireType)
			}
			m.CreatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoreTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Managers = append(m.Managers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoreTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCoreTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCoreTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Managers) == 0 {
					m.Managers = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCoreTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Managers = append(m.Managers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Managers", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoreTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Members = append(m.Members, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoreTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCoreTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCoreTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Members) == 0 {
					m.Members = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCoreTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Members = append(m.Members, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoreTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoreTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CreatorID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoreTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoreTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoreTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoreTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCoreTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCoreTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCoreTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoreTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCoreTypes = fmt.Errorf("proto: unexpected end of group")
)
