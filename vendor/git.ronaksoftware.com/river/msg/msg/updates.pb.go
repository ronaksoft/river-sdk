// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: updates.proto

package msg

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UpdateGetState
// @Function
// @Return: UpdateState
type UpdateGetState struct {
}

func (m *UpdateGetState) Reset()         { *m = UpdateGetState{} }
func (m *UpdateGetState) String() string { return proto.CompactTextString(m) }
func (*UpdateGetState) ProtoMessage()    {}
func (*UpdateGetState) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{0}
}
func (m *UpdateGetState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGetState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGetState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGetState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGetState.Merge(m, src)
}
func (m *UpdateGetState) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGetState) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGetState.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGetState proto.InternalMessageInfo

// UpdateGetDifference
// @Function
// @Return: UpdateDifference
type UpdateGetDifference struct {
	From  int64 `protobuf:"varint,1,req,name=From" json:"From"`
	Limit int32 `protobuf:"varint,2,req,name=Limit" json:"Limit"`
}

func (m *UpdateGetDifference) Reset()         { *m = UpdateGetDifference{} }
func (m *UpdateGetDifference) String() string { return proto.CompactTextString(m) }
func (*UpdateGetDifference) ProtoMessage()    {}
func (*UpdateGetDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{1}
}
func (m *UpdateGetDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGetDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGetDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGetDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGetDifference.Merge(m, src)
}
func (m *UpdateGetDifference) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGetDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGetDifference.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGetDifference proto.InternalMessageInfo

func (m *UpdateGetDifference) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *UpdateGetDifference) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// UpdateDifference
type UpdateDifference struct {
	More            bool              `protobuf:"varint,1,req,name=More" json:"More"`
	MaxUpdateID     int64             `protobuf:"varint,2,req,name=MaxUpdateID" json:"MaxUpdateID"`
	MinUpdateID     int64             `protobuf:"varint,3,req,name=MinUpdateID" json:"MinUpdateID"`
	Updates         []*UpdateEnvelope `protobuf:"bytes,4,rep,name=Updates" json:"Updates,omitempty"`
	Users           []*User           `protobuf:"bytes,5,rep,name=Users" json:"Users,omitempty"`
	Groups          []*Group          `protobuf:"bytes,6,rep,name=Groups" json:"Groups,omitempty"`
	CurrentUpdateID int64             `protobuf:"varint,7,opt,name=CurrentUpdateID" json:"CurrentUpdateID"`
}

func (m *UpdateDifference) Reset()         { *m = UpdateDifference{} }
func (m *UpdateDifference) String() string { return proto.CompactTextString(m) }
func (*UpdateDifference) ProtoMessage()    {}
func (*UpdateDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{2}
}
func (m *UpdateDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDifference.Merge(m, src)
}
func (m *UpdateDifference) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDifference.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDifference proto.InternalMessageInfo

func (m *UpdateDifference) GetMore() bool {
	if m != nil {
		return m.More
	}
	return false
}

func (m *UpdateDifference) GetMaxUpdateID() int64 {
	if m != nil {
		return m.MaxUpdateID
	}
	return 0
}

func (m *UpdateDifference) GetMinUpdateID() int64 {
	if m != nil {
		return m.MinUpdateID
	}
	return 0
}

func (m *UpdateDifference) GetUpdates() []*UpdateEnvelope {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *UpdateDifference) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UpdateDifference) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *UpdateDifference) GetCurrentUpdateID() int64 {
	if m != nil {
		return m.CurrentUpdateID
	}
	return 0
}

// UpdateTooLong
type UpdateTooLong struct {
}

func (m *UpdateTooLong) Reset()         { *m = UpdateTooLong{} }
func (m *UpdateTooLong) String() string { return proto.CompactTextString(m) }
func (*UpdateTooLong) ProtoMessage()    {}
func (*UpdateTooLong) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{3}
}
func (m *UpdateTooLong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTooLong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTooLong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTooLong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTooLong.Merge(m, src)
}
func (m *UpdateTooLong) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTooLong) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTooLong.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTooLong proto.InternalMessageInfo

// UpdateState
type UpdateState struct {
	UpdateID int64 `protobuf:"varint,1,req,name=UpdateID" json:"UpdateID"`
}

func (m *UpdateState) Reset()         { *m = UpdateState{} }
func (m *UpdateState) String() string { return proto.CompactTextString(m) }
func (*UpdateState) ProtoMessage()    {}
func (*UpdateState) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{4}
}
func (m *UpdateState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateState.Merge(m, src)
}
func (m *UpdateState) XXX_Size() int {
	return m.Size()
}
func (m *UpdateState) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateState.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateState proto.InternalMessageInfo

func (m *UpdateState) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

// UpdateMessageID
type UpdateMessageID struct {
	UCount    int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	MessageID int64 `protobuf:"varint,1,req,name=MessageID" json:"MessageID"`
	RandomID  int64 `protobuf:"varint,2,req,name=RandomID" json:"RandomID"`
}

func (m *UpdateMessageID) Reset()         { *m = UpdateMessageID{} }
func (m *UpdateMessageID) String() string { return proto.CompactTextString(m) }
func (*UpdateMessageID) ProtoMessage()    {}
func (*UpdateMessageID) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{5}
}
func (m *UpdateMessageID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageID.Merge(m, src)
}
func (m *UpdateMessageID) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageID) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageID.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageID proto.InternalMessageInfo

func (m *UpdateMessageID) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateMessageID) GetMessageID() int64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *UpdateMessageID) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

// UpdateNewMessage
type UpdateNewMessage struct {
	UCount      int32        `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID    int64        `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	Message     *UserMessage `protobuf:"bytes,1,req,name=Message" json:"Message,omitempty"`
	Sender      *User        `protobuf:"bytes,2,req,name=Sender" json:"Sender,omitempty"`
	AccessHash  uint64       `protobuf:"fixed64,3,opt,name=AccessHash" json:"AccessHash"`
	SenderRefID int64        `protobuf:"varint,4,opt,name=SenderRefID" json:"SenderRefID"`
}

func (m *UpdateNewMessage) Reset()         { *m = UpdateNewMessage{} }
func (m *UpdateNewMessage) String() string { return proto.CompactTextString(m) }
func (*UpdateNewMessage) ProtoMessage()    {}
func (*UpdateNewMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{6}
}
func (m *UpdateNewMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNewMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNewMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNewMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNewMessage.Merge(m, src)
}
func (m *UpdateNewMessage) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNewMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNewMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNewMessage proto.InternalMessageInfo

func (m *UpdateNewMessage) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateNewMessage) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateNewMessage) GetMessage() *UserMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *UpdateNewMessage) GetSender() *User {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *UpdateNewMessage) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *UpdateNewMessage) GetSenderRefID() int64 {
	if m != nil {
		return m.SenderRefID
	}
	return 0
}

// UpdateMessageEdited
type UpdateMessageEdited struct {
	UCount   int32        `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64        `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	Message  *UserMessage `protobuf:"bytes,1,req,name=Message" json:"Message,omitempty"`
}

func (m *UpdateMessageEdited) Reset()         { *m = UpdateMessageEdited{} }
func (m *UpdateMessageEdited) String() string { return proto.CompactTextString(m) }
func (*UpdateMessageEdited) ProtoMessage()    {}
func (*UpdateMessageEdited) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{7}
}
func (m *UpdateMessageEdited) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageEdited) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageEdited.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageEdited) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageEdited.Merge(m, src)
}
func (m *UpdateMessageEdited) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageEdited) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageEdited.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageEdited proto.InternalMessageInfo

func (m *UpdateMessageEdited) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateMessageEdited) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateMessageEdited) GetMessage() *UserMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

// UpdateMessageDeleted
type UpdateMessagesDeleted struct {
	UCount     int32   `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID   int64   `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	TeamID     int64   `protobuf:"varint,102,opt,name=TeamID" json:"TeamID"`
	MessageIDs []int64 `protobuf:"varint,1,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
	Peer       *Peer   `protobuf:"bytes,2,opt,name=Peer" json:"Peer,omitempty"`
}

func (m *UpdateMessagesDeleted) Reset()         { *m = UpdateMessagesDeleted{} }
func (m *UpdateMessagesDeleted) String() string { return proto.CompactTextString(m) }
func (*UpdateMessagesDeleted) ProtoMessage()    {}
func (*UpdateMessagesDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{8}
}
func (m *UpdateMessagesDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessagesDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessagesDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessagesDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessagesDeleted.Merge(m, src)
}
func (m *UpdateMessagesDeleted) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessagesDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessagesDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessagesDeleted proto.InternalMessageInfo

func (m *UpdateMessagesDeleted) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateMessagesDeleted) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateMessagesDeleted) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateMessagesDeleted) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

func (m *UpdateMessagesDeleted) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// UpdateReadHistoryInbox
type UpdateReadHistoryInbox struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	TeamID   int64 `protobuf:"varint,102,opt,name=TeamID" json:"TeamID"`
	Peer     *Peer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	MaxID    int64 `protobuf:"varint,2,req,name=MaxID" json:"MaxID"`
}

func (m *UpdateReadHistoryInbox) Reset()         { *m = UpdateReadHistoryInbox{} }
func (m *UpdateReadHistoryInbox) String() string { return proto.CompactTextString(m) }
func (*UpdateReadHistoryInbox) ProtoMessage()    {}
func (*UpdateReadHistoryInbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{9}
}
func (m *UpdateReadHistoryInbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateReadHistoryInbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateReadHistoryInbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateReadHistoryInbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReadHistoryInbox.Merge(m, src)
}
func (m *UpdateReadHistoryInbox) XXX_Size() int {
	return m.Size()
}
func (m *UpdateReadHistoryInbox) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReadHistoryInbox.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReadHistoryInbox proto.InternalMessageInfo

func (m *UpdateReadHistoryInbox) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateReadHistoryInbox) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateReadHistoryInbox) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateReadHistoryInbox) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateReadHistoryInbox) GetMaxID() int64 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

// UpdateReadHistoryOutbox
type UpdateReadHistoryOutbox struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	TeamID   int64 `protobuf:"varint,102,opt,name=TeamID" json:"TeamID"`
	Peer     *Peer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	MaxID    int64 `protobuf:"varint,2,req,name=MaxID" json:"MaxID"`
}

func (m *UpdateReadHistoryOutbox) Reset()         { *m = UpdateReadHistoryOutbox{} }
func (m *UpdateReadHistoryOutbox) String() string { return proto.CompactTextString(m) }
func (*UpdateReadHistoryOutbox) ProtoMessage()    {}
func (*UpdateReadHistoryOutbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{10}
}
func (m *UpdateReadHistoryOutbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateReadHistoryOutbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateReadHistoryOutbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateReadHistoryOutbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReadHistoryOutbox.Merge(m, src)
}
func (m *UpdateReadHistoryOutbox) XXX_Size() int {
	return m.Size()
}
func (m *UpdateReadHistoryOutbox) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReadHistoryOutbox.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReadHistoryOutbox proto.InternalMessageInfo

func (m *UpdateReadHistoryOutbox) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateReadHistoryOutbox) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateReadHistoryOutbox) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateReadHistoryOutbox) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateReadHistoryOutbox) GetMaxID() int64 {
	if m != nil {
		return m.MaxID
	}
	return 0
}

// UpdateUserTyping
type UpdateUserTyping struct {
	UCount   int32        `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	TeamID   int64        `protobuf:"varint,102,opt,name=TeamID" json:"TeamID"`
	UserID   int64        `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	Action   TypingAction `protobuf:"varint,2,req,name=Action,enum=msg.TypingAction" json:"Action"`
	PeerID   int64        `protobuf:"varint,3,req,name=PeerID" json:"PeerID"`
	PeerType int32        `protobuf:"varint,4,opt,name=PeerType" json:"PeerType"`
}

func (m *UpdateUserTyping) Reset()         { *m = UpdateUserTyping{} }
func (m *UpdateUserTyping) String() string { return proto.CompactTextString(m) }
func (*UpdateUserTyping) ProtoMessage()    {}
func (*UpdateUserTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{11}
}
func (m *UpdateUserTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserTyping.Merge(m, src)
}
func (m *UpdateUserTyping) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserTyping.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserTyping proto.InternalMessageInfo

func (m *UpdateUserTyping) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateUserTyping) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateUserTyping) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateUserTyping) GetAction() TypingAction {
	if m != nil {
		return m.Action
	}
	return TypingActionTyping
}

func (m *UpdateUserTyping) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *UpdateUserTyping) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

// UpdateUserStatus
type UpdateUserStatus struct {
	UCount int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UserID int64 `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	Status int32 `protobuf:"varint,2,req,name=Status" json:"Status"`
}

func (m *UpdateUserStatus) Reset()         { *m = UpdateUserStatus{} }
func (m *UpdateUserStatus) String() string { return proto.CompactTextString(m) }
func (*UpdateUserStatus) ProtoMessage()    {}
func (*UpdateUserStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{12}
}
func (m *UpdateUserStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserStatus.Merge(m, src)
}
func (m *UpdateUserStatus) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserStatus proto.InternalMessageInfo

func (m *UpdateUserStatus) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateUserStatus) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateUserStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// UpdateUsername
type UpdateUsername struct {
	UCount    int32  `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID  int64  `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	UserID    int64  `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	Username  string `protobuf:"bytes,2,req,name=Username" json:"Username"`
	FirstName string `protobuf:"bytes,3,req,name=FirstName" json:"FirstName"`
	LastName  string `protobuf:"bytes,4,req,name=LastName" json:"LastName"`
	Bio       string `protobuf:"bytes,5,req,name=Bio" json:"Bio"`
	Phone     string `protobuf:"bytes,6,opt,name=Phone" json:"Phone"`
}

func (m *UpdateUsername) Reset()         { *m = UpdateUsername{} }
func (m *UpdateUsername) String() string { return proto.CompactTextString(m) }
func (*UpdateUsername) ProtoMessage()    {}
func (*UpdateUsername) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{13}
}
func (m *UpdateUsername) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUsername) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUsername.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUsername) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUsername.Merge(m, src)
}
func (m *UpdateUsername) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUsername) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUsername.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUsername proto.InternalMessageInfo

func (m *UpdateUsername) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateUsername) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateUsername) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UpdateUsername) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UpdateUsername) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UpdateUsername) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

func (m *UpdateUsername) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// UpdateUserPhoto
type UpdateUserPhoto struct {
	UCount          int32      `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID        int64      `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	UserID          int64      `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	Photo           *UserPhoto `protobuf:"bytes,2,opt,name=Photo" json:"Photo,omitempty"`
	PhotoID         int64      `protobuf:"varint,3,opt,name=PhotoID" json:"PhotoID"`
	DeletedPhotoIDs []int64    `protobuf:"varint,4,rep,name=DeletedPhotoIDs" json:"DeletedPhotoIDs,omitempty"`
}

func (m *UpdateUserPhoto) Reset()         { *m = UpdateUserPhoto{} }
func (m *UpdateUserPhoto) String() string { return proto.CompactTextString(m) }
func (*UpdateUserPhoto) ProtoMessage()    {}
func (*UpdateUserPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{14}
}
func (m *UpdateUserPhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserPhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserPhoto.Merge(m, src)
}
func (m *UpdateUserPhoto) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserPhoto proto.InternalMessageInfo

func (m *UpdateUserPhoto) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateUserPhoto) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateUserPhoto) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateUserPhoto) GetPhoto() *UserPhoto {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *UpdateUserPhoto) GetPhotoID() int64 {
	if m != nil {
		return m.PhotoID
	}
	return 0
}

func (m *UpdateUserPhoto) GetDeletedPhotoIDs() []int64 {
	if m != nil {
		return m.DeletedPhotoIDs
	}
	return nil
}

// UpdateNotifySettings
type UpdateNotifySettings struct {
	UCount     int32               `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID   int64               `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	TeamID     int64               `protobuf:"varint,102,opt,name=TeamID" json:"TeamID"`
	UserID     int64               `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	NotifyPeer *Peer               `protobuf:"bytes,2,req,name=NotifyPeer" json:"NotifyPeer,omitempty"`
	Settings   *PeerNotifySettings `protobuf:"bytes,3,req,name=Settings" json:"Settings,omitempty"`
}

func (m *UpdateNotifySettings) Reset()         { *m = UpdateNotifySettings{} }
func (m *UpdateNotifySettings) String() string { return proto.CompactTextString(m) }
func (*UpdateNotifySettings) ProtoMessage()    {}
func (*UpdateNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{15}
}
func (m *UpdateNotifySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNotifySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNotifySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNotifySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNotifySettings.Merge(m, src)
}
func (m *UpdateNotifySettings) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNotifySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNotifySettings.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNotifySettings proto.InternalMessageInfo

func (m *UpdateNotifySettings) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateNotifySettings) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateNotifySettings) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateNotifySettings) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateNotifySettings) GetNotifyPeer() *Peer {
	if m != nil {
		return m.NotifyPeer
	}
	return nil
}

func (m *UpdateNotifySettings) GetSettings() *PeerNotifySettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

// UpdateGroupParticipantAdd
type UpdateGroupParticipantAdd struct {
	UCount    int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID  int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	GroupID   int64 `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	UserID    int64 `protobuf:"varint,2,req,name=UserID" json:"UserID"`
	InviterID int64 `protobuf:"varint,3,req,name=InviterID" json:"InviterID"`
	Date      int64 `protobuf:"varint,4,req,name=Date" json:"Date"`
}

func (m *UpdateGroupParticipantAdd) Reset()         { *m = UpdateGroupParticipantAdd{} }
func (m *UpdateGroupParticipantAdd) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupParticipantAdd) ProtoMessage()    {}
func (*UpdateGroupParticipantAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{16}
}
func (m *UpdateGroupParticipantAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupParticipantAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupParticipantAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupParticipantAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupParticipantAdd.Merge(m, src)
}
func (m *UpdateGroupParticipantAdd) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupParticipantAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupParticipantAdd.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupParticipantAdd proto.InternalMessageInfo

func (m *UpdateGroupParticipantAdd) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateGroupParticipantAdd) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateGroupParticipantAdd) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *UpdateGroupParticipantAdd) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateGroupParticipantAdd) GetInviterID() int64 {
	if m != nil {
		return m.InviterID
	}
	return 0
}

func (m *UpdateGroupParticipantAdd) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// UpdateGroupParticipantDeleted
type UpdateGroupParticipantDeleted struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	GroupID  int64 `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	UserID   int64 `protobuf:"varint,2,req,name=UserID" json:"UserID"`
}

func (m *UpdateGroupParticipantDeleted) Reset()         { *m = UpdateGroupParticipantDeleted{} }
func (m *UpdateGroupParticipantDeleted) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupParticipantDeleted) ProtoMessage()    {}
func (*UpdateGroupParticipantDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{17}
}
func (m *UpdateGroupParticipantDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupParticipantDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupParticipantDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupParticipantDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupParticipantDeleted.Merge(m, src)
}
func (m *UpdateGroupParticipantDeleted) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupParticipantDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupParticipantDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupParticipantDeleted proto.InternalMessageInfo

func (m *UpdateGroupParticipantDeleted) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateGroupParticipantDeleted) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateGroupParticipantDeleted) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *UpdateGroupParticipantDeleted) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

// UpdateGroupParticipantAdmin
type UpdateGroupParticipantAdmin struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	GroupID  int64 `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	UserID   int64 `protobuf:"varint,2,req,name=UserID" json:"UserID"`
	IsAdmin  bool  `protobuf:"varint,3,req,name=IsAdmin" json:"IsAdmin"`
}

func (m *UpdateGroupParticipantAdmin) Reset()         { *m = UpdateGroupParticipantAdmin{} }
func (m *UpdateGroupParticipantAdmin) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupParticipantAdmin) ProtoMessage()    {}
func (*UpdateGroupParticipantAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{18}
}
func (m *UpdateGroupParticipantAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupParticipantAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupParticipantAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupParticipantAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupParticipantAdmin.Merge(m, src)
}
func (m *UpdateGroupParticipantAdmin) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupParticipantAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupParticipantAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupParticipantAdmin proto.InternalMessageInfo

func (m *UpdateGroupParticipantAdmin) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateGroupParticipantAdmin) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateGroupParticipantAdmin) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *UpdateGroupParticipantAdmin) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateGroupParticipantAdmin) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

// UpdateGroupAdmins
type UpdateGroupAdmins struct {
	UCount       int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID     int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	GroupID      int64 `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	AdminEnabled bool  `protobuf:"varint,2,req,name=AdminEnabled" json:"AdminEnabled"`
}

func (m *UpdateGroupAdmins) Reset()         { *m = UpdateGroupAdmins{} }
func (m *UpdateGroupAdmins) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupAdmins) ProtoMessage()    {}
func (*UpdateGroupAdmins) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{19}
}
func (m *UpdateGroupAdmins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupAdmins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupAdmins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupAdmins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupAdmins.Merge(m, src)
}
func (m *UpdateGroupAdmins) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupAdmins) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupAdmins.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupAdmins proto.InternalMessageInfo

func (m *UpdateGroupAdmins) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateGroupAdmins) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateGroupAdmins) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *UpdateGroupAdmins) GetAdminEnabled() bool {
	if m != nil {
		return m.AdminEnabled
	}
	return false
}

// UpdateGroupPhoto
type UpdateGroupPhoto struct {
	UCount   int32       `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64       `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	GroupID  int64       `protobuf:"varint,1,req,name=GroupID" json:"GroupID"`
	Photo    *GroupPhoto `protobuf:"bytes,2,opt,name=Photo" json:"Photo,omitempty"`
	PhotoID  int64       `protobuf:"varint,3,opt,name=PhotoID" json:"PhotoID"`
}

func (m *UpdateGroupPhoto) Reset()         { *m = UpdateGroupPhoto{} }
func (m *UpdateGroupPhoto) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupPhoto) ProtoMessage()    {}
func (*UpdateGroupPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{20}
}
func (m *UpdateGroupPhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupPhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupPhoto.Merge(m, src)
}
func (m *UpdateGroupPhoto) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupPhoto proto.InternalMessageInfo

func (m *UpdateGroupPhoto) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateGroupPhoto) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateGroupPhoto) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *UpdateGroupPhoto) GetPhoto() *GroupPhoto {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *UpdateGroupPhoto) GetPhotoID() int64 {
	if m != nil {
		return m.PhotoID
	}
	return 0
}

// UpdateReadMessagesContents
type UpdateReadMessagesContents struct {
	UCount     int32   `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID   int64   `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	TeamID     int64   `protobuf:"varint,102,opt,name=TeamID" json:"TeamID"`
	MessageIDs []int64 `protobuf:"varint,1,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
	Peer       *Peer   `protobuf:"bytes,2,req,name=Peer" json:"Peer,omitempty"`
}

func (m *UpdateReadMessagesContents) Reset()         { *m = UpdateReadMessagesContents{} }
func (m *UpdateReadMessagesContents) String() string { return proto.CompactTextString(m) }
func (*UpdateReadMessagesContents) ProtoMessage()    {}
func (*UpdateReadMessagesContents) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{21}
}
func (m *UpdateReadMessagesContents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateReadMessagesContents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateReadMessagesContents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateReadMessagesContents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReadMessagesContents.Merge(m, src)
}
func (m *UpdateReadMessagesContents) XXX_Size() int {
	return m.Size()
}
func (m *UpdateReadMessagesContents) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReadMessagesContents.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReadMessagesContents proto.InternalMessageInfo

func (m *UpdateReadMessagesContents) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateReadMessagesContents) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateReadMessagesContents) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateReadMessagesContents) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

func (m *UpdateReadMessagesContents) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// UpdateAuthorizationReset
type UpdateAuthorizationReset struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
}

func (m *UpdateAuthorizationReset) Reset()         { *m = UpdateAuthorizationReset{} }
func (m *UpdateAuthorizationReset) String() string { return proto.CompactTextString(m) }
func (*UpdateAuthorizationReset) ProtoMessage()    {}
func (*UpdateAuthorizationReset) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{22}
}
func (m *UpdateAuthorizationReset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAuthorizationReset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAuthorizationReset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAuthorizationReset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAuthorizationReset.Merge(m, src)
}
func (m *UpdateAuthorizationReset) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAuthorizationReset) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAuthorizationReset.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAuthorizationReset proto.InternalMessageInfo

func (m *UpdateAuthorizationReset) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateAuthorizationReset) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

// UpdateDraftMessage
type UpdateDraftMessage struct {
	UCount   int32         `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64         `protobuf:"varint,101,opt,name=UpdateID" json:"UpdateID"`
	Message  *DraftMessage `protobuf:"bytes,1,req,name=Message" json:"Message,omitempty"`
}

func (m *UpdateDraftMessage) Reset()         { *m = UpdateDraftMessage{} }
func (m *UpdateDraftMessage) String() string { return proto.CompactTextString(m) }
func (*UpdateDraftMessage) ProtoMessage()    {}
func (*UpdateDraftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{23}
}
func (m *UpdateDraftMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDraftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDraftMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDraftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDraftMessage.Merge(m, src)
}
func (m *UpdateDraftMessage) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDraftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDraftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDraftMessage proto.InternalMessageInfo

func (m *UpdateDraftMessage) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateDraftMessage) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateDraftMessage) GetMessage() *DraftMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

// UpdateDraftMessageCleared
type UpdateDraftMessageCleared struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,opt,name=UpdateID" json:"UpdateID"`
	TeamID   int64 `protobuf:"varint,102,opt,name=TeamID" json:"TeamID"`
	Peer     *Peer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
}

func (m *UpdateDraftMessageCleared) Reset()         { *m = UpdateDraftMessageCleared{} }
func (m *UpdateDraftMessageCleared) String() string { return proto.CompactTextString(m) }
func (*UpdateDraftMessageCleared) ProtoMessage()    {}
func (*UpdateDraftMessageCleared) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{24}
}
func (m *UpdateDraftMessageCleared) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDraftMessageCleared) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDraftMessageCleared.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDraftMessageCleared) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDraftMessageCleared.Merge(m, src)
}
func (m *UpdateDraftMessageCleared) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDraftMessageCleared) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDraftMessageCleared.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDraftMessageCleared proto.InternalMessageInfo

func (m *UpdateDraftMessageCleared) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateDraftMessageCleared) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateDraftMessageCleared) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateDraftMessageCleared) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// UpdateDialogPinned
type UpdateDialogPinned struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	TeamID   int64 `protobuf:"varint,102,opt,name=TeamID" json:"TeamID"`
	Peer     *Peer `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	Pinned   bool  `protobuf:"varint,2,req,name=Pinned" json:"Pinned"`
}

func (m *UpdateDialogPinned) Reset()         { *m = UpdateDialogPinned{} }
func (m *UpdateDialogPinned) String() string { return proto.CompactTextString(m) }
func (*UpdateDialogPinned) ProtoMessage()    {}
func (*UpdateDialogPinned) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{25}
}
func (m *UpdateDialogPinned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDialogPinned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDialogPinned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDialogPinned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDialogPinned.Merge(m, src)
}
func (m *UpdateDialogPinned) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDialogPinned) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDialogPinned.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDialogPinned proto.InternalMessageInfo

func (m *UpdateDialogPinned) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateDialogPinned) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateDialogPinned) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateDialogPinned) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateDialogPinned) GetPinned() bool {
	if m != nil {
		return m.Pinned
	}
	return false
}

// UpdateDialogPinnedOrder
type UpdateDialogPinnedReorder struct {
	UCount   int32   `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64   `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	Peer     []*Peer `protobuf:"bytes,1,rep,name=Peer" json:"Peer,omitempty"`
}

func (m *UpdateDialogPinnedReorder) Reset()         { *m = UpdateDialogPinnedReorder{} }
func (m *UpdateDialogPinnedReorder) String() string { return proto.CompactTextString(m) }
func (*UpdateDialogPinnedReorder) ProtoMessage()    {}
func (*UpdateDialogPinnedReorder) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{26}
}
func (m *UpdateDialogPinnedReorder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDialogPinnedReorder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDialogPinnedReorder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDialogPinnedReorder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDialogPinnedReorder.Merge(m, src)
}
func (m *UpdateDialogPinnedReorder) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDialogPinnedReorder) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDialogPinnedReorder.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDialogPinnedReorder proto.InternalMessageInfo

func (m *UpdateDialogPinnedReorder) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateDialogPinnedReorder) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateDialogPinnedReorder) GetPeer() []*Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// UpdateAccountPrivacy
type UpdateAccountPrivacy struct {
	UCount           int32          `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID         int64          `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	ChatInvite       []*PrivacyRule `protobuf:"bytes,1,rep,name=ChatInvite" json:"ChatInvite,omitempty"`
	LastSeen         []*PrivacyRule `protobuf:"bytes,2,rep,name=LastSeen" json:"LastSeen,omitempty"`
	PhoneNumber      []*PrivacyRule `protobuf:"bytes,3,rep,name=PhoneNumber" json:"PhoneNumber,omitempty"`
	ProfilePhoto     []*PrivacyRule `protobuf:"bytes,4,rep,name=ProfilePhoto" json:"ProfilePhoto,omitempty"`
	ForwardedMessage []*PrivacyRule `protobuf:"bytes,5,rep,name=ForwardedMessage" json:"ForwardedMessage,omitempty"`
	Call             []*PrivacyRule `protobuf:"bytes,6,rep,name=Call" json:"Call,omitempty"`
}

func (m *UpdateAccountPrivacy) Reset()         { *m = UpdateAccountPrivacy{} }
func (m *UpdateAccountPrivacy) String() string { return proto.CompactTextString(m) }
func (*UpdateAccountPrivacy) ProtoMessage()    {}
func (*UpdateAccountPrivacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{27}
}
func (m *UpdateAccountPrivacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAccountPrivacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAccountPrivacy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAccountPrivacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAccountPrivacy.Merge(m, src)
}
func (m *UpdateAccountPrivacy) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAccountPrivacy) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAccountPrivacy.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAccountPrivacy proto.InternalMessageInfo

func (m *UpdateAccountPrivacy) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateAccountPrivacy) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateAccountPrivacy) GetChatInvite() []*PrivacyRule {
	if m != nil {
		return m.ChatInvite
	}
	return nil
}

func (m *UpdateAccountPrivacy) GetLastSeen() []*PrivacyRule {
	if m != nil {
		return m.LastSeen
	}
	return nil
}

func (m *UpdateAccountPrivacy) GetPhoneNumber() []*PrivacyRule {
	if m != nil {
		return m.PhoneNumber
	}
	return nil
}

func (m *UpdateAccountPrivacy) GetProfilePhoto() []*PrivacyRule {
	if m != nil {
		return m.ProfilePhoto
	}
	return nil
}

func (m *UpdateAccountPrivacy) GetForwardedMessage() []*PrivacyRule {
	if m != nil {
		return m.ForwardedMessage
	}
	return nil
}

func (m *UpdateAccountPrivacy) GetCall() []*PrivacyRule {
	if m != nil {
		return m.Call
	}
	return nil
}

// UpdateLabelItemAdded
type UpdateLabelItemsAdded struct {
	UCount     int32    `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID   int64    `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	TeamID     int64    `protobuf:"varint,102,opt,name=TeamID" json:"TeamID"`
	Peer       *Peer    `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	MessageIDs []int64  `protobuf:"varint,3,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
	LabelIDs   []int32  `protobuf:"varint,4,rep,name=LabelIDs" json:"LabelIDs,omitempty"`
	Labels     []*Label `protobuf:"bytes,5,rep,name=Labels" json:"Labels,omitempty"`
}

func (m *UpdateLabelItemsAdded) Reset()         { *m = UpdateLabelItemsAdded{} }
func (m *UpdateLabelItemsAdded) String() string { return proto.CompactTextString(m) }
func (*UpdateLabelItemsAdded) ProtoMessage()    {}
func (*UpdateLabelItemsAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{28}
}
func (m *UpdateLabelItemsAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateLabelItemsAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateLabelItemsAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateLabelItemsAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLabelItemsAdded.Merge(m, src)
}
func (m *UpdateLabelItemsAdded) XXX_Size() int {
	return m.Size()
}
func (m *UpdateLabelItemsAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLabelItemsAdded.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLabelItemsAdded proto.InternalMessageInfo

func (m *UpdateLabelItemsAdded) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateLabelItemsAdded) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateLabelItemsAdded) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateLabelItemsAdded) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateLabelItemsAdded) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

func (m *UpdateLabelItemsAdded) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

func (m *UpdateLabelItemsAdded) GetLabels() []*Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

// UpdateLabelItemsRemoved
type UpdateLabelItemsRemoved struct {
	UCount     int32    `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID   int64    `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	TeamID     int64    `protobuf:"varint,102,opt,name=TeamID" json:"TeamID"`
	Peer       *Peer    `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	MessageIDs []int64  `protobuf:"varint,3,rep,name=MessageIDs" json:"MessageIDs,omitempty"`
	LabelIDs   []int32  `protobuf:"varint,4,rep,name=LabelIDs" json:"LabelIDs,omitempty"`
	Labels     []*Label `protobuf:"bytes,5,rep,name=Labels" json:"Labels,omitempty"`
}

func (m *UpdateLabelItemsRemoved) Reset()         { *m = UpdateLabelItemsRemoved{} }
func (m *UpdateLabelItemsRemoved) String() string { return proto.CompactTextString(m) }
func (*UpdateLabelItemsRemoved) ProtoMessage()    {}
func (*UpdateLabelItemsRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{29}
}
func (m *UpdateLabelItemsRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateLabelItemsRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateLabelItemsRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateLabelItemsRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLabelItemsRemoved.Merge(m, src)
}
func (m *UpdateLabelItemsRemoved) XXX_Size() int {
	return m.Size()
}
func (m *UpdateLabelItemsRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLabelItemsRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLabelItemsRemoved proto.InternalMessageInfo

func (m *UpdateLabelItemsRemoved) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateLabelItemsRemoved) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateLabelItemsRemoved) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateLabelItemsRemoved) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateLabelItemsRemoved) GetMessageIDs() []int64 {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

func (m *UpdateLabelItemsRemoved) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

func (m *UpdateLabelItemsRemoved) GetLabels() []*Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

// UpdateLabelSet
type UpdateLabelSet struct {
	UCount   int32    `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64    `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	Labels   []*Label `protobuf:"bytes,1,rep,name=Labels" json:"Labels,omitempty"`
}

func (m *UpdateLabelSet) Reset()         { *m = UpdateLabelSet{} }
func (m *UpdateLabelSet) String() string { return proto.CompactTextString(m) }
func (*UpdateLabelSet) ProtoMessage()    {}
func (*UpdateLabelSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{30}
}
func (m *UpdateLabelSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateLabelSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateLabelSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateLabelSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLabelSet.Merge(m, src)
}
func (m *UpdateLabelSet) XXX_Size() int {
	return m.Size()
}
func (m *UpdateLabelSet) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLabelSet.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLabelSet proto.InternalMessageInfo

func (m *UpdateLabelSet) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateLabelSet) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateLabelSet) GetLabels() []*Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

// UpdateLabelDeleted
type UpdateLabelDeleted struct {
	UCount   int32   `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64   `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	LabelIDs []int32 `protobuf:"varint,1,rep,name=LabelIDs" json:"LabelIDs,omitempty"`
}

func (m *UpdateLabelDeleted) Reset()         { *m = UpdateLabelDeleted{} }
func (m *UpdateLabelDeleted) String() string { return proto.CompactTextString(m) }
func (*UpdateLabelDeleted) ProtoMessage()    {}
func (*UpdateLabelDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{31}
}
func (m *UpdateLabelDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateLabelDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateLabelDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateLabelDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLabelDeleted.Merge(m, src)
}
func (m *UpdateLabelDeleted) XXX_Size() int {
	return m.Size()
}
func (m *UpdateLabelDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLabelDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLabelDeleted proto.InternalMessageInfo

func (m *UpdateLabelDeleted) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateLabelDeleted) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateLabelDeleted) GetLabelIDs() []int32 {
	if m != nil {
		return m.LabelIDs
	}
	return nil
}

// UpdateUserBlocked
type UpdateUserBlocked struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	UserID   int64 `protobuf:"varint,1,req,name=UserID" json:"UserID"`
	Blocked  bool  `protobuf:"varint,2,req,name=Blocked" json:"Blocked"`
}

func (m *UpdateUserBlocked) Reset()         { *m = UpdateUserBlocked{} }
func (m *UpdateUserBlocked) String() string { return proto.CompactTextString(m) }
func (*UpdateUserBlocked) ProtoMessage()    {}
func (*UpdateUserBlocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{32}
}
func (m *UpdateUserBlocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserBlocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserBlocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserBlocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserBlocked.Merge(m, src)
}
func (m *UpdateUserBlocked) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserBlocked) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserBlocked.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserBlocked proto.InternalMessageInfo

func (m *UpdateUserBlocked) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateUserBlocked) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateUserBlocked) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateUserBlocked) GetBlocked() bool {
	if m != nil {
		return m.Blocked
	}
	return false
}

// UpdateMessagePoll
type UpdateMessagePoll struct {
	UCount   int32        `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64        `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	PollID   int64        `protobuf:"varint,1,req,name=PollID" json:"PollID"`
	Poll     *MediaPoll   `protobuf:"bytes,2,opt,name=Poll" json:"Poll,omitempty"`
	Results  *PollResults `protobuf:"bytes,3,req,name=Results" json:"Results,omitempty"`
}

func (m *UpdateMessagePoll) Reset()         { *m = UpdateMessagePoll{} }
func (m *UpdateMessagePoll) String() string { return proto.CompactTextString(m) }
func (*UpdateMessagePoll) ProtoMessage()    {}
func (*UpdateMessagePoll) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{33}
}
func (m *UpdateMessagePoll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessagePoll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessagePoll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessagePoll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessagePoll.Merge(m, src)
}
func (m *UpdateMessagePoll) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessagePoll) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessagePoll.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessagePoll proto.InternalMessageInfo

func (m *UpdateMessagePoll) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateMessagePoll) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateMessagePoll) GetPollID() int64 {
	if m != nil {
		return m.PollID
	}
	return 0
}

func (m *UpdateMessagePoll) GetPoll() *MediaPoll {
	if m != nil {
		return m.Poll
	}
	return nil
}

func (m *UpdateMessagePoll) GetResults() *PollResults {
	if m != nil {
		return m.Results
	}
	return nil
}

// UpdateBotCallbackQuery
type UpdateBotCallbackQuery struct {
	UCount    int32  `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID  int64  `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	QueryID   int64  `protobuf:"varint,1,req,name=QueryID" json:"QueryID"`
	UserID    int64  `protobuf:"varint,2,req,name=UserID" json:"UserID"`
	Peer      *Peer  `protobuf:"bytes,3,req,name=Peer" json:"Peer,omitempty"`
	MessageID int64  `protobuf:"varint,4,opt,name=MessageID" json:"MessageID"`
	Data      []byte `protobuf:"bytes,5,opt,name=Data" json:"Data"`
}

func (m *UpdateBotCallbackQuery) Reset()         { *m = UpdateBotCallbackQuery{} }
func (m *UpdateBotCallbackQuery) String() string { return proto.CompactTextString(m) }
func (*UpdateBotCallbackQuery) ProtoMessage()    {}
func (*UpdateBotCallbackQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{34}
}
func (m *UpdateBotCallbackQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBotCallbackQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBotCallbackQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBotCallbackQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBotCallbackQuery.Merge(m, src)
}
func (m *UpdateBotCallbackQuery) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBotCallbackQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBotCallbackQuery.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBotCallbackQuery proto.InternalMessageInfo

func (m *UpdateBotCallbackQuery) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateBotCallbackQuery) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateBotCallbackQuery) GetQueryID() int64 {
	if m != nil {
		return m.QueryID
	}
	return 0
}

func (m *UpdateBotCallbackQuery) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateBotCallbackQuery) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateBotCallbackQuery) GetMessageID() int64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *UpdateBotCallbackQuery) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// UpdateBotInlineQuery
type UpdateBotInlineQuery struct {
	UCount   int32        `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64        `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	QueryID  int64        `protobuf:"varint,1,req,name=QueryID" json:"QueryID"`
	UserID   int64        `protobuf:"varint,2,req,name=UserID" json:"UserID"`
	Peer     *Peer        `protobuf:"bytes,3,req,name=Peer" json:"Peer,omitempty"`
	Query    string       `protobuf:"bytes,4,req,name=Query" json:"Query"`
	Offset   string       `protobuf:"bytes,5,opt,name=Offset" json:"Offset"`
	Geo      *GeoLocation `protobuf:"bytes,6,opt,name=Geo" json:"Geo,omitempty"`
}

func (m *UpdateBotInlineQuery) Reset()         { *m = UpdateBotInlineQuery{} }
func (m *UpdateBotInlineQuery) String() string { return proto.CompactTextString(m) }
func (*UpdateBotInlineQuery) ProtoMessage()    {}
func (*UpdateBotInlineQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{35}
}
func (m *UpdateBotInlineQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBotInlineQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBotInlineQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBotInlineQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBotInlineQuery.Merge(m, src)
}
func (m *UpdateBotInlineQuery) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBotInlineQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBotInlineQuery.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBotInlineQuery proto.InternalMessageInfo

func (m *UpdateBotInlineQuery) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateBotInlineQuery) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateBotInlineQuery) GetQueryID() int64 {
	if m != nil {
		return m.QueryID
	}
	return 0
}

func (m *UpdateBotInlineQuery) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateBotInlineQuery) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateBotInlineQuery) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *UpdateBotInlineQuery) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *UpdateBotInlineQuery) GetGeo() *GeoLocation {
	if m != nil {
		return m.Geo
	}
	return nil
}

// UpdateBotInlineSend
type UpdateBotInlineSend struct {
	UCount   int32        `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64        `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	UserID   int64        `protobuf:"varint,2,req,name=UserID" json:"UserID"`
	Query    string       `protobuf:"bytes,3,req,name=Query" json:"Query"`
	ResultID string       `protobuf:"bytes,4,req,name=ResultID" json:"ResultID"`
	Geo      *GeoLocation `protobuf:"bytes,5,opt,name=Geo" json:"Geo,omitempty"`
}

func (m *UpdateBotInlineSend) Reset()         { *m = UpdateBotInlineSend{} }
func (m *UpdateBotInlineSend) String() string { return proto.CompactTextString(m) }
func (*UpdateBotInlineSend) ProtoMessage()    {}
func (*UpdateBotInlineSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{36}
}
func (m *UpdateBotInlineSend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBotInlineSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBotInlineSend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBotInlineSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBotInlineSend.Merge(m, src)
}
func (m *UpdateBotInlineSend) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBotInlineSend) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBotInlineSend.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBotInlineSend proto.InternalMessageInfo

func (m *UpdateBotInlineSend) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateBotInlineSend) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateBotInlineSend) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateBotInlineSend) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *UpdateBotInlineSend) GetResultID() string {
	if m != nil {
		return m.ResultID
	}
	return ""
}

func (m *UpdateBotInlineSend) GetGeo() *GeoLocation {
	if m != nil {
		return m.Geo
	}
	return nil
}

// UpdateTeamCreated
type UpdateTeamCreated struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	Team     *Team `protobuf:"bytes,1,req,name=Team" json:"Team,omitempty"`
}

func (m *UpdateTeamCreated) Reset()         { *m = UpdateTeamCreated{} }
func (m *UpdateTeamCreated) String() string { return proto.CompactTextString(m) }
func (*UpdateTeamCreated) ProtoMessage()    {}
func (*UpdateTeamCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{37}
}
func (m *UpdateTeamCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTeamCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTeamCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTeamCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTeamCreated.Merge(m, src)
}
func (m *UpdateTeamCreated) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTeamCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTeamCreated.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTeamCreated proto.InternalMessageInfo

func (m *UpdateTeamCreated) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateTeamCreated) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateTeamCreated) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

// UpdateTeamMemberAdded
type UpdateTeamMemberAdded struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	TeamID   int64 `protobuf:"varint,1,req,name=TeamID" json:"TeamID"`
	UserID   int64 `protobuf:"varint,2,req,name=UserID" json:"UserID"`
	AdderID  int64 `protobuf:"varint,3,req,name=AdderID" json:"AdderID"`
}

func (m *UpdateTeamMemberAdded) Reset()         { *m = UpdateTeamMemberAdded{} }
func (m *UpdateTeamMemberAdded) String() string { return proto.CompactTextString(m) }
func (*UpdateTeamMemberAdded) ProtoMessage()    {}
func (*UpdateTeamMemberAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{38}
}
func (m *UpdateTeamMemberAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTeamMemberAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTeamMemberAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTeamMemberAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTeamMemberAdded.Merge(m, src)
}
func (m *UpdateTeamMemberAdded) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTeamMemberAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTeamMemberAdded.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTeamMemberAdded proto.InternalMessageInfo

func (m *UpdateTeamMemberAdded) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateTeamMemberAdded) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateTeamMemberAdded) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateTeamMemberAdded) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateTeamMemberAdded) GetAdderID() int64 {
	if m != nil {
		return m.AdderID
	}
	return 0
}

// UpdateTeamMemberRemoved
type UpdateTeamMemberRemoved struct {
	UCount    int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID  int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	TeamID    int64 `protobuf:"varint,1,req,name=TeamID" json:"TeamID"`
	UserID    int64 `protobuf:"varint,2,req,name=UserID" json:"UserID"`
	RemoverID int64 `protobuf:"varint,3,req,name=RemoverID" json:"RemoverID"`
}

func (m *UpdateTeamMemberRemoved) Reset()         { *m = UpdateTeamMemberRemoved{} }
func (m *UpdateTeamMemberRemoved) String() string { return proto.CompactTextString(m) }
func (*UpdateTeamMemberRemoved) ProtoMessage()    {}
func (*UpdateTeamMemberRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{39}
}
func (m *UpdateTeamMemberRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTeamMemberRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTeamMemberRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTeamMemberRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTeamMemberRemoved.Merge(m, src)
}
func (m *UpdateTeamMemberRemoved) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTeamMemberRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTeamMemberRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTeamMemberRemoved proto.InternalMessageInfo

func (m *UpdateTeamMemberRemoved) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateTeamMemberRemoved) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateTeamMemberRemoved) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateTeamMemberRemoved) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateTeamMemberRemoved) GetRemoverID() int64 {
	if m != nil {
		return m.RemoverID
	}
	return 0
}

// UpdateTeamPhotoChanged
type UpdateTeamPhotoChanged struct {
	UCount   int32         `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64         `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	TeamID   int64         `protobuf:"varint,1,req,name=TeamID" json:"TeamID"`
	Photo    *FileLocation `protobuf:"bytes,2,req,name=Photo" json:"Photo,omitempty"`
}

func (m *UpdateTeamPhotoChanged) Reset()         { *m = UpdateTeamPhotoChanged{} }
func (m *UpdateTeamPhotoChanged) String() string { return proto.CompactTextString(m) }
func (*UpdateTeamPhotoChanged) ProtoMessage()    {}
func (*UpdateTeamPhotoChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{40}
}
func (m *UpdateTeamPhotoChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTeamPhotoChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTeamPhotoChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTeamPhotoChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTeamPhotoChanged.Merge(m, src)
}
func (m *UpdateTeamPhotoChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTeamPhotoChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTeamPhotoChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTeamPhotoChanged proto.InternalMessageInfo

func (m *UpdateTeamPhotoChanged) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateTeamPhotoChanged) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateTeamPhotoChanged) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateTeamPhotoChanged) GetPhoto() *FileLocation {
	if m != nil {
		return m.Photo
	}
	return nil
}

// UpdateCommunityMessage
type UpdateCommunityMessage struct {
	TeamID      int64            `protobuf:"varint,100,req,name=TeamID" json:"TeamID"`
	SenderID    int64            `protobuf:"varint,1,req,name=SenderID" json:"SenderID"`
	ReceiverID  int64            `protobuf:"varint,2,req,name=ReceiverID" json:"ReceiverID"`
	Body        string           `protobuf:"bytes,3,req,name=Body" json:"Body"`
	CreatedOn   int64            `protobuf:"varint,4,req,name=CreatedOn" json:"CreatedOn"`
	GlobalMsgID uint64           `protobuf:"varint,5,req,name=GlobalMsgID" json:"GlobalMsgID"`
	Entities    []*MessageEntity `protobuf:"bytes,6,rep,name=Entities" json:"Entities,omitempty"`
	SenderMsgID int64            `protobuf:"varint,7,req,name=SenderMsgID" json:"SenderMsgID"`
}

func (m *UpdateCommunityMessage) Reset()         { *m = UpdateCommunityMessage{} }
func (m *UpdateCommunityMessage) String() string { return proto.CompactTextString(m) }
func (*UpdateCommunityMessage) ProtoMessage()    {}
func (*UpdateCommunityMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{41}
}
func (m *UpdateCommunityMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCommunityMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCommunityMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCommunityMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCommunityMessage.Merge(m, src)
}
func (m *UpdateCommunityMessage) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCommunityMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCommunityMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCommunityMessage proto.InternalMessageInfo

func (m *UpdateCommunityMessage) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateCommunityMessage) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *UpdateCommunityMessage) GetReceiverID() int64 {
	if m != nil {
		return m.ReceiverID
	}
	return 0
}

func (m *UpdateCommunityMessage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *UpdateCommunityMessage) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *UpdateCommunityMessage) GetGlobalMsgID() uint64 {
	if m != nil {
		return m.GlobalMsgID
	}
	return 0
}

func (m *UpdateCommunityMessage) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *UpdateCommunityMessage) GetSenderMsgID() int64 {
	if m != nil {
		return m.SenderMsgID
	}
	return 0
}

// UpdateCommunityReadOutbox
type UpdateCommunityReadOutbox struct {
	TeamID      int64 `protobuf:"varint,100,req,name=TeamID" json:"TeamID"`
	SenderID    int64 `protobuf:"varint,1,req,name=SenderID" json:"SenderID"`
	ReceiverID  int64 `protobuf:"varint,2,req,name=ReceiverID" json:"ReceiverID"`
	SenderMsgID int64 `protobuf:"varint,3,req,name=SenderMsgID" json:"SenderMsgID"`
}

func (m *UpdateCommunityReadOutbox) Reset()         { *m = UpdateCommunityReadOutbox{} }
func (m *UpdateCommunityReadOutbox) String() string { return proto.CompactTextString(m) }
func (*UpdateCommunityReadOutbox) ProtoMessage()    {}
func (*UpdateCommunityReadOutbox) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{42}
}
func (m *UpdateCommunityReadOutbox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCommunityReadOutbox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCommunityReadOutbox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCommunityReadOutbox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCommunityReadOutbox.Merge(m, src)
}
func (m *UpdateCommunityReadOutbox) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCommunityReadOutbox) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCommunityReadOutbox.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCommunityReadOutbox proto.InternalMessageInfo

func (m *UpdateCommunityReadOutbox) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateCommunityReadOutbox) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *UpdateCommunityReadOutbox) GetReceiverID() int64 {
	if m != nil {
		return m.ReceiverID
	}
	return 0
}

func (m *UpdateCommunityReadOutbox) GetSenderMsgID() int64 {
	if m != nil {
		return m.SenderMsgID
	}
	return 0
}

// UpdateCommunityTyping
type UpdateCommunityTyping struct {
	TeamID     int64        `protobuf:"varint,100,req,name=TeamID" json:"TeamID"`
	SenderID   int64        `protobuf:"varint,1,req,name=SenderID" json:"SenderID"`
	ReceiverID int64        `protobuf:"varint,2,req,name=ReceiverID" json:"ReceiverID"`
	Action     TypingAction `protobuf:"varint,3,req,name=Action,enum=msg.TypingAction" json:"Action"`
}

func (m *UpdateCommunityTyping) Reset()         { *m = UpdateCommunityTyping{} }
func (m *UpdateCommunityTyping) String() string { return proto.CompactTextString(m) }
func (*UpdateCommunityTyping) ProtoMessage()    {}
func (*UpdateCommunityTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{43}
}
func (m *UpdateCommunityTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCommunityTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCommunityTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCommunityTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCommunityTyping.Merge(m, src)
}
func (m *UpdateCommunityTyping) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCommunityTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCommunityTyping.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCommunityTyping proto.InternalMessageInfo

func (m *UpdateCommunityTyping) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *UpdateCommunityTyping) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func (m *UpdateCommunityTyping) GetReceiverID() int64 {
	if m != nil {
		return m.ReceiverID
	}
	return 0
}

func (m *UpdateCommunityTyping) GetAction() TypingAction {
	if m != nil {
		return m.Action
	}
	return TypingActionTyping
}

// UpdateCalendarEventAdded
type UpdateCalendarEventAdded struct {
	UCount   int32          `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64          `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	Event    *CalendarEvent `protobuf:"bytes,1,req,name=Event" json:"Event,omitempty"`
}

func (m *UpdateCalendarEventAdded) Reset()         { *m = UpdateCalendarEventAdded{} }
func (m *UpdateCalendarEventAdded) String() string { return proto.CompactTextString(m) }
func (*UpdateCalendarEventAdded) ProtoMessage()    {}
func (*UpdateCalendarEventAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{44}
}
func (m *UpdateCalendarEventAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCalendarEventAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCalendarEventAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCalendarEventAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCalendarEventAdded.Merge(m, src)
}
func (m *UpdateCalendarEventAdded) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCalendarEventAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCalendarEventAdded.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCalendarEventAdded proto.InternalMessageInfo

func (m *UpdateCalendarEventAdded) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateCalendarEventAdded) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateCalendarEventAdded) GetEvent() *CalendarEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

// UpdateCalendarEventRemoved
type UpdateCalendarEventRemoved struct {
	UCount   int32 `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64 `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	EventID  int64 `protobuf:"varint,102,req,name=EventID" json:"EventID"`
}

func (m *UpdateCalendarEventRemoved) Reset()         { *m = UpdateCalendarEventRemoved{} }
func (m *UpdateCalendarEventRemoved) String() string { return proto.CompactTextString(m) }
func (*UpdateCalendarEventRemoved) ProtoMessage()    {}
func (*UpdateCalendarEventRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{45}
}
func (m *UpdateCalendarEventRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCalendarEventRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCalendarEventRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCalendarEventRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCalendarEventRemoved.Merge(m, src)
}
func (m *UpdateCalendarEventRemoved) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCalendarEventRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCalendarEventRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCalendarEventRemoved proto.InternalMessageInfo

func (m *UpdateCalendarEventRemoved) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateCalendarEventRemoved) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateCalendarEventRemoved) GetEventID() int64 {
	if m != nil {
		return m.EventID
	}
	return 0
}

// UpdateCalendarEventEdited
type UpdateCalendarEventEdited struct {
	UCount   int32          `protobuf:"varint,100,req,name=UCount" json:"UCount"`
	UpdateID int64          `protobuf:"varint,101,req,name=UpdateID" json:"UpdateID"`
	Event    *CalendarEvent `protobuf:"bytes,1,req,name=Event" json:"Event,omitempty"`
}

func (m *UpdateCalendarEventEdited) Reset()         { *m = UpdateCalendarEventEdited{} }
func (m *UpdateCalendarEventEdited) String() string { return proto.CompactTextString(m) }
func (*UpdateCalendarEventEdited) ProtoMessage()    {}
func (*UpdateCalendarEventEdited) Descriptor() ([]byte, []int) {
	return fileDescriptor_675fc0bf03cd96fd, []int{46}
}
func (m *UpdateCalendarEventEdited) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCalendarEventEdited) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCalendarEventEdited.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCalendarEventEdited) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCalendarEventEdited.Merge(m, src)
}
func (m *UpdateCalendarEventEdited) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCalendarEventEdited) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCalendarEventEdited.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCalendarEventEdited proto.InternalMessageInfo

func (m *UpdateCalendarEventEdited) GetUCount() int32 {
	if m != nil {
		return m.UCount
	}
	return 0
}

func (m *UpdateCalendarEventEdited) GetUpdateID() int64 {
	if m != nil {
		return m.UpdateID
	}
	return 0
}

func (m *UpdateCalendarEventEdited) GetEvent() *CalendarEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*UpdateGetState)(nil), "msg.UpdateGetState")
	proto.RegisterType((*UpdateGetDifference)(nil), "msg.UpdateGetDifference")
	proto.RegisterType((*UpdateDifference)(nil), "msg.UpdateDifference")
	proto.RegisterType((*UpdateTooLong)(nil), "msg.UpdateTooLong")
	proto.RegisterType((*UpdateState)(nil), "msg.UpdateState")
	proto.RegisterType((*UpdateMessageID)(nil), "msg.UpdateMessageID")
	proto.RegisterType((*UpdateNewMessage)(nil), "msg.UpdateNewMessage")
	proto.RegisterType((*UpdateMessageEdited)(nil), "msg.UpdateMessageEdited")
	proto.RegisterType((*UpdateMessagesDeleted)(nil), "msg.UpdateMessagesDeleted")
	proto.RegisterType((*UpdateReadHistoryInbox)(nil), "msg.UpdateReadHistoryInbox")
	proto.RegisterType((*UpdateReadHistoryOutbox)(nil), "msg.UpdateReadHistoryOutbox")
	proto.RegisterType((*UpdateUserTyping)(nil), "msg.UpdateUserTyping")
	proto.RegisterType((*UpdateUserStatus)(nil), "msg.UpdateUserStatus")
	proto.RegisterType((*UpdateUsername)(nil), "msg.UpdateUsername")
	proto.RegisterType((*UpdateUserPhoto)(nil), "msg.UpdateUserPhoto")
	proto.RegisterType((*UpdateNotifySettings)(nil), "msg.UpdateNotifySettings")
	proto.RegisterType((*UpdateGroupParticipantAdd)(nil), "msg.UpdateGroupParticipantAdd")
	proto.RegisterType((*UpdateGroupParticipantDeleted)(nil), "msg.UpdateGroupParticipantDeleted")
	proto.RegisterType((*UpdateGroupParticipantAdmin)(nil), "msg.UpdateGroupParticipantAdmin")
	proto.RegisterType((*UpdateGroupAdmins)(nil), "msg.UpdateGroupAdmins")
	proto.RegisterType((*UpdateGroupPhoto)(nil), "msg.UpdateGroupPhoto")
	proto.RegisterType((*UpdateReadMessagesContents)(nil), "msg.UpdateReadMessagesContents")
	proto.RegisterType((*UpdateAuthorizationReset)(nil), "msg.UpdateAuthorizationReset")
	proto.RegisterType((*UpdateDraftMessage)(nil), "msg.UpdateDraftMessage")
	proto.RegisterType((*UpdateDraftMessageCleared)(nil), "msg.UpdateDraftMessageCleared")
	proto.RegisterType((*UpdateDialogPinned)(nil), "msg.UpdateDialogPinned")
	proto.RegisterType((*UpdateDialogPinnedReorder)(nil), "msg.UpdateDialogPinnedReorder")
	proto.RegisterType((*UpdateAccountPrivacy)(nil), "msg.UpdateAccountPrivacy")
	proto.RegisterType((*UpdateLabelItemsAdded)(nil), "msg.UpdateLabelItemsAdded")
	proto.RegisterType((*UpdateLabelItemsRemoved)(nil), "msg.UpdateLabelItemsRemoved")
	proto.RegisterType((*UpdateLabelSet)(nil), "msg.UpdateLabelSet")
	proto.RegisterType((*UpdateLabelDeleted)(nil), "msg.UpdateLabelDeleted")
	proto.RegisterType((*UpdateUserBlocked)(nil), "msg.UpdateUserBlocked")
	proto.RegisterType((*UpdateMessagePoll)(nil), "msg.UpdateMessagePoll")
	proto.RegisterType((*UpdateBotCallbackQuery)(nil), "msg.UpdateBotCallbackQuery")
	proto.RegisterType((*UpdateBotInlineQuery)(nil), "msg.UpdateBotInlineQuery")
	proto.RegisterType((*UpdateBotInlineSend)(nil), "msg.UpdateBotInlineSend")
	proto.RegisterType((*UpdateTeamCreated)(nil), "msg.UpdateTeamCreated")
	proto.RegisterType((*UpdateTeamMemberAdded)(nil), "msg.UpdateTeamMemberAdded")
	proto.RegisterType((*UpdateTeamMemberRemoved)(nil), "msg.UpdateTeamMemberRemoved")
	proto.RegisterType((*UpdateTeamPhotoChanged)(nil), "msg.UpdateTeamPhotoChanged")
	proto.RegisterType((*UpdateCommunityMessage)(nil), "msg.UpdateCommunityMessage")
	proto.RegisterType((*UpdateCommunityReadOutbox)(nil), "msg.UpdateCommunityReadOutbox")
	proto.RegisterType((*UpdateCommunityTyping)(nil), "msg.UpdateCommunityTyping")
	proto.RegisterType((*UpdateCalendarEventAdded)(nil), "msg.UpdateCalendarEventAdded")
	proto.RegisterType((*UpdateCalendarEventRemoved)(nil), "msg.UpdateCalendarEventRemoved")
	proto.RegisterType((*UpdateCalendarEventEdited)(nil), "msg.UpdateCalendarEventEdited")
}

func init() { proto.RegisterFile("updates.proto", fileDescriptor_675fc0bf03cd96fd) }

var fileDescriptor_675fc0bf03cd96fd = []byte{
	// 1926 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x59, 0x4d, 0x6c, 0x24, 0x47,
	0x15, 0xde, 0x9e, 0x9e, 0x1f, 0xfb, 0x79, 0xb3, 0x76, 0x2a, 0x90, 0x6d, 0xcc, 0xee, 0x64, 0x28,
	0x2d, 0x8b, 0x09, 0xc1, 0x59, 0x19, 0x8e, 0x5c, 0x3c, 0x63, 0xaf, 0x33, 0xc2, 0xde, 0x35, 0xed,
	0xdd, 0x0b, 0xb7, 0xf2, 0x74, 0xcd, 0xb8, 0x95, 0x9e, 0xae, 0x51, 0x77, 0x8d, 0xb3, 0x93, 0x03,
	0x12, 0x52, 0xb8, 0x71, 0x00, 0x71, 0xe3, 0x02, 0x39, 0x72, 0x41, 0x42, 0x20, 0x24, 0x04, 0x08,
	0x71, 0xcb, 0x31, 0x17, 0x24, 0x2e, 0x20, 0xb4, 0x3e, 0x70, 0x46, 0x48, 0x88, 0x23, 0xaa, 0xdf,
	0xae, 0x9e, 0x19, 0xdb, 0x49, 0x3c, 0x31, 0x0b, 0xb7, 0xee, 0xef, 0xbd, 0x7e, 0xef, 0x7b, 0x55,
	0xd5, 0xaf, 0x5e, 0xbd, 0x82, 0x97, 0xc6, 0xa3, 0x88, 0x70, 0x9a, 0x6f, 0x8e, 0x32, 0xc6, 0x19,
	0xf2, 0x87, 0xf9, 0x60, 0x7d, 0xad, 0xc7, 0x32, 0xba, 0xc9, 0x27, 0x23, 0x03, 0xaf, 0xdf, 0xea,
	0x91, 0x84, 0xa6, 0x11, 0xc9, 0xf4, 0xfb, 0x7a, 0xef, 0x84, 0xf0, 0xcd, 0x21, 0xcd, 0x73, 0x32,
	0xa0, 0xf9, 0xe6, 0x90, 0x46, 0x31, 0xd1, 0xba, 0x78, 0x0d, 0x6e, 0x3d, 0x95, 0x36, 0xf7, 0x28,
	0x3f, 0xe2, 0x84, 0x53, 0xfc, 0x4d, 0x78, 0xc5, 0x22, 0x3b, 0x71, 0xbf, 0x4f, 0x33, 0x9a, 0xf6,
	0x28, 0x0a, 0xa0, 0xfa, 0x30, 0x63, 0xc3, 0xc0, 0x6b, 0x55, 0x36, 0xfc, 0x76, 0xf5, 0x83, 0xbf,
	0xbe, 0x76, 0x23, 0x94, 0x08, 0x5a, 0x87, 0xda, 0x7e, 0x3c, 0x8c, 0x79, 0x50, 0x69, 0x55, 0x36,
	0x6a, 0x5a, 0xa4, 0x20, 0xfc, 0xd3, 0x0a, 0xac, 0x29, 0x6b, 0x65, 0x53, 0x07, 0x2c, 0xa3, 0xd2,
	0xd4, 0x92, 0x31, 0x25, 0x10, 0x74, 0x1f, 0x56, 0x0e, 0xc8, 0x33, 0xf5, 0x41, 0x77, 0x47, 0x1a,
	0x34, 0xbe, 0x5c, 0x81, 0xd4, 0x8b, 0x53, 0xab, 0xe7, 0x97, 0xf4, 0x0a, 0x01, 0xfa, 0x2a, 0x34,
	0xd4, 0x73, 0x1e, 0x54, 0x5b, 0xfe, 0xc6, 0xca, 0xd6, 0x2b, 0x9b, 0xc3, 0x7c, 0xb0, 0xa9, 0xb0,
	0xdd, 0xf4, 0x94, 0x26, 0x6c, 0x44, 0x43, 0xa3, 0x83, 0x5e, 0x83, 0xda, 0xd3, 0x9c, 0x66, 0x79,
	0x50, 0x93, 0xca, 0xcb, 0x4a, 0x39, 0xa7, 0x59, 0xa8, 0x70, 0x84, 0xa1, 0xbe, 0x97, 0xb1, 0xf1,
	0x28, 0x0f, 0xea, 0x52, 0x03, 0xa4, 0x86, 0x84, 0x42, 0x2d, 0x41, 0x9b, 0xb0, 0xda, 0x19, 0x67,
	0x19, 0x4d, 0xb9, 0xe5, 0xd7, 0x68, 0x79, 0x96, 0xdf, 0xb4, 0x10, 0xaf, 0xc2, 0x4b, 0xea, 0xf9,
	0x09, 0x63, 0xfb, 0x2c, 0x1d, 0xe0, 0x37, 0x61, 0x45, 0x01, 0x72, 0x3e, 0x50, 0x0b, 0x96, 0xac,
	0x21, 0x77, 0xf0, 0x2d, 0x8a, 0xc7, 0xb0, 0xaa, 0x9e, 0x0f, 0xd4, 0x14, 0x77, 0x77, 0xd0, 0x1d,
	0xa8, 0x3f, 0xed, 0xb0, 0x71, 0xca, 0x83, 0xc8, 0x99, 0x14, 0x8d, 0x21, 0x0c, 0xcb, 0x56, 0xb5,
	0x64, 0xb3, 0x80, 0x85, 0xdb, 0x90, 0xa4, 0x11, 0x1b, 0x4e, 0xcd, 0x83, 0x45, 0xf1, 0x3f, 0x3c,
	0x33, 0xb7, 0x8f, 0xe8, 0x3b, 0xfa, 0xc3, 0x4b, 0x1c, 0xbb, 0xb1, 0xd0, 0x79, 0xb1, 0xa0, 0xd7,
	0xa1, 0xa1, 0x4d, 0x49, 0x62, 0x2b, 0x5b, 0x6b, 0x76, 0x12, 0x34, 0x1e, 0x1a, 0x05, 0xf4, 0x05,
	0xa8, 0x1f, 0xd1, 0x34, 0xa2, 0x99, 0x24, 0x58, 0x9a, 0x2f, 0x2d, 0x40, 0xf7, 0x01, 0xb6, 0x7b,
	0x3d, 0x9a, 0xe7, 0x6f, 0x91, 0xfc, 0x24, 0xf0, 0x5b, 0xde, 0x46, 0xbd, 0x5d, 0x17, 0x2e, 0x1f,
	0x78, 0xa1, 0x23, 0x11, 0x0b, 0x4a, 0x7d, 0x11, 0xd2, 0x7e, 0x77, 0x27, 0xa8, 0x3a, 0x13, 0xe6,
	0x0a, 0xf0, 0x77, 0x3d, 0xf3, 0x77, 0x68, 0x12, 0xbb, 0x51, 0xcc, 0x69, 0x74, 0x9d, 0x61, 0xe3,
	0x5f, 0x7b, 0xf0, 0xd9, 0x12, 0x87, 0x7c, 0x87, 0x26, 0x74, 0x11, 0x2c, 0x9a, 0x50, 0x7f, 0x42,
	0x89, 0x98, 0xf1, 0xbe, 0x1c, 0x00, 0x33, 0x52, 0x1a, 0x45, 0x4d, 0x00, 0xbb, 0x40, 0xf2, 0xc0,
	0x6b, 0xf9, 0x1b, 0x7e, 0xe8, 0x20, 0xe8, 0x2e, 0x54, 0x0f, 0xa9, 0x9c, 0x0e, 0xcf, 0x4e, 0x87,
	0x00, 0x42, 0x09, 0xe3, 0x5f, 0x7a, 0xf0, 0xaa, 0xf2, 0x15, 0x52, 0x12, 0xbd, 0x15, 0xe7, 0x9c,
	0x65, 0x93, 0x6e, 0x7a, 0xcc, 0x9e, 0x7d, 0xea, 0xcc, 0x0d, 0x33, 0xcf, 0x59, 0x28, 0x05, 0x33,
	0x91, 0xc2, 0x0e, 0xc8, 0xb3, 0xa9, 0x95, 0xae, 0x20, 0xfc, 0x2b, 0x0f, 0x6e, 0xcf, 0xb0, 0x7e,
	0x3c, 0xe6, 0x2f, 0x38, 0xed, 0x33, 0xfb, 0x77, 0x8a, 0x45, 0xf4, 0x64, 0x32, 0x8a, 0xd3, 0xc1,
	0x25, 0x7c, 0x2f, 0x9f, 0xfe, 0xba, 0xb0, 0x65, 0x73, 0x86, 0x95, 0x2b, 0x14, 0xbd, 0x09, 0xf5,
	0xed, 0x1e, 0x8f, 0x59, 0x2a, 0xf9, 0xdc, 0xda, 0x7a, 0x59, 0xf2, 0x55, 0xae, 0x95, 0xc0, 0x38,
	0x54, 0x6f, 0xc2, 0xa0, 0x88, 0xc3, 0x66, 0x70, 0x6b, 0x50, 0xa1, 0x62, 0x00, 0xc5, 0xd3, 0x93,
	0xc9, 0x88, 0xca, 0x5f, 0xd2, 0x10, 0xb6, 0x28, 0x4e, 0xdd, 0x20, 0x45, 0xbe, 0x1c, 0xe7, 0x97,
	0x07, 0x79, 0x61, 0x10, 0x77, 0xa0, 0xae, 0xec, 0x94, 0xb6, 0x33, 0x8d, 0xe1, 0xef, 0x57, 0xcc,
	0x7e, 0x29, 0xd4, 0x53, 0x32, 0xa4, 0x8b, 0x58, 0x03, 0x17, 0x12, 0x12, 0x16, 0xb4, 0x2f, 0x49,
	0x69, 0xd9, 0x5a, 0x30, 0x0c, 0x30, 0x2c, 0x3f, 0x8c, 0xb3, 0x9c, 0x3f, 0x12, 0x2a, 0xbe, 0xa3,
	0x52, 0xc0, 0xc2, 0xca, 0x3e, 0xd1, 0x2a, 0x55, 0xd7, 0x8a, 0x41, 0xd1, 0xab, 0xe0, 0xb7, 0x63,
	0x16, 0xd4, 0x1c, 0xa1, 0x00, 0xc4, 0x22, 0x3b, 0x3c, 0x61, 0x29, 0x0d, 0xea, 0x2d, 0xcf, 0x4a,
	0x14, 0x84, 0xff, 0xee, 0x99, 0xad, 0x47, 0x90, 0x39, 0x3c, 0x11, 0x45, 0xc9, 0xa7, 0x3d, 0x1e,
	0xf7, 0x24, 0x1f, 0xce, 0x74, 0x96, 0xb9, 0x65, 0x13, 0xa5, 0x44, 0x43, 0x25, 0x44, 0x2d, 0x68,
	0xc8, 0x07, 0xb9, 0xb6, 0xdc, 0xc5, 0x6c, 0x60, 0xf4, 0x06, 0xac, 0xea, 0xbc, 0xa9, 0x11, 0x55,
	0x23, 0xf8, 0xed, 0xca, 0x03, 0x2f, 0x9c, 0x16, 0xe1, 0x7f, 0x79, 0xf0, 0x19, 0xbd, 0xd9, 0x31,
	0x1e, 0xf7, 0x27, 0x47, 0x94, 0xf3, 0x38, 0x1d, 0xe4, 0xd7, 0x90, 0x73, 0x2f, 0x1e, 0x8e, 0x2f,
	0x03, 0x28, 0x46, 0x3a, 0xf3, 0x4e, 0x25, 0x0a, 0x47, 0x88, 0xbe, 0x06, 0x4b, 0x86, 0xb6, 0x5c,
	0x26, 0x2b, 0x5b, 0xb7, 0xad, 0x62, 0x39, 0xaa, 0xd0, 0x2a, 0xe2, 0xbf, 0x78, 0xf0, 0x39, 0x5d,
	0x0f, 0x8a, 0xfa, 0xe6, 0x90, 0x64, 0x3c, 0xee, 0xc5, 0x23, 0x92, 0xf2, 0xed, 0xe8, 0xea, 0x3b,
	0x4e, 0x0b, 0x1a, 0xd2, 0xec, 0x4c, 0x78, 0x06, 0x76, 0xe2, 0xaf, 0x9c, 0xb3, 0x1c, 0x96, 0xbb,
	0xe9, 0x69, 0xcc, 0xe7, 0xa4, 0x91, 0x42, 0x20, 0x4a, 0xce, 0x1d, 0xc2, 0xd5, 0xd2, 0xb7, 0xd5,
	0xab, 0x40, 0xf0, 0xfb, 0x1e, 0xdc, 0x9d, 0x1f, 0xdf, 0xa2, 0x76, 0xd5, 0x2b, 0xc7, 0x88, 0xff,
	0xe0, 0xc1, 0xe7, 0xcf, 0x9b, 0x83, 0x61, 0x9c, 0xbe, 0x00, 0xb3, 0xd0, 0x84, 0x46, 0x37, 0x97,
	0x64, 0xe4, 0x1c, 0x98, 0xaa, 0xde, 0x80, 0xf8, 0x27, 0x1e, 0xbc, 0xec, 0x44, 0x20, 0xc1, 0xfc,
	0x1a, 0x78, 0x6f, 0xc0, 0x4d, 0xe9, 0x6b, 0x37, 0x25, 0xc7, 0x09, 0x8d, 0x24, 0x7b, 0x43, 0xae,
	0x24, 0xc1, 0xbf, 0xb7, 0xfb, 0xa5, 0x1a, 0xe3, 0x85, 0xe4, 0xb2, 0xcb, 0x09, 0x7e, 0xb1, 0x9c,
	0xcd, 0x56, 0x8b, 0x03, 0xc5, 0xc7, 0x4b, 0x67, 0xf8, 0xb7, 0x1e, 0xac, 0x17, 0x65, 0x8a, 0xa9,
	0x0c, 0x3b, 0x2c, 0xe5, 0x34, 0xe5, 0xf9, 0x0b, 0x54, 0x1a, 0xce, 0xab, 0x64, 0xf0, 0xb7, 0x21,
	0x50, 0xae, 0xb6, 0xc7, 0xfc, 0x84, 0x65, 0xf1, 0xbb, 0x44, 0x14, 0x08, 0x21, 0xcd, 0x29, 0xbf,
	0x2a, 0x75, 0x51, 0xb3, 0x23, 0x7d, 0x06, 0xcd, 0x48, 0x9f, 0x7f, 0x92, 0x93, 0x8a, 0x37, 0x67,
	0x44, 0xbe, 0x32, 0x5d, 0xb2, 0xab, 0x72, 0xc7, 0xf5, 0x51, 0xd4, 0xec, 0x3f, 0xb6, 0x59, 0xd4,
	0x95, 0x77, 0x12, 0x4a, 0xb2, 0x8f, 0x99, 0x61, 0xbc, 0x85, 0x97, 0x91, 0xf8, 0x17, 0xc5, 0x00,
	0xc5, 0x24, 0x61, 0x83, 0xc3, 0x38, 0x4d, 0xaf, 0xe1, 0x34, 0x71, 0x49, 0x71, 0x7b, 0x07, 0xea,
	0x8a, 0x48, 0xe9, 0xa7, 0xd5, 0x18, 0x7e, 0xd7, 0x8e, 0xa7, 0x43, 0x39, 0xa4, 0x2c, 0x8b, 0xd4,
	0xa7, 0x57, 0x62, 0x5e, 0x30, 0xf3, 0xe7, 0x8d, 0xd7, 0x7b, 0xbe, 0xa9, 0x05, 0xb6, 0x7b, 0x3d,
	0x61, 0xf2, 0x30, 0x8b, 0x4f, 0x49, 0x6f, 0x72, 0x65, 0xbf, 0x0f, 0x00, 0x3a, 0x27, 0x84, 0xab,
	0x6d, 0x4b, 0x7b, 0x57, 0x07, 0x41, 0xed, 0x21, 0x1c, 0x27, 0x34, 0x74, 0x74, 0xd0, 0x1b, 0xaa,
	0xac, 0x3b, 0xa2, 0x54, 0x14, 0xdd, 0xf3, 0xf5, 0xad, 0x06, 0xda, 0x82, 0x15, 0x59, 0xb7, 0x3d,
	0x1a, 0x0f, 0x8f, 0x69, 0x16, 0xf8, 0xe7, 0x7c, 0xe0, 0x2a, 0xa1, 0xaf, 0xc3, 0xcd, 0xc3, 0x8c,
	0xf5, 0xe3, 0x84, 0xaa, 0x3c, 0x55, 0x3d, 0xe7, 0xa3, 0x92, 0x16, 0xfa, 0x06, 0xac, 0x3d, 0x64,
	0xd9, 0x3b, 0x24, 0x8b, 0xa8, 0xc9, 0x45, 0xba, 0xa9, 0x32, 0xfb, 0xe5, 0x8c, 0x26, 0xba, 0x07,
	0xd5, 0x0e, 0x49, 0x12, 0xdd, 0x64, 0x99, 0xfd, 0x42, 0x4a, 0x45, 0x49, 0xa6, 0xcf, 0xc1, 0xfb,
	0xe4, 0x98, 0x26, 0x5d, 0x4e, 0x87, 0xf9, 0x76, 0x14, 0xfd, 0xf7, 0x57, 0x6e, 0x39, 0x17, 0xfa,
	0x33, 0xb9, 0x70, 0x5d, 0x4c, 0x9a, 0x60, 0xac, 0x4b, 0xce, 0x5a, 0x68, 0xdf, 0x11, 0x86, 0xba,
	0x7c, 0x36, 0x3d, 0x28, 0xd5, 0x61, 0x92, 0x50, 0xa8, 0x25, 0xf8, 0xdf, 0xf6, 0x44, 0x5a, 0x04,
	0x1e, 0xd2, 0x21, 0x3b, 0xfd, 0xff, 0x0f, 0x9d, 0x9b, 0xe3, 0x97, 0x7c, 0x3f, 0xba, 0xfa, 0xee,
	0xe0, 0x78, 0xf5, 0xce, 0xf5, 0x3a, 0x32, 0xf9, 0x51, 0xbe, 0x2f, 0xaa, 0x2e, 0x74, 0xc7, 0xc2,
	0x2b, 0x8f, 0x05, 0xfe, 0x91, 0xad, 0x97, 0x44, 0x81, 0xd5, 0x4e, 0x58, 0xef, 0xed, 0xc5, 0x4c,
	0xee, 0x85, 0x67, 0x89, 0x26, 0x34, 0xb4, 0xab, 0x52, 0xce, 0x35, 0x20, 0xfe, 0xa3, 0x65, 0xa5,
	0xa7, 0xf4, 0x90, 0x25, 0xc9, 0x95, 0x59, 0x89, 0x44, 0xcf, 0x92, 0x64, 0xaa, 0x15, 0xa9, 0x31,
	0x84, 0xa1, 0x2a, 0x9e, 0x4a, 0xa7, 0xbd, 0x03, 0x1a, 0xc5, 0x44, 0xa0, 0xa1, 0x94, 0xa1, 0xd7,
	0xa1, 0x11, 0xd2, 0x7c, 0x9c, 0x70, 0x73, 0xae, 0xd1, 0x29, 0x43, 0x68, 0x28, 0x3c, 0x34, 0x0a,
	0xf8, 0x9f, 0xb6, 0x09, 0xd5, 0x66, 0x5c, 0xe4, 0x91, 0x63, 0xd2, 0x7b, 0xfb, 0x5b, 0x63, 0x9a,
	0x4d, 0x16, 0x30, 0xbc, 0x0d, 0x69, 0x68, 0x2a, 0x12, 0x03, 0x4a, 0xfb, 0x6e, 0x11, 0x6d, 0xec,
	0xab, 0xc1, 0x37, 0x7f, 0x96, 0x3f, 0xff, 0xcf, 0x2a, 0xf5, 0x6c, 0xdd, 0xfe, 0xa4, 0xd3, 0xb3,
	0x55, 0xa7, 0x1c, 0x12, 0xd4, 0x5a, 0xde, 0xc6, 0x4d, 0xe7, 0x94, 0x43, 0xf0, 0x0f, 0x2b, 0x66,
	0xcb, 0x6a, 0x33, 0xde, 0x4d, 0x93, 0x38, 0xa5, 0xff, 0x03, 0x31, 0xaf, 0x43, 0x4d, 0xda, 0x29,
	0x75, 0x2c, 0x6a, 0x96, 0xf8, 0xe3, 0x7e, 0x3f, 0xa7, 0x5c, 0x46, 0x6b, 0x84, 0x1a, 0x43, 0x18,
	0xfc, 0x3d, 0xca, 0x64, 0xcb, 0xc2, 0xac, 0x86, 0x3d, 0xca, 0xf6, 0x59, 0x4f, 0xd5, 0x95, 0x42,
	0x88, 0xff, 0x64, 0x7b, 0xb9, 0x76, 0x4c, 0x8e, 0x68, 0x1a, 0x2d, 0x62, 0x3d, 0x5f, 0x10, 0xb2,
	0x8d, 0xc9, 0x9f, 0x8d, 0xa9, 0x05, 0x4b, 0x6a, 0x99, 0xca, 0x29, 0x76, 0x9a, 0x34, 0x06, 0x35,
	0x71, 0xd5, 0x2e, 0x8a, 0x2b, 0x33, 0x3f, 0xa9, 0x48, 0xd9, 0x9d, 0x8c, 0x92, 0x45, 0x24, 0xab,
	0xbb, 0x50, 0x15, 0xe6, 0x4a, 0x79, 0x5f, 0x00, 0xa1, 0x84, 0xf1, 0x6f, 0xec, 0x5e, 0x2c, 0x5e,
	0x0f, 0xa8, 0x28, 0x1d, 0x16, 0xbd, 0x17, 0x4f, 0xe5, 0xac, 0x99, 0xfe, 0x48, 0xe5, 0x9c, 0xf6,
	0x59, 0x43, 0x10, 0x99, 0xed, 0x0e, 0x18, 0x58, 0x9c, 0xae, 0x6f, 0x4f, 0x73, 0x5f, 0xfc, 0x76,
	0xfa, 0xc9, 0xd8, 0xdf, 0x83, 0x65, 0x45, 0x65, 0x4e, 0x77, 0xc3, 0x0a, 0xf0, 0xfb, 0x36, 0xa7,
	0x09, 0xb3, 0xb2, 0x02, 0xeb, 0x9c, 0x90, 0x74, 0x70, 0x0d, 0x01, 0x7c, 0xa9, 0x38, 0xbf, 0x16,
	0x67, 0xa0, 0x87, 0x71, 0x42, 0xed, 0x9a, 0x54, 0x72, 0xfc, 0xbb, 0x8a, 0xe1, 0xd8, 0x61, 0xc3,
	0xe1, 0x38, 0x8d, 0xf9, 0xc4, 0x39, 0x89, 0x69, 0x1f, 0x91, 0xfb, 0xc3, 0x68, 0x0f, 0x2d, 0x58,
	0x52, 0x37, 0x30, 0xd3, 0xf7, 0x5f, 0x06, 0x45, 0xf7, 0x00, 0x42, 0xda, 0xa3, 0xf1, 0xe9, 0xcc,
	0x4f, 0xe7, 0xe0, 0x22, 0x39, 0xb6, 0x59, 0x54, 0xfe, 0xef, 0x24, 0x22, 0x52, 0xab, 0xfe, 0x4d,
	0x1e, 0xa7, 0xa5, 0x0e, 0x51, 0x01, 0xa3, 0xfb, 0xb0, 0xb2, 0x97, 0xb0, 0x63, 0x92, 0x1c, 0xe4,
	0x83, 0xee, 0x8e, 0xec, 0x92, 0x56, 0xcd, 0x05, 0x91, 0x23, 0x40, 0x9b, 0xb0, 0xb4, 0x9b, 0xf2,
	0x98, 0xc7, 0xd4, 0xdc, 0x11, 0x22, 0xbd, 0x65, 0xa9, 0xeb, 0x22, 0x21, 0x9b, 0x84, 0x56, 0xa7,
	0xb8, 0x78, 0x52, 0x76, 0x1b, 0xee, 0x4d, 0xa6, 0x23, 0xc0, 0x3f, 0xb3, 0x07, 0x48, 0x3b, 0x7c,
	0xe2, 0x9c, 0x5f, 0xdc, 0x43, 0x5c, 0xc3, 0x08, 0x4e, 0x71, 0xf5, 0xcf, 0xe3, 0xfa, 0x73, 0x9b,
	0x0c, 0x2c, 0xd7, 0xe2, 0xfe, 0xe1, 0x1a, 0x78, 0x16, 0xf7, 0x10, 0xfe, 0x47, 0xba, 0x87, 0xc0,
	0xef, 0x79, 0xa6, 0xfd, 0xd0, 0xd1, 0x37, 0xe7, 0xbb, 0xa7, 0x54, 0x36, 0x38, 0x17, 0xf0, 0x07,
	0x6d, 0x40, 0x4d, 0x5a, 0xd3, 0xa9, 0x53, 0x2d, 0x87, 0x92, 0x9f, 0x50, 0x29, 0xe0, 0xef, 0x98,
	0x0e, 0x4e, 0x59, 0xba, 0xa0, 0x54, 0xd4, 0x82, 0x86, 0xb4, 0x27, 0x4b, 0xfb, 0x52, 0x22, 0xd4,
	0x30, 0xfe, 0x5e, 0xb1, 0xc6, 0x5c, 0x02, 0x0b, 0xba, 0xe2, 0xfc, 0xc8, 0xe3, 0xd0, 0x0e, 0x3e,
	0x78, 0xde, 0xf4, 0x3e, 0x7c, 0xde, 0xf4, 0xfe, 0xf6, 0xbc, 0xe9, 0xfd, 0xe0, 0xac, 0x79, 0xe3,
	0xc3, 0xb3, 0xe6, 0x8d, 0x3f, 0x9f, 0x35, 0x6f, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xec,
	0x35, 0xe7, 0x00, 0x21, 0x00, 0x00,
}

func (m *UpdateGetState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGetState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGetState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateGetDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGetDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGetDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.Limit))
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.From))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.CurrentUpdateID))
	i--
	dAtA[i] = 0x38
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i = encodeVarintUpdates(dAtA, i, uint64(m.MinUpdateID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintUpdates(dAtA, i, uint64(m.MaxUpdateID))
	i--
	dAtA[i] = 0x10
	i--
	if m.More {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateTooLong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTooLong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTooLong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateMessageID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i = encodeVarintUpdates(dAtA, i, uint64(m.RandomID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.MessageID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateNewMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNewMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateNewMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i = encodeVarintUpdates(dAtA, i, uint64(m.SenderRefID))
	i--
	dAtA[i] = 0x20
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i--
	dAtA[i] = 0x19
	if m.Sender == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sender")
	} else {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Message == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Message")
	} else {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessageEdited) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageEdited) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageEdited) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if m.Message == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Message")
	} else {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessagesDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessagesDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessagesDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb0
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MessageIDs) > 0 {
		for iNdEx := len(m.MessageIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintUpdates(dAtA, i, uint64(m.MessageIDs[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateReadHistoryInbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateReadHistoryInbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateReadHistoryInbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb0
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i = encodeVarintUpdates(dAtA, i, uint64(m.MaxID))
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateReadHistoryOutbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateReadHistoryOutbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateReadHistoryOutbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb0
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i = encodeVarintUpdates(dAtA, i, uint64(m.MaxID))
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb0
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i = encodeVarintUpdates(dAtA, i, uint64(m.PeerType))
	i--
	dAtA[i] = 0x20
	i = encodeVarintUpdates(dAtA, i, uint64(m.PeerID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintUpdates(dAtA, i, uint64(m.Action))
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateUserStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i = encodeVarintUpdates(dAtA, i, uint64(m.Status))
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUsername) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUsername) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i -= len(m.Phone)
	copy(dAtA[i:], m.Phone)
	i = encodeVarintUpdates(dAtA, i, uint64(len(m.Phone)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Bio)
	copy(dAtA[i:], m.Bio)
	i = encodeVarintUpdates(dAtA, i, uint64(len(m.Bio)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.LastName)
	copy(dAtA[i:], m.LastName)
	i = encodeVarintUpdates(dAtA, i, uint64(len(m.LastName)))
	i--
	dAtA[i] = 0x22
	i -= len(m.FirstName)
	copy(dAtA[i:], m.FirstName)
	i = encodeVarintUpdates(dAtA, i, uint64(len(m.FirstName)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Username)
	copy(dAtA[i:], m.Username)
	i = encodeVarintUpdates(dAtA, i, uint64(len(m.Username)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintUpdates(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateUserPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserPhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserPhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if len(m.DeletedPhotoIDs) > 0 {
		for iNdEx := len(m.DeletedPhotoIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintUpdates(dAtA, i, uint64(m.DeletedPhotoIDs[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	i = encodeVarintUpdates(dAtA, i, uint64(m.PhotoID))
	i--
	dAtA[i] = 0x18
	if m.Photo != nil {
		{
			size, err := m.Photo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintUpdates(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateNotifySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb0
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if m.Settings == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Settings")
	} else {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NotifyPeer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("NotifyPeer")
	} else {
		{
			size, err := m.NotifyPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintUpdates(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateGroupParticipantAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupParticipantAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGroupParticipantAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i = encodeVarintUpdates(dAtA, i, uint64(m.Date))
	i--
	dAtA[i] = 0x20
	i = encodeVarintUpdates(dAtA, i, uint64(m.InviterID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintUpdates(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateGroupParticipantDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupParticipantDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGroupParticipantDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i = encodeVarintUpdates(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateGroupParticipantAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupParticipantAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGroupParticipantAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i--
	if m.IsAdmin {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintUpdates(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateGroupAdmins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupAdmins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGroupAdmins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i--
	if m.AdminEnabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateGroupPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupPhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGroupPhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i = encodeVarintUpdates(dAtA, i, uint64(m.PhotoID))
	i--
	dAtA[i] = 0x18
	if m.Photo != nil {
		{
			size, err := m.Photo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintUpdates(dAtA, i, uint64(m.GroupID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateReadMessagesContents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateReadMessagesContents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateReadMessagesContents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb0
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MessageIDs) > 0 {
		for iNdEx := len(m.MessageIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintUpdates(dAtA, i, uint64(m.MessageIDs[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAuthorizationReset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAuthorizationReset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAuthorizationReset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	return len(dAtA) - i, nil
}

func (m *UpdateDraftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDraftMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDraftMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if m.Message == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Message")
	} else {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDraftMessageCleared) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDraftMessageCleared) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDraftMessageCleared) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb0
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDialogPinned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDialogPinned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDialogPinned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb0
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i--
	if m.Pinned {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDialogPinnedReorder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDialogPinnedReorder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDialogPinnedReorder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if len(m.Peer) > 0 {
		for iNdEx := len(m.Peer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAccountPrivacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAccountPrivacy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAccountPrivacy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if len(m.Call) > 0 {
		for iNdEx := len(m.Call) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Call[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ForwardedMessage) > 0 {
		for iNdEx := len(m.ForwardedMessage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForwardedMessage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ProfilePhoto) > 0 {
		for iNdEx := len(m.ProfilePhoto) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProfilePhoto[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PhoneNumber) > 0 {
		for iNdEx := len(m.PhoneNumber) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PhoneNumber[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LastSeen) > 0 {
		for iNdEx := len(m.LastSeen) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastSeen[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChatInvite) > 0 {
		for iNdEx := len(m.ChatInvite) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChatInvite[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateLabelItemsAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateLabelItemsAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateLabelItemsAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb0
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Labels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LabelIDs) > 0 {
		for iNdEx := len(m.LabelIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintUpdates(dAtA, i, uint64(m.LabelIDs[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	if len(m.MessageIDs) > 0 {
		for iNdEx := len(m.MessageIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintUpdates(dAtA, i, uint64(m.MessageIDs[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateLabelItemsRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateLabelItemsRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateLabelItemsRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb0
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Labels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LabelIDs) > 0 {
		for iNdEx := len(m.LabelIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintUpdates(dAtA, i, uint64(m.LabelIDs[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	if len(m.MessageIDs) > 0 {
		for iNdEx := len(m.MessageIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintUpdates(dAtA, i, uint64(m.MessageIDs[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateLabelSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateLabelSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateLabelSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Labels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateLabelDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateLabelDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateLabelDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if len(m.LabelIDs) > 0 {
		for iNdEx := len(m.LabelIDs) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintUpdates(dAtA, i, uint64(m.LabelIDs[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserBlocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserBlocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserBlocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i--
	if m.Blocked {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateMessagePoll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessagePoll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessagePoll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if m.Results == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Results")
	} else {
		{
			size, err := m.Results.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Poll != nil {
		{
			size, err := m.Poll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintUpdates(dAtA, i, uint64(m.PollID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateBotCallbackQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotCallbackQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBotCallbackQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if m.Data != nil {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintUpdates(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	i = encodeVarintUpdates(dAtA, i, uint64(m.MessageID))
	i--
	dAtA[i] = 0x20
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintUpdates(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.QueryID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateBotInlineQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotInlineQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBotInlineQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if m.Geo != nil {
		{
			size, err := m.Geo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	i -= len(m.Offset)
	copy(dAtA[i:], m.Offset)
	i = encodeVarintUpdates(dAtA, i, uint64(len(m.Offset)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Query)
	copy(dAtA[i:], m.Query)
	i = encodeVarintUpdates(dAtA, i, uint64(len(m.Query)))
	i--
	dAtA[i] = 0x22
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintUpdates(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.QueryID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateBotInlineSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBotInlineSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBotInlineSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if m.Geo != nil {
		{
			size, err := m.Geo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	i -= len(m.ResultID)
	copy(dAtA[i:], m.ResultID)
	i = encodeVarintUpdates(dAtA, i, uint64(len(m.ResultID)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Query)
	copy(dAtA[i:], m.Query)
	i = encodeVarintUpdates(dAtA, i, uint64(len(m.Query)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintUpdates(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *UpdateTeamCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTeamCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTeamCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if m.Team == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Team")
	} else {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTeamMemberAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTeamMemberAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTeamMemberAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i = encodeVarintUpdates(dAtA, i, uint64(m.AdderID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintUpdates(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateTeamMemberRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTeamMemberRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTeamMemberRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i = encodeVarintUpdates(dAtA, i, uint64(m.RemoverID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintUpdates(dAtA, i, uint64(m.UserID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateTeamPhotoChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTeamPhotoChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTeamPhotoChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if m.Photo == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Photo")
	} else {
		{
			size, err := m.Photo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateCommunityMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCommunityMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCommunityMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i = encodeVarintUpdates(dAtA, i, uint64(m.SenderMsgID))
	i--
	dAtA[i] = 0x38
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	i = encodeVarintUpdates(dAtA, i, uint64(m.GlobalMsgID))
	i--
	dAtA[i] = 0x28
	i = encodeVarintUpdates(dAtA, i, uint64(m.CreatedOn))
	i--
	dAtA[i] = 0x20
	i -= len(m.Body)
	copy(dAtA[i:], m.Body)
	i = encodeVarintUpdates(dAtA, i, uint64(len(m.Body)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintUpdates(dAtA, i, uint64(m.ReceiverID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.SenderID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateCommunityReadOutbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCommunityReadOutbox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCommunityReadOutbox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i = encodeVarintUpdates(dAtA, i, uint64(m.SenderMsgID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintUpdates(dAtA, i, uint64(m.ReceiverID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.SenderID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateCommunityTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCommunityTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCommunityTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	i = encodeVarintUpdates(dAtA, i, uint64(m.Action))
	i--
	dAtA[i] = 0x18
	i = encodeVarintUpdates(dAtA, i, uint64(m.ReceiverID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintUpdates(dAtA, i, uint64(m.SenderID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UpdateCalendarEventAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCalendarEventAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCalendarEventAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if m.Event == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Event")
	} else {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCalendarEventRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCalendarEventRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCalendarEventRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.EventID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb0
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	return len(dAtA) - i, nil
}

func (m *UpdateCalendarEventEdited) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCalendarEventEdited) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCalendarEventEdited) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintUpdates(dAtA, i, uint64(m.UpdateID))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	i = encodeVarintUpdates(dAtA, i, uint64(m.UCount))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa0
	if m.Event == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Event")
	} else {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUpdates(dAtA []byte, offset int, v uint64) int {
	offset -= sovUpdates(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateGetState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateGetDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.From))
	n += 1 + sovUpdates(uint64(m.Limit))
	return n
}

func (m *UpdateDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 1 + sovUpdates(uint64(m.MaxUpdateID))
	n += 1 + sovUpdates(uint64(m.MinUpdateID))
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovUpdates(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovUpdates(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovUpdates(uint64(l))
		}
	}
	n += 1 + sovUpdates(uint64(m.CurrentUpdateID))
	return n
}

func (m *UpdateTooLong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateMessageID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.MessageID))
	n += 1 + sovUpdates(uint64(m.RandomID))
	n += 2 + sovUpdates(uint64(m.UCount))
	return n
}

func (m *UpdateNewMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 9
	n += 1 + sovUpdates(uint64(m.SenderRefID))
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateMessageEdited) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateMessagesDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MessageIDs) > 0 {
		for _, e := range m.MessageIDs {
			n += 1 + sovUpdates(uint64(e))
		}
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	n += 2 + sovUpdates(uint64(m.TeamID))
	return n
}

func (m *UpdateReadHistoryInbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 1 + sovUpdates(uint64(m.MaxID))
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	n += 2 + sovUpdates(uint64(m.TeamID))
	return n
}

func (m *UpdateReadHistoryOutbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 1 + sovUpdates(uint64(m.MaxID))
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	n += 2 + sovUpdates(uint64(m.TeamID))
	return n
}

func (m *UpdateUserTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.UserID))
	n += 1 + sovUpdates(uint64(m.Action))
	n += 1 + sovUpdates(uint64(m.PeerID))
	n += 1 + sovUpdates(uint64(m.PeerType))
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.TeamID))
	return n
}

func (m *UpdateUserStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.UserID))
	n += 1 + sovUpdates(uint64(m.Status))
	n += 2 + sovUpdates(uint64(m.UCount))
	return n
}

func (m *UpdateUsername) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.UserID))
	l = len(m.Username)
	n += 1 + l + sovUpdates(uint64(l))
	l = len(m.FirstName)
	n += 1 + l + sovUpdates(uint64(l))
	l = len(m.LastName)
	n += 1 + l + sovUpdates(uint64(l))
	l = len(m.Bio)
	n += 1 + l + sovUpdates(uint64(l))
	l = len(m.Phone)
	n += 1 + l + sovUpdates(uint64(l))
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateUserPhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.UserID))
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 1 + sovUpdates(uint64(m.PhotoID))
	if len(m.DeletedPhotoIDs) > 0 {
		for _, e := range m.DeletedPhotoIDs {
			n += 1 + sovUpdates(uint64(e))
		}
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateNotifySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.UserID))
	if m.NotifyPeer != nil {
		l = m.NotifyPeer.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	n += 2 + sovUpdates(uint64(m.TeamID))
	return n
}

func (m *UpdateGroupParticipantAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.GroupID))
	n += 1 + sovUpdates(uint64(m.UserID))
	n += 1 + sovUpdates(uint64(m.InviterID))
	n += 1 + sovUpdates(uint64(m.Date))
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateGroupParticipantDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.GroupID))
	n += 1 + sovUpdates(uint64(m.UserID))
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateGroupParticipantAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.GroupID))
	n += 1 + sovUpdates(uint64(m.UserID))
	n += 2
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateGroupAdmins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.GroupID))
	n += 2
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateGroupPhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.GroupID))
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 1 + sovUpdates(uint64(m.PhotoID))
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateReadMessagesContents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MessageIDs) > 0 {
		for _, e := range m.MessageIDs {
			n += 1 + sovUpdates(uint64(e))
		}
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	n += 2 + sovUpdates(uint64(m.TeamID))
	return n
}

func (m *UpdateAuthorizationReset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateDraftMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateDraftMessageCleared) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	n += 2 + sovUpdates(uint64(m.TeamID))
	return n
}

func (m *UpdateDialogPinned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	n += 2 + sovUpdates(uint64(m.TeamID))
	return n
}

func (m *UpdateDialogPinnedReorder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Peer) > 0 {
		for _, e := range m.Peer {
			l = e.Size()
			n += 1 + l + sovUpdates(uint64(l))
		}
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateAccountPrivacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChatInvite) > 0 {
		for _, e := range m.ChatInvite {
			l = e.Size()
			n += 1 + l + sovUpdates(uint64(l))
		}
	}
	if len(m.LastSeen) > 0 {
		for _, e := range m.LastSeen {
			l = e.Size()
			n += 1 + l + sovUpdates(uint64(l))
		}
	}
	if len(m.PhoneNumber) > 0 {
		for _, e := range m.PhoneNumber {
			l = e.Size()
			n += 1 + l + sovUpdates(uint64(l))
		}
	}
	if len(m.ProfilePhoto) > 0 {
		for _, e := range m.ProfilePhoto {
			l = e.Size()
			n += 1 + l + sovUpdates(uint64(l))
		}
	}
	if len(m.ForwardedMessage) > 0 {
		for _, e := range m.ForwardedMessage {
			l = e.Size()
			n += 1 + l + sovUpdates(uint64(l))
		}
	}
	if len(m.Call) > 0 {
		for _, e := range m.Call {
			l = e.Size()
			n += 1 + l + sovUpdates(uint64(l))
		}
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateLabelItemsAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	if len(m.MessageIDs) > 0 {
		for _, e := range m.MessageIDs {
			n += 1 + sovUpdates(uint64(e))
		}
	}
	if len(m.LabelIDs) > 0 {
		for _, e := range m.LabelIDs {
			n += 1 + sovUpdates(uint64(e))
		}
	}
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovUpdates(uint64(l))
		}
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	n += 2 + sovUpdates(uint64(m.TeamID))
	return n
}

func (m *UpdateLabelItemsRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	if len(m.MessageIDs) > 0 {
		for _, e := range m.MessageIDs {
			n += 1 + sovUpdates(uint64(e))
		}
	}
	if len(m.LabelIDs) > 0 {
		for _, e := range m.LabelIDs {
			n += 1 + sovUpdates(uint64(e))
		}
	}
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovUpdates(uint64(l))
		}
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	n += 2 + sovUpdates(uint64(m.TeamID))
	return n
}

func (m *UpdateLabelSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovUpdates(uint64(l))
		}
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateLabelDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LabelIDs) > 0 {
		for _, e := range m.LabelIDs {
			n += 1 + sovUpdates(uint64(e))
		}
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateUserBlocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.UserID))
	n += 2
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateMessagePoll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.PollID))
	if m.Poll != nil {
		l = m.Poll.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	if m.Results != nil {
		l = m.Results.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateBotCallbackQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.QueryID))
	n += 1 + sovUpdates(uint64(m.UserID))
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 1 + sovUpdates(uint64(m.MessageID))
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateBotInlineQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.QueryID))
	n += 1 + sovUpdates(uint64(m.UserID))
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	l = len(m.Query)
	n += 1 + l + sovUpdates(uint64(l))
	l = len(m.Offset)
	n += 1 + l + sovUpdates(uint64(l))
	if m.Geo != nil {
		l = m.Geo.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateBotInlineSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.UserID))
	l = len(m.Query)
	n += 1 + l + sovUpdates(uint64(l))
	l = len(m.ResultID)
	n += 1 + l + sovUpdates(uint64(l))
	if m.Geo != nil {
		l = m.Geo.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateTeamCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateTeamMemberAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.TeamID))
	n += 1 + sovUpdates(uint64(m.UserID))
	n += 1 + sovUpdates(uint64(m.AdderID))
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateTeamMemberRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.TeamID))
	n += 1 + sovUpdates(uint64(m.UserID))
	n += 1 + sovUpdates(uint64(m.RemoverID))
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateTeamPhotoChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.TeamID))
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateCommunityMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.SenderID))
	n += 1 + sovUpdates(uint64(m.ReceiverID))
	l = len(m.Body)
	n += 1 + l + sovUpdates(uint64(l))
	n += 1 + sovUpdates(uint64(m.CreatedOn))
	n += 1 + sovUpdates(uint64(m.GlobalMsgID))
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovUpdates(uint64(l))
		}
	}
	n += 1 + sovUpdates(uint64(m.SenderMsgID))
	n += 2 + sovUpdates(uint64(m.TeamID))
	return n
}

func (m *UpdateCommunityReadOutbox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.SenderID))
	n += 1 + sovUpdates(uint64(m.ReceiverID))
	n += 1 + sovUpdates(uint64(m.SenderMsgID))
	n += 2 + sovUpdates(uint64(m.TeamID))
	return n
}

func (m *UpdateCommunityTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUpdates(uint64(m.SenderID))
	n += 1 + sovUpdates(uint64(m.ReceiverID))
	n += 1 + sovUpdates(uint64(m.Action))
	n += 2 + sovUpdates(uint64(m.TeamID))
	return n
}

func (m *UpdateCalendarEventAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func (m *UpdateCalendarEventRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	n += 2 + sovUpdates(uint64(m.EventID))
	return n
}

func (m *UpdateCalendarEventEdited) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovUpdates(uint64(l))
	}
	n += 2 + sovUpdates(uint64(m.UCount))
	n += 2 + sovUpdates(uint64(m.UpdateID))
	return n
}

func sovUpdates(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUpdates(x uint64) (n int) {
	return sovUpdates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateGetState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGetState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGetState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGetDifference) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGetDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGetDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("From")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Limit")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDifference) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field More", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.More = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUpdateID", wireType)
			}
			m.MaxUpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinUpdateID", wireType)
			}
			m.MinUpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinUpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &UpdateEnvelope{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUpdateID", wireType)
			}
			m.CurrentUpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("More")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MaxUpdateID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MinUpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTooLong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTooLong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTooLong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateState) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageID) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MessageID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RandomID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNewMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNewMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNewMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &UserMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &User{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderRefID", wireType)
			}
			m.SenderRefID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderRefID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Message")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Sender")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageEdited) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageEdited: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageEdited: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &UserMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Message")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessagesDeleted) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessagesDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessagesDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateReadHistoryInbox) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateReadHistoryInbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateReadHistoryInbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxID", wireType)
			}
			m.MaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MaxID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateReadHistoryOutbox) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateReadHistoryOutbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateReadHistoryOutbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxID", wireType)
			}
			m.MaxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MaxID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserTyping) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= TypingAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Action")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStatus) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Status")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUsername) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Username")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("FirstName")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LastName")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Bio")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserPhoto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &UserPhoto{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoID", wireType)
			}
			m.PhotoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhotoID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DeletedPhotoIDs = append(m.DeletedPhotoIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DeletedPhotoIDs) == 0 {
					m.DeletedPhotoIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DeletedPhotoIDs = append(m.DeletedPhotoIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedPhotoIDs", wireType)
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNotifySettings) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotifyPeer == nil {
				m.NotifyPeer = &Peer{}
			}
			if err := m.NotifyPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &PeerNotifySettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NotifyPeer")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Settings")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupParticipantAdd) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupParticipantAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupParticipantAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterID", wireType)
			}
			m.InviterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviterID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("InviterID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Date")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupParticipantDeleted) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupParticipantDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupParticipantDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupParticipantAdmin) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupParticipantAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupParticipantAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
			hasFields[0] |= uint64(0x00000004)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("IsAdmin")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupAdmins) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupAdmins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupAdmins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdminEnabled = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AdminEnabled")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupPhoto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &GroupPhoto{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoID", wireType)
			}
			m.PhotoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhotoID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GroupID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateReadMessagesContents) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateReadMessagesContents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateReadMessagesContents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAuthorizationReset) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAuthorizationReset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAuthorizationReset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDraftMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDraftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDraftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &DraftMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Message")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDraftMessageCleared) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDraftMessageCleared: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDraftMessageCleared: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDialogPinned) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDialogPinned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDialogPinned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pinned = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Pinned")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDialogPinnedReorder) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDialogPinnedReorder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDialogPinnedReorder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer, &Peer{})
			if err := m.Peer[len(m.Peer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAccountPrivacy) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAccountPrivacy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAccountPrivacy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatInvite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatInvite = append(m.ChatInvite, &PrivacyRule{})
			if err := m.ChatInvite[len(m.ChatInvite)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSeen = append(m.LastSeen, &PrivacyRule{})
			if err := m.LastSeen[len(m.LastSeen)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = append(m.PhoneNumber, &PrivacyRule{})
			if err := m.PhoneNumber[len(m.PhoneNumber)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfilePhoto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfilePhoto = append(m.ProfilePhoto, &PrivacyRule{})
			if err := m.ProfilePhoto[len(m.ProfilePhoto)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardedMessage = append(m.ForwardedMessage, &PrivacyRule{})
			if err := m.ForwardedMessage[len(m.ForwardedMessage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Call = append(m.Call, &PrivacyRule{})
			if err := m.Call[len(m.Call)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateLabelItemsAdded) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLabelItemsAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLabelItemsAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, &Label{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateLabelItemsRemoved) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLabelItemsRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLabelItemsRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageIDs = append(m.MessageIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageIDs) == 0 {
					m.MessageIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageIDs = append(m.MessageIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageIDs", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, &Label{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateLabelSet) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLabelSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLabelSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, &Label{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateLabelDeleted) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLabelDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLabelDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LabelIDs = append(m.LabelIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LabelIDs) == 0 {
					m.LabelIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LabelIDs = append(m.LabelIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIDs", wireType)
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserBlocked) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserBlocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserBlocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Blocked = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Blocked")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessagePoll) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessagePoll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessagePoll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollID", wireType)
			}
			m.PollID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Poll == nil {
				m.Poll = &MediaPoll{}
			}
			if err := m.Poll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Results == nil {
				m.Results = &PollResults{}
			}
			if err := m.Results.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PollID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Results")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotCallbackQuery) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotCallbackQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotCallbackQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			m.QueryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("QueryID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotInlineQuery) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotInlineQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotInlineQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			m.QueryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Geo == nil {
				m.Geo = &GeoLocation{}
			}
			if err := m.Geo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("QueryID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Query")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBotInlineSend) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBotInlineSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBotInlineSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Geo == nil {
				m.Geo = &GeoLocation{}
			}
			if err := m.Geo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Query")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ResultID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTeamCreated) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTeamCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTeamCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Team")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTeamMemberAdded) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTeamMemberAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTeamMemberAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdderID", wireType)
			}
			m.AdderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TeamID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AdderID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTeamMemberRemoved) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTeamMemberRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTeamMemberRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoverID", wireType)
			}
			m.RemoverID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoverID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TeamID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RemoverID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTeamPhotoChanged) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTeamPhotoChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTeamPhotoChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &FileLocation{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TeamID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Photo")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCommunityMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCommunityMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCommunityMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverID", wireType)
			}
			m.ReceiverID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalMsgID", wireType)
			}
			m.GlobalMsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalMsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderMsgID", wireType)
			}
			m.SenderMsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderMsgID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SenderID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ReceiverID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Body")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CreatedOn")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("GlobalMsgID")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SenderMsgID")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TeamID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCommunityReadOutbox) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCommunityReadOutbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCommunityReadOutbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverID", wireType)
			}
			m.ReceiverID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderMsgID", wireType)
			}
			m.SenderMsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderMsgID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SenderID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ReceiverID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SenderMsgID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TeamID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCommunityTyping) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCommunityTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCommunityTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverID", wireType)
			}
			m.ReceiverID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= TypingAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SenderID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ReceiverID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Action")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TeamID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCalendarEventAdded) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCalendarEventAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCalendarEventAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &CalendarEvent{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Event")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCalendarEventRemoved) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCalendarEventRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCalendarEventRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("EventID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCalendarEventEdited) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCalendarEventEdited: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCalendarEventEdited: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &CalendarEvent{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCount", wireType)
			}
			m.UCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateID", wireType)
			}
			m.UpdateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Event")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UCount")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UpdateID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpdates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpdates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUpdates
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUpdates
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUpdates
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUpdates        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpdates          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUpdates = fmt.Errorf("proto: unexpected end of group")
)
