// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.community.proto

package msg

import (
	fmt "fmt"
	pbytes "github.com/gobwas/pool/pbytes"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

const C_CommunitySendMessage int64 = 3506778488

type poolCommunitySendMessage struct {
	pool sync.Pool
}

func (p *poolCommunitySendMessage) Get() *CommunitySendMessage {
	x, ok := p.pool.Get().(*CommunitySendMessage)
	if !ok {
		return &CommunitySendMessage{}
	}
	x.Entities = x.Entities[:0]
	x.ReplyMarkup = 0
	x.ReplyMarkupData = nil
	return x
}

func (p *poolCommunitySendMessage) Put(x *CommunitySendMessage) {
	p.pool.Put(x)
}

var PoolCommunitySendMessage = poolCommunitySendMessage{}

func ResultCommunitySendMessage(out *MessageEnvelope, res *CommunitySendMessage) {
	out.Constructor = C_CommunitySendMessage
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_CommunitySendMedia int64 = 2436824148

type poolCommunitySendMedia struct {
	pool sync.Pool
}

func (p *poolCommunitySendMedia) Get() *CommunitySendMedia {
	x, ok := p.pool.Get().(*CommunitySendMedia)
	if !ok {
		return &CommunitySendMedia{}
	}
	x.ReplyTo = 0
	x.ClearDraft = false
	return x
}

func (p *poolCommunitySendMedia) Put(x *CommunitySendMedia) {
	p.pool.Put(x)
}

var PoolCommunitySendMedia = poolCommunitySendMedia{}

func ResultCommunitySendMedia(out *MessageEnvelope, res *CommunitySendMedia) {
	out.Constructor = C_CommunitySendMedia
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_CommunitySetTyping int64 = 3413516595

type poolCommunitySetTyping struct {
	pool sync.Pool
}

func (p *poolCommunitySetTyping) Get() *CommunitySetTyping {
	x, ok := p.pool.Get().(*CommunitySetTyping)
	if !ok {
		return &CommunitySetTyping{}
	}
	return x
}

func (p *poolCommunitySetTyping) Put(x *CommunitySetTyping) {
	p.pool.Put(x)
}

var PoolCommunitySetTyping = poolCommunitySetTyping{}

func ResultCommunitySetTyping(out *MessageEnvelope, res *CommunitySetTyping) {
	out.Constructor = C_CommunitySetTyping
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_CommunityGetUpdates int64 = 2021391963

type poolCommunityGetUpdates struct {
	pool sync.Pool
}

func (p *poolCommunityGetUpdates) Get() *CommunityGetUpdates {
	x, ok := p.pool.Get().(*CommunityGetUpdates)
	if !ok {
		return &CommunityGetUpdates{}
	}
	x.OffsetID = 0
	return x
}

func (p *poolCommunityGetUpdates) Put(x *CommunityGetUpdates) {
	p.pool.Put(x)
}

var PoolCommunityGetUpdates = poolCommunityGetUpdates{}

func ResultCommunityGetUpdates(out *MessageEnvelope, res *CommunityGetUpdates) {
	out.Constructor = C_CommunityGetUpdates
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_CommunityGetMembers int64 = 2022915988

type poolCommunityGetMembers struct {
	pool sync.Pool
}

func (p *poolCommunityGetMembers) Get() *CommunityGetMembers {
	x, ok := p.pool.Get().(*CommunityGetMembers)
	if !ok {
		return &CommunityGetMembers{}
	}
	x.Offset = 0
	x.Limit = 0
	return x
}

func (p *poolCommunityGetMembers) Put(x *CommunityGetMembers) {
	p.pool.Put(x)
}

var PoolCommunityGetMembers = poolCommunityGetMembers{}

func ResultCommunityGetMembers(out *MessageEnvelope, res *CommunityGetMembers) {
	out.Constructor = C_CommunityGetMembers
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_CommunityRecall int64 = 890349574

type poolCommunityRecall struct {
	pool sync.Pool
}

func (p *poolCommunityRecall) Get() *CommunityRecall {
	x, ok := p.pool.Get().(*CommunityRecall)
	if !ok {
		return &CommunityRecall{}
	}
	return x
}

func (p *poolCommunityRecall) Put(x *CommunityRecall) {
	p.pool.Put(x)
}

var PoolCommunityRecall = poolCommunityRecall{}

func ResultCommunityRecall(out *MessageEnvelope, res *CommunityRecall) {
	out.Constructor = C_CommunityRecall
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_CommunityAuthorizeUser int64 = 1452766231

type poolCommunityAuthorizeUser struct {
	pool sync.Pool
}

func (p *poolCommunityAuthorizeUser) Get() *CommunityAuthorizeUser {
	x, ok := p.pool.Get().(*CommunityAuthorizeUser)
	if !ok {
		return &CommunityAuthorizeUser{}
	}
	x.LastName = ""
	x.Provider = ""
	return x
}

func (p *poolCommunityAuthorizeUser) Put(x *CommunityAuthorizeUser) {
	p.pool.Put(x)
}

var PoolCommunityAuthorizeUser = poolCommunityAuthorizeUser{}

func ResultCommunityAuthorizeUser(out *MessageEnvelope, res *CommunityAuthorizeUser) {
	out.Constructor = C_CommunityAuthorizeUser
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_CommunityUser int64 = 3812837958

type poolCommunityUser struct {
	pool sync.Pool
}

func (p *poolCommunityUser) Get() *CommunityUser {
	x, ok := p.pool.Get().(*CommunityUser)
	if !ok {
		return &CommunityUser{}
	}
	return x
}

func (p *poolCommunityUser) Put(x *CommunityUser) {
	p.pool.Put(x)
}

var PoolCommunityUser = poolCommunityUser{}

func ResultCommunityUser(out *MessageEnvelope, res *CommunityUser) {
	out.Constructor = C_CommunityUser
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_CommunityUpdateEnvelope int64 = 1076119993

type poolCommunityUpdateEnvelope struct {
	pool sync.Pool
}

func (p *poolCommunityUpdateEnvelope) Get() *CommunityUpdateEnvelope {
	x, ok := p.pool.Get().(*CommunityUpdateEnvelope)
	if !ok {
		return &CommunityUpdateEnvelope{}
	}
	x.Update = nil
	return x
}

func (p *poolCommunityUpdateEnvelope) Put(x *CommunityUpdateEnvelope) {
	p.pool.Put(x)
}

var PoolCommunityUpdateEnvelope = poolCommunityUpdateEnvelope{}

func ResultCommunityUpdateEnvelope(out *MessageEnvelope, res *CommunityUpdateEnvelope) {
	out.Constructor = C_CommunityUpdateEnvelope
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_CommunityUpdateContainer int64 = 918339432

type poolCommunityUpdateContainer struct {
	pool sync.Pool
}

func (p *poolCommunityUpdateContainer) Get() *CommunityUpdateContainer {
	x, ok := p.pool.Get().(*CommunityUpdateContainer)
	if !ok {
		return &CommunityUpdateContainer{}
	}
	x.Updates = x.Updates[:0]
	x.Empty = false
	return x
}

func (p *poolCommunityUpdateContainer) Put(x *CommunityUpdateContainer) {
	p.pool.Put(x)
}

var PoolCommunityUpdateContainer = poolCommunityUpdateContainer{}

func ResultCommunityUpdateContainer(out *MessageEnvelope, res *CommunityUpdateContainer) {
	out.Constructor = C_CommunityUpdateContainer
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

func init() {
	ConstructorNames[3506778488] = "CommunitySendMessage"
	ConstructorNames[2436824148] = "CommunitySendMedia"
	ConstructorNames[3413516595] = "CommunitySetTyping"
	ConstructorNames[2021391963] = "CommunityGetUpdates"
	ConstructorNames[2022915988] = "CommunityGetMembers"
	ConstructorNames[890349574] = "CommunityRecall"
	ConstructorNames[1452766231] = "CommunityAuthorizeUser"
	ConstructorNames[3812837958] = "CommunityUser"
	ConstructorNames[1076119993] = "CommunityUpdateEnvelope"
	ConstructorNames[918339432] = "CommunityUpdateContainer"
}
