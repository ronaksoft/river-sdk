// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.community.proto

package msg

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CommunitySendMedia
// @Function
// @Return: UserMessage
type CommunitySendMessage struct {
	RandomID        int64            `protobuf:"varint,1,req,name=RandomID" json:"RandomID"`
	Peer            *InputPeer       `protobuf:"bytes,2,req,name=Peer" json:"Peer,omitempty"`
	Body            string           `protobuf:"bytes,3,req,name=Body" json:"Body"`
	Entities        []*MessageEntity `protobuf:"bytes,5,rep,name=Entities" json:"Entities,omitempty"`
	ReplyMarkup     int64            `protobuf:"varint,6,opt,name=ReplyMarkup" json:"ReplyMarkup"`
	ReplyMarkupData []byte           `protobuf:"bytes,7,opt,name=ReplyMarkupData" json:"ReplyMarkupData"`
	SenderID        int64            `protobuf:"varint,8,req,name=SenderID" json:"SenderID"`
}

func (m *CommunitySendMessage) Reset()         { *m = CommunitySendMessage{} }
func (m *CommunitySendMessage) String() string { return proto.CompactTextString(m) }
func (*CommunitySendMessage) ProtoMessage()    {}
func (*CommunitySendMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c49ab5d4c11d6137, []int{0}
}
func (m *CommunitySendMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunitySendMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunitySendMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunitySendMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunitySendMessage.Merge(m, src)
}
func (m *CommunitySendMessage) XXX_Size() int {
	return m.Size()
}
func (m *CommunitySendMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunitySendMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CommunitySendMessage proto.InternalMessageInfo

func (m *CommunitySendMessage) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *CommunitySendMessage) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *CommunitySendMessage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *CommunitySendMessage) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *CommunitySendMessage) GetReplyMarkup() int64 {
	if m != nil {
		return m.ReplyMarkup
	}
	return 0
}

func (m *CommunitySendMessage) GetReplyMarkupData() []byte {
	if m != nil {
		return m.ReplyMarkupData
	}
	return nil
}

func (m *CommunitySendMessage) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

// CommunitySendMedia
// @Function
// @Return: UserMessage
type CommunitySendMedia struct {
	RandomID   int64          `protobuf:"varint,1,req,name=RandomID" json:"RandomID"`
	Peer       *InputPeer     `protobuf:"bytes,2,req,name=Peer" json:"Peer,omitempty"`
	MediaType  InputMediaType `protobuf:"varint,3,req,name=MediaType,enum=msg.InputMediaType" json:"MediaType"`
	MediaData  []byte         `protobuf:"bytes,4,req,name=MediaData" json:"MediaData"`
	ReplyTo    int64          `protobuf:"varint,5,opt,name=ReplyTo" json:"ReplyTo"`
	ClearDraft bool           `protobuf:"varint,6,opt,name=ClearDraft" json:"ClearDraft"`
	SenderID   int64          `protobuf:"varint,9,req,name=SenderID" json:"SenderID"`
}

func (m *CommunitySendMedia) Reset()         { *m = CommunitySendMedia{} }
func (m *CommunitySendMedia) String() string { return proto.CompactTextString(m) }
func (*CommunitySendMedia) ProtoMessage()    {}
func (*CommunitySendMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_c49ab5d4c11d6137, []int{1}
}
func (m *CommunitySendMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunitySendMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunitySendMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunitySendMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunitySendMedia.Merge(m, src)
}
func (m *CommunitySendMedia) XXX_Size() int {
	return m.Size()
}
func (m *CommunitySendMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunitySendMedia.DiscardUnknown(m)
}

var xxx_messageInfo_CommunitySendMedia proto.InternalMessageInfo

func (m *CommunitySendMedia) GetRandomID() int64 {
	if m != nil {
		return m.RandomID
	}
	return 0
}

func (m *CommunitySendMedia) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *CommunitySendMedia) GetMediaType() InputMediaType {
	if m != nil {
		return m.MediaType
	}
	return InputMediaTypeEmpty
}

func (m *CommunitySendMedia) GetMediaData() []byte {
	if m != nil {
		return m.MediaData
	}
	return nil
}

func (m *CommunitySendMedia) GetReplyTo() int64 {
	if m != nil {
		return m.ReplyTo
	}
	return 0
}

func (m *CommunitySendMedia) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *CommunitySendMedia) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

// CommunitySetTyping
// @Function
// @Return: Bool
type CommunitySetTyping struct {
	Peer     *InputPeer   `protobuf:"bytes,1,req,name=Peer" json:"Peer,omitempty"`
	Action   TypingAction `protobuf:"varint,2,req,name=Action,enum=msg.TypingAction" json:"Action"`
	SenderID int64        `protobuf:"varint,3,req,name=SenderID" json:"SenderID"`
}

func (m *CommunitySetTyping) Reset()         { *m = CommunitySetTyping{} }
func (m *CommunitySetTyping) String() string { return proto.CompactTextString(m) }
func (*CommunitySetTyping) ProtoMessage()    {}
func (*CommunitySetTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_c49ab5d4c11d6137, []int{2}
}
func (m *CommunitySetTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunitySetTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunitySetTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunitySetTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunitySetTyping.Merge(m, src)
}
func (m *CommunitySetTyping) XXX_Size() int {
	return m.Size()
}
func (m *CommunitySetTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunitySetTyping.DiscardUnknown(m)
}

var xxx_messageInfo_CommunitySetTyping proto.InternalMessageInfo

func (m *CommunitySetTyping) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *CommunitySetTyping) GetAction() TypingAction {
	if m != nil {
		return m.Action
	}
	return TypingActionTyping
}

func (m *CommunitySetTyping) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

// CommunityGetUpdates
// @Function
// @Return: CommunityUpdateContainer
type CommunityGetUpdates struct {
	WaitAfterInMS int32 `protobuf:"varint,1,req,name=WaitAfterInMS" json:"WaitAfterInMS"`
	WaitMaxInMS   int32 `protobuf:"varint,2,req,name=WaitMaxInMS" json:"WaitMaxInMS"`
	SizeLimit     int32 `protobuf:"varint,3,req,name=SizeLimit" json:"SizeLimit"`
	OffsetID      int64 `protobuf:"varint,4,opt,name=OffsetID" json:"OffsetID"`
}

func (m *CommunityGetUpdates) Reset()         { *m = CommunityGetUpdates{} }
func (m *CommunityGetUpdates) String() string { return proto.CompactTextString(m) }
func (*CommunityGetUpdates) ProtoMessage()    {}
func (*CommunityGetUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_c49ab5d4c11d6137, []int{3}
}
func (m *CommunityGetUpdates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunityGetUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunityGetUpdates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunityGetUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityGetUpdates.Merge(m, src)
}
func (m *CommunityGetUpdates) XXX_Size() int {
	return m.Size()
}
func (m *CommunityGetUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityGetUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityGetUpdates proto.InternalMessageInfo

func (m *CommunityGetUpdates) GetWaitAfterInMS() int32 {
	if m != nil {
		return m.WaitAfterInMS
	}
	return 0
}

func (m *CommunityGetUpdates) GetWaitMaxInMS() int32 {
	if m != nil {
		return m.WaitMaxInMS
	}
	return 0
}

func (m *CommunityGetUpdates) GetSizeLimit() int32 {
	if m != nil {
		return m.SizeLimit
	}
	return 0
}

func (m *CommunityGetUpdates) GetOffsetID() int64 {
	if m != nil {
		return m.OffsetID
	}
	return 0
}

// CommunityGetMembers
// @Function
// @Return: TeamMembers
type CommunityGetMembers struct {
	Offset int32 `protobuf:"varint,1,opt,name=Offset" json:"Offset"`
	Limit  int32 `protobuf:"varint,2,opt,name=Limit" json:"Limit"`
}

func (m *CommunityGetMembers) Reset()         { *m = CommunityGetMembers{} }
func (m *CommunityGetMembers) String() string { return proto.CompactTextString(m) }
func (*CommunityGetMembers) ProtoMessage()    {}
func (*CommunityGetMembers) Descriptor() ([]byte, []int) {
	return fileDescriptor_c49ab5d4c11d6137, []int{4}
}
func (m *CommunityGetMembers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunityGetMembers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunityGetMembers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunityGetMembers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityGetMembers.Merge(m, src)
}
func (m *CommunityGetMembers) XXX_Size() int {
	return m.Size()
}
func (m *CommunityGetMembers) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityGetMembers.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityGetMembers proto.InternalMessageInfo

func (m *CommunityGetMembers) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *CommunityGetMembers) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// CommunityRecall
// @Function
// @Return: Bool
type CommunityRecall struct {
	TeamID    int64  `protobuf:"varint,1,req,name=TeamID" json:"TeamID"`
	AccessKey []byte `protobuf:"bytes,2,req,name=AccessKey" json:"AccessKey"`
}

func (m *CommunityRecall) Reset()         { *m = CommunityRecall{} }
func (m *CommunityRecall) String() string { return proto.CompactTextString(m) }
func (*CommunityRecall) ProtoMessage()    {}
func (*CommunityRecall) Descriptor() ([]byte, []int) {
	return fileDescriptor_c49ab5d4c11d6137, []int{5}
}
func (m *CommunityRecall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunityRecall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunityRecall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunityRecall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityRecall.Merge(m, src)
}
func (m *CommunityRecall) XXX_Size() int {
	return m.Size()
}
func (m *CommunityRecall) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityRecall.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityRecall proto.InternalMessageInfo

func (m *CommunityRecall) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *CommunityRecall) GetAccessKey() []byte {
	if m != nil {
		return m.AccessKey
	}
	return nil
}

// CommunityUpdateEnvelope
type CommunityUpdateEnvelope struct {
	OffsetID    int64  `protobuf:"varint,1,req,name=OffsetID" json:"OffsetID"`
	PartitionID int32  `protobuf:"varint,2,req,name=PartitionID" json:"PartitionID"`
	Constructor int64  `protobuf:"varint,3,req,name=Constructor" json:"Constructor"`
	Update      []byte `protobuf:"bytes,4,opt,name=Update" json:"Update"`
}

func (m *CommunityUpdateEnvelope) Reset()         { *m = CommunityUpdateEnvelope{} }
func (m *CommunityUpdateEnvelope) String() string { return proto.CompactTextString(m) }
func (*CommunityUpdateEnvelope) ProtoMessage()    {}
func (*CommunityUpdateEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_c49ab5d4c11d6137, []int{6}
}
func (m *CommunityUpdateEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunityUpdateEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunityUpdateEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunityUpdateEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityUpdateEnvelope.Merge(m, src)
}
func (m *CommunityUpdateEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *CommunityUpdateEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityUpdateEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityUpdateEnvelope proto.InternalMessageInfo

func (m *CommunityUpdateEnvelope) GetOffsetID() int64 {
	if m != nil {
		return m.OffsetID
	}
	return 0
}

func (m *CommunityUpdateEnvelope) GetPartitionID() int32 {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

func (m *CommunityUpdateEnvelope) GetConstructor() int64 {
	if m != nil {
		return m.Constructor
	}
	return 0
}

func (m *CommunityUpdateEnvelope) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

// CommunityUpdateContainer
type CommunityUpdateContainer struct {
	Updates []*CommunityUpdateEnvelope `protobuf:"bytes,1,rep,name=Updates" json:"Updates,omitempty"`
	Empty   bool                       `protobuf:"varint,2,opt,name=Empty" json:"Empty"`
}

func (m *CommunityUpdateContainer) Reset()         { *m = CommunityUpdateContainer{} }
func (m *CommunityUpdateContainer) String() string { return proto.CompactTextString(m) }
func (*CommunityUpdateContainer) ProtoMessage()    {}
func (*CommunityUpdateContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_c49ab5d4c11d6137, []int{7}
}
func (m *CommunityUpdateContainer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunityUpdateContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunityUpdateContainer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunityUpdateContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityUpdateContainer.Merge(m, src)
}
func (m *CommunityUpdateContainer) XXX_Size() int {
	return m.Size()
}
func (m *CommunityUpdateContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityUpdateContainer.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityUpdateContainer proto.InternalMessageInfo

func (m *CommunityUpdateContainer) GetUpdates() []*CommunityUpdateEnvelope {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *CommunityUpdateContainer) GetEmpty() bool {
	if m != nil {
		return m.Empty
	}
	return false
}

func init() {
	proto.RegisterType((*CommunitySendMessage)(nil), "msg.CommunitySendMessage")
	proto.RegisterType((*CommunitySendMedia)(nil), "msg.CommunitySendMedia")
	proto.RegisterType((*CommunitySetTyping)(nil), "msg.CommunitySetTyping")
	proto.RegisterType((*CommunityGetUpdates)(nil), "msg.CommunityGetUpdates")
	proto.RegisterType((*CommunityGetMembers)(nil), "msg.CommunityGetMembers")
	proto.RegisterType((*CommunityRecall)(nil), "msg.CommunityRecall")
	proto.RegisterType((*CommunityUpdateEnvelope)(nil), "msg.CommunityUpdateEnvelope")
	proto.RegisterType((*CommunityUpdateContainer)(nil), "msg.CommunityUpdateContainer")
}

func init() { proto.RegisterFile("chat.community.proto", fileDescriptor_c49ab5d4c11d6137) }

var fileDescriptor_c49ab5d4c11d6137 = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x41, 0x6f, 0xd3, 0x3e,
	0x1c, 0x6d, 0xd2, 0x76, 0xeb, 0xbc, 0xff, 0x7f, 0x03, 0x6f, 0x12, 0xd1, 0x34, 0x85, 0x28, 0x42,
	0xa8, 0x42, 0xa2, 0x93, 0x7a, 0x80, 0xf3, 0xd6, 0x4e, 0xa8, 0x82, 0x6a, 0x53, 0x5a, 0xc4, 0xd9,
	0x4b, 0x7f, 0xcd, 0x22, 0x1a, 0x3b, 0x72, 0x5c, 0x44, 0xf8, 0x0a, 0x5c, 0xf8, 0x06, 0x70, 0xe5,
	0xc4, 0xd7, 0xd8, 0x71, 0x47, 0x4e, 0x08, 0xb6, 0x2f, 0x82, 0xec, 0x38, 0x6e, 0x52, 0x0d, 0x4e,
	0xdc, 0xea, 0xf7, 0x5e, 0x7e, 0x7e, 0xef, 0xd9, 0x2e, 0xda, 0x0f, 0x2f, 0x89, 0xe8, 0x85, 0x2c,
	0x49, 0x96, 0x34, 0x16, 0x79, 0x2f, 0xe5, 0x4c, 0x30, 0xdc, 0x4c, 0xb2, 0xe8, 0xe0, 0x5e, 0xc8,
	0x38, 0xf4, 0x44, 0x9e, 0x42, 0x56, 0xc0, 0x07, 0x4f, 0xa3, 0x58, 0x5c, 0x2e, 0x2f, 0xa4, 0xfc,
	0x28, 0x62, 0x11, 0x3b, 0x52, 0xf0, 0xc5, 0x72, 0xae, 0x56, 0x6a, 0xa1, 0x7e, 0x15, 0x72, 0xff,
	0x8b, 0x8d, 0xf6, 0x07, 0xe5, 0xe4, 0x09, 0xd0, 0xd9, 0x18, 0xb2, 0x8c, 0x44, 0x80, 0x3d, 0xd4,
	0x09, 0x08, 0x9d, 0xb1, 0x64, 0x34, 0x74, 0x2c, 0xcf, 0xee, 0x36, 0x4f, 0x5a, 0x57, 0x3f, 0x1e,
	0x36, 0x02, 0x83, 0x62, 0x1f, 0xb5, 0xce, 0x01, 0xb8, 0x63, 0x7b, 0x76, 0x77, 0xbb, 0xbf, 0xd3,
	0x4b, 0xb2, 0xa8, 0x37, 0xa2, 0xe9, 0x52, 0x48, 0x34, 0x50, 0x1c, 0x76, 0x50, 0xeb, 0x84, 0xcd,
	0x72, 0xa7, 0xe9, 0xd9, 0xdd, 0x2d, 0x3d, 0x41, 0x21, 0xb8, 0x87, 0x3a, 0xa7, 0x54, 0xc4, 0x22,
	0x86, 0xcc, 0x69, 0x7b, 0xcd, 0xee, 0x76, 0x1f, 0xab, 0x09, 0x7a, 0x7f, 0xc5, 0xe5, 0x81, 0xd1,
	0xe0, 0xc7, 0x68, 0x3b, 0x80, 0x74, 0x91, 0x8f, 0x09, 0x7f, 0xbb, 0x4c, 0x9d, 0x0d, 0xcf, 0x32,
	0x96, 0xaa, 0x04, 0xee, 0xa1, 0xdd, 0xca, 0x72, 0x48, 0x04, 0x71, 0x36, 0x3d, 0xab, 0xfb, 0x9f,
	0xd6, 0xae, 0x93, 0x32, 0xa7, 0x8c, 0x0d, 0x7c, 0x34, 0x74, 0x3a, 0xd5, 0x9c, 0x25, 0xea, 0x7f,
	0xb6, 0x11, 0x5e, 0xab, 0x68, 0x16, 0x93, 0x7f, 0x54, 0xd0, 0x73, 0xb4, 0xa5, 0xc6, 0x4d, 0xf3,
	0x14, 0x54, 0x4b, 0x3b, 0xfd, 0xbd, 0x95, 0xd0, 0x50, 0x7a, 0xf6, 0x4a, 0x8b, 0x7d, 0xfd, 0xa1,
	0x4a, 0xd8, 0xf2, 0x6c, 0x93, 0x70, 0x05, 0x63, 0x17, 0x6d, 0xaa, 0xb8, 0x53, 0xe6, 0xb4, 0x2b,
	0x7d, 0x95, 0x20, 0x7e, 0x84, 0xd0, 0x60, 0x01, 0x84, 0x0f, 0x39, 0x99, 0x0b, 0x55, 0x69, 0x47,
	0x4b, 0x2a, 0x78, 0xad, 0xa1, 0xad, 0x3b, 0x1b, 0xfa, 0x68, 0xd5, 0x1a, 0x12, 0xd3, 0x3c, 0x8d,
	0x69, 0x64, 0xf2, 0x5b, 0x7f, 0xc9, 0x7f, 0x84, 0x36, 0x8e, 0x43, 0x11, 0x33, 0xaa, 0x5a, 0xda,
	0xe9, 0xdf, 0x57, 0xaa, 0x62, 0x40, 0x41, 0xe8, 0xdd, 0xb4, 0xac, 0xe6, 0xa6, 0x79, 0xa7, 0x9b,
	0x6f, 0x16, 0xda, 0x33, 0x6e, 0x5e, 0x80, 0x78, 0x9d, 0xce, 0x88, 0x80, 0x0c, 0x3f, 0x41, 0xff,
	0xbf, 0x21, 0xb1, 0x38, 0x9e, 0x0b, 0xe0, 0x23, 0x3a, 0x9e, 0x28, 0x5f, 0x6d, 0xfd, 0x79, 0x9d,
	0x92, 0xb7, 0x4d, 0x02, 0x63, 0xf2, 0x5e, 0x29, 0xed, 0x8a, 0xb2, 0x4a, 0xc8, 0x53, 0x98, 0xc4,
	0x1f, 0xe0, 0x55, 0x9c, 0xc4, 0x42, 0xd9, 0x29, 0x55, 0x2b, 0x58, 0x3a, 0x3e, 0x9b, 0xcf, 0x33,
	0x10, 0xa3, 0xa1, 0xd3, 0xaa, 0x1c, 0x83, 0x41, 0xfd, 0xb3, 0xba, 0xe1, 0x31, 0x24, 0x17, 0xc0,
	0x33, 0x7c, 0x88, 0x36, 0x0a, 0x89, 0x63, 0x79, 0x96, 0x99, 0xac, 0x31, 0x7c, 0x80, 0xda, 0xc5,
	0xb6, 0x76, 0x85, 0x2c, 0x20, 0x7f, 0x82, 0x76, 0xcd, 0xc0, 0x00, 0x42, 0xb2, 0x58, 0xc8, 0x61,
	0x53, 0x20, 0xeb, 0x97, 0x55, 0x63, 0x32, 0xc7, 0x71, 0x18, 0x42, 0x96, 0xbd, 0x84, 0x5c, 0xa5,
	0x35, 0xb7, 0xc9, 0xc0, 0xfe, 0x57, 0x0b, 0x3d, 0x30, 0x53, 0x8b, 0x52, 0x4f, 0xe9, 0x3b, 0x58,
	0xb0, 0x14, 0x6a, 0x19, 0x6b, 0x8f, 0xa1, 0x44, 0x65, 0xa3, 0xe7, 0x84, 0xcb, 0xc7, 0xcc, 0xe8,
	0x68, 0x58, 0x6f, 0xb4, 0x42, 0x48, 0xdd, 0x80, 0xd1, 0x4c, 0xf0, 0x65, 0x28, 0x18, 0xaf, 0x1d,
	0x71, 0x95, 0x90, 0x79, 0x0a, 0x0f, 0xaa, 0xd3, 0xd2, 0xae, 0xc6, 0x7c, 0x8a, 0x9c, 0x35, 0xab,
	0x03, 0x46, 0x05, 0x89, 0x29, 0x70, 0xfc, 0x0c, 0x6d, 0xea, 0x2b, 0xe1, 0x58, 0xea, 0x8f, 0xe7,
	0x50, 0xdd, 0xb9, 0x3f, 0x44, 0x0b, 0x4a, 0xb1, 0x2c, 0xfc, 0x34, 0x49, 0x45, 0xae, 0x0a, 0x2f,
	0x1f, 0x4a, 0x01, 0x9d, 0x1c, 0x5e, 0xff, 0x72, 0x1b, 0x57, 0x37, 0xae, 0x75, 0x7d, 0xe3, 0x5a,
	0x3f, 0x6f, 0x5c, 0xeb, 0xd3, 0xad, 0xdb, 0xb8, 0xbe, 0x75, 0x1b, 0xdf, 0x6f, 0xdd, 0xc6, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x6b, 0xfd, 0x7f, 0xc1, 0x05, 0x00, 0x00,
}

func (m *CommunitySendMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunitySendMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunitySendMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.SenderID))
	i--
	dAtA[i] = 0x40
	if m.ReplyMarkupData != nil {
		i -= len(m.ReplyMarkupData)
		copy(dAtA[i:], m.ReplyMarkupData)
		i = encodeVarintChatCommunity(dAtA, i, uint64(len(m.ReplyMarkupData)))
		i--
		dAtA[i] = 0x3a
	}
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.ReplyMarkup))
	i--
	dAtA[i] = 0x30
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatCommunity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i -= len(m.Body)
	copy(dAtA[i:], m.Body)
	i = encodeVarintChatCommunity(dAtA, i, uint64(len(m.Body)))
	i--
	dAtA[i] = 0x1a
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatCommunity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.RandomID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CommunitySendMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunitySendMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunitySendMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.SenderID))
	i--
	dAtA[i] = 0x48
	i--
	if m.ClearDraft {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.ReplyTo))
	i--
	dAtA[i] = 0x28
	if m.MediaData != nil {
		i -= len(m.MediaData)
		copy(dAtA[i:], m.MediaData)
		i = encodeVarintChatCommunity(dAtA, i, uint64(len(m.MediaData)))
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.MediaType))
	i--
	dAtA[i] = 0x18
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatCommunity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.RandomID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CommunitySetTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunitySetTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunitySetTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.SenderID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.Action))
	i--
	dAtA[i] = 0x10
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	} else {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatCommunity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommunityGetUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunityGetUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunityGetUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.OffsetID))
	i--
	dAtA[i] = 0x20
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.SizeLimit))
	i--
	dAtA[i] = 0x18
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.WaitMaxInMS))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.WaitAfterInMS))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CommunityGetMembers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunityGetMembers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunityGetMembers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.Limit))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.Offset))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CommunityRecall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunityRecall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunityRecall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessKey != nil {
		i -= len(m.AccessKey)
		copy(dAtA[i:], m.AccessKey)
		i = encodeVarintChatCommunity(dAtA, i, uint64(len(m.AccessKey)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.TeamID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CommunityUpdateEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunityUpdateEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunityUpdateEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Update != nil {
		i -= len(m.Update)
		copy(dAtA[i:], m.Update)
		i = encodeVarintChatCommunity(dAtA, i, uint64(len(m.Update)))
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.Constructor))
	i--
	dAtA[i] = 0x18
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.PartitionID))
	i--
	dAtA[i] = 0x10
	i = encodeVarintChatCommunity(dAtA, i, uint64(m.OffsetID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CommunityUpdateContainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunityUpdateContainer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunityUpdateContainer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Empty {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatCommunity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintChatCommunity(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatCommunity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommunitySendMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatCommunity(uint64(m.RandomID))
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatCommunity(uint64(l))
	}
	l = len(m.Body)
	n += 1 + l + sovChatCommunity(uint64(l))
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovChatCommunity(uint64(l))
		}
	}
	n += 1 + sovChatCommunity(uint64(m.ReplyMarkup))
	if m.ReplyMarkupData != nil {
		l = len(m.ReplyMarkupData)
		n += 1 + l + sovChatCommunity(uint64(l))
	}
	n += 1 + sovChatCommunity(uint64(m.SenderID))
	return n
}

func (m *CommunitySendMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatCommunity(uint64(m.RandomID))
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatCommunity(uint64(l))
	}
	n += 1 + sovChatCommunity(uint64(m.MediaType))
	if m.MediaData != nil {
		l = len(m.MediaData)
		n += 1 + l + sovChatCommunity(uint64(l))
	}
	n += 1 + sovChatCommunity(uint64(m.ReplyTo))
	n += 2
	n += 1 + sovChatCommunity(uint64(m.SenderID))
	return n
}

func (m *CommunitySetTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovChatCommunity(uint64(l))
	}
	n += 1 + sovChatCommunity(uint64(m.Action))
	n += 1 + sovChatCommunity(uint64(m.SenderID))
	return n
}

func (m *CommunityGetUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatCommunity(uint64(m.WaitAfterInMS))
	n += 1 + sovChatCommunity(uint64(m.WaitMaxInMS))
	n += 1 + sovChatCommunity(uint64(m.SizeLimit))
	n += 1 + sovChatCommunity(uint64(m.OffsetID))
	return n
}

func (m *CommunityGetMembers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatCommunity(uint64(m.Offset))
	n += 1 + sovChatCommunity(uint64(m.Limit))
	return n
}

func (m *CommunityRecall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatCommunity(uint64(m.TeamID))
	if m.AccessKey != nil {
		l = len(m.AccessKey)
		n += 1 + l + sovChatCommunity(uint64(l))
	}
	return n
}

func (m *CommunityUpdateEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChatCommunity(uint64(m.OffsetID))
	n += 1 + sovChatCommunity(uint64(m.PartitionID))
	n += 1 + sovChatCommunity(uint64(m.Constructor))
	if m.Update != nil {
		l = len(m.Update)
		n += 1 + l + sovChatCommunity(uint64(l))
	}
	return n
}

func (m *CommunityUpdateContainer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovChatCommunity(uint64(l))
		}
	}
	n += 2
	return n
}

func sovChatCommunity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatCommunity(x uint64) (n int) {
	return sovChatCommunity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommunitySendMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunitySendMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunitySendMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			m.ReplyMarkup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyMarkup |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkupData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatCommunity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyMarkupData = append(m.ReplyMarkupData[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyMarkupData == nil {
				m.ReplyMarkupData = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipChatCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RandomID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Body")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SenderID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunitySendMedia) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunitySendMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunitySendMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomID", wireType)
			}
			m.RandomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= InputMediaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatCommunity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaData = append(m.MediaData[:0], dAtA[iNdEx:postIndex]...)
			if m.MediaData == nil {
				m.MediaData = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			m.ReplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipChatCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RandomID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MediaType")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MediaData")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SenderID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunitySetTyping) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunitySetTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunitySetTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= TypingAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipChatCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Action")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SenderID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunityGetUpdates) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityGetUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityGetUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitAfterInMS", wireType)
			}
			m.WaitAfterInMS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitAfterInMS |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitMaxInMS", wireType)
			}
			m.WaitMaxInMS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitMaxInMS |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeLimit", wireType)
			}
			m.SizeLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetID", wireType)
			}
			m.OffsetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("WaitAfterInMS")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("WaitMaxInMS")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SizeLimit")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunityGetMembers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityGetMembers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityGetMembers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunityRecall) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityRecall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityRecall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatCommunity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessKey = append(m.AccessKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AccessKey == nil {
				m.AccessKey = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipChatCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TeamID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessKey")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunityUpdateEnvelope) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityUpdateEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityUpdateEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetID", wireType)
			}
			m.OffsetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatCommunity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = append(m.Update[:0], dAtA[iNdEx:postIndex]...)
			if m.Update == nil {
				m.Update = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OffsetID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PartitionID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Constructor")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunityUpdateContainer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityUpdateContainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityUpdateContainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &CommunityUpdateEnvelope{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Empty = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChatCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatCommunity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatCommunity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatCommunity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatCommunity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatCommunity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatCommunity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatCommunity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatCommunity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatCommunity = fmt.Errorf("proto: unexpected end of group")
)
