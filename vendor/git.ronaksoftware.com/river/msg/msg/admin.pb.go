// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: admin.proto

package msg

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AdminPrivilege
type AdminPrivilege int32

const (
	PrivilegeNone       AdminPrivilege = 0
	PrivilegeAdmin      AdminPrivilege = 1
	PrivilegeSuperAdmin AdminPrivilege = 2
)

var AdminPrivilege_name = map[int32]string{
	0: "PrivilegeNone",
	1: "PrivilegeAdmin",
	2: "PrivilegeSuperAdmin",
}

var AdminPrivilege_value = map[string]int32{
	"PrivilegeNone":       0,
	"PrivilegeAdmin":      1,
	"PrivilegeSuperAdmin": 2,
}

func (x AdminPrivilege) Enum() *AdminPrivilege {
	p := new(AdminPrivilege)
	*p = x
	return p
}

func (x AdminPrivilege) String() string {
	return proto.EnumName(AdminPrivilege_name, int32(x))
}

func (x *AdminPrivilege) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AdminPrivilege_value, data, "AdminPrivilege")
	if err != nil {
		return err
	}
	*x = AdminPrivilege(value)
	return nil
}

func (AdminPrivilege) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{0}
}

// PushProviderType
type PushProviderType int32

const (
	PushProviderUnknown  PushProviderType = 0
	PushProviderFirebase PushProviderType = 1
	PushProviderApple    PushProviderType = 2
	PushProviderPushKit  PushProviderType = 3
)

var PushProviderType_name = map[int32]string{
	0: "PushProviderUnknown",
	1: "PushProviderFirebase",
	2: "PushProviderApple",
	3: "PushProviderPushKit",
}

var PushProviderType_value = map[string]int32{
	"PushProviderUnknown":  0,
	"PushProviderFirebase": 1,
	"PushProviderApple":    2,
	"PushProviderPushKit":  3,
}

func (x PushProviderType) Enum() *PushProviderType {
	p := new(PushProviderType)
	*p = x
	return p
}

func (x PushProviderType) String() string {
	return proto.EnumName(PushProviderType_name, int32(x))
}

func (x *PushProviderType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PushProviderType_value, data, "PushProviderType")
	if err != nil {
		return err
	}
	*x = PushProviderType(value)
	return nil
}

func (PushProviderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{1}
}

// AdminSetWelcomeMessage
// @Function
// @Return: Bool
type AdminSetWelcomeMessage struct {
	AccessToken string `protobuf:"bytes,1,req,name=AccessToken" json:"AccessToken"`
	Lang        string `protobuf:"bytes,2,req,name=Lang" json:"Lang"`
	Template    string `protobuf:"bytes,3,req,name=Template" json:"Template"`
}

func (m *AdminSetWelcomeMessage) Reset()         { *m = AdminSetWelcomeMessage{} }
func (m *AdminSetWelcomeMessage) String() string { return proto.CompactTextString(m) }
func (*AdminSetWelcomeMessage) ProtoMessage()    {}
func (*AdminSetWelcomeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{0}
}
func (m *AdminSetWelcomeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSetWelcomeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSetWelcomeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSetWelcomeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSetWelcomeMessage.Merge(m, src)
}
func (m *AdminSetWelcomeMessage) XXX_Size() int {
	return m.Size()
}
func (m *AdminSetWelcomeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSetWelcomeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSetWelcomeMessage proto.InternalMessageInfo

func (m *AdminSetWelcomeMessage) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AdminSetWelcomeMessage) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *AdminSetWelcomeMessage) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

// AdminGetWelcomeMessage
// @Function
// @Return: WelcomeMessagesMany
type AdminGetWelcomeMessages struct {
	AccessToken string `protobuf:"bytes,1,req,name=AccessToken" json:"AccessToken"`
}

func (m *AdminGetWelcomeMessages) Reset()         { *m = AdminGetWelcomeMessages{} }
func (m *AdminGetWelcomeMessages) String() string { return proto.CompactTextString(m) }
func (*AdminGetWelcomeMessages) ProtoMessage()    {}
func (*AdminGetWelcomeMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{1}
}
func (m *AdminGetWelcomeMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminGetWelcomeMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminGetWelcomeMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminGetWelcomeMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminGetWelcomeMessages.Merge(m, src)
}
func (m *AdminGetWelcomeMessages) XXX_Size() int {
	return m.Size()
}
func (m *AdminGetWelcomeMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminGetWelcomeMessages.DiscardUnknown(m)
}

var xxx_messageInfo_AdminGetWelcomeMessages proto.InternalMessageInfo

func (m *AdminGetWelcomeMessages) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

// AdminDeleteWelcomeMessage
// @Function
// @Return: Bool
type AdminDeleteWelcomeMessage struct {
	AccessToken string `protobuf:"bytes,1,req,name=AccessToken" json:"AccessToken"`
	Lang        string `protobuf:"bytes,2,req,name=Lang" json:"Lang"`
}

func (m *AdminDeleteWelcomeMessage) Reset()         { *m = AdminDeleteWelcomeMessage{} }
func (m *AdminDeleteWelcomeMessage) String() string { return proto.CompactTextString(m) }
func (*AdminDeleteWelcomeMessage) ProtoMessage()    {}
func (*AdminDeleteWelcomeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{2}
}
func (m *AdminDeleteWelcomeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminDeleteWelcomeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminDeleteWelcomeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminDeleteWelcomeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminDeleteWelcomeMessage.Merge(m, src)
}
func (m *AdminDeleteWelcomeMessage) XXX_Size() int {
	return m.Size()
}
func (m *AdminDeleteWelcomeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminDeleteWelcomeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AdminDeleteWelcomeMessage proto.InternalMessageInfo

func (m *AdminDeleteWelcomeMessage) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AdminDeleteWelcomeMessage) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

// AdminSetPushProvider
// @Function
// @Return: Bool
type AdminSetPushProvider struct {
	AccessToken string        `protobuf:"bytes,1,req,name=AccessToken" json:"AccessToken"`
	Provider    *PushProvider `protobuf:"bytes,2,req,name=Provider" json:"Provider,omitempty"`
}

func (m *AdminSetPushProvider) Reset()         { *m = AdminSetPushProvider{} }
func (m *AdminSetPushProvider) String() string { return proto.CompactTextString(m) }
func (*AdminSetPushProvider) ProtoMessage()    {}
func (*AdminSetPushProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{3}
}
func (m *AdminSetPushProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSetPushProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSetPushProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSetPushProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSetPushProvider.Merge(m, src)
}
func (m *AdminSetPushProvider) XXX_Size() int {
	return m.Size()
}
func (m *AdminSetPushProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSetPushProvider.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSetPushProvider proto.InternalMessageInfo

func (m *AdminSetPushProvider) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AdminSetPushProvider) GetProvider() *PushProvider {
	if m != nil {
		return m.Provider
	}
	return nil
}

// AdminGetPushProvider
// @Function
// @Return: PushProvidersMany
type AdminGetPushProviders struct {
	AccessToken string `protobuf:"bytes,1,req,name=AccessToken" json:"AccessToken"`
}

func (m *AdminGetPushProviders) Reset()         { *m = AdminGetPushProviders{} }
func (m *AdminGetPushProviders) String() string { return proto.CompactTextString(m) }
func (*AdminGetPushProviders) ProtoMessage()    {}
func (*AdminGetPushProviders) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{4}
}
func (m *AdminGetPushProviders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminGetPushProviders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminGetPushProviders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminGetPushProviders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminGetPushProviders.Merge(m, src)
}
func (m *AdminGetPushProviders) XXX_Size() int {
	return m.Size()
}
func (m *AdminGetPushProviders) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminGetPushProviders.DiscardUnknown(m)
}

var xxx_messageInfo_AdminGetPushProviders proto.InternalMessageInfo

func (m *AdminGetPushProviders) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

// AdminDeletePushProvider
// @Function
// @Return: Bool
type AdminDeletePushProvider struct {
	AccessToken string           `protobuf:"bytes,1,req,name=AccessToken" json:"AccessToken"`
	Name        string           `protobuf:"bytes,2,req,name=Name" json:"Name"`
	Type        PushProviderType `protobuf:"varint,3,req,name=Type,enum=msg.PushProviderType" json:"Type"`
}

func (m *AdminDeletePushProvider) Reset()         { *m = AdminDeletePushProvider{} }
func (m *AdminDeletePushProvider) String() string { return proto.CompactTextString(m) }
func (*AdminDeletePushProvider) ProtoMessage()    {}
func (*AdminDeletePushProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{5}
}
func (m *AdminDeletePushProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminDeletePushProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminDeletePushProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminDeletePushProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminDeletePushProvider.Merge(m, src)
}
func (m *AdminDeletePushProvider) XXX_Size() int {
	return m.Size()
}
func (m *AdminDeletePushProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminDeletePushProvider.DiscardUnknown(m)
}

var xxx_messageInfo_AdminDeletePushProvider proto.InternalMessageInfo

func (m *AdminDeletePushProvider) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AdminDeletePushProvider) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AdminDeletePushProvider) GetType() PushProviderType {
	if m != nil {
		return m.Type
	}
	return PushProviderUnknown
}

// AdminSetVersion
// @Function
// @Return: Bool
type AdminSetVersion struct {
	AccessToken string   `protobuf:"bytes,1,req,name=AccessToken" json:"AccessToken"`
	Version     *Version `protobuf:"bytes,2,req,name=Version" json:"Version,omitempty"`
}

func (m *AdminSetVersion) Reset()         { *m = AdminSetVersion{} }
func (m *AdminSetVersion) String() string { return proto.CompactTextString(m) }
func (*AdminSetVersion) ProtoMessage()    {}
func (*AdminSetVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{6}
}
func (m *AdminSetVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSetVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSetVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSetVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSetVersion.Merge(m, src)
}
func (m *AdminSetVersion) XXX_Size() int {
	return m.Size()
}
func (m *AdminSetVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSetVersion.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSetVersion proto.InternalMessageInfo

func (m *AdminSetVersion) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AdminSetVersion) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

// AdminGetVersions
// @Function
// @Return: VersionsMany
type AdminGetVersions struct {
	AccessToken string `protobuf:"bytes,1,req,name=AccessToken" json:"AccessToken"`
}

func (m *AdminGetVersions) Reset()         { *m = AdminGetVersions{} }
func (m *AdminGetVersions) String() string { return proto.CompactTextString(m) }
func (*AdminGetVersions) ProtoMessage()    {}
func (*AdminGetVersions) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{7}
}
func (m *AdminGetVersions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminGetVersions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminGetVersions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminGetVersions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminGetVersions.Merge(m, src)
}
func (m *AdminGetVersions) XXX_Size() int {
	return m.Size()
}
func (m *AdminGetVersions) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminGetVersions.DiscardUnknown(m)
}

var xxx_messageInfo_AdminGetVersions proto.InternalMessageInfo

func (m *AdminGetVersions) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

// AdminSetToken
// @Function
// @Return: AdminToken
type AdminSetToken struct {
	AccessToken string         `protobuf:"bytes,1,req,name=AccessToken" json:"AccessToken"`
	Privilege   AdminPrivilege `protobuf:"varint,2,req,name=Privilege,enum=msg.AdminPrivilege" json:"Privilege"`
}

func (m *AdminSetToken) Reset()         { *m = AdminSetToken{} }
func (m *AdminSetToken) String() string { return proto.CompactTextString(m) }
func (*AdminSetToken) ProtoMessage()    {}
func (*AdminSetToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{8}
}
func (m *AdminSetToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSetToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSetToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSetToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSetToken.Merge(m, src)
}
func (m *AdminSetToken) XXX_Size() int {
	return m.Size()
}
func (m *AdminSetToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSetToken.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSetToken proto.InternalMessageInfo

func (m *AdminSetToken) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AdminSetToken) GetPrivilege() AdminPrivilege {
	if m != nil {
		return m.Privilege
	}
	return PrivilegeNone
}

// AdminDeleteToken
// @Function
// @Return: Bool
type AdminDeleteToken struct {
	AccessToken  string `protobuf:"bytes,1,req,name=AccessToken" json:"AccessToken"`
	DeletedToken string `protobuf:"bytes,2,req,name=DeletedToken" json:"DeletedToken"`
}

func (m *AdminDeleteToken) Reset()         { *m = AdminDeleteToken{} }
func (m *AdminDeleteToken) String() string { return proto.CompactTextString(m) }
func (*AdminDeleteToken) ProtoMessage()    {}
func (*AdminDeleteToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{9}
}
func (m *AdminDeleteToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminDeleteToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminDeleteToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminDeleteToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminDeleteToken.Merge(m, src)
}
func (m *AdminDeleteToken) XXX_Size() int {
	return m.Size()
}
func (m *AdminDeleteToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminDeleteToken.DiscardUnknown(m)
}

var xxx_messageInfo_AdminDeleteToken proto.InternalMessageInfo

func (m *AdminDeleteToken) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AdminDeleteToken) GetDeletedToken() string {
	if m != nil {
		return m.DeletedToken
	}
	return ""
}

// AdminReserveUsername
// @Function
// @Return: Bool
type AdminReserveUsername struct {
	AccessToken string   `protobuf:"bytes,1,req,name=AccessToken" json:"AccessToken"`
	Usernames   []string `protobuf:"bytes,2,rep,name=Usernames" json:"Usernames,omitempty"`
	Delete      bool     `protobuf:"varint,3,req,name=Delete" json:"Delete"`
}

func (m *AdminReserveUsername) Reset()         { *m = AdminReserveUsername{} }
func (m *AdminReserveUsername) String() string { return proto.CompactTextString(m) }
func (*AdminReserveUsername) ProtoMessage()    {}
func (*AdminReserveUsername) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{10}
}
func (m *AdminReserveUsername) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminReserveUsername) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminReserveUsername.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminReserveUsername) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminReserveUsername.Merge(m, src)
}
func (m *AdminReserveUsername) XXX_Size() int {
	return m.Size()
}
func (m *AdminReserveUsername) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminReserveUsername.DiscardUnknown(m)
}

var xxx_messageInfo_AdminReserveUsername proto.InternalMessageInfo

func (m *AdminReserveUsername) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AdminReserveUsername) GetUsernames() []string {
	if m != nil {
		return m.Usernames
	}
	return nil
}

func (m *AdminReserveUsername) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

// AdminGetReservedUsernames
// @Function
// @Return: ReservedUsername
type AdminGetReservedUsernames struct {
	AccessToken string `protobuf:"bytes,1,req,name=AccessToken" json:"AccessToken"`
}

func (m *AdminGetReservedUsernames) Reset()         { *m = AdminGetReservedUsernames{} }
func (m *AdminGetReservedUsernames) String() string { return proto.CompactTextString(m) }
func (*AdminGetReservedUsernames) ProtoMessage()    {}
func (*AdminGetReservedUsernames) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{11}
}
func (m *AdminGetReservedUsernames) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminGetReservedUsernames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminGetReservedUsernames.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminGetReservedUsernames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminGetReservedUsernames.Merge(m, src)
}
func (m *AdminGetReservedUsernames) XXX_Size() int {
	return m.Size()
}
func (m *AdminGetReservedUsernames) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminGetReservedUsernames.DiscardUnknown(m)
}

var xxx_messageInfo_AdminGetReservedUsernames proto.InternalMessageInfo

func (m *AdminGetReservedUsernames) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

// AdminToken
type AdminToken struct {
	Privilege AdminPrivilege `protobuf:"varint,1,req,name=Privilege,enum=msg.AdminPrivilege" json:"Privilege"`
	Token     string         `protobuf:"bytes,2,req,name=Token" json:"Token"`
}

func (m *AdminToken) Reset()         { *m = AdminToken{} }
func (m *AdminToken) String() string { return proto.CompactTextString(m) }
func (*AdminToken) ProtoMessage()    {}
func (*AdminToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{12}
}
func (m *AdminToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminToken.Merge(m, src)
}
func (m *AdminToken) XXX_Size() int {
	return m.Size()
}
func (m *AdminToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminToken.DiscardUnknown(m)
}

var xxx_messageInfo_AdminToken proto.InternalMessageInfo

func (m *AdminToken) GetPrivilege() AdminPrivilege {
	if m != nil {
		return m.Privilege
	}
	return PrivilegeNone
}

func (m *AdminToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// WelcomeMessagesMany
type WelcomeMessagesMany struct {
	Messages []*WelcomeMessage `protobuf:"bytes,1,rep,name=Messages" json:"Messages,omitempty"`
	Count    int32             `protobuf:"varint,2,req,name=Count" json:"Count"`
}

func (m *WelcomeMessagesMany) Reset()         { *m = WelcomeMessagesMany{} }
func (m *WelcomeMessagesMany) String() string { return proto.CompactTextString(m) }
func (*WelcomeMessagesMany) ProtoMessage()    {}
func (*WelcomeMessagesMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{13}
}
func (m *WelcomeMessagesMany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WelcomeMessagesMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WelcomeMessagesMany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WelcomeMessagesMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WelcomeMessagesMany.Merge(m, src)
}
func (m *WelcomeMessagesMany) XXX_Size() int {
	return m.Size()
}
func (m *WelcomeMessagesMany) XXX_DiscardUnknown() {
	xxx_messageInfo_WelcomeMessagesMany.DiscardUnknown(m)
}

var xxx_messageInfo_WelcomeMessagesMany proto.InternalMessageInfo

func (m *WelcomeMessagesMany) GetMessages() []*WelcomeMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *WelcomeMessagesMany) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// VersionsMany
type VersionsMany struct {
	Versions []*Version `protobuf:"bytes,1,rep,name=Versions" json:"Versions,omitempty"`
	Count    int32      `protobuf:"varint,2,req,name=Count" json:"Count"`
}

func (m *VersionsMany) Reset()         { *m = VersionsMany{} }
func (m *VersionsMany) String() string { return proto.CompactTextString(m) }
func (*VersionsMany) ProtoMessage()    {}
func (*VersionsMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{14}
}
func (m *VersionsMany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionsMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionsMany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionsMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionsMany.Merge(m, src)
}
func (m *VersionsMany) XXX_Size() int {
	return m.Size()
}
func (m *VersionsMany) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionsMany.DiscardUnknown(m)
}

var xxx_messageInfo_VersionsMany proto.InternalMessageInfo

func (m *VersionsMany) GetVersions() []*Version {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *VersionsMany) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// PushProvidersMany
type PushProvidersMany struct {
	Providers []*PushProvider `protobuf:"bytes,1,rep,name=Providers" json:"Providers,omitempty"`
	Count     int32           `protobuf:"varint,2,req,name=Count" json:"Count"`
}

func (m *PushProvidersMany) Reset()         { *m = PushProvidersMany{} }
func (m *PushProvidersMany) String() string { return proto.CompactTextString(m) }
func (*PushProvidersMany) ProtoMessage()    {}
func (*PushProvidersMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{15}
}
func (m *PushProvidersMany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushProvidersMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushProvidersMany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushProvidersMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushProvidersMany.Merge(m, src)
}
func (m *PushProvidersMany) XXX_Size() int {
	return m.Size()
}
func (m *PushProvidersMany) XXX_DiscardUnknown() {
	xxx_messageInfo_PushProvidersMany.DiscardUnknown(m)
}

var xxx_messageInfo_PushProvidersMany proto.InternalMessageInfo

func (m *PushProvidersMany) GetProviders() []*PushProvider {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *PushProvidersMany) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// WelcomeMessage
type WelcomeMessage struct {
	Lang     string `protobuf:"bytes,2,req,name=Lang" json:"Lang"`
	Template string `protobuf:"bytes,3,req,name=Template" json:"Template"`
}

func (m *WelcomeMessage) Reset()         { *m = WelcomeMessage{} }
func (m *WelcomeMessage) String() string { return proto.CompactTextString(m) }
func (*WelcomeMessage) ProtoMessage()    {}
func (*WelcomeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{16}
}
func (m *WelcomeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WelcomeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WelcomeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WelcomeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WelcomeMessage.Merge(m, src)
}
func (m *WelcomeMessage) XXX_Size() int {
	return m.Size()
}
func (m *WelcomeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_WelcomeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_WelcomeMessage proto.InternalMessageInfo

func (m *WelcomeMessage) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *WelcomeMessage) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

// PushProvider
type PushProvider struct {
	Name        string           `protobuf:"bytes,1,req,name=Name" json:"Name"`
	Type        PushProviderType `protobuf:"varint,2,req,name=Type,enum=msg.PushProviderType" json:"Type"`
	TestMode    bool             `protobuf:"varint,3,req,name=TestMode" json:"TestMode"`
	Credentials []byte           `protobuf:"bytes,4,opt,name=Credentials" json:"Credentials"`
	KeyID       string           `protobuf:"bytes,5,opt,name=KeyID" json:"KeyID"`
	TeamID      string           `protobuf:"bytes,6,opt,name=TeamID" json:"TeamID"`
	Topic       string           `protobuf:"bytes,7,opt,name=Topic" json:"Topic"`
}

func (m *PushProvider) Reset()         { *m = PushProvider{} }
func (m *PushProvider) String() string { return proto.CompactTextString(m) }
func (*PushProvider) ProtoMessage()    {}
func (*PushProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{17}
}
func (m *PushProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushProvider.Merge(m, src)
}
func (m *PushProvider) XXX_Size() int {
	return m.Size()
}
func (m *PushProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_PushProvider.DiscardUnknown(m)
}

var xxx_messageInfo_PushProvider proto.InternalMessageInfo

func (m *PushProvider) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PushProvider) GetType() PushProviderType {
	if m != nil {
		return m.Type
	}
	return PushProviderUnknown
}

func (m *PushProvider) GetTestMode() bool {
	if m != nil {
		return m.TestMode
	}
	return false
}

func (m *PushProvider) GetCredentials() []byte {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *PushProvider) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *PushProvider) GetTeamID() string {
	if m != nil {
		return m.TeamID
	}
	return ""
}

func (m *PushProvider) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

// AppUpdate
type Version struct {
	Vendor         string   `protobuf:"bytes,1,req,name=Vendor" json:"Vendor"`
	Stage          string   `protobuf:"bytes,2,req,name=Stage" json:"Stage"`
	OS             string   `protobuf:"bytes,3,req,name=OS" json:"OS"`
	MinVersion     string   `protobuf:"bytes,4,req,name=MinVersion" json:"MinVersion"`
	CurrentVersion string   `protobuf:"bytes,5,req,name=CurrentVersion" json:"CurrentVersion"`
	ForcedVersions []string `protobuf:"bytes,6,rep,name=ForcedVersions" json:"ForcedVersions,omitempty"`
}

func (m *Version) Reset()         { *m = Version{} }
func (m *Version) String() string { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()    {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{18}
}
func (m *Version) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Version.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return m.Size()
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

func (m *Version) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Version) GetStage() string {
	if m != nil {
		return m.Stage
	}
	return ""
}

func (m *Version) GetOS() string {
	if m != nil {
		return m.OS
	}
	return ""
}

func (m *Version) GetMinVersion() string {
	if m != nil {
		return m.MinVersion
	}
	return ""
}

func (m *Version) GetCurrentVersion() string {
	if m != nil {
		return m.CurrentVersion
	}
	return ""
}

func (m *Version) GetForcedVersions() []string {
	if m != nil {
		return m.ForcedVersions
	}
	return nil
}

// ReservedUsernames
type ReservedUsernames struct {
	Usernames []string `protobuf:"bytes,1,rep,name=Usernames" json:"Usernames,omitempty"`
	Count     int32    `protobuf:"varint,2,req,name=Count" json:"Count"`
}

func (m *ReservedUsernames) Reset()         { *m = ReservedUsernames{} }
func (m *ReservedUsernames) String() string { return proto.CompactTextString(m) }
func (*ReservedUsernames) ProtoMessage()    {}
func (*ReservedUsernames) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{19}
}
func (m *ReservedUsernames) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReservedUsernames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReservedUsernames.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReservedUsernames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReservedUsernames.Merge(m, src)
}
func (m *ReservedUsernames) XXX_Size() int {
	return m.Size()
}
func (m *ReservedUsernames) XXX_DiscardUnknown() {
	xxx_messageInfo_ReservedUsernames.DiscardUnknown(m)
}

var xxx_messageInfo_ReservedUsernames proto.InternalMessageInfo

func (m *ReservedUsernames) GetUsernames() []string {
	if m != nil {
		return m.Usernames
	}
	return nil
}

func (m *ReservedUsernames) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterEnum("msg.AdminPrivilege", AdminPrivilege_name, AdminPrivilege_value)
	proto.RegisterEnum("msg.PushProviderType", PushProviderType_name, PushProviderType_value)
	proto.RegisterType((*AdminSetWelcomeMessage)(nil), "msg.AdminSetWelcomeMessage")
	proto.RegisterType((*AdminGetWelcomeMessages)(nil), "msg.AdminGetWelcomeMessages")
	proto.RegisterType((*AdminDeleteWelcomeMessage)(nil), "msg.AdminDeleteWelcomeMessage")
	proto.RegisterType((*AdminSetPushProvider)(nil), "msg.AdminSetPushProvider")
	proto.RegisterType((*AdminGetPushProviders)(nil), "msg.AdminGetPushProviders")
	proto.RegisterType((*AdminDeletePushProvider)(nil), "msg.AdminDeletePushProvider")
	proto.RegisterType((*AdminSetVersion)(nil), "msg.AdminSetVersion")
	proto.RegisterType((*AdminGetVersions)(nil), "msg.AdminGetVersions")
	proto.RegisterType((*AdminSetToken)(nil), "msg.AdminSetToken")
	proto.RegisterType((*AdminDeleteToken)(nil), "msg.AdminDeleteToken")
	proto.RegisterType((*AdminReserveUsername)(nil), "msg.AdminReserveUsername")
	proto.RegisterType((*AdminGetReservedUsernames)(nil), "msg.AdminGetReservedUsernames")
	proto.RegisterType((*AdminToken)(nil), "msg.AdminToken")
	proto.RegisterType((*WelcomeMessagesMany)(nil), "msg.WelcomeMessagesMany")
	proto.RegisterType((*VersionsMany)(nil), "msg.VersionsMany")
	proto.RegisterType((*PushProvidersMany)(nil), "msg.PushProvidersMany")
	proto.RegisterType((*WelcomeMessage)(nil), "msg.WelcomeMessage")
	proto.RegisterType((*PushProvider)(nil), "msg.PushProvider")
	proto.RegisterType((*Version)(nil), "msg.Version")
	proto.RegisterType((*ReservedUsernames)(nil), "msg.ReservedUsernames")
}

func init() { proto.RegisterFile("admin.proto", fileDescriptor_73a7fc70dcc2027c) }

var fileDescriptor_73a7fc70dcc2027c = []byte{
	// 823 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x4f, 0xe3, 0x56,
	0x14, 0x8d, 0x9d, 0x04, 0x92, 0x9b, 0x90, 0x3a, 0x0f, 0x28, 0x2e, 0x42, 0x69, 0x64, 0x55, 0x28,
	0x42, 0x25, 0x91, 0xd8, 0x54, 0xea, 0xa6, 0x0a, 0x41, 0x20, 0x04, 0x81, 0x28, 0x09, 0x74, 0x55,
	0xa9, 0x4e, 0x7c, 0x6b, 0x2c, 0xe2, 0x0f, 0xd9, 0x0e, 0x15, 0x55, 0x7f, 0xc2, 0x2c, 0xe6, 0x67,
	0xb1, 0x64, 0x33, 0xd2, 0xac, 0x46, 0x33, 0xf0, 0x2b, 0x66, 0x37, 0xf2, 0xf3, 0x7b, 0x8e, 0x6d,
	0x18, 0xe4, 0xf9, 0xd8, 0xf9, 0x9d, 0xfb, 0x71, 0xae, 0xcf, 0xbb, 0xef, 0x40, 0x45, 0xd5, 0x4c,
	0xc3, 0x6a, 0x3b, 0xae, 0xed, 0xdb, 0x24, 0x6f, 0x7a, 0xfa, 0xe6, 0xae, 0x6e, 0xf8, 0x57, 0xf3,
	0x49, 0x7b, 0x6a, 0x9b, 0x1d, 0xdd, 0xd6, 0xed, 0x0e, 0x8d, 0x4d, 0xe6, 0xff, 0xd0, 0x13, 0x3d,
	0xd0, 0xaf, 0xb0, 0x46, 0xf9, 0x1f, 0x7e, 0xec, 0x06, 0x2d, 0x46, 0xe8, 0xff, 0x89, 0xb3, 0xa9,
	0x6d, 0x62, 0x1f, 0x3d, 0x4f, 0xd5, 0x91, 0x6c, 0x43, 0xa5, 0x3b, 0x9d, 0xa2, 0xe7, 0x8d, 0xed,
	0x6b, 0xb4, 0x64, 0xa1, 0x29, 0xb6, 0xca, 0xfb, 0x85, 0xbb, 0x77, 0x3f, 0xe7, 0x86, 0xf1, 0x00,
	0x91, 0xa1, 0x70, 0xaa, 0x5a, 0xba, 0x2c, 0xc6, 0x12, 0x28, 0x42, 0x9a, 0x50, 0x1a, 0xa3, 0xe9,
	0xcc, 0x54, 0x1f, 0xe5, 0x7c, 0x2c, 0x1a, 0xa1, 0x4a, 0x17, 0x36, 0x28, 0xfb, 0x51, 0x9a, 0xdd,
	0xcb, 0x4a, 0xaf, 0xfc, 0x05, 0x3f, 0xd1, 0x16, 0x07, 0x38, 0x43, 0x1f, 0xbf, 0xf7, 0x3f, 0x28,
	0x26, 0xac, 0x71, 0x7d, 0x06, 0x73, 0xef, 0x6a, 0xe0, 0xda, 0x37, 0x86, 0x86, 0x6e, 0xe6, 0xce,
	0xbb, 0x50, 0xe2, 0x35, 0xb4, 0x7b, 0x65, 0xaf, 0xde, 0x36, 0x3d, 0xbd, 0x1d, 0x6f, 0x36, 0x8c,
	0x52, 0x94, 0x3f, 0x60, 0x9d, 0x0b, 0x12, 0xcf, 0xc8, 0x2e, 0xc7, 0x2b, 0x81, 0x49, 0x1a, 0xea,
	0xf1, 0x55, 0x33, 0xcb, 0x50, 0x38, 0x53, 0x4d, 0x4c, 0xaa, 0x11, 0x20, 0xa4, 0x03, 0x85, 0xf1,
	0xad, 0x13, 0xde, 0x66, 0x6d, 0x6f, 0xfd, 0xc9, 0x9f, 0x04, 0x41, 0x5e, 0x10, 0x7c, 0x2b, 0x2a,
	0xfc, 0xc0, 0xe5, 0xbb, 0x44, 0xd7, 0x33, 0x6c, 0x2b, 0xf3, 0x14, 0xdb, 0xb0, 0xcc, 0x4a, 0x98,
	0x70, 0x55, 0x4a, 0xc7, 0xb0, 0x21, 0x0f, 0x2a, 0xbf, 0x83, 0xc4, 0x25, 0x63, 0x50, 0x76, 0xb5,
	0x1c, 0x58, 0xe1, 0xe3, 0x71, 0xd2, 0x6c, 0xc3, 0xfd, 0x06, 0xe5, 0x81, 0x6b, 0xdc, 0x18, 0x33,
	0xd4, 0x43, 0x9d, 0x6a, 0x7b, 0xab, 0x74, 0x3c, 0xda, 0x2e, 0x0a, 0xb1, 0xd2, 0x45, 0xae, 0xa2,
	0xb1, 0x69, 0xc3, 0xeb, 0xf9, 0x32, 0xd2, 0x16, 0x54, 0xc3, 0x32, 0x2d, 0x4c, 0x8c, 0xdf, 0x4f,
	0x22, 0xa2, 0xfc, 0xc7, 0xb6, 0x76, 0x88, 0x1e, 0xba, 0x37, 0x78, 0xe1, 0xa1, 0x6b, 0x05, 0xf7,
	0x97, 0x95, 0x69, 0x0b, 0xca, 0xbc, 0xc6, 0x93, 0xc5, 0x66, 0xbe, 0x55, 0x1e, 0x2e, 0x00, 0xb2,
	0x05, 0x4b, 0x21, 0x1b, 0xdd, 0x83, 0x12, 0x6b, 0xc0, 0x30, 0xa5, 0xc7, 0x1e, 0xe4, 0x11, 0xfa,
	0x8c, 0x5e, 0x5b, 0x94, 0x66, 0xbd, 0x18, 0x15, 0x80, 0x36, 0x79, 0x46, 0x6d, 0x21, 0xbb, 0xda,
	0x64, 0x13, 0x8a, 0x4f, 0xa5, 0x0a, 0x21, 0x65, 0x02, 0xab, 0x29, 0xcf, 0xe9, 0xab, 0xd6, 0x2d,
	0xe9, 0x40, 0x89, 0x9f, 0x65, 0xa1, 0x99, 0x6f, 0x55, 0x18, 0x55, 0x32, 0x77, 0x18, 0x25, 0x05,
	0x1c, 0x3d, 0x7b, 0x6e, 0xf9, 0x94, 0xa3, 0xc8, 0x39, 0x28, 0xa4, 0x8c, 0xa1, 0xca, 0x77, 0x92,
	0x36, 0x6f, 0x41, 0x89, 0x9f, 0x59, 0xf3, 0xe4, 0x52, 0x47, 0xd1, 0x17, 0xbb, 0xfe, 0x0d, 0xf5,
	0x84, 0x39, 0xb0, 0xb9, 0xcb, 0x11, 0xc0, 0x7a, 0x3f, 0xe3, 0x34, 0x8b, 0x9c, 0x17, 0x19, 0x4e,
	0xa1, 0x96, 0x72, 0xd2, 0x6f, 0x71, 0xf9, 0x8f, 0x02, 0x54, 0x13, 0x46, 0xc4, 0x0d, 0x46, 0xf8,
	0xac, 0xc1, 0x88, 0x19, 0x0d, 0x26, 0x64, 0xf7, 0xfc, 0xbe, 0xad, 0x25, 0xb7, 0x31, 0x42, 0x83,
	0x95, 0xeb, 0xb9, 0xa8, 0xa1, 0xe5, 0x1b, 0xea, 0xcc, 0x93, 0x0b, 0x4d, 0xa1, 0x55, 0xe5, 0x2b,
	0x17, 0x0b, 0x04, 0x7a, 0x9c, 0xe0, 0xed, 0xf1, 0x81, 0x5c, 0x6c, 0x0a, 0x8b, 0x5d, 0xa1, 0x50,
	0xb0, 0xf1, 0x63, 0x54, 0xcd, 0xe3, 0x03, 0x79, 0x29, 0x16, 0x64, 0x58, 0xb8, 0x65, 0x8e, 0x31,
	0x95, 0x97, 0xe3, 0x95, 0x14, 0x52, 0xde, 0x08, 0x91, 0x8d, 0x05, 0x5d, 0x2e, 0xd1, 0xd2, 0x6c,
	0x37, 0xf1, 0xe3, 0x0c, 0x0b, 0xba, 0x8c, 0x7c, 0x55, 0x4f, 0xda, 0x6e, 0x08, 0x91, 0x35, 0x10,
	0xcf, 0x47, 0x09, 0x75, 0xc5, 0xf3, 0x11, 0xf9, 0x05, 0xa0, 0x6f, 0x58, 0xdc, 0x24, 0x0b, 0xb1,
	0x68, 0x0c, 0x27, 0xbf, 0x42, 0xad, 0x37, 0x77, 0x5d, 0xb4, 0xb8, 0x3d, 0xca, 0xc5, 0x58, 0x66,
	0x2a, 0x46, 0xb6, 0xa1, 0x76, 0x68, 0xbb, 0x53, 0xd4, 0xa2, 0x3d, 0x5d, 0xa2, 0xcf, 0x3f, 0x85,
	0x2a, 0x7d, 0xa8, 0x3f, 0x7d, 0xdd, 0x09, 0xdb, 0x10, 0xd2, 0xb6, 0xf1, 0xc2, 0xc2, 0xed, 0x0c,
	0xa0, 0x96, 0x7c, 0xcb, 0xa4, 0x0e, 0x2b, 0xd1, 0xe1, 0xcc, 0xb6, 0x50, 0xca, 0x11, 0x02, 0xb5,
	0x08, 0xa2, 0xd9, 0x92, 0x40, 0x36, 0x60, 0x35, 0xc2, 0x46, 0x73, 0x07, 0xdd, 0x30, 0x20, 0xee,
	0xcc, 0x41, 0x4a, 0x2f, 0x0e, 0x4d, 0x8e, 0x61, 0x17, 0xd6, 0xb5, 0x65, 0xff, 0x6b, 0x49, 0x39,
	0x22, 0xc3, 0x5a, 0x3c, 0x70, 0x68, 0xb8, 0x38, 0x51, 0x3d, 0x94, 0x04, 0xb2, 0x9e, 0x7c, 0x6b,
	0x5d, 0xc7, 0x99, 0xa1, 0x24, 0xa6, 0x3b, 0x05, 0xdf, 0x27, 0x86, 0x2f, 0xe5, 0xf7, 0xb7, 0xee,
	0x3f, 0x34, 0x72, 0x77, 0x0f, 0x0d, 0xe1, 0xfe, 0xa1, 0x21, 0xbc, 0x7f, 0x68, 0x08, 0xaf, 0x1f,
	0x1b, 0xb9, 0xfb, 0xc7, 0x46, 0xee, 0xed, 0x63, 0x23, 0xf7, 0x29, 0x00, 0x00, 0xff, 0xff, 0x8a,
	0xb8, 0x5d, 0x6d, 0xaf, 0x09, 0x00, 0x00,
}

func (m *AdminSetWelcomeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSetWelcomeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSetWelcomeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Template)
	copy(dAtA[i:], m.Template)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.Template)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Lang)
	copy(dAtA[i:], m.Lang)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.Lang)))
	i--
	dAtA[i] = 0x12
	i -= len(m.AccessToken)
	copy(dAtA[i:], m.AccessToken)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.AccessToken)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AdminGetWelcomeMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminGetWelcomeMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminGetWelcomeMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.AccessToken)
	copy(dAtA[i:], m.AccessToken)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.AccessToken)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AdminDeleteWelcomeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminDeleteWelcomeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminDeleteWelcomeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Lang)
	copy(dAtA[i:], m.Lang)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.Lang)))
	i--
	dAtA[i] = 0x12
	i -= len(m.AccessToken)
	copy(dAtA[i:], m.AccessToken)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.AccessToken)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AdminSetPushProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSetPushProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSetPushProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Provider == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Provider")
	} else {
		{
			size, err := m.Provider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.AccessToken)
	copy(dAtA[i:], m.AccessToken)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.AccessToken)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AdminGetPushProviders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminGetPushProviders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminGetPushProviders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.AccessToken)
	copy(dAtA[i:], m.AccessToken)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.AccessToken)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AdminDeletePushProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminDeletePushProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminDeletePushProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintAdmin(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x18
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i -= len(m.AccessToken)
	copy(dAtA[i:], m.AccessToken)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.AccessToken)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AdminSetVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSetVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSetVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Version")
	} else {
		{
			size, err := m.Version.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdmin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.AccessToken)
	copy(dAtA[i:], m.AccessToken)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.AccessToken)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AdminGetVersions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminGetVersions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminGetVersions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.AccessToken)
	copy(dAtA[i:], m.AccessToken)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.AccessToken)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AdminSetToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSetToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSetToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintAdmin(dAtA, i, uint64(m.Privilege))
	i--
	dAtA[i] = 0x10
	i -= len(m.AccessToken)
	copy(dAtA[i:], m.AccessToken)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.AccessToken)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AdminDeleteToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminDeleteToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminDeleteToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.DeletedToken)
	copy(dAtA[i:], m.DeletedToken)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.DeletedToken)))
	i--
	dAtA[i] = 0x12
	i -= len(m.AccessToken)
	copy(dAtA[i:], m.AccessToken)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.AccessToken)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AdminReserveUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminReserveUsername) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminReserveUsername) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Delete {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if len(m.Usernames) > 0 {
		for iNdEx := len(m.Usernames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Usernames[iNdEx])
			copy(dAtA[i:], m.Usernames[iNdEx])
			i = encodeVarintAdmin(dAtA, i, uint64(len(m.Usernames[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.AccessToken)
	copy(dAtA[i:], m.AccessToken)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.AccessToken)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AdminGetReservedUsernames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminGetReservedUsernames) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminGetReservedUsernames) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.AccessToken)
	copy(dAtA[i:], m.AccessToken)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.AccessToken)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AdminToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Token)
	copy(dAtA[i:], m.Token)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.Token)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintAdmin(dAtA, i, uint64(m.Privilege))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *WelcomeMessagesMany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WelcomeMessagesMany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WelcomeMessagesMany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintAdmin(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x10
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdmin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VersionsMany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionsMany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionsMany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintAdmin(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x10
	if len(m.Versions) > 0 {
		for iNdEx := len(m.Versions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Versions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdmin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PushProvidersMany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushProvidersMany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushProvidersMany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintAdmin(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x10
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Providers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdmin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WelcomeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WelcomeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WelcomeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Template)
	copy(dAtA[i:], m.Template)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.Template)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Lang)
	copy(dAtA[i:], m.Lang)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.Lang)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *PushProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Topic)
	copy(dAtA[i:], m.Topic)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.Topic)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.TeamID)
	copy(dAtA[i:], m.TeamID)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.TeamID)))
	i--
	dAtA[i] = 0x32
	i -= len(m.KeyID)
	copy(dAtA[i:], m.KeyID)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.KeyID)))
	i--
	dAtA[i] = 0x2a
	if m.Credentials != nil {
		i -= len(m.Credentials)
		copy(dAtA[i:], m.Credentials)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Credentials)))
		i--
		dAtA[i] = 0x22
	}
	i--
	if m.TestMode {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintAdmin(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Version) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Version) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForcedVersions) > 0 {
		for iNdEx := len(m.ForcedVersions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ForcedVersions[iNdEx])
			copy(dAtA[i:], m.ForcedVersions[iNdEx])
			i = encodeVarintAdmin(dAtA, i, uint64(len(m.ForcedVersions[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	i -= len(m.CurrentVersion)
	copy(dAtA[i:], m.CurrentVersion)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.CurrentVersion)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.MinVersion)
	copy(dAtA[i:], m.MinVersion)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.MinVersion)))
	i--
	dAtA[i] = 0x22
	i -= len(m.OS)
	copy(dAtA[i:], m.OS)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.OS)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Stage)
	copy(dAtA[i:], m.Stage)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.Stage)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Vendor)
	copy(dAtA[i:], m.Vendor)
	i = encodeVarintAdmin(dAtA, i, uint64(len(m.Vendor)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ReservedUsernames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReservedUsernames) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReservedUsernames) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintAdmin(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x10
	if len(m.Usernames) > 0 {
		for iNdEx := len(m.Usernames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Usernames[iNdEx])
			copy(dAtA[i:], m.Usernames[iNdEx])
			i = encodeVarintAdmin(dAtA, i, uint64(len(m.Usernames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAdmin(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdmin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AdminSetWelcomeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	n += 1 + l + sovAdmin(uint64(l))
	l = len(m.Lang)
	n += 1 + l + sovAdmin(uint64(l))
	l = len(m.Template)
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *AdminGetWelcomeMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *AdminDeleteWelcomeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	n += 1 + l + sovAdmin(uint64(l))
	l = len(m.Lang)
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *AdminSetPushProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	n += 1 + l + sovAdmin(uint64(l))
	if m.Provider != nil {
		l = m.Provider.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func (m *AdminGetPushProviders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *AdminDeletePushProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	n += 1 + l + sovAdmin(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovAdmin(uint64(l))
	n += 1 + sovAdmin(uint64(m.Type))
	return n
}

func (m *AdminSetVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	n += 1 + l + sovAdmin(uint64(l))
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func (m *AdminGetVersions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *AdminSetToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	n += 1 + l + sovAdmin(uint64(l))
	n += 1 + sovAdmin(uint64(m.Privilege))
	return n
}

func (m *AdminDeleteToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	n += 1 + l + sovAdmin(uint64(l))
	l = len(m.DeletedToken)
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *AdminReserveUsername) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	n += 1 + l + sovAdmin(uint64(l))
	if len(m.Usernames) > 0 {
		for _, s := range m.Usernames {
			l = len(s)
			n += 1 + l + sovAdmin(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *AdminGetReservedUsernames) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *AdminToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAdmin(uint64(m.Privilege))
	l = len(m.Token)
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *WelcomeMessagesMany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovAdmin(uint64(l))
		}
	}
	n += 1 + sovAdmin(uint64(m.Count))
	return n
}

func (m *VersionsMany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Versions) > 0 {
		for _, e := range m.Versions {
			l = e.Size()
			n += 1 + l + sovAdmin(uint64(l))
		}
	}
	n += 1 + sovAdmin(uint64(m.Count))
	return n
}

func (m *PushProvidersMany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovAdmin(uint64(l))
		}
	}
	n += 1 + sovAdmin(uint64(m.Count))
	return n
}

func (m *WelcomeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Lang)
	n += 1 + l + sovAdmin(uint64(l))
	l = len(m.Template)
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *PushProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovAdmin(uint64(l))
	n += 1 + sovAdmin(uint64(m.Type))
	n += 2
	if m.Credentials != nil {
		l = len(m.Credentials)
		n += 1 + l + sovAdmin(uint64(l))
	}
	l = len(m.KeyID)
	n += 1 + l + sovAdmin(uint64(l))
	l = len(m.TeamID)
	n += 1 + l + sovAdmin(uint64(l))
	l = len(m.Topic)
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *Version) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Vendor)
	n += 1 + l + sovAdmin(uint64(l))
	l = len(m.Stage)
	n += 1 + l + sovAdmin(uint64(l))
	l = len(m.OS)
	n += 1 + l + sovAdmin(uint64(l))
	l = len(m.MinVersion)
	n += 1 + l + sovAdmin(uint64(l))
	l = len(m.CurrentVersion)
	n += 1 + l + sovAdmin(uint64(l))
	if len(m.ForcedVersions) > 0 {
		for _, s := range m.ForcedVersions {
			l = len(s)
			n += 1 + l + sovAdmin(uint64(l))
		}
	}
	return n
}

func (m *ReservedUsernames) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Usernames) > 0 {
		for _, s := range m.Usernames {
			l = len(s)
			n += 1 + l + sovAdmin(uint64(l))
		}
	}
	n += 1 + sovAdmin(uint64(m.Count))
	return n
}

func sovAdmin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAdmin(x uint64) (n int) {
	return sovAdmin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdminSetWelcomeMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminSetWelcomeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminSetWelcomeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Template = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessToken")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Lang")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Template")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminGetWelcomeMessages) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminGetWelcomeMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminGetWelcomeMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessToken")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminDeleteWelcomeMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminDeleteWelcomeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminDeleteWelcomeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessToken")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Lang")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSetPushProvider) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminSetPushProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminSetPushProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Provider == nil {
				m.Provider = &PushProvider{}
			}
			if err := m.Provider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessToken")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Provider")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminGetPushProviders) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminGetPushProviders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminGetPushProviders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessToken")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminDeletePushProvider) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminDeletePushProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminDeletePushProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PushProviderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessToken")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSetVersion) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminSetVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminSetVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &Version{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessToken")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Version")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminGetVersions) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminGetVersions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminGetVersions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessToken")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSetToken) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminSetToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminSetToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privilege", wireType)
			}
			m.Privilege = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Privilege |= AdminPrivilege(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessToken")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Privilege")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminDeleteToken) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminDeleteToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminDeleteToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessToken")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("DeletedToken")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminReserveUsername) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminReserveUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminReserveUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usernames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usernames = append(m.Usernames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delete = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessToken")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Delete")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminGetReservedUsernames) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminGetReservedUsernames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminGetReservedUsernames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessToken")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminToken) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privilege", wireType)
			}
			m.Privilege = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Privilege |= AdminPrivilege(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Privilege")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Token")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WelcomeMessagesMany) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WelcomeMessagesMany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WelcomeMessagesMany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &WelcomeMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Count")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionsMany) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionsMany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionsMany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Versions = append(m.Versions, &Version{})
			if err := m.Versions[len(m.Versions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Count")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushProvidersMany) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushProvidersMany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushProvidersMany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, &PushProvider{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Count")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WelcomeMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WelcomeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WelcomeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Template = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Lang")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Template")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushProvider) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PushProviderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestMode = bool(v != 0)
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = append(m.Credentials[:0], dAtA[iNdEx:postIndex]...)
			if m.Credentials == nil {
				m.Credentials = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TestMode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Version) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vendor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vendor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForcedVersions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForcedVersions = append(m.ForcedVersions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Vendor")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Stage")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OS")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MinVersion")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CurrentVersion")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReservedUsernames) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReservedUsernames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReservedUsernames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usernames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usernames = append(m.Usernames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Count")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdmin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdmin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAdmin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAdmin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAdmin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdmin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAdmin = fmt.Errorf("proto: unexpected end of group")
)
