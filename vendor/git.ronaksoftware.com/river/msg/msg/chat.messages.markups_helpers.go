// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.messages.markups.proto

package msg

import (
	fmt "fmt"
	pbytes "github.com/gobwas/pool/pbytes"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

const C_ReplyKeyboardMarkup int64 = 3207405102

type poolReplyKeyboardMarkup struct {
	pool sync.Pool
}

func (p *poolReplyKeyboardMarkup) Get() *ReplyKeyboardMarkup {
	x, ok := p.pool.Get().(*ReplyKeyboardMarkup)
	if !ok {
		return &ReplyKeyboardMarkup{}
	}
	x.SingleUse = false
	x.Selective = false
	x.Resize = false
	x.Rows = x.Rows[:0]
	return x
}

func (p *poolReplyKeyboardMarkup) Put(x *ReplyKeyboardMarkup) {
	p.pool.Put(x)
}

var PoolReplyKeyboardMarkup = poolReplyKeyboardMarkup{}

func ResultReplyKeyboardMarkup(out *MessageEnvelope, res *ReplyKeyboardMarkup) {
	out.Constructor = C_ReplyKeyboardMarkup
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_ReplyInlineMarkup int64 = 2436413989

type poolReplyInlineMarkup struct {
	pool sync.Pool
}

func (p *poolReplyInlineMarkup) Get() *ReplyInlineMarkup {
	x, ok := p.pool.Get().(*ReplyInlineMarkup)
	if !ok {
		return &ReplyInlineMarkup{}
	}
	x.Rows = x.Rows[:0]
	return x
}

func (p *poolReplyInlineMarkup) Put(x *ReplyInlineMarkup) {
	p.pool.Put(x)
}

var PoolReplyInlineMarkup = poolReplyInlineMarkup{}

func ResultReplyInlineMarkup(out *MessageEnvelope, res *ReplyInlineMarkup) {
	out.Constructor = C_ReplyInlineMarkup
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_ReplyKeyboardHide int64 = 3134153306

type poolReplyKeyboardHide struct {
	pool sync.Pool
}

func (p *poolReplyKeyboardHide) Get() *ReplyKeyboardHide {
	x, ok := p.pool.Get().(*ReplyKeyboardHide)
	if !ok {
		return &ReplyKeyboardHide{}
	}
	return x
}

func (p *poolReplyKeyboardHide) Put(x *ReplyKeyboardHide) {
	p.pool.Put(x)
}

var PoolReplyKeyboardHide = poolReplyKeyboardHide{}

func ResultReplyKeyboardHide(out *MessageEnvelope, res *ReplyKeyboardHide) {
	out.Constructor = C_ReplyKeyboardHide
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_ReplyKeyboardForceReply int64 = 258469686

type poolReplyKeyboardForceReply struct {
	pool sync.Pool
}

func (p *poolReplyKeyboardForceReply) Get() *ReplyKeyboardForceReply {
	x, ok := p.pool.Get().(*ReplyKeyboardForceReply)
	if !ok {
		return &ReplyKeyboardForceReply{}
	}
	x.SingleUse = false
	x.Selective = false
	return x
}

func (p *poolReplyKeyboardForceReply) Put(x *ReplyKeyboardForceReply) {
	p.pool.Put(x)
}

var PoolReplyKeyboardForceReply = poolReplyKeyboardForceReply{}

func ResultReplyKeyboardForceReply(out *MessageEnvelope, res *ReplyKeyboardForceReply) {
	out.Constructor = C_ReplyKeyboardForceReply
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_KeyboardButtonRow int64 = 2222403758

type poolKeyboardButtonRow struct {
	pool sync.Pool
}

func (p *poolKeyboardButtonRow) Get() *KeyboardButtonRow {
	x, ok := p.pool.Get().(*KeyboardButtonRow)
	if !ok {
		return &KeyboardButtonRow{}
	}
	x.Buttons = x.Buttons[:0]
	return x
}

func (p *poolKeyboardButtonRow) Put(x *KeyboardButtonRow) {
	p.pool.Put(x)
}

var PoolKeyboardButtonRow = poolKeyboardButtonRow{}

func ResultKeyboardButtonRow(out *MessageEnvelope, res *KeyboardButtonRow) {
	out.Constructor = C_KeyboardButtonRow
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_KeyboardButtonEnvelope int64 = 2639543624

type poolKeyboardButtonEnvelope struct {
	pool sync.Pool
}

func (p *poolKeyboardButtonEnvelope) Get() *KeyboardButtonEnvelope {
	x, ok := p.pool.Get().(*KeyboardButtonEnvelope)
	if !ok {
		return &KeyboardButtonEnvelope{}
	}
	x.Data = nil
	return x
}

func (p *poolKeyboardButtonEnvelope) Put(x *KeyboardButtonEnvelope) {
	p.pool.Put(x)
}

var PoolKeyboardButtonEnvelope = poolKeyboardButtonEnvelope{}

func ResultKeyboardButtonEnvelope(out *MessageEnvelope, res *KeyboardButtonEnvelope) {
	out.Constructor = C_KeyboardButtonEnvelope
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_Button int64 = 1034594571

type poolButton struct {
	pool sync.Pool
}

func (p *poolButton) Get() *Button {
	x, ok := p.pool.Get().(*Button)
	if !ok {
		return &Button{}
	}
	return x
}

func (p *poolButton) Put(x *Button) {
	p.pool.Put(x)
}

var PoolButton = poolButton{}

func ResultButton(out *MessageEnvelope, res *Button) {
	out.Constructor = C_Button
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_ButtonUrl int64 = 2309530052

type poolButtonUrl struct {
	pool sync.Pool
}

func (p *poolButtonUrl) Get() *ButtonUrl {
	x, ok := p.pool.Get().(*ButtonUrl)
	if !ok {
		return &ButtonUrl{}
	}
	return x
}

func (p *poolButtonUrl) Put(x *ButtonUrl) {
	p.pool.Put(x)
}

var PoolButtonUrl = poolButtonUrl{}

func ResultButtonUrl(out *MessageEnvelope, res *ButtonUrl) {
	out.Constructor = C_ButtonUrl
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_ButtonCallback int64 = 4007711268

type poolButtonCallback struct {
	pool sync.Pool
}

func (p *poolButtonCallback) Get() *ButtonCallback {
	x, ok := p.pool.Get().(*ButtonCallback)
	if !ok {
		return &ButtonCallback{}
	}
	x.Data = nil
	return x
}

func (p *poolButtonCallback) Put(x *ButtonCallback) {
	p.pool.Put(x)
}

var PoolButtonCallback = poolButtonCallback{}

func ResultButtonCallback(out *MessageEnvelope, res *ButtonCallback) {
	out.Constructor = C_ButtonCallback
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_ButtonRequestPhone int64 = 630958494

type poolButtonRequestPhone struct {
	pool sync.Pool
}

func (p *poolButtonRequestPhone) Get() *ButtonRequestPhone {
	x, ok := p.pool.Get().(*ButtonRequestPhone)
	if !ok {
		return &ButtonRequestPhone{}
	}
	return x
}

func (p *poolButtonRequestPhone) Put(x *ButtonRequestPhone) {
	p.pool.Put(x)
}

var PoolButtonRequestPhone = poolButtonRequestPhone{}

func ResultButtonRequestPhone(out *MessageEnvelope, res *ButtonRequestPhone) {
	out.Constructor = C_ButtonRequestPhone
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_ButtonRequestGeoLocation int64 = 323515934

type poolButtonRequestGeoLocation struct {
	pool sync.Pool
}

func (p *poolButtonRequestGeoLocation) Get() *ButtonRequestGeoLocation {
	x, ok := p.pool.Get().(*ButtonRequestGeoLocation)
	if !ok {
		return &ButtonRequestGeoLocation{}
	}
	return x
}

func (p *poolButtonRequestGeoLocation) Put(x *ButtonRequestGeoLocation) {
	p.pool.Put(x)
}

var PoolButtonRequestGeoLocation = poolButtonRequestGeoLocation{}

func ResultButtonRequestGeoLocation(out *MessageEnvelope, res *ButtonRequestGeoLocation) {
	out.Constructor = C_ButtonRequestGeoLocation
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_ButtonSwitchInline int64 = 3842667878

type poolButtonSwitchInline struct {
	pool sync.Pool
}

func (p *poolButtonSwitchInline) Get() *ButtonSwitchInline {
	x, ok := p.pool.Get().(*ButtonSwitchInline)
	if !ok {
		return &ButtonSwitchInline{}
	}
	x.SamePeer = false
	return x
}

func (p *poolButtonSwitchInline) Put(x *ButtonSwitchInline) {
	p.pool.Put(x)
}

var PoolButtonSwitchInline = poolButtonSwitchInline{}

func ResultButtonSwitchInline(out *MessageEnvelope, res *ButtonSwitchInline) {
	out.Constructor = C_ButtonSwitchInline
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_ButtonBuy int64 = 2992465437

type poolButtonBuy struct {
	pool sync.Pool
}

func (p *poolButtonBuy) Get() *ButtonBuy {
	x, ok := p.pool.Get().(*ButtonBuy)
	if !ok {
		return &ButtonBuy{}
	}
	return x
}

func (p *poolButtonBuy) Put(x *ButtonBuy) {
	p.pool.Put(x)
}

var PoolButtonBuy = poolButtonBuy{}

func ResultButtonBuy(out *MessageEnvelope, res *ButtonBuy) {
	out.Constructor = C_ButtonBuy
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

func init() {
	ConstructorNames[3207405102] = "ReplyKeyboardMarkup"
	ConstructorNames[2436413989] = "ReplyInlineMarkup"
	ConstructorNames[3134153306] = "ReplyKeyboardHide"
	ConstructorNames[258469686] = "ReplyKeyboardForceReply"
	ConstructorNames[2222403758] = "KeyboardButtonRow"
	ConstructorNames[2639543624] = "KeyboardButtonEnvelope"
	ConstructorNames[1034594571] = "Button"
	ConstructorNames[2309530052] = "ButtonUrl"
	ConstructorNames[4007711268] = "ButtonCallback"
	ConstructorNames[630958494] = "ButtonRequestPhone"
	ConstructorNames[323515934] = "ButtonRequestGeoLocation"
	ConstructorNames[3842667878] = "ButtonSwitchInline"
	ConstructorNames[2992465437] = "ButtonBuy"
}
