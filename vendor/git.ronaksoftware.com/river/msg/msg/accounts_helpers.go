// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: accounts.proto

package msg

import (
	fmt "fmt"
	pbytes "github.com/gobwas/pool/pbytes"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

const C_AccountSetNotifySettings int64 = 2016882075

type poolAccountSetNotifySettings struct {
	pool sync.Pool
}

func (p *poolAccountSetNotifySettings) Get() *AccountSetNotifySettings {
	x, ok := p.pool.Get().(*AccountSetNotifySettings)
	if !ok {
		return &AccountSetNotifySettings{}
	}
	x.Team = nil
	return x
}

func (p *poolAccountSetNotifySettings) Put(x *AccountSetNotifySettings) {
	p.pool.Put(x)
}

var PoolAccountSetNotifySettings = poolAccountSetNotifySettings{}

func ResultAccountSetNotifySettings(out *MessageEnvelope, res *AccountSetNotifySettings) {
	out.Constructor = C_AccountSetNotifySettings
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountGetNotifySettings int64 = 477008681

type poolAccountGetNotifySettings struct {
	pool sync.Pool
}

func (p *poolAccountGetNotifySettings) Get() *AccountGetNotifySettings {
	x, ok := p.pool.Get().(*AccountGetNotifySettings)
	if !ok {
		return &AccountGetNotifySettings{}
	}
	x.Team = nil
	return x
}

func (p *poolAccountGetNotifySettings) Put(x *AccountGetNotifySettings) {
	p.pool.Put(x)
}

var PoolAccountGetNotifySettings = poolAccountGetNotifySettings{}

func ResultAccountGetNotifySettings(out *MessageEnvelope, res *AccountGetNotifySettings) {
	out.Constructor = C_AccountGetNotifySettings
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountRegisterDevice int64 = 946059841

type poolAccountRegisterDevice struct {
	pool sync.Pool
}

func (p *poolAccountRegisterDevice) Get() *AccountRegisterDevice {
	x, ok := p.pool.Get().(*AccountRegisterDevice)
	if !ok {
		return &AccountRegisterDevice{}
	}
	return x
}

func (p *poolAccountRegisterDevice) Put(x *AccountRegisterDevice) {
	p.pool.Put(x)
}

var PoolAccountRegisterDevice = poolAccountRegisterDevice{}

func ResultAccountRegisterDevice(out *MessageEnvelope, res *AccountRegisterDevice) {
	out.Constructor = C_AccountRegisterDevice
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountUnregisterDevice int64 = 3981251588

type poolAccountUnregisterDevice struct {
	pool sync.Pool
}

func (p *poolAccountUnregisterDevice) Get() *AccountUnregisterDevice {
	x, ok := p.pool.Get().(*AccountUnregisterDevice)
	if !ok {
		return &AccountUnregisterDevice{}
	}
	return x
}

func (p *poolAccountUnregisterDevice) Put(x *AccountUnregisterDevice) {
	p.pool.Put(x)
}

var PoolAccountUnregisterDevice = poolAccountUnregisterDevice{}

func ResultAccountUnregisterDevice(out *MessageEnvelope, res *AccountUnregisterDevice) {
	out.Constructor = C_AccountUnregisterDevice
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountUpdateProfile int64 = 3725499887

type poolAccountUpdateProfile struct {
	pool sync.Pool
}

func (p *poolAccountUpdateProfile) Get() *AccountUpdateProfile {
	x, ok := p.pool.Get().(*AccountUpdateProfile)
	if !ok {
		return &AccountUpdateProfile{}
	}
	x.Bio = ""
	return x
}

func (p *poolAccountUpdateProfile) Put(x *AccountUpdateProfile) {
	p.pool.Put(x)
}

var PoolAccountUpdateProfile = poolAccountUpdateProfile{}

func ResultAccountUpdateProfile(out *MessageEnvelope, res *AccountUpdateProfile) {
	out.Constructor = C_AccountUpdateProfile
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountCheckUsername int64 = 1501406413

type poolAccountCheckUsername struct {
	pool sync.Pool
}

func (p *poolAccountCheckUsername) Get() *AccountCheckUsername {
	x, ok := p.pool.Get().(*AccountCheckUsername)
	if !ok {
		return &AccountCheckUsername{}
	}
	return x
}

func (p *poolAccountCheckUsername) Put(x *AccountCheckUsername) {
	p.pool.Put(x)
}

var PoolAccountCheckUsername = poolAccountCheckUsername{}

func ResultAccountCheckUsername(out *MessageEnvelope, res *AccountCheckUsername) {
	out.Constructor = C_AccountCheckUsername
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountUpdateUsername int64 = 1477164344

type poolAccountUpdateUsername struct {
	pool sync.Pool
}

func (p *poolAccountUpdateUsername) Get() *AccountUpdateUsername {
	x, ok := p.pool.Get().(*AccountUpdateUsername)
	if !ok {
		return &AccountUpdateUsername{}
	}
	return x
}

func (p *poolAccountUpdateUsername) Put(x *AccountUpdateUsername) {
	p.pool.Put(x)
}

var PoolAccountUpdateUsername = poolAccountUpdateUsername{}

func ResultAccountUpdateUsername(out *MessageEnvelope, res *AccountUpdateUsername) {
	out.Constructor = C_AccountUpdateUsername
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountUploadPhoto int64 = 1222469957

type poolAccountUploadPhoto struct {
	pool sync.Pool
}

func (p *poolAccountUploadPhoto) Get() *AccountUploadPhoto {
	x, ok := p.pool.Get().(*AccountUploadPhoto)
	if !ok {
		return &AccountUploadPhoto{}
	}
	x.ReturnObject = false
	return x
}

func (p *poolAccountUploadPhoto) Put(x *AccountUploadPhoto) {
	p.pool.Put(x)
}

var PoolAccountUploadPhoto = poolAccountUploadPhoto{}

func ResultAccountUploadPhoto(out *MessageEnvelope, res *AccountUploadPhoto) {
	out.Constructor = C_AccountUploadPhoto
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountUpdatePhoto int64 = 406174115

type poolAccountUpdatePhoto struct {
	pool sync.Pool
}

func (p *poolAccountUpdatePhoto) Get() *AccountUpdatePhoto {
	x, ok := p.pool.Get().(*AccountUpdatePhoto)
	if !ok {
		return &AccountUpdatePhoto{}
	}
	return x
}

func (p *poolAccountUpdatePhoto) Put(x *AccountUpdatePhoto) {
	p.pool.Put(x)
}

var PoolAccountUpdatePhoto = poolAccountUpdatePhoto{}

func ResultAccountUpdatePhoto(out *MessageEnvelope, res *AccountUpdatePhoto) {
	out.Constructor = C_AccountUpdatePhoto
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountRemovePhoto int64 = 3728692172

type poolAccountRemovePhoto struct {
	pool sync.Pool
}

func (p *poolAccountRemovePhoto) Get() *AccountRemovePhoto {
	x, ok := p.pool.Get().(*AccountRemovePhoto)
	if !ok {
		return &AccountRemovePhoto{}
	}
	x.PhotoID = 0
	return x
}

func (p *poolAccountRemovePhoto) Put(x *AccountRemovePhoto) {
	p.pool.Put(x)
}

var PoolAccountRemovePhoto = poolAccountRemovePhoto{}

func ResultAccountRemovePhoto(out *MessageEnvelope, res *AccountRemovePhoto) {
	out.Constructor = C_AccountRemovePhoto
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountSendChangePhoneCode int64 = 1389121902

type poolAccountSendChangePhoneCode struct {
	pool sync.Pool
}

func (p *poolAccountSendChangePhoneCode) Get() *AccountSendChangePhoneCode {
	x, ok := p.pool.Get().(*AccountSendChangePhoneCode)
	if !ok {
		return &AccountSendChangePhoneCode{}
	}
	x.AppHash = ""
	return x
}

func (p *poolAccountSendChangePhoneCode) Put(x *AccountSendChangePhoneCode) {
	p.pool.Put(x)
}

var PoolAccountSendChangePhoneCode = poolAccountSendChangePhoneCode{}

func ResultAccountSendChangePhoneCode(out *MessageEnvelope, res *AccountSendChangePhoneCode) {
	out.Constructor = C_AccountSendChangePhoneCode
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountResendChangePhoneCode int64 = 4200771569

type poolAccountResendChangePhoneCode struct {
	pool sync.Pool
}

func (p *poolAccountResendChangePhoneCode) Get() *AccountResendChangePhoneCode {
	x, ok := p.pool.Get().(*AccountResendChangePhoneCode)
	if !ok {
		return &AccountResendChangePhoneCode{}
	}
	return x
}

func (p *poolAccountResendChangePhoneCode) Put(x *AccountResendChangePhoneCode) {
	p.pool.Put(x)
}

var PoolAccountResendChangePhoneCode = poolAccountResendChangePhoneCode{}

func ResultAccountResendChangePhoneCode(out *MessageEnvelope, res *AccountResendChangePhoneCode) {
	out.Constructor = C_AccountResendChangePhoneCode
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountChangePhone int64 = 4285969474

type poolAccountChangePhone struct {
	pool sync.Pool
}

func (p *poolAccountChangePhone) Get() *AccountChangePhone {
	x, ok := p.pool.Get().(*AccountChangePhone)
	if !ok {
		return &AccountChangePhone{}
	}
	x.Password = nil
	return x
}

func (p *poolAccountChangePhone) Put(x *AccountChangePhone) {
	p.pool.Put(x)
}

var PoolAccountChangePhone = poolAccountChangePhone{}

func ResultAccountChangePhone(out *MessageEnvelope, res *AccountChangePhone) {
	out.Constructor = C_AccountChangePhone
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountSetPrivacy int64 = 1599585002

type poolAccountSetPrivacy struct {
	pool sync.Pool
}

func (p *poolAccountSetPrivacy) Get() *AccountSetPrivacy {
	x, ok := p.pool.Get().(*AccountSetPrivacy)
	if !ok {
		return &AccountSetPrivacy{}
	}
	x.ChatInvite = x.ChatInvite[:0]
	x.LastSeen = x.LastSeen[:0]
	x.PhoneNumber = x.PhoneNumber[:0]
	x.ProfilePhoto = x.ProfilePhoto[:0]
	x.ForwardedMessage = x.ForwardedMessage[:0]
	x.Call = x.Call[:0]
	return x
}

func (p *poolAccountSetPrivacy) Put(x *AccountSetPrivacy) {
	p.pool.Put(x)
}

var PoolAccountSetPrivacy = poolAccountSetPrivacy{}

func ResultAccountSetPrivacy(out *MessageEnvelope, res *AccountSetPrivacy) {
	out.Constructor = C_AccountSetPrivacy
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountGetPrivacy int64 = 1897044856

type poolAccountGetPrivacy struct {
	pool sync.Pool
}

func (p *poolAccountGetPrivacy) Get() *AccountGetPrivacy {
	x, ok := p.pool.Get().(*AccountGetPrivacy)
	if !ok {
		return &AccountGetPrivacy{}
	}
	return x
}

func (p *poolAccountGetPrivacy) Put(x *AccountGetPrivacy) {
	p.pool.Put(x)
}

var PoolAccountGetPrivacy = poolAccountGetPrivacy{}

func ResultAccountGetPrivacy(out *MessageEnvelope, res *AccountGetPrivacy) {
	out.Constructor = C_AccountGetPrivacy
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountGetAuthorizations int64 = 2112646192

type poolAccountGetAuthorizations struct {
	pool sync.Pool
}

func (p *poolAccountGetAuthorizations) Get() *AccountGetAuthorizations {
	x, ok := p.pool.Get().(*AccountGetAuthorizations)
	if !ok {
		return &AccountGetAuthorizations{}
	}
	return x
}

func (p *poolAccountGetAuthorizations) Put(x *AccountGetAuthorizations) {
	p.pool.Put(x)
}

var PoolAccountGetAuthorizations = poolAccountGetAuthorizations{}

func ResultAccountGetAuthorizations(out *MessageEnvelope, res *AccountGetAuthorizations) {
	out.Constructor = C_AccountGetAuthorizations
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountResetAuthorization int64 = 1045069116

type poolAccountResetAuthorization struct {
	pool sync.Pool
}

func (p *poolAccountResetAuthorization) Get() *AccountResetAuthorization {
	x, ok := p.pool.Get().(*AccountResetAuthorization)
	if !ok {
		return &AccountResetAuthorization{}
	}
	return x
}

func (p *poolAccountResetAuthorization) Put(x *AccountResetAuthorization) {
	p.pool.Put(x)
}

var PoolAccountResetAuthorization = poolAccountResetAuthorization{}

func ResultAccountResetAuthorization(out *MessageEnvelope, res *AccountResetAuthorization) {
	out.Constructor = C_AccountResetAuthorization
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountUpdateStatus int64 = 666864933

type poolAccountUpdateStatus struct {
	pool sync.Pool
}

func (p *poolAccountUpdateStatus) Get() *AccountUpdateStatus {
	x, ok := p.pool.Get().(*AccountUpdateStatus)
	if !ok {
		return &AccountUpdateStatus{}
	}
	return x
}

func (p *poolAccountUpdateStatus) Put(x *AccountUpdateStatus) {
	p.pool.Put(x)
}

var PoolAccountUpdateStatus = poolAccountUpdateStatus{}

func ResultAccountUpdateStatus(out *MessageEnvelope, res *AccountUpdateStatus) {
	out.Constructor = C_AccountUpdateStatus
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountSetLang int64 = 2015777242

type poolAccountSetLang struct {
	pool sync.Pool
}

func (p *poolAccountSetLang) Get() *AccountSetLang {
	x, ok := p.pool.Get().(*AccountSetLang)
	if !ok {
		return &AccountSetLang{}
	}
	return x
}

func (p *poolAccountSetLang) Put(x *AccountSetLang) {
	p.pool.Put(x)
}

var PoolAccountSetLang = poolAccountSetLang{}

func ResultAccountSetLang(out *MessageEnvelope, res *AccountSetLang) {
	out.Constructor = C_AccountSetLang
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountGetPassword int64 = 1702207851

type poolAccountGetPassword struct {
	pool sync.Pool
}

func (p *poolAccountGetPassword) Get() *AccountGetPassword {
	x, ok := p.pool.Get().(*AccountGetPassword)
	if !ok {
		return &AccountGetPassword{}
	}
	return x
}

func (p *poolAccountGetPassword) Put(x *AccountGetPassword) {
	p.pool.Put(x)
}

var PoolAccountGetPassword = poolAccountGetPassword{}

func ResultAccountGetPassword(out *MessageEnvelope, res *AccountGetPassword) {
	out.Constructor = C_AccountGetPassword
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountGetPasswordSettings int64 = 2052309739

type poolAccountGetPasswordSettings struct {
	pool sync.Pool
}

func (p *poolAccountGetPasswordSettings) Get() *AccountGetPasswordSettings {
	x, ok := p.pool.Get().(*AccountGetPasswordSettings)
	if !ok {
		return &AccountGetPasswordSettings{}
	}
	x.Password = nil
	return x
}

func (p *poolAccountGetPasswordSettings) Put(x *AccountGetPasswordSettings) {
	p.pool.Put(x)
}

var PoolAccountGetPasswordSettings = poolAccountGetPasswordSettings{}

func ResultAccountGetPasswordSettings(out *MessageEnvelope, res *AccountGetPasswordSettings) {
	out.Constructor = C_AccountGetPasswordSettings
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountUpdatePasswordSettings int64 = 3193945896

type poolAccountUpdatePasswordSettings struct {
	pool sync.Pool
}

func (p *poolAccountUpdatePasswordSettings) Get() *AccountUpdatePasswordSettings {
	x, ok := p.pool.Get().(*AccountUpdatePasswordSettings)
	if !ok {
		return &AccountUpdatePasswordSettings{}
	}
	x.Password = nil
	x.PasswordHash = nil
	x.PasswordHash = x.PasswordHash[:0]
	x.AlgorithmData = x.AlgorithmData[:0]
	x.Hint = ""
	x.Questions = x.Questions[:0]
	return x
}

func (p *poolAccountUpdatePasswordSettings) Put(x *AccountUpdatePasswordSettings) {
	p.pool.Put(x)
}

var PoolAccountUpdatePasswordSettings = poolAccountUpdatePasswordSettings{}

func ResultAccountUpdatePasswordSettings(out *MessageEnvelope, res *AccountUpdatePasswordSettings) {
	out.Constructor = C_AccountUpdatePasswordSettings
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountRecoverPassword int64 = 1086766738

type poolAccountRecoverPassword struct {
	pool sync.Pool
}

func (p *poolAccountRecoverPassword) Get() *AccountRecoverPassword {
	x, ok := p.pool.Get().(*AccountRecoverPassword)
	if !ok {
		return &AccountRecoverPassword{}
	}
	x.Answers = x.Answers[:0]
	x.AlgorithmData = x.AlgorithmData[:0]
	return x
}

func (p *poolAccountRecoverPassword) Put(x *AccountRecoverPassword) {
	p.pool.Put(x)
}

var PoolAccountRecoverPassword = poolAccountRecoverPassword{}

func ResultAccountRecoverPassword(out *MessageEnvelope, res *AccountRecoverPassword) {
	out.Constructor = C_AccountRecoverPassword
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountPasswordSettings int64 = 3362978866

type poolAccountPasswordSettings struct {
	pool sync.Pool
}

func (p *poolAccountPasswordSettings) Get() *AccountPasswordSettings {
	x, ok := p.pool.Get().(*AccountPasswordSettings)
	if !ok {
		return &AccountPasswordSettings{}
	}
	x.Questions = x.Questions[:0]
	return x
}

func (p *poolAccountPasswordSettings) Put(x *AccountPasswordSettings) {
	p.pool.Put(x)
}

var PoolAccountPasswordSettings = poolAccountPasswordSettings{}

func ResultAccountPasswordSettings(out *MessageEnvelope, res *AccountPasswordSettings) {
	out.Constructor = C_AccountPasswordSettings
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_SecurityQuestions int64 = 1797596734

type poolSecurityQuestions struct {
	pool sync.Pool
}

func (p *poolSecurityQuestions) Get() *SecurityQuestions {
	x, ok := p.pool.Get().(*SecurityQuestions)
	if !ok {
		return &SecurityQuestions{}
	}
	x.Questions = x.Questions[:0]
	return x
}

func (p *poolSecurityQuestions) Put(x *SecurityQuestions) {
	p.pool.Put(x)
}

var PoolSecurityQuestions = poolSecurityQuestions{}

func ResultSecurityQuestions(out *MessageEnvelope, res *SecurityQuestions) {
	out.Constructor = C_SecurityQuestions
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_RecoveryQuestion int64 = 1697591959

type poolRecoveryQuestion struct {
	pool sync.Pool
}

func (p *poolRecoveryQuestion) Get() *RecoveryQuestion {
	x, ok := p.pool.Get().(*RecoveryQuestion)
	if !ok {
		return &RecoveryQuestion{}
	}
	return x
}

func (p *poolRecoveryQuestion) Put(x *RecoveryQuestion) {
	p.pool.Put(x)
}

var PoolRecoveryQuestion = poolRecoveryQuestion{}

func ResultRecoveryQuestion(out *MessageEnvelope, res *RecoveryQuestion) {
	out.Constructor = C_RecoveryQuestion
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_SecurityQuestion int64 = 1092467205

type poolSecurityQuestion struct {
	pool sync.Pool
}

func (p *poolSecurityQuestion) Get() *SecurityQuestion {
	x, ok := p.pool.Get().(*SecurityQuestion)
	if !ok {
		return &SecurityQuestion{}
	}
	return x
}

func (p *poolSecurityQuestion) Put(x *SecurityQuestion) {
	p.pool.Put(x)
}

var PoolSecurityQuestion = poolSecurityQuestion{}

func ResultSecurityQuestion(out *MessageEnvelope, res *SecurityQuestion) {
	out.Constructor = C_SecurityQuestion
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_SecurityAnswer int64 = 1989228797

type poolSecurityAnswer struct {
	pool sync.Pool
}

func (p *poolSecurityAnswer) Get() *SecurityAnswer {
	x, ok := p.pool.Get().(*SecurityAnswer)
	if !ok {
		return &SecurityAnswer{}
	}
	return x
}

func (p *poolSecurityAnswer) Put(x *SecurityAnswer) {
	p.pool.Put(x)
}

var PoolSecurityAnswer = poolSecurityAnswer{}

func ResultSecurityAnswer(out *MessageEnvelope, res *SecurityAnswer) {
	out.Constructor = C_SecurityAnswer
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountPassword int64 = 4178767656

type poolAccountPassword struct {
	pool sync.Pool
}

func (p *poolAccountPassword) Get() *AccountPassword {
	x, ok := p.pool.Get().(*AccountPassword)
	if !ok {
		return &AccountPassword{}
	}
	x.Hint = ""
	x.AlgorithmData = x.AlgorithmData[:0]
	x.SrpB = nil
	x.SrpB = x.SrpB[:0]
	x.RandomData = nil
	x.RandomData = x.RandomData[:0]
	x.SrpID = 0
	x.Questions = x.Questions[:0]
	return x
}

func (p *poolAccountPassword) Put(x *AccountPassword) {
	p.pool.Put(x)
}

var PoolAccountPassword = poolAccountPassword{}

func ResultAccountPassword(out *MessageEnvelope, res *AccountPassword) {
	out.Constructor = C_AccountPassword
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountAuthorizations int64 = 1092320500

type poolAccountAuthorizations struct {
	pool sync.Pool
}

func (p *poolAccountAuthorizations) Get() *AccountAuthorizations {
	x, ok := p.pool.Get().(*AccountAuthorizations)
	if !ok {
		return &AccountAuthorizations{}
	}
	x.Authorizations = x.Authorizations[:0]
	return x
}

func (p *poolAccountAuthorizations) Put(x *AccountAuthorizations) {
	p.pool.Put(x)
}

var PoolAccountAuthorizations = poolAccountAuthorizations{}

func ResultAccountAuthorizations(out *MessageEnvelope, res *AccountAuthorizations) {
	out.Constructor = C_AccountAuthorizations
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountAuthorization int64 = 275571966

type poolAccountAuthorization struct {
	pool sync.Pool
}

func (p *poolAccountAuthorization) Get() *AccountAuthorization {
	x, ok := p.pool.Get().(*AccountAuthorization)
	if !ok {
		return &AccountAuthorization{}
	}
	return x
}

func (p *poolAccountAuthorization) Put(x *AccountAuthorization) {
	p.pool.Put(x)
}

var PoolAccountAuthorization = poolAccountAuthorization{}

func ResultAccountAuthorization(out *MessageEnvelope, res *AccountAuthorization) {
	out.Constructor = C_AccountAuthorization
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

const C_AccountPrivacyRules int64 = 3802018092

type poolAccountPrivacyRules struct {
	pool sync.Pool
}

func (p *poolAccountPrivacyRules) Get() *AccountPrivacyRules {
	x, ok := p.pool.Get().(*AccountPrivacyRules)
	if !ok {
		return &AccountPrivacyRules{}
	}
	x.Rules = x.Rules[:0]
	return x
}

func (p *poolAccountPrivacyRules) Put(x *AccountPrivacyRules) {
	p.pool.Put(x)
}

var PoolAccountPrivacyRules = poolAccountPrivacyRules{}

func ResultAccountPrivacyRules(out *MessageEnvelope, res *AccountPrivacyRules) {
	out.Constructor = C_AccountPrivacyRules
	protoSize := res.Size()
	if protoSize > cap(out.Message) {
		pbytes.Put(out.Message)
		out.Message = pbytes.GetLen(protoSize)
	} else {
		out.Message = out.Message[:protoSize]
	}
	res.MarshalToSizedBuffer(out.Message)
}

func init() {
	ConstructorNames[2016882075] = "AccountSetNotifySettings"
	ConstructorNames[477008681] = "AccountGetNotifySettings"
	ConstructorNames[946059841] = "AccountRegisterDevice"
	ConstructorNames[3981251588] = "AccountUnregisterDevice"
	ConstructorNames[3725499887] = "AccountUpdateProfile"
	ConstructorNames[1501406413] = "AccountCheckUsername"
	ConstructorNames[1477164344] = "AccountUpdateUsername"
	ConstructorNames[1222469957] = "AccountUploadPhoto"
	ConstructorNames[406174115] = "AccountUpdatePhoto"
	ConstructorNames[3728692172] = "AccountRemovePhoto"
	ConstructorNames[1389121902] = "AccountSendChangePhoneCode"
	ConstructorNames[4200771569] = "AccountResendChangePhoneCode"
	ConstructorNames[4285969474] = "AccountChangePhone"
	ConstructorNames[1599585002] = "AccountSetPrivacy"
	ConstructorNames[1897044856] = "AccountGetPrivacy"
	ConstructorNames[2112646192] = "AccountGetAuthorizations"
	ConstructorNames[1045069116] = "AccountResetAuthorization"
	ConstructorNames[666864933] = "AccountUpdateStatus"
	ConstructorNames[2015777242] = "AccountSetLang"
	ConstructorNames[1702207851] = "AccountGetPassword"
	ConstructorNames[2052309739] = "AccountGetPasswordSettings"
	ConstructorNames[3193945896] = "AccountUpdatePasswordSettings"
	ConstructorNames[1086766738] = "AccountRecoverPassword"
	ConstructorNames[3362978866] = "AccountPasswordSettings"
	ConstructorNames[1797596734] = "SecurityQuestions"
	ConstructorNames[1697591959] = "RecoveryQuestion"
	ConstructorNames[1092467205] = "SecurityQuestion"
	ConstructorNames[1989228797] = "SecurityAnswer"
	ConstructorNames[4178767656] = "AccountPassword"
	ConstructorNames[1092320500] = "AccountAuthorizations"
	ConstructorNames[275571966] = "AccountAuthorization"
	ConstructorNames[3802018092] = "AccountPrivacyRules"
}
