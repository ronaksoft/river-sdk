// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gif.proto

package msg

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GifGetSaved
// @Function
// @Return: SavedGifs
type GifGetSaved struct {
	Hash uint32 `protobuf:"fixed32,1,req,name=Hash" json:"Hash"`
}

func (m *GifGetSaved) Reset()         { *m = GifGetSaved{} }
func (m *GifGetSaved) String() string { return proto.CompactTextString(m) }
func (*GifGetSaved) ProtoMessage()    {}
func (*GifGetSaved) Descriptor() ([]byte, []int) {
	return fileDescriptor_55bb63efece9ea16, []int{0}
}
func (m *GifGetSaved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GifGetSaved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GifGetSaved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GifGetSaved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GifGetSaved.Merge(m, src)
}
func (m *GifGetSaved) XXX_Size() int {
	return m.Size()
}
func (m *GifGetSaved) XXX_DiscardUnknown() {
	xxx_messageInfo_GifGetSaved.DiscardUnknown(m)
}

var xxx_messageInfo_GifGetSaved proto.InternalMessageInfo

func (m *GifGetSaved) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

// GifSave
// @Function
// @Return: Bool
type GifSave struct {
	Doc *InputDocument `protobuf:"bytes,1,req,name=Doc" json:"Doc,omitempty"`
}

func (m *GifSave) Reset()         { *m = GifSave{} }
func (m *GifSave) String() string { return proto.CompactTextString(m) }
func (*GifSave) ProtoMessage()    {}
func (*GifSave) Descriptor() ([]byte, []int) {
	return fileDescriptor_55bb63efece9ea16, []int{1}
}
func (m *GifSave) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GifSave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GifSave.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GifSave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GifSave.Merge(m, src)
}
func (m *GifSave) XXX_Size() int {
	return m.Size()
}
func (m *GifSave) XXX_DiscardUnknown() {
	xxx_messageInfo_GifSave.DiscardUnknown(m)
}

var xxx_messageInfo_GifSave proto.InternalMessageInfo

func (m *GifSave) GetDoc() *InputDocument {
	if m != nil {
		return m.Doc
	}
	return nil
}

// GifDelete
type GifDelete struct {
	Doc *InputDocument `protobuf:"bytes,1,req,name=Doc" json:"Doc,omitempty"`
}

func (m *GifDelete) Reset()         { *m = GifDelete{} }
func (m *GifDelete) String() string { return proto.CompactTextString(m) }
func (*GifDelete) ProtoMessage()    {}
func (*GifDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_55bb63efece9ea16, []int{2}
}
func (m *GifDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GifDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GifDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GifDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GifDelete.Merge(m, src)
}
func (m *GifDelete) XXX_Size() int {
	return m.Size()
}
func (m *GifDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_GifDelete.DiscardUnknown(m)
}

var xxx_messageInfo_GifDelete proto.InternalMessageInfo

func (m *GifDelete) GetDoc() *InputDocument {
	if m != nil {
		return m.Doc
	}
	return nil
}

// GifSearch
// @Function
// @Return: FoundGifs
type GifSearch struct {
	Query string `protobuf:"bytes,1,req,name=Query" json:"Query"`
	Hash  int64  `protobuf:"varint,2,req,name=Hash" json:"Hash"`
}

func (m *GifSearch) Reset()         { *m = GifSearch{} }
func (m *GifSearch) String() string { return proto.CompactTextString(m) }
func (*GifSearch) ProtoMessage()    {}
func (*GifSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_55bb63efece9ea16, []int{3}
}
func (m *GifSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GifSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GifSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GifSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GifSearch.Merge(m, src)
}
func (m *GifSearch) XXX_Size() int {
	return m.Size()
}
func (m *GifSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_GifSearch.DiscardUnknown(m)
}

var xxx_messageInfo_GifSearch proto.InternalMessageInfo

func (m *GifSearch) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *GifSearch) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

// FoundGifs
type FoundGifs struct {
	NextOffset int32       `protobuf:"varint,1,req,name=NextOffset" json:"NextOffset"`
	Gifs       []*FoundGif `protobuf:"bytes,2,rep,name=Gifs" json:"Gifs,omitempty"`
}

func (m *FoundGifs) Reset()         { *m = FoundGifs{} }
func (m *FoundGifs) String() string { return proto.CompactTextString(m) }
func (*FoundGifs) ProtoMessage()    {}
func (*FoundGifs) Descriptor() ([]byte, []int) {
	return fileDescriptor_55bb63efece9ea16, []int{4}
}
func (m *FoundGifs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FoundGifs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FoundGifs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FoundGifs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FoundGifs.Merge(m, src)
}
func (m *FoundGifs) XXX_Size() int {
	return m.Size()
}
func (m *FoundGifs) XXX_DiscardUnknown() {
	xxx_messageInfo_FoundGifs.DiscardUnknown(m)
}

var xxx_messageInfo_FoundGifs proto.InternalMessageInfo

func (m *FoundGifs) GetNextOffset() int32 {
	if m != nil {
		return m.NextOffset
	}
	return 0
}

func (m *FoundGifs) GetGifs() []*FoundGif {
	if m != nil {
		return m.Gifs
	}
	return nil
}

// FoundGif
type FoundGif struct {
	Url   string    `protobuf:"bytes,1,req,name=Url" json:"Url"`
	Doc   *Document `protobuf:"bytes,2,req,name=Doc" json:"Doc,omitempty"`
	Thumb *Document `protobuf:"bytes,3,req,name=Thumb" json:"Thumb,omitempty"`
}

func (m *FoundGif) Reset()         { *m = FoundGif{} }
func (m *FoundGif) String() string { return proto.CompactTextString(m) }
func (*FoundGif) ProtoMessage()    {}
func (*FoundGif) Descriptor() ([]byte, []int) {
	return fileDescriptor_55bb63efece9ea16, []int{5}
}
func (m *FoundGif) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FoundGif) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FoundGif.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FoundGif) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FoundGif.Merge(m, src)
}
func (m *FoundGif) XXX_Size() int {
	return m.Size()
}
func (m *FoundGif) XXX_DiscardUnknown() {
	xxx_messageInfo_FoundGif.DiscardUnknown(m)
}

var xxx_messageInfo_FoundGif proto.InternalMessageInfo

func (m *FoundGif) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *FoundGif) GetDoc() *Document {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *FoundGif) GetThumb() *Document {
	if m != nil {
		return m.Thumb
	}
	return nil
}

// SavedGifs
type SavedGifs struct {
	Hash        uint32           `protobuf:"fixed32,1,req,name=Hash" json:"Hash"`
	Docs        []*MediaDocument `protobuf:"bytes,2,rep,name=Docs" json:"Docs,omitempty"`
	NotModified bool             `protobuf:"varint,3,req,name=NotModified" json:"NotModified"`
}

func (m *SavedGifs) Reset()         { *m = SavedGifs{} }
func (m *SavedGifs) String() string { return proto.CompactTextString(m) }
func (*SavedGifs) ProtoMessage()    {}
func (*SavedGifs) Descriptor() ([]byte, []int) {
	return fileDescriptor_55bb63efece9ea16, []int{6}
}
func (m *SavedGifs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SavedGifs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SavedGifs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SavedGifs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SavedGifs.Merge(m, src)
}
func (m *SavedGifs) XXX_Size() int {
	return m.Size()
}
func (m *SavedGifs) XXX_DiscardUnknown() {
	xxx_messageInfo_SavedGifs.DiscardUnknown(m)
}

var xxx_messageInfo_SavedGifs proto.InternalMessageInfo

func (m *SavedGifs) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *SavedGifs) GetDocs() []*MediaDocument {
	if m != nil {
		return m.Docs
	}
	return nil
}

func (m *SavedGifs) GetNotModified() bool {
	if m != nil {
		return m.NotModified
	}
	return false
}

func init() {
	proto.RegisterType((*GifGetSaved)(nil), "msg.GifGetSaved")
	proto.RegisterType((*GifSave)(nil), "msg.GifSave")
	proto.RegisterType((*GifDelete)(nil), "msg.GifDelete")
	proto.RegisterType((*GifSearch)(nil), "msg.GifSearch")
	proto.RegisterType((*FoundGifs)(nil), "msg.FoundGifs")
	proto.RegisterType((*FoundGif)(nil), "msg.FoundGif")
	proto.RegisterType((*SavedGifs)(nil), "msg.SavedGifs")
}

func init() { proto.RegisterFile("gif.proto", fileDescriptor_55bb63efece9ea16) }

var fileDescriptor_55bb63efece9ea16 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x6a, 0xea, 0x40,
	0x14, 0xc6, 0xf3, 0x4f, 0x34, 0x27, 0x5c, 0xb8, 0xcc, 0xe2, 0x12, 0xb2, 0x88, 0xde, 0x5c, 0xf1,
	0xba, 0xca, 0xe5, 0xfa, 0x06, 0x95, 0xd0, 0xb4, 0x0b, 0x2d, 0x55, 0xfb, 0x00, 0x69, 0x32, 0x93,
	0x0c, 0x18, 0x47, 0x32, 0x93, 0x52, 0xdf, 0xa2, 0x8f, 0xe5, 0xd2, 0x65, 0x57, 0xa5, 0xe8, 0x8b,
	0x94, 0x4c, 0xa2, 0x28, 0xb4, 0xd0, 0xed, 0xf7, 0x7d, 0xe7, 0x9b, 0xdf, 0x99, 0x03, 0x66, 0x4a,
	0x89, 0xbf, 0x2e, 0x98, 0x60, 0x48, 0xcf, 0x79, 0xea, 0x38, 0x71, 0x16, 0x09, 0x3f, 0xc7, 0x9c,
	0x47, 0x29, 0xe6, 0x7e, 0x8e, 0x13, 0x1a, 0xf1, 0x3a, 0xe0, 0xfc, 0x8c, 0x59, 0x81, 0x7d, 0xb1,
	0x59, 0xe3, 0x46, 0xf1, 0xfe, 0x82, 0x15, 0x52, 0x12, 0x62, 0x31, 0x8f, 0x9e, 0x70, 0x82, 0x6c,
	0x30, 0x6e, 0x22, 0x9e, 0xd9, 0x6a, 0x4f, 0x1b, 0xb6, 0xc7, 0xc6, 0xf6, 0xad, 0xab, 0xcc, 0xa4,
	0xe2, 0xfd, 0x83, 0x76, 0x48, 0x49, 0x95, 0x42, 0x7d, 0xd0, 0x03, 0x16, 0xcb, 0x8c, 0x35, 0x42,
	0x7e, 0xce, 0x53, 0xff, 0x76, 0xb5, 0x2e, 0x45, 0xc0, 0xe2, 0x32, 0xc7, 0x2b, 0x31, 0xab, 0x6c,
	0xef, 0x3f, 0x98, 0x21, 0x25, 0x01, 0x5e, 0x62, 0xf1, 0xdd, 0x91, 0x2b, 0x39, 0x32, 0xc7, 0x51,
	0x11, 0x67, 0xc8, 0x81, 0xd6, 0x7d, 0x89, 0x8b, 0x8d, 0x1c, 0x32, 0x1b, 0x96, 0x5a, 0x3a, 0x61,
	0x6a, 0x3d, 0x6d, 0xa8, 0x5f, 0x60, 0x2e, 0xc0, 0xbc, 0x66, 0xe5, 0x2a, 0x09, 0x29, 0xe1, 0xa8,
	0x0f, 0x30, 0xc5, 0xcf, 0xe2, 0x8e, 0x10, 0x8e, 0x85, 0xec, 0x69, 0x35, 0xe1, 0x33, 0x1d, 0xfd,
	0x06, 0xa3, 0x4a, 0xdb, 0x5a, 0x4f, 0x1f, 0x5a, 0xa3, 0x1f, 0x12, 0xee, 0xd8, 0x31, 0x93, 0x96,
	0x97, 0x41, 0xe7, 0xa8, 0xa0, 0x5f, 0xa0, 0x3f, 0x14, 0xcb, 0x0b, 0xaa, 0x4a, 0x40, 0xdd, 0x7a,
	0x45, 0x4d, 0xae, 0x58, 0xb7, 0x5c, 0x6c, 0x87, 0xfe, 0x40, 0x6b, 0x91, 0x95, 0xf9, 0xa3, 0xad,
	0x7f, 0x16, 0xa9, 0x3d, 0xaf, 0x04, 0x53, 0x5e, 0x42, 0xf2, 0x7f, 0x79, 0x0d, 0x34, 0x00, 0x23,
	0x60, 0xf1, 0x91, 0xb9, 0xfe, 0xd0, 0x49, 0x75, 0xe9, 0x53, 0x9f, 0xf4, 0xd1, 0x00, 0xac, 0x29,
	0x13, 0x13, 0x96, 0x50, 0x42, 0x71, 0x22, 0x5f, 0xee, 0x34, 0x45, 0xe7, 0xc6, 0xd8, 0xde, 0xee,
	0x5d, 0x75, 0xb7, 0x77, 0xd5, 0xf7, 0xbd, 0xab, 0xbe, 0x1c, 0x5c, 0x65, 0x77, 0x70, 0x95, 0xd7,
	0x83, 0xab, 0x7c, 0x04, 0x00, 0x00, 0xff, 0xff, 0x84, 0x38, 0x21, 0x74, 0x5f, 0x02, 0x00, 0x00,
}

func (m *GifGetSaved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GifGetSaved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GifGetSaved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Hash))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func (m *GifSave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GifSave) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GifSave) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Doc == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Doc")
	} else {
		{
			size, err := m.Doc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGif(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GifDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GifDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GifDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Doc == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Doc")
	} else {
		{
			size, err := m.Doc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGif(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GifSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GifSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GifSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGif(dAtA, i, uint64(m.Hash))
	i--
	dAtA[i] = 0x10
	i -= len(m.Query)
	copy(dAtA[i:], m.Query)
	i = encodeVarintGif(dAtA, i, uint64(len(m.Query)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FoundGifs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FoundGifs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FoundGifs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Gifs) > 0 {
		for iNdEx := len(m.Gifs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gifs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGif(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintGif(dAtA, i, uint64(m.NextOffset))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FoundGif) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FoundGif) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FoundGif) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Thumb == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Thumb")
	} else {
		{
			size, err := m.Thumb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGif(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Doc == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("Doc")
	} else {
		{
			size, err := m.Doc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGif(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Url)
	copy(dAtA[i:], m.Url)
	i = encodeVarintGif(dAtA, i, uint64(len(m.Url)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SavedGifs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedGifs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SavedGifs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.NotModified {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if len(m.Docs) > 0 {
		for iNdEx := len(m.Docs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Docs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGif(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Hash))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func encodeVarintGif(dAtA []byte, offset int, v uint64) int {
	offset -= sovGif(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GifGetSaved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}

func (m *GifSave) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Doc != nil {
		l = m.Doc.Size()
		n += 1 + l + sovGif(uint64(l))
	}
	return n
}

func (m *GifDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Doc != nil {
		l = m.Doc.Size()
		n += 1 + l + sovGif(uint64(l))
	}
	return n
}

func (m *GifSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	n += 1 + l + sovGif(uint64(l))
	n += 1 + sovGif(uint64(m.Hash))
	return n
}

func (m *FoundGifs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGif(uint64(m.NextOffset))
	if len(m.Gifs) > 0 {
		for _, e := range m.Gifs {
			l = e.Size()
			n += 1 + l + sovGif(uint64(l))
		}
	}
	return n
}

func (m *FoundGif) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	n += 1 + l + sovGif(uint64(l))
	if m.Doc != nil {
		l = m.Doc.Size()
		n += 1 + l + sovGif(uint64(l))
	}
	if m.Thumb != nil {
		l = m.Thumb.Size()
		n += 1 + l + sovGif(uint64(l))
	}
	return n
}

func (m *SavedGifs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	if len(m.Docs) > 0 {
		for _, e := range m.Docs {
			l = e.Size()
			n += 1 + l + sovGif(uint64(l))
		}
	}
	n += 2
	return n
}

func sovGif(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGif(x uint64) (n int) {
	return sovGif(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GifGetSaved) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GifGetSaved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GifGetSaved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipGif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGif
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Hash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GifSave) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GifSave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GifSave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGif
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGif
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Doc == nil {
				m.Doc = &InputDocument{}
			}
			if err := m.Doc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipGif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGif
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Doc")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GifDelete) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GifDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GifDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGif
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGif
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Doc == nil {
				m.Doc = &InputDocument{}
			}
			if err := m.Doc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipGif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGif
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Doc")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GifSearch) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GifSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GifSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGif
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGif
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipGif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGif
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Query")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Hash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FoundGifs) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FoundGifs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FoundGifs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextOffset", wireType)
			}
			m.NextOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gifs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGif
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGif
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gifs = append(m.Gifs, &FoundGif{})
			if err := m.Gifs[len(m.Gifs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGif
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NextOffset")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FoundGif) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FoundGif: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FoundGif: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGif
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGif
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGif
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGif
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Doc == nil {
				m.Doc = &Document{}
			}
			if err := m.Doc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGif
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGif
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thumb == nil {
				m.Thumb = &Document{}
			}
			if err := m.Thumb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipGif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGif
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Url")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Doc")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Thumb")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedGifs) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGif
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedGifs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedGifs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGif
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGif
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docs = append(m.Docs, &MediaDocument{})
			if err := m.Docs[len(m.Docs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotModified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGif
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotModified = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipGif(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGif
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGif
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Hash")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NotModified")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGif(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGif
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGif
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGif
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGif
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGif
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGif
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGif        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGif          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGif = fmt.Errorf("proto: unexpected end of group")
)
