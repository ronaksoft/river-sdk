// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package queue

import (
	json "encoding/json"
	ext "git.ronaksoftware.com/ronak/riversdk/msg/ext"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5e1ce037DecodeGitRonaksoftwareComRonakRiversdkPkgCtrlQueue(in *jlexer.Lexer, out *request) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "timeout":
			out.Timeout = time.Duration(in.Int64())
		case "message_envelope":
			if in.IsNull() {
				in.Skip()
				out.MessageEnvelope = nil
			} else {
				if out.MessageEnvelope == nil {
					out.MessageEnvelope = new(ext.MessageEnvelope)
				}
				easyjson5e1ce037DecodeGitRonaksoftwareComRonakRiversdkMsgExt(in, out.MessageEnvelope)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5e1ce037EncodeGitRonaksoftwareComRonakRiversdkPkgCtrlQueue(out *jwriter.Writer, in request) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"timeout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Timeout))
	}
	{
		const prefix string = ",\"message_envelope\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MessageEnvelope == nil {
			out.RawString("null")
		} else {
			easyjson5e1ce037EncodeGitRonaksoftwareComRonakRiversdkMsgExt(out, *in.MessageEnvelope)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v request) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5e1ce037EncodeGitRonaksoftwareComRonakRiversdkPkgCtrlQueue(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v request) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5e1ce037EncodeGitRonaksoftwareComRonakRiversdkPkgCtrlQueue(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *request) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5e1ce037DecodeGitRonaksoftwareComRonakRiversdkPkgCtrlQueue(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *request) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5e1ce037DecodeGitRonaksoftwareComRonakRiversdkPkgCtrlQueue(l, v)
}
func easyjson5e1ce037DecodeGitRonaksoftwareComRonakRiversdkMsgExt(in *jlexer.Lexer, out *ext.MessageEnvelope) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Constructor":
			out.Constructor = int64(in.Int64())
		case "RequestID":
			out.RequestID = uint64(in.Uint64())
		case "Message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				out.Message = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5e1ce037EncodeGitRonaksoftwareComRonakRiversdkMsgExt(out *jwriter.Writer, in ext.MessageEnvelope) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Constructor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Constructor))
	}
	{
		const prefix string = ",\"RequestID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.RequestID))
	}
	{
		const prefix string = ",\"Message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Message)
	}
	out.RawByte('}')
}
