// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.system.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// SystemGetPublicKeys
// @Function
// @Return: SystemPublicKeys
type SystemGetPublicKeys struct {
}

func (m *SystemGetPublicKeys) Reset()         { *m = SystemGetPublicKeys{} }
func (m *SystemGetPublicKeys) String() string { return proto.CompactTextString(m) }
func (*SystemGetPublicKeys) ProtoMessage()    {}
func (*SystemGetPublicKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_system_285317084c4ce732, []int{0}
}
func (m *SystemGetPublicKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemGetPublicKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemGetPublicKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SystemGetPublicKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemGetPublicKeys.Merge(dst, src)
}
func (m *SystemGetPublicKeys) XXX_Size() int {
	return m.Size()
}
func (m *SystemGetPublicKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemGetPublicKeys.DiscardUnknown(m)
}

var xxx_messageInfo_SystemGetPublicKeys proto.InternalMessageInfo

// SystemGetDHGroups
// @Function
// @Return: SystemDHGroups
type SystemGetDHGroups struct {
}

func (m *SystemGetDHGroups) Reset()         { *m = SystemGetDHGroups{} }
func (m *SystemGetDHGroups) String() string { return proto.CompactTextString(m) }
func (*SystemGetDHGroups) ProtoMessage()    {}
func (*SystemGetDHGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_system_285317084c4ce732, []int{1}
}
func (m *SystemGetDHGroups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemGetDHGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemGetDHGroups.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SystemGetDHGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemGetDHGroups.Merge(dst, src)
}
func (m *SystemGetDHGroups) XXX_Size() int {
	return m.Size()
}
func (m *SystemGetDHGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemGetDHGroups.DiscardUnknown(m)
}

var xxx_messageInfo_SystemGetDHGroups proto.InternalMessageInfo

// SystemStartTrace
type SystemStartTrace struct {
	ClusterID int32 `protobuf:"varint,1,req,name=ClusterID" json:"ClusterID"`
}

func (m *SystemStartTrace) Reset()         { *m = SystemStartTrace{} }
func (m *SystemStartTrace) String() string { return proto.CompactTextString(m) }
func (*SystemStartTrace) ProtoMessage()    {}
func (*SystemStartTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_system_285317084c4ce732, []int{2}
}
func (m *SystemStartTrace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemStartTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemStartTrace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SystemStartTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemStartTrace.Merge(dst, src)
}
func (m *SystemStartTrace) XXX_Size() int {
	return m.Size()
}
func (m *SystemStartTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemStartTrace.DiscardUnknown(m)
}

var xxx_messageInfo_SystemStartTrace proto.InternalMessageInfo

func (m *SystemStartTrace) GetClusterID() int32 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

// SystemStopTrace
type SystemStopTrace struct {
}

func (m *SystemStopTrace) Reset()         { *m = SystemStopTrace{} }
func (m *SystemStopTrace) String() string { return proto.CompactTextString(m) }
func (*SystemStopTrace) ProtoMessage()    {}
func (*SystemStopTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_system_285317084c4ce732, []int{3}
}
func (m *SystemStopTrace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemStopTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemStopTrace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SystemStopTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemStopTrace.Merge(dst, src)
}
func (m *SystemStopTrace) XXX_Size() int {
	return m.Size()
}
func (m *SystemStopTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemStopTrace.DiscardUnknown(m)
}

var xxx_messageInfo_SystemStopTrace proto.InternalMessageInfo

// SystemClientLog
type SystemClientLog struct {
	DeviceID string `protobuf:"bytes,1,req,name=DeviceID" json:"DeviceID"`
	DeviceOS string `protobuf:"bytes,2,req,name=DeviceOS" json:"DeviceOS"`
	UserID   int64  `protobuf:"varint,3,req,name=UserID" json:"UserID"`
	Text     string `protobuf:"bytes,4,req,name=Text" json:"Text"`
}

func (m *SystemClientLog) Reset()         { *m = SystemClientLog{} }
func (m *SystemClientLog) String() string { return proto.CompactTextString(m) }
func (*SystemClientLog) ProtoMessage()    {}
func (*SystemClientLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_system_285317084c4ce732, []int{4}
}
func (m *SystemClientLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemClientLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemClientLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SystemClientLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemClientLog.Merge(dst, src)
}
func (m *SystemClientLog) XXX_Size() int {
	return m.Size()
}
func (m *SystemClientLog) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemClientLog.DiscardUnknown(m)
}

var xxx_messageInfo_SystemClientLog proto.InternalMessageInfo

func (m *SystemClientLog) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *SystemClientLog) GetDeviceOS() string {
	if m != nil {
		return m.DeviceOS
	}
	return ""
}

func (m *SystemClientLog) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *SystemClientLog) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// SystemPublicKeys
type SystemPublicKeys struct {
	RSAPublicKeys []*RSAPublicKey `protobuf:"bytes,1,rep,name=RSAPublicKeys" json:"RSAPublicKeys,omitempty"`
}

func (m *SystemPublicKeys) Reset()         { *m = SystemPublicKeys{} }
func (m *SystemPublicKeys) String() string { return proto.CompactTextString(m) }
func (*SystemPublicKeys) ProtoMessage()    {}
func (*SystemPublicKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_system_285317084c4ce732, []int{5}
}
func (m *SystemPublicKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemPublicKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemPublicKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SystemPublicKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemPublicKeys.Merge(dst, src)
}
func (m *SystemPublicKeys) XXX_Size() int {
	return m.Size()
}
func (m *SystemPublicKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemPublicKeys.DiscardUnknown(m)
}

var xxx_messageInfo_SystemPublicKeys proto.InternalMessageInfo

func (m *SystemPublicKeys) GetRSAPublicKeys() []*RSAPublicKey {
	if m != nil {
		return m.RSAPublicKeys
	}
	return nil
}

// SystemDHGroups
type SystemDHGroups struct {
	DHGroups []*DHGroup `protobuf:"bytes,1,rep,name=DHGroups" json:"DHGroups,omitempty"`
}

func (m *SystemDHGroups) Reset()         { *m = SystemDHGroups{} }
func (m *SystemDHGroups) String() string { return proto.CompactTextString(m) }
func (*SystemDHGroups) ProtoMessage()    {}
func (*SystemDHGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_system_285317084c4ce732, []int{6}
}
func (m *SystemDHGroups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemDHGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemDHGroups.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SystemDHGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemDHGroups.Merge(dst, src)
}
func (m *SystemDHGroups) XXX_Size() int {
	return m.Size()
}
func (m *SystemDHGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemDHGroups.DiscardUnknown(m)
}

var xxx_messageInfo_SystemDHGroups proto.InternalMessageInfo

func (m *SystemDHGroups) GetDHGroups() []*DHGroup {
	if m != nil {
		return m.DHGroups
	}
	return nil
}

func init() {
	proto.RegisterType((*SystemGetPublicKeys)(nil), "msg.SystemGetPublicKeys")
	proto.RegisterType((*SystemGetDHGroups)(nil), "msg.SystemGetDHGroups")
	proto.RegisterType((*SystemStartTrace)(nil), "msg.SystemStartTrace")
	proto.RegisterType((*SystemStopTrace)(nil), "msg.SystemStopTrace")
	proto.RegisterType((*SystemClientLog)(nil), "msg.SystemClientLog")
	proto.RegisterType((*SystemPublicKeys)(nil), "msg.SystemPublicKeys")
	proto.RegisterType((*SystemDHGroups)(nil), "msg.SystemDHGroups")
}
func (m *SystemGetPublicKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemGetPublicKeys) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SystemGetDHGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemGetDHGroups) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SystemStartTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemStartTrace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintApiSystem(dAtA, i, uint64(m.ClusterID))
	return i, nil
}

func (m *SystemStopTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemStopTrace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SystemClientLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemClientLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApiSystem(dAtA, i, uint64(len(m.DeviceID)))
	i += copy(dAtA[i:], m.DeviceID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintApiSystem(dAtA, i, uint64(len(m.DeviceOS)))
	i += copy(dAtA[i:], m.DeviceOS)
	dAtA[i] = 0x18
	i++
	i = encodeVarintApiSystem(dAtA, i, uint64(m.UserID))
	dAtA[i] = 0x22
	i++
	i = encodeVarintApiSystem(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	return i, nil
}

func (m *SystemPublicKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemPublicKeys) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RSAPublicKeys) > 0 {
		for _, msg := range m.RSAPublicKeys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApiSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SystemDHGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemDHGroups) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DHGroups) > 0 {
		for _, msg := range m.DHGroups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApiSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintApiSystem(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SystemGetPublicKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SystemGetDHGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SystemStartTrace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovApiSystem(uint64(m.ClusterID))
	return n
}

func (m *SystemStopTrace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SystemClientLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceID)
	n += 1 + l + sovApiSystem(uint64(l))
	l = len(m.DeviceOS)
	n += 1 + l + sovApiSystem(uint64(l))
	n += 1 + sovApiSystem(uint64(m.UserID))
	l = len(m.Text)
	n += 1 + l + sovApiSystem(uint64(l))
	return n
}

func (m *SystemPublicKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RSAPublicKeys) > 0 {
		for _, e := range m.RSAPublicKeys {
			l = e.Size()
			n += 1 + l + sovApiSystem(uint64(l))
		}
	}
	return n
}

func (m *SystemDHGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DHGroups) > 0 {
		for _, e := range m.DHGroups {
			l = e.Size()
			n += 1 + l + sovApiSystem(uint64(l))
		}
	}
	return n
}

func sovApiSystem(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApiSystem(x uint64) (n int) {
	return sovApiSystem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SystemGetPublicKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemGetPublicKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemGetPublicKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApiSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemGetDHGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemGetDHGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemGetDHGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApiSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemStartTrace) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemStartTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemStartTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			m.ClusterID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipApiSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ClusterID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemStopTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemStopTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemStopTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApiSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemClientLog) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemClientLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemClientLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceOS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceOS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipApiSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("DeviceID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("DeviceOS")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("UserID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Text")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemPublicKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemPublicKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemPublicKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RSAPublicKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RSAPublicKeys = append(m.RSAPublicKeys, &RSAPublicKey{})
			if err := m.RSAPublicKeys[len(m.RSAPublicKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemDHGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemDHGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemDHGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DHGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DHGroups = append(m.DHGroups, &DHGroup{})
			if err := m.DHGroups[len(m.DHGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApiSystem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApiSystem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApiSystem
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApiSystem
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApiSystem(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApiSystem = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApiSystem   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api.system.proto", fileDescriptor_api_system_285317084c4ce732) }

var fileDescriptor_api_system_285317084c4ce732 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xcd, 0x4a, 0xf3, 0x40,
	0x18, 0x85, 0x33, 0x4d, 0xbf, 0xd2, 0xbe, 0x9f, 0x3f, 0xed, 0x14, 0x61, 0x70, 0x31, 0x86, 0x59,
	0x65, 0x15, 0xc4, 0x85, 0x82, 0x3b, 0xdb, 0x42, 0x95, 0x0a, 0x95, 0xa4, 0x5e, 0x40, 0x0d, 0x43,
	0x09, 0x24, 0x4e, 0x98, 0x99, 0x88, 0xb9, 0x0a, 0xbd, 0xac, 0x2e, 0xbb, 0x74, 0x25, 0x92, 0xdc,
	0x88, 0x98, 0xdf, 0x8a, 0xbb, 0xf0, 0x9c, 0x73, 0x1e, 0x32, 0x2f, 0x0c, 0xd7, 0x71, 0xe0, 0xa8,
	0x54, 0x69, 0x1e, 0x39, 0xb1, 0x14, 0x5a, 0x60, 0x33, 0x52, 0x9b, 0xd3, 0xa1, 0x2f, 0x24, 0x77,
	0x74, 0x1a, 0x73, 0x55, 0x62, 0x76, 0x02, 0x63, 0xaf, 0xa8, 0xcd, 0xb9, 0x7e, 0x48, 0x9e, 0xc2,
	0xc0, 0x5f, 0xf0, 0x54, 0xb1, 0x31, 0x8c, 0x1a, 0x3c, 0xbb, 0x9d, 0x4b, 0x91, 0xc4, 0x8a, 0x5d,
	0xc2, 0xb0, 0x84, 0x9e, 0x5e, 0x4b, 0xbd, 0x92, 0x6b, 0x9f, 0x63, 0x06, 0x83, 0x69, 0x98, 0x28,
	0xcd, 0xe5, 0xdd, 0x8c, 0x20, 0xab, 0x63, 0xff, 0x9b, 0x74, 0xb7, 0x9f, 0x67, 0x86, 0xdb, 0x62,
	0x36, 0x82, 0xe3, 0x7a, 0x27, 0xe2, 0x62, 0xc6, 0xde, 0x50, 0xcd, 0xa6, 0x61, 0xc0, 0x9f, 0xf5,
	0xbd, 0xd8, 0x60, 0x0b, 0xfa, 0x33, 0xfe, 0x12, 0xf8, 0xbc, 0x32, 0x0d, 0x2a, 0x53, 0x43, 0xdb,
	0xc6, 0xd2, 0x23, 0x9d, 0xbf, 0x8d, 0xa5, 0x87, 0x29, 0xf4, 0x1e, 0x55, 0xf1, 0x2f, 0xa6, 0xd5,
	0xb1, 0xcd, 0x49, 0xef, 0x27, 0x3f, 0x47, 0x6e, 0x45, 0x31, 0x81, 0xee, 0x8a, 0xbf, 0x6a, 0xd2,
	0xdd, 0x5b, 0x17, 0x84, 0x2d, 0xea, 0xc7, 0xb5, 0x57, 0xc0, 0x57, 0x70, 0xe8, 0x7a, 0x37, 0x2d,
	0x20, 0xc8, 0x32, 0xed, 0xff, 0x17, 0x23, 0x27, 0x52, 0x1b, 0x67, 0x3f, 0x71, 0x7f, 0xf7, 0xd8,
	0x35, 0x1c, 0x95, 0xb2, 0xfa, 0x76, 0xd8, 0x86, 0x7e, 0xfd, 0x5d, 0x59, 0x0e, 0x0a, 0x4b, 0x05,
	0xdd, 0x26, 0x9d, 0x90, 0x6d, 0x46, 0xd1, 0x2e, 0xa3, 0xe8, 0x2b, 0xa3, 0xe8, 0x3d, 0xa7, 0xc6,
	0x2e, 0xa7, 0xc6, 0x47, 0x4e, 0x8d, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0x5d, 0x22, 0x47,
	0xd5, 0x01, 0x00, 0x00,
}
