// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.contacts.proto

package msg

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ContactsImport
// @Function
// @Return: ContactsImported
type ContactsImport struct {
	Contacts []*PhoneContact `protobuf:"bytes,1,rep,name=Contacts" json:"Contacts,omitempty"`
	Replace  bool            `protobuf:"varint,2,req,name=Replace" json:"Replace"`
}

func (m *ContactsImport) Reset()         { *m = ContactsImport{} }
func (m *ContactsImport) String() string { return proto.CompactTextString(m) }
func (*ContactsImport) ProtoMessage()    {}
func (*ContactsImport) Descriptor() ([]byte, []int) {
	return fileDescriptor_33dda34ea04833c6, []int{0}
}
func (m *ContactsImport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsImport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsImport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsImport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsImport.Merge(m, src)
}
func (m *ContactsImport) XXX_Size() int {
	return m.Size()
}
func (m *ContactsImport) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsImport.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsImport proto.InternalMessageInfo

func (m *ContactsImport) GetContacts() []*PhoneContact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *ContactsImport) GetReplace() bool {
	if m != nil {
		return m.Replace
	}
	return false
}

// ContactsGet
// @Function
// @Return: ContactsMany
type ContactsGet struct {
	MD5Hash string `protobuf:"bytes,1,req,name=MD5Hash" json:"MD5Hash"`
}

func (m *ContactsGet) Reset()         { *m = ContactsGet{} }
func (m *ContactsGet) String() string { return proto.CompactTextString(m) }
func (*ContactsGet) ProtoMessage()    {}
func (*ContactsGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_33dda34ea04833c6, []int{1}
}
func (m *ContactsGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsGet.Merge(m, src)
}
func (m *ContactsGet) XXX_Size() int {
	return m.Size()
}
func (m *ContactsGet) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsGet.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsGet proto.InternalMessageInfo

func (m *ContactsGet) GetMD5Hash() string {
	if m != nil {
		return m.MD5Hash
	}
	return ""
}

// ContactsDelete
// @Function
// @Return: Bool
type ContactsDelete struct {
	UserIDs []int64 `protobuf:"varint,1,rep,name=UserIDs" json:"UserIDs,omitempty"`
}

func (m *ContactsDelete) Reset()         { *m = ContactsDelete{} }
func (m *ContactsDelete) String() string { return proto.CompactTextString(m) }
func (*ContactsDelete) ProtoMessage()    {}
func (*ContactsDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_33dda34ea04833c6, []int{2}
}
func (m *ContactsDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsDelete.Merge(m, src)
}
func (m *ContactsDelete) XXX_Size() int {
	return m.Size()
}
func (m *ContactsDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsDelete.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsDelete proto.InternalMessageInfo

func (m *ContactsDelete) GetUserIDs() []int64 {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

// ContactsImported
type ContactsImported struct {
	Users []*ContactUser `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
}

func (m *ContactsImported) Reset()         { *m = ContactsImported{} }
func (m *ContactsImported) String() string { return proto.CompactTextString(m) }
func (*ContactsImported) ProtoMessage()    {}
func (*ContactsImported) Descriptor() ([]byte, []int) {
	return fileDescriptor_33dda34ea04833c6, []int{3}
}
func (m *ContactsImported) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsImported) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsImported.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsImported) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsImported.Merge(m, src)
}
func (m *ContactsImported) XXX_Size() int {
	return m.Size()
}
func (m *ContactsImported) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsImported.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsImported proto.InternalMessageInfo

func (m *ContactsImported) GetUsers() []*ContactUser {
	if m != nil {
		return m.Users
	}
	return nil
}

// ContactsMany
type ContactsMany struct {
	Contacts []*PhoneContact `protobuf:"bytes,1,rep,name=Contacts" json:"Contacts,omitempty"`
	Users    []*ContactUser  `protobuf:"bytes,2,rep,name=Users" json:"Users,omitempty"`
}

func (m *ContactsMany) Reset()         { *m = ContactsMany{} }
func (m *ContactsMany) String() string { return proto.CompactTextString(m) }
func (*ContactsMany) ProtoMessage()    {}
func (*ContactsMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_33dda34ea04833c6, []int{4}
}
func (m *ContactsMany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactsMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactsMany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactsMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactsMany.Merge(m, src)
}
func (m *ContactsMany) XXX_Size() int {
	return m.Size()
}
func (m *ContactsMany) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactsMany.DiscardUnknown(m)
}

var xxx_messageInfo_ContactsMany proto.InternalMessageInfo

func (m *ContactsMany) GetContacts() []*PhoneContact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *ContactsMany) GetUsers() []*ContactUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*ContactsImport)(nil), "msg.ContactsImport")
	proto.RegisterType((*ContactsGet)(nil), "msg.ContactsGet")
	proto.RegisterType((*ContactsDelete)(nil), "msg.ContactsDelete")
	proto.RegisterType((*ContactsImported)(nil), "msg.ContactsImported")
	proto.RegisterType((*ContactsMany)(nil), "msg.ContactsMany")
}

func init() { proto.RegisterFile("api.contacts.proto", fileDescriptor_33dda34ea04833c6) }

var fileDescriptor_33dda34ea04833c6 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x2c, 0xc8, 0xd4,
	0x4b, 0xce, 0xcf, 0x2b, 0x49, 0x4c, 0x2e, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0xce, 0x2d, 0x4e, 0x97, 0x12, 0x48, 0xce, 0x2f, 0x4a, 0xd5, 0x2b, 0xa9, 0x2c, 0x48, 0x85, 0x0a,
	0x2b, 0xc5, 0x73, 0xf1, 0x39, 0x43, 0x15, 0x7a, 0xe6, 0x16, 0xe4, 0x17, 0x95, 0x08, 0xe9, 0x72,
	0x71, 0xc0, 0x44, 0x24, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0x04, 0xf5, 0x72, 0x8b, 0xd3, 0xf5,
	0x02, 0x32, 0xf2, 0xf3, 0x52, 0xa1, 0x32, 0x41, 0x70, 0x25, 0x42, 0x72, 0x5c, 0xec, 0x41, 0xa9,
	0x05, 0x39, 0x89, 0xc9, 0xa9, 0x12, 0x4c, 0x0a, 0x4c, 0x1a, 0x1c, 0x4e, 0x2c, 0x27, 0xee, 0xc9,
	0x33, 0x04, 0xc1, 0x04, 0x95, 0x74, 0xb9, 0xb8, 0x61, 0x6a, 0xdd, 0x53, 0x4b, 0x40, 0xca, 0x7d,
	0x5d, 0x4c, 0x3d, 0x12, 0x8b, 0x33, 0x24, 0x18, 0x15, 0x98, 0x34, 0x38, 0x61, 0xca, 0xa1, 0x82,
	0x4a, 0x7a, 0x08, 0xf7, 0xb8, 0xa4, 0xe6, 0xa4, 0x96, 0xa4, 0x0a, 0xc9, 0x70, 0xb1, 0x87, 0x16,
	0xa7, 0x16, 0x79, 0xba, 0x40, 0x9c, 0xc3, 0xec, 0xc4, 0x64, 0xc0, 0x18, 0x04, 0x13, 0x52, 0xb2,
	0xe2, 0x12, 0x40, 0x75, 0x7f, 0x6a, 0x8a, 0x90, 0x1a, 0x17, 0x2b, 0x48, 0x1a, 0xe6, 0x7c, 0x01,
	0xb0, 0xf3, 0xa1, 0xaa, 0x40, 0x12, 0x41, 0x10, 0x69, 0xa5, 0x54, 0x2e, 0x1e, 0x98, 0x5e, 0xdf,
	0xc4, 0xbc, 0x4a, 0x52, 0x7d, 0x0e, 0xb7, 0x86, 0x09, 0xaf, 0x35, 0x4e, 0x12, 0x27, 0x1e, 0xc9,
	0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e,
	0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x00, 0x08, 0x00, 0x00, 0xff, 0xff, 0x35, 0x9f, 0x37, 0xda,
	0xa8, 0x01, 0x00, 0x00,
}

func (m *ContactsImport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsImport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, msg := range m.Contacts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApiContacts(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	if m.Replace {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *ContactsGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsGet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApiContacts(dAtA, i, uint64(len(m.MD5Hash)))
	i += copy(dAtA[i:], m.MD5Hash)
	return i, nil
}

func (m *ContactsDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsDelete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		for _, num := range m.UserIDs {
			dAtA[i] = 0x8
			i++
			i = encodeVarintApiContacts(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *ContactsImported) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsImported) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApiContacts(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ContactsMany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactsMany) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, msg := range m.Contacts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApiContacts(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApiContacts(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintApiContacts(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ContactsImport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovApiContacts(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *ContactsGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MD5Hash)
	n += 1 + l + sovApiContacts(uint64(l))
	return n
}

func (m *ContactsDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		for _, e := range m.UserIDs {
			n += 1 + sovApiContacts(uint64(e))
		}
	}
	return n
}

func (m *ContactsImported) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovApiContacts(uint64(l))
		}
	}
	return n
}

func (m *ContactsMany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovApiContacts(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovApiContacts(uint64(l))
		}
	}
	return n
}

func sovApiContacts(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApiContacts(x uint64) (n int) {
	return sovApiContacts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContactsImport) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsImport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsImport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &PhoneContact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Replace = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Replace")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsGet) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MD5Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiContacts
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MD5Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MD5Hash")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApiContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIDs = append(m.UserIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApiContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApiContacts
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIDs) == 0 {
					m.UserIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApiContacts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIDs = append(m.UserIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsImported) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsImported: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsImported: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &ContactUser{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactsMany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactsMany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactsMany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &PhoneContact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiContacts
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &ContactUser{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApiContacts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApiContacts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiContacts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiContacts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApiContacts
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApiContacts
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApiContacts(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApiContacts = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApiContacts   = fmt.Errorf("proto: integer overflow")
)
