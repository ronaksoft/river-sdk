// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.core.account.privacies.proto

package msg

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AccountPrivacyAllowAll struct {
}

func (m *AccountPrivacyAllowAll) Reset()         { *m = AccountPrivacyAllowAll{} }
func (m *AccountPrivacyAllowAll) String() string { return proto.CompactTextString(m) }
func (*AccountPrivacyAllowAll) ProtoMessage()    {}
func (*AccountPrivacyAllowAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cc709ffb31d043d, []int{0}
}
func (m *AccountPrivacyAllowAll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountPrivacyAllowAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountPrivacyAllowAll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountPrivacyAllowAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPrivacyAllowAll.Merge(m, src)
}
func (m *AccountPrivacyAllowAll) XXX_Size() int {
	return m.Size()
}
func (m *AccountPrivacyAllowAll) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPrivacyAllowAll.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPrivacyAllowAll proto.InternalMessageInfo

type AccountPrivacyAllowContacts struct {
}

func (m *AccountPrivacyAllowContacts) Reset()         { *m = AccountPrivacyAllowContacts{} }
func (m *AccountPrivacyAllowContacts) String() string { return proto.CompactTextString(m) }
func (*AccountPrivacyAllowContacts) ProtoMessage()    {}
func (*AccountPrivacyAllowContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cc709ffb31d043d, []int{1}
}
func (m *AccountPrivacyAllowContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountPrivacyAllowContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountPrivacyAllowContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountPrivacyAllowContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPrivacyAllowContacts.Merge(m, src)
}
func (m *AccountPrivacyAllowContacts) XXX_Size() int {
	return m.Size()
}
func (m *AccountPrivacyAllowContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPrivacyAllowContacts.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPrivacyAllowContacts proto.InternalMessageInfo

type AccountPrivacyAllowUsers struct {
	UserIDs []int64 `protobuf:"varint,1,rep,name=UserIDs" json:"UserIDs,omitempty"`
}

func (m *AccountPrivacyAllowUsers) Reset()         { *m = AccountPrivacyAllowUsers{} }
func (m *AccountPrivacyAllowUsers) String() string { return proto.CompactTextString(m) }
func (*AccountPrivacyAllowUsers) ProtoMessage()    {}
func (*AccountPrivacyAllowUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cc709ffb31d043d, []int{2}
}
func (m *AccountPrivacyAllowUsers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountPrivacyAllowUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountPrivacyAllowUsers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountPrivacyAllowUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPrivacyAllowUsers.Merge(m, src)
}
func (m *AccountPrivacyAllowUsers) XXX_Size() int {
	return m.Size()
}
func (m *AccountPrivacyAllowUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPrivacyAllowUsers.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPrivacyAllowUsers proto.InternalMessageInfo

func (m *AccountPrivacyAllowUsers) GetUserIDs() []int64 {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

type AccountPrivacyDisallowAll struct {
}

func (m *AccountPrivacyDisallowAll) Reset()         { *m = AccountPrivacyDisallowAll{} }
func (m *AccountPrivacyDisallowAll) String() string { return proto.CompactTextString(m) }
func (*AccountPrivacyDisallowAll) ProtoMessage()    {}
func (*AccountPrivacyDisallowAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cc709ffb31d043d, []int{3}
}
func (m *AccountPrivacyDisallowAll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountPrivacyDisallowAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountPrivacyDisallowAll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountPrivacyDisallowAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPrivacyDisallowAll.Merge(m, src)
}
func (m *AccountPrivacyDisallowAll) XXX_Size() int {
	return m.Size()
}
func (m *AccountPrivacyDisallowAll) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPrivacyDisallowAll.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPrivacyDisallowAll proto.InternalMessageInfo

type AccountPrivacyDisallowContacts struct {
}

func (m *AccountPrivacyDisallowContacts) Reset()         { *m = AccountPrivacyDisallowContacts{} }
func (m *AccountPrivacyDisallowContacts) String() string { return proto.CompactTextString(m) }
func (*AccountPrivacyDisallowContacts) ProtoMessage()    {}
func (*AccountPrivacyDisallowContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cc709ffb31d043d, []int{4}
}
func (m *AccountPrivacyDisallowContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountPrivacyDisallowContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountPrivacyDisallowContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountPrivacyDisallowContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPrivacyDisallowContacts.Merge(m, src)
}
func (m *AccountPrivacyDisallowContacts) XXX_Size() int {
	return m.Size()
}
func (m *AccountPrivacyDisallowContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPrivacyDisallowContacts.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPrivacyDisallowContacts proto.InternalMessageInfo

type AccountPrivacyDisallowUsers struct {
	UserIDs []int64 `protobuf:"varint,1,rep,name=UserIDs" json:"UserIDs,omitempty"`
}

func (m *AccountPrivacyDisallowUsers) Reset()         { *m = AccountPrivacyDisallowUsers{} }
func (m *AccountPrivacyDisallowUsers) String() string { return proto.CompactTextString(m) }
func (*AccountPrivacyDisallowUsers) ProtoMessage()    {}
func (*AccountPrivacyDisallowUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cc709ffb31d043d, []int{5}
}
func (m *AccountPrivacyDisallowUsers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountPrivacyDisallowUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountPrivacyDisallowUsers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountPrivacyDisallowUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPrivacyDisallowUsers.Merge(m, src)
}
func (m *AccountPrivacyDisallowUsers) XXX_Size() int {
	return m.Size()
}
func (m *AccountPrivacyDisallowUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPrivacyDisallowUsers.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPrivacyDisallowUsers proto.InternalMessageInfo

func (m *AccountPrivacyDisallowUsers) GetUserIDs() []int64 {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*AccountPrivacyAllowAll)(nil), "msg.AccountPrivacyAllowAll")
	proto.RegisterType((*AccountPrivacyAllowContacts)(nil), "msg.AccountPrivacyAllowContacts")
	proto.RegisterType((*AccountPrivacyAllowUsers)(nil), "msg.AccountPrivacyAllowUsers")
	proto.RegisterType((*AccountPrivacyDisallowAll)(nil), "msg.AccountPrivacyDisallowAll")
	proto.RegisterType((*AccountPrivacyDisallowContacts)(nil), "msg.AccountPrivacyDisallowContacts")
	proto.RegisterType((*AccountPrivacyDisallowUsers)(nil), "msg.AccountPrivacyDisallowUsers")
}

func init() { proto.RegisterFile("chat.core.account.privacies.proto", fileDescriptor_9cc709ffb31d043d) }

var fileDescriptor_9cc709ffb31d043d = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0xce, 0x48, 0x2c,
	0xd1, 0x4b, 0xce, 0x2f, 0x4a, 0xd5, 0x4b, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0xd1, 0x2b, 0x28,
	0xca, 0x2c, 0x4b, 0x4c, 0xce, 0x4c, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce,
	0x2d, 0x4e, 0x57, 0x92, 0xe0, 0x12, 0x73, 0x84, 0xc8, 0x07, 0x80, 0xa5, 0x2b, 0x1d, 0x73, 0x72,
	0xf2, 0xcb, 0x1d, 0x73, 0x72, 0x94, 0x64, 0xb9, 0xa4, 0xb1, 0xc8, 0x38, 0xe7, 0xe7, 0x95, 0x24,
	0x26, 0x97, 0x14, 0x2b, 0x59, 0x70, 0x49, 0x60, 0x91, 0x0e, 0x2d, 0x4e, 0x2d, 0x2a, 0x16, 0x92,
	0xe1, 0x62, 0x07, 0x31, 0x3c, 0x5d, 0x8a, 0x25, 0x18, 0x15, 0x98, 0x35, 0x98, 0x9d, 0x98, 0x0c,
	0x18, 0x83, 0x60, 0x42, 0x4a, 0xd2, 0x5c, 0x92, 0xa8, 0x3a, 0x5d, 0x32, 0x8b, 0x13, 0x61, 0xb6,
	0x2a, 0x70, 0xc9, 0x61, 0x97, 0x84, 0x5b, 0x6c, 0x8d, 0xee, 0x2e, 0x98, 0x0a, 0x22, 0xec, 0x76,
	0x92, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c,
	0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x06, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x15, 0x8a, 0x39, 0x47, 0x31, 0x01, 0x00, 0x00,
}

func (m *AccountPrivacyAllowAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountPrivacyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AccountPrivacyAllowContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountPrivacyAllowContacts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AccountPrivacyAllowUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountPrivacyAllowUsers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		for _, num := range m.UserIDs {
			dAtA[i] = 0x8
			i++
			i = encodeVarintChatCoreAccountPrivacies(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *AccountPrivacyDisallowAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountPrivacyDisallowAll) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AccountPrivacyDisallowContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountPrivacyDisallowContacts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AccountPrivacyDisallowUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountPrivacyDisallowUsers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		for _, num := range m.UserIDs {
			dAtA[i] = 0x8
			i++
			i = encodeVarintChatCoreAccountPrivacies(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func encodeVarintChatCoreAccountPrivacies(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AccountPrivacyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AccountPrivacyAllowContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AccountPrivacyAllowUsers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		for _, e := range m.UserIDs {
			n += 1 + sovChatCoreAccountPrivacies(uint64(e))
		}
	}
	return n
}

func (m *AccountPrivacyDisallowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AccountPrivacyDisallowContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AccountPrivacyDisallowUsers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIDs) > 0 {
		for _, e := range m.UserIDs {
			n += 1 + sovChatCoreAccountPrivacies(uint64(e))
		}
	}
	return n
}

func sovChatCoreAccountPrivacies(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChatCoreAccountPrivacies(x uint64) (n int) {
	return sovChatCoreAccountPrivacies(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountPrivacyAllowAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCoreAccountPrivacies
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountPrivacyAllowAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountPrivacyAllowAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChatCoreAccountPrivacies(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCoreAccountPrivacies
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountPrivacyAllowContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCoreAccountPrivacies
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountPrivacyAllowContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountPrivacyAllowContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChatCoreAccountPrivacies(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCoreAccountPrivacies
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountPrivacyAllowUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCoreAccountPrivacies
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountPrivacyAllowUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountPrivacyAllowUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatCoreAccountPrivacies
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIDs = append(m.UserIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatCoreAccountPrivacies
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatCoreAccountPrivacies
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIDs) == 0 {
					m.UserIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatCoreAccountPrivacies
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIDs = append(m.UserIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatCoreAccountPrivacies(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCoreAccountPrivacies
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountPrivacyDisallowAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCoreAccountPrivacies
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountPrivacyDisallowAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountPrivacyDisallowAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChatCoreAccountPrivacies(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCoreAccountPrivacies
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountPrivacyDisallowContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCoreAccountPrivacies
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountPrivacyDisallowContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountPrivacyDisallowContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChatCoreAccountPrivacies(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCoreAccountPrivacies
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountPrivacyDisallowUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatCoreAccountPrivacies
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountPrivacyDisallowUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountPrivacyDisallowUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatCoreAccountPrivacies
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIDs = append(m.UserIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatCoreAccountPrivacies
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatCoreAccountPrivacies
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIDs) == 0 {
					m.UserIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatCoreAccountPrivacies
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIDs = append(m.UserIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatCoreAccountPrivacies(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatCoreAccountPrivacies
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatCoreAccountPrivacies(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatCoreAccountPrivacies
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatCoreAccountPrivacies
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatCoreAccountPrivacies
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChatCoreAccountPrivacies
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChatCoreAccountPrivacies
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChatCoreAccountPrivacies(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChatCoreAccountPrivacies = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatCoreAccountPrivacies   = fmt.Errorf("proto: integer overflow")
)
