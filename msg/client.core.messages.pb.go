// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client.core.messages.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ClientPendingMessage
type ClientPendingMessage struct {
	ID         int64  `protobuf:"varint,1,req,name=ID" json:"ID"`
	RequestID  int64  `protobuf:"varint,2,req,name=RequestID" json:"RequestID"`
	PeerID     int64  `protobuf:"varint,3,req,name=PeerID" json:"PeerID"`
	PeerType   int32  `protobuf:"varint,4,req,name=PeerType" json:"PeerType"`
	AccessHash uint64 `protobuf:"fixed64,5,req,name=AccessHash" json:"AccessHash"`
	CreatedOn  int64  `protobuf:"varint,6,req,name=CreatedOn" json:"CreatedOn"`
	ReplyTo    int64  `protobuf:"varint,7,req,name=ReplyTo" json:"ReplyTo"`
	Body       string `protobuf:"bytes,8,req,name=Body" json:"Body"`
	SenderID   int64  `protobuf:"varint,9,req,name=SenderID" json:"SenderID"`
}

func (m *ClientPendingMessage) Reset()         { *m = ClientPendingMessage{} }
func (m *ClientPendingMessage) String() string { return proto.CompactTextString(m) }
func (*ClientPendingMessage) ProtoMessage()    {}
func (*ClientPendingMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_core_messages_d7440cd18be65d75, []int{0}
}
func (m *ClientPendingMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientPendingMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientPendingMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientPendingMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientPendingMessage.Merge(dst, src)
}
func (m *ClientPendingMessage) XXX_Size() int {
	return m.Size()
}
func (m *ClientPendingMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientPendingMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientPendingMessage proto.InternalMessageInfo

func (m *ClientPendingMessage) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ClientPendingMessage) GetRequestID() int64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *ClientPendingMessage) GetPeerID() int64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *ClientPendingMessage) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *ClientPendingMessage) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *ClientPendingMessage) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *ClientPendingMessage) GetReplyTo() int64 {
	if m != nil {
		return m.ReplyTo
	}
	return 0
}

func (m *ClientPendingMessage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *ClientPendingMessage) GetSenderID() int64 {
	if m != nil {
		return m.SenderID
	}
	return 0
}

func init() {
	proto.RegisterType((*ClientPendingMessage)(nil), "msg.ClientPendingMessage")
}
func (m *ClientPendingMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientPendingMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.ID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.RequestID))
	dAtA[i] = 0x18
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.PeerID))
	dAtA[i] = 0x20
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.PeerType))
	dAtA[i] = 0x29
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AccessHash))
	i += 8
	dAtA[i] = 0x30
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.CreatedOn))
	dAtA[i] = 0x38
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.ReplyTo))
	dAtA[i] = 0x42
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(len(m.Body)))
	i += copy(dAtA[i:], m.Body)
	dAtA[i] = 0x48
	i++
	i = encodeVarintClientCoreMessages(dAtA, i, uint64(m.SenderID))
	return i, nil
}

func encodeVarintClientCoreMessages(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClientPendingMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovClientCoreMessages(uint64(m.ID))
	n += 1 + sovClientCoreMessages(uint64(m.RequestID))
	n += 1 + sovClientCoreMessages(uint64(m.PeerID))
	n += 1 + sovClientCoreMessages(uint64(m.PeerType))
	n += 9
	n += 1 + sovClientCoreMessages(uint64(m.CreatedOn))
	n += 1 + sovClientCoreMessages(uint64(m.ReplyTo))
	l = len(m.Body)
	n += 1 + l + sovClientCoreMessages(uint64(l))
	n += 1 + sovClientCoreMessages(uint64(m.SenderID))
	return n
}

func sovClientCoreMessages(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClientCoreMessages(x uint64) (n int) {
	return sovClientCoreMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientPendingMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientPendingMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientPendingMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessHash = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			m.CreatedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedOn |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			m.ReplyTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			m.SenderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000100)
		default:
			iNdEx = preIndex
			skippy, err := skipClientCoreMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientCoreMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("RequestID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("PeerType")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("AccessHash")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("CreatedOn")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ReplyTo")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Body")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SenderID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientCoreMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientCoreMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientCoreMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClientCoreMessages
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClientCoreMessages
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClientCoreMessages(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClientCoreMessages = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientCoreMessages   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("client.core.messages.proto", fileDescriptor_client_core_messages_d7440cd18be65d75)
}

var fileDescriptor_client_core_messages_d7440cd18be65d75 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcf, 0x41, 0x4e, 0x83, 0x40,
	0x14, 0x06, 0x60, 0x18, 0x28, 0x2d, 0x6f, 0x39, 0xe9, 0xe2, 0xc5, 0x98, 0x91, 0x34, 0x2e, 0x58,
	0x71, 0x07, 0x29, 0x0b, 0x59, 0x18, 0x1b, 0xec, 0x05, 0x08, 0xbc, 0x60, 0x93, 0x96, 0x41, 0x06,
	0x17, 0xdc, 0xc2, 0xd3, 0x78, 0x86, 0x2e, 0xbb, 0x74, 0x65, 0x0c, 0x5c, 0xc4, 0x80, 0x48, 0x67,
	0x37, 0xf9, 0xfe, 0x7f, 0x92, 0xff, 0xc1, 0x4d, 0x76, 0x3c, 0x50, 0xd9, 0x04, 0x99, 0xac, 0x29,
	0x38, 0x91, 0x52, 0x69, 0x41, 0x2a, 0xa8, 0x6a, 0xd9, 0x48, 0x6e, 0x9d, 0x54, 0xb1, 0xf9, 0x64,
	0xb0, 0xde, 0x8e, 0x9d, 0x1d, 0x95, 0xf9, 0xa1, 0x2c, 0x9e, 0xfe, 0x4a, 0x7c, 0x0d, 0x2c, 0x8e,
	0xd0, 0xf4, 0x98, 0x6f, 0x85, 0xf6, 0xf9, 0xfb, 0xce, 0x48, 0x58, 0x1c, 0xf1, 0x0d, 0xb8, 0x09,
	0xbd, 0xbd, 0x93, 0x6a, 0xe2, 0x08, 0x99, 0x16, 0x5e, 0x99, 0xdf, 0x82, 0xb3, 0x23, 0xaa, 0xe3,
	0x08, 0x2d, 0xad, 0x30, 0x19, 0xf7, 0x60, 0x35, 0xbc, 0xf6, 0x6d, 0x45, 0x68, 0x7b, 0xcc, 0x5f,
	0x4c, 0xf9, 0xac, 0xfc, 0x1e, 0xe0, 0x21, 0xcb, 0x48, 0xa9, 0xc7, 0x54, 0xbd, 0xe2, 0xc2, 0x63,
	0xbe, 0x33, 0x75, 0x34, 0x1f, 0x96, 0x6c, 0x6b, 0x4a, 0x1b, 0xca, 0x9f, 0x4b, 0x74, 0xf4, 0x25,
	0x33, 0x73, 0x01, 0xcb, 0x84, 0xaa, 0x63, 0xbb, 0x97, 0xb8, 0xd4, 0x1a, 0xff, 0xc8, 0x11, 0xec,
	0x50, 0xe6, 0x2d, 0xae, 0x3c, 0xe6, 0xbb, 0x53, 0x38, 0xca, 0xb0, 0xf2, 0x85, 0xca, 0x7c, 0xbc,
	0xc2, 0xd5, 0xbe, 0xce, 0x1a, 0xe2, 0xb9, 0x13, 0xe6, 0xa5, 0x13, 0xe6, 0x4f, 0x27, 0xcc, 0x8f,
	0x5e, 0x18, 0x97, 0x5e, 0x18, 0x5f, 0xbd, 0x30, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x7f,
	0x3c, 0x94, 0x74, 0x01, 0x00, 0x00,
}
